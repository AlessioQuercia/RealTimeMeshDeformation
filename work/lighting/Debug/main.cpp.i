# 1 "main.cpp"
# 1 "C:\\Users\\Alessio\\Documents\\GitHub\\Progetto_RTGP\\work\\lighting//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "main.cpp"
# 1 "../../include/glad/glad.h" 1
# 34 "../../include/glad/glad.h"
# 1 "c:\\mingw\\include\\windows.h" 1 3
# 33 "c:\\mingw\\include\\windows.h" 3
       
# 34 "c:\\mingw\\include\\windows.h" 3







# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stdarg.h" 1 3 4
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stdarg.h" 3 4

# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 99 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 42 "c:\\mingw\\include\\windows.h" 2 3
# 1 "c:\\mingw\\include\\windef.h" 1 3
# 34 "c:\\mingw\\include\\windef.h" 3
       
# 35 "c:\\mingw\\include\\windef.h" 3







# 1 "c:\\mingw\\include\\w32api.h" 1 3
# 35 "c:\\mingw\\include\\w32api.h" 3
       
# 36 "c:\\mingw\\include\\w32api.h" 3
# 59 "c:\\mingw\\include\\w32api.h" 3
# 1 "c:\\mingw\\include\\sdkddkver.h" 1 3
# 35 "c:\\mingw\\include\\sdkddkver.h" 3
       
# 36 "c:\\mingw\\include\\sdkddkver.h" 3
# 60 "c:\\mingw\\include\\w32api.h" 2 3
# 43 "c:\\mingw\\include\\windef.h" 2 3

extern "C" {
# 245 "c:\\mingw\\include\\windef.h" 3
typedef unsigned long DWORD;
typedef int WINBOOL,*PWINBOOL,*LPWINBOOL;



typedef WINBOOL BOOL;



typedef unsigned char BYTE;

typedef BOOL *PBOOL,*LPBOOL;
typedef unsigned short WORD;
typedef float FLOAT;
typedef FLOAT *PFLOAT;
typedef BYTE *PBYTE,*LPBYTE;
typedef int *PINT,*LPINT;
typedef WORD *PWORD,*LPWORD;
typedef long *LPLONG;
typedef DWORD *PDWORD,*LPDWORD;
typedef const void *PCVOID,*LPCVOID;
typedef int INT;
typedef unsigned int UINT,*PUINT,*LPUINT;

# 1 "c:\\mingw\\include\\winnt.h" 1 3
# 33 "c:\\mingw\\include\\winnt.h" 3
       
# 34 "c:\\mingw\\include\\winnt.h" 3




# 1 "c:\\mingw\\include\\windef.h" 1 3
# 39 "c:\\mingw\\include\\winnt.h" 2 3







# 1 "c:\\mingw\\include\\winerror.h" 1 3
# 34 "c:\\mingw\\include\\winerror.h" 3
       
# 35 "c:\\mingw\\include\\winerror.h" 3
# 47 "c:\\mingw\\include\\winnt.h" 2 3


# 1 "c:\\mingw\\include\\string.h" 1 3
# 34 "c:\\mingw\\include\\string.h" 3
       
# 35 "c:\\mingw\\include\\string.h" 3




# 1 "c:\\mingw\\include\\_mingw.h" 1 3
# 55 "c:\\mingw\\include\\_mingw.h" 3
       
# 56 "c:\\mingw\\include\\_mingw.h" 3
# 66 "c:\\mingw\\include\\_mingw.h" 3
# 1 "c:\\mingw\\include\\msvcrtver.h" 1 3
# 35 "c:\\mingw\\include\\msvcrtver.h" 3
       
# 36 "c:\\mingw\\include\\msvcrtver.h" 3
# 67 "c:\\mingw\\include\\_mingw.h" 2 3
# 174 "c:\\mingw\\include\\_mingw.h" 3
# 1 "c:\\mingw\\include\\features.h" 1 3
# 39 "c:\\mingw\\include\\features.h" 3
       
# 40 "c:\\mingw\\include\\features.h" 3
# 175 "c:\\mingw\\include\\_mingw.h" 2 3
# 40 "c:\\mingw\\include\\string.h" 2 3
# 53 "c:\\mingw\\include\\string.h" 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 1 3 4
# 216 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 3 4
typedef unsigned int size_t;
# 54 "c:\\mingw\\include\\string.h" 2 3
# 65 "c:\\mingw\\include\\string.h" 3
extern "C" {




 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void *memchr (const void *, int, size_t) __attribute__((__pure__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int memcmp (const void *, const void *, size_t) __attribute__((__pure__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void *memcpy (void *, const void *, size_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void *memmove (void *, const void *, size_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void *memset (void *, int, size_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char *strcat (char *, const char *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char *strchr (const char *, int) __attribute__((__pure__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int strcmp (const char *, const char *) __attribute__((__pure__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int strcoll (const char *, const char *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char *strcpy (char *, const char *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) size_t strcspn (const char *, const char *) __attribute__((__pure__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char *strerror (int);

 __attribute__((__cdecl__)) __attribute__((__nothrow__)) size_t strlen (const char *) __attribute__((__pure__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char *strncat (char *, const char *, size_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int strncmp (const char *, const char *, size_t) __attribute__((__pure__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char *strncpy (char *, const char *, size_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char *strpbrk (const char *, const char *) __attribute__((__pure__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char *strrchr (const char *, int) __attribute__((__pure__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) size_t strspn (const char *, const char *) __attribute__((__pure__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char *strstr (const char *, const char *) __attribute__((__pure__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char *strtok (char *, const char *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) size_t strxfrm (char *, const char *, size_t);
# 253 "c:\\mingw\\include\\string.h" 3
}
# 50 "c:\\mingw\\include\\winnt.h" 2 3

extern "C" {
# 91 "c:\\mingw\\include\\winnt.h" 3
typedef char CHAR;
typedef short SHORT;
typedef long LONG;
typedef char CCHAR, *PCCHAR;
typedef unsigned char UCHAR, *PUCHAR;
typedef unsigned short USHORT, *PUSHORT;
typedef unsigned long ULONG, *PULONG;
typedef char *PSZ;

typedef void *PVOID, *LPVOID;





typedef void * PVOID64;
# 119 "c:\\mingw\\include\\winnt.h" 3
typedef wchar_t WCHAR;
typedef WCHAR *PWCHAR, *LPWCH, *PWCH, *NWPSTR, *LPWSTR, *PWSTR;
typedef const WCHAR *LPCWCH, *PCWCH, *LPCWSTR, *PCWSTR;
typedef CHAR *PCHAR, *LPCH, *PCH, *NPSTR, *LPSTR, *PSTR;
typedef const CHAR *LPCCH, *PCSTR, *LPCSTR;
# 134 "c:\\mingw\\include\\winnt.h" 3
typedef CHAR TCHAR;
typedef CHAR _TCHAR;


typedef TCHAR TBYTE, *PTCH, *PTBYTE;
typedef TCHAR *LPTCH, *PTSTR, *LPTSTR, *LP, *PTCHAR;
typedef const TCHAR *LPCTSTR;
# 159 "c:\\mingw\\include\\winnt.h" 3
typedef SHORT *PSHORT;
typedef LONG *PLONG;

typedef void *HANDLE;





typedef HANDLE *PHANDLE, *LPHANDLE;
typedef DWORD LCID;
typedef PDWORD PLCID;
typedef WORD LANGID;
# 181 "c:\\mingw\\include\\winnt.h" 3
typedef long long LONGLONG;
typedef unsigned long long DWORDLONG;



typedef LONGLONG *PLONGLONG;
typedef DWORDLONG *PDWORDLONG;
typedef DWORDLONG ULONGLONG, *PULONGLONG;
typedef LONGLONG USN;
# 199 "c:\\mingw\\include\\winnt.h" 3
typedef BYTE BOOLEAN, *PBOOLEAN;

}



typedef BYTE FCHAR;
typedef WORD FSHORT;
typedef DWORD FLONG;


# 1 "c:\\mingw\\include\\basetsd.h" 1 3



       
# 5 "c:\\mingw\\include\\basetsd.h" 3
# 48 "c:\\mingw\\include\\basetsd.h" 3
extern "C" {

typedef signed char INT8;
typedef signed short INT16;
typedef int LONG32, *PLONG32;

typedef int INT32, *PINT32;

typedef unsigned char UINT8;
typedef unsigned short UINT16;
typedef unsigned int ULONG32, *PULONG32;
typedef unsigned int DWORD32, *PDWORD32;
typedef unsigned int UINT32, *PUINT32;
# 101 "c:\\mingw\\include\\basetsd.h" 3
typedef int INT_PTR, *PINT_PTR;
typedef unsigned int UINT_PTR, *PUINT_PTR;
typedef long LONG_PTR, *PLONG_PTR;
typedef unsigned long ULONG_PTR, *PULONG_PTR;
typedef unsigned short UHALF_PTR, *PUHALF_PTR;
typedef short HALF_PTR, *PHALF_PTR;
typedef unsigned long HANDLE_PTR;


typedef ULONG_PTR SIZE_T, *PSIZE_T;
typedef LONG_PTR SSIZE_T, *PSSIZE_T;
typedef ULONG_PTR DWORD_PTR, *PDWORD_PTR;
typedef long long LONG64, *PLONG64;
typedef long long INT64, *PINT64;
typedef unsigned long long ULONG64, *PULONG64;
typedef unsigned long long DWORD64, *PDWORD64;
typedef unsigned long long UINT64, *PUINT64;

}
# 211 "c:\\mingw\\include\\winnt.h" 2 3
# 1786 "c:\\mingw\\include\\winnt.h" 3
extern "C" {

typedef DWORD ACCESS_MASK, *PACCESS_MASK;







typedef struct _GUID
{ unsigned long Data1;
  unsigned short Data2;
  unsigned short Data3;
  unsigned char Data4[8];
} GUID, *REFGUID, *LPGUID;



typedef struct _GENERIC_MAPPING
{ ACCESS_MASK GenericRead;
  ACCESS_MASK GenericWrite;
  ACCESS_MASK GenericExecute;
  ACCESS_MASK GenericAll;
} GENERIC_MAPPING, *PGENERIC_MAPPING;

typedef struct _ACE_HEADER
{ BYTE AceType;
  BYTE AceFlags;
  WORD AceSize;
} ACE_HEADER, *PACE_HEADER;

typedef struct _ACCESS_ALLOWED_ACE
{ ACE_HEADER Header;
  ACCESS_MASK Mask;
  DWORD SidStart;
} ACCESS_ALLOWED_ACE, *PACCESS_ALLOWED_ACE;

typedef struct _ACCESS_DENIED_ACE
{ ACE_HEADER Header;
  ACCESS_MASK Mask;
  DWORD SidStart;
} ACCESS_DENIED_ACE, *PACCESS_DENIED_ACE;

typedef struct _SYSTEM_AUDIT_ACE
{ ACE_HEADER Header;
  ACCESS_MASK Mask;
  DWORD SidStart;
} SYSTEM_AUDIT_ACE;
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

typedef struct _SYSTEM_ALARM_ACE
{ ACE_HEADER Header;
  ACCESS_MASK Mask;
  DWORD SidStart;
} SYSTEM_ALARM_ACE, *PSYSTEM_ALARM_ACE;

typedef struct _ACCESS_ALLOWED_OBJECT_ACE
{ ACE_HEADER Header;
  ACCESS_MASK Mask;
  DWORD Flags;
  GUID ObjectType;
  GUID InheritedObjectType;
  DWORD SidStart;
} ACCESS_ALLOWED_OBJECT_ACE, *PACCESS_ALLOWED_OBJECT_ACE;

typedef struct _ACCESS_DENIED_OBJECT_ACE
{ ACE_HEADER Header;
  ACCESS_MASK Mask;
  DWORD Flags;
  GUID ObjectType;
  GUID InheritedObjectType;
  DWORD SidStart;
} ACCESS_DENIED_OBJECT_ACE, *PACCESS_DENIED_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_OBJECT_ACE
{ ACE_HEADER Header;
  ACCESS_MASK Mask;
  DWORD Flags;
  GUID ObjectType;
  GUID InheritedObjectType;
  DWORD SidStart;
} SYSTEM_AUDIT_OBJECT_ACE, *PSYSTEM_AUDIT_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_OBJECT_ACE
{ ACE_HEADER Header;
  ACCESS_MASK Mask;
  DWORD Flags;
  GUID ObjectType;
  GUID InheritedObjectType;
  DWORD SidStart;
} SYSTEM_ALARM_OBJECT_ACE, *PSYSTEM_ALARM_OBJECT_ACE;

typedef struct _ACL
{ BYTE AclRevision;
  BYTE Sbz1;
  WORD AclSize;
  WORD AceCount;
  WORD Sbz2;
} ACL, *PACL;

typedef struct _ACL_REVISION_INFORMATION
{ DWORD AclRevision;
} ACL_REVISION_INFORMATION;

typedef struct _ACL_SIZE_INFORMATION
{ DWORD AceCount;
  DWORD AclBytesInUse;
  DWORD AclBytesFree;
} ACL_SIZE_INFORMATION;
# 1913 "c:\\mingw\\include\\winnt.h" 3
typedef struct _FLOATING_SAVE_AREA
{ DWORD ControlWord;
  DWORD StatusWord;
  DWORD TagWord;
  DWORD ErrorOffset;
  DWORD ErrorSelector;
  DWORD DataOffset;
  DWORD DataSelector;
  BYTE RegisterArea[80];
  DWORD Cr0NpxState;
} FLOATING_SAVE_AREA;

typedef struct _CONTEXT
{ DWORD ContextFlags;
  DWORD Dr0;
  DWORD Dr1;
  DWORD Dr2;
  DWORD Dr3;
  DWORD Dr6;
  DWORD Dr7;
  FLOATING_SAVE_AREA FloatSave;
  DWORD SegGs;
  DWORD SegFs;
  DWORD SegEs;
  DWORD SegDs;
  DWORD Edi;
  DWORD Esi;
  DWORD Ebx;
  DWORD Edx;
  DWORD Ecx;
  DWORD Eax;
  DWORD Ebp;
  DWORD Eip;
  DWORD SegCs;
  DWORD EFlags;
  DWORD Esp;
  DWORD SegSs;
  BYTE ExtendedRegisters[512];
} CONTEXT;
# 2436 "c:\\mingw\\include\\winnt.h" 3
typedef CONTEXT *PCONTEXT, *LPCONTEXT;

typedef struct _EXCEPTION_RECORD
{ DWORD ExceptionCode;
  DWORD ExceptionFlags;
  struct _EXCEPTION_RECORD *ExceptionRecord;
  PVOID ExceptionAddress;
  DWORD NumberParameters;
  DWORD ExceptionInformation[15];
} EXCEPTION_RECORD, *PEXCEPTION_RECORD, *LPEXCEPTION_RECORD;

typedef struct _EXCEPTION_POINTERS
{ PEXCEPTION_RECORD ExceptionRecord;
  PCONTEXT ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS, *LPEXCEPTION_POINTERS;

typedef union _LARGE_INTEGER
{ struct
  { DWORD LowPart;
    LONG HighPart;
  } u;

  __extension__ struct
  { DWORD LowPart;
    LONG HighPart;
  };

  LONGLONG QuadPart;
} LARGE_INTEGER, *PLARGE_INTEGER;

typedef union _ULARGE_INTEGER
{ struct
  { DWORD LowPart;
    DWORD HighPart;
  } u;

  __extension__ struct
  { DWORD LowPart;
    DWORD HighPart;
  };

  ULONGLONG QuadPart;
} ULARGE_INTEGER, *PULARGE_INTEGER;

typedef struct _LUID
{ DWORD LowPart;
  LONG HighPart;
} LUID, *PLUID;
#pragma pack(push,4)

typedef struct _LUID_AND_ATTRIBUTES
{ LUID Luid;
  DWORD Attributes;
} LUID_AND_ATTRIBUTES, *PLUID_AND_ATTRIBUTES;
#pragma pack(pop)
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;

typedef struct _PRIVILEGE_SET
{ DWORD PrivilegeCount;
  DWORD Control;
  LUID_AND_ATTRIBUTES Privilege[1];
} PRIVILEGE_SET, *PPRIVILEGE_SET;

typedef struct _SECURITY_ATTRIBUTES
{ DWORD nLength;
  LPVOID lpSecurityDescriptor;
  BOOL bInheritHandle;
} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;

typedef enum _SECURITY_IMPERSONATION_LEVEL
{ SecurityAnonymous,
  SecurityIdentification,
  SecurityImpersonation,
  SecurityDelegation
} SECURITY_IMPERSONATION_LEVEL, *PSECURITY_IMPERSONATION_LEVEL;
typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE, *PSECURITY_CONTEXT_TRACKING_MODE;

typedef struct _SECURITY_QUALITY_OF_SERVICE
{ DWORD Length;
  SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
  BOOLEAN EffectiveOnly;
} SECURITY_QUALITY_OF_SERVICE, *PSECURITY_QUALITY_OF_SERVICE;
typedef PVOID PACCESS_TOKEN;

typedef struct _SE_IMPERSONATION_STATE
{ PACCESS_TOKEN Token;
  BOOLEAN CopyOnOpen;
  BOOLEAN EffectiveOnly;
  SECURITY_IMPERSONATION_LEVEL Level;
} SE_IMPERSONATION_STATE, *PSE_IMPERSONATION_STATE;

typedef struct _SID_IDENTIFIER_AUTHORITY
{ BYTE Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY, *LPSID_IDENTIFIER_AUTHORITY;
typedef PVOID PSID;

typedef struct _SID
{ BYTE Revision;
  BYTE SubAuthorityCount;
  SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
  DWORD SubAuthority[1];
} SID, *PISID;

typedef struct _SID_AND_ATTRIBUTES
{ PSID Sid;
  DWORD Attributes;
} SID_AND_ATTRIBUTES, *PSID_AND_ATTRIBUTES;
typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;
# 2558 "c:\\mingw\\include\\winnt.h" 3
typedef struct _TOKEN_SOURCE
{ CHAR SourceName[8];
  LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE;

typedef struct _TOKEN_CONTROL
{ LUID TokenId;
  LUID AuthenticationId;
  LUID ModifiedId;
  TOKEN_SOURCE TokenSource;
} TOKEN_CONTROL, *PTOKEN_CONTROL;

typedef struct _TOKEN_DEFAULT_DACL
{ PACL DefaultDacl;
} TOKEN_DEFAULT_DACL, *PTOKEN_DEFAULT_DACL;

typedef struct _TOKEN_GROUPS
{ DWORD GroupCount;
  SID_AND_ATTRIBUTES Groups[1];
} TOKEN_GROUPS, *PTOKEN_GROUPS, *LPTOKEN_GROUPS;

typedef struct _TOKEN_OWNER
{ PSID Owner;
} TOKEN_OWNER, *PTOKEN_OWNER;

typedef struct _TOKEN_PRIMARY_GROUP
{ PSID PrimaryGroup;
} TOKEN_PRIMARY_GROUP, *PTOKEN_PRIMARY_GROUP;

typedef struct _TOKEN_PRIVILEGES
{ DWORD PrivilegeCount;
  LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES, *LPTOKEN_PRIVILEGES;

typedef enum tagTOKEN_TYPE
{ TokenPrimary = 1,
  TokenImpersonation
} TOKEN_TYPE, *PTOKEN_TYPE;

typedef struct _TOKEN_STATISTICS
{ LUID TokenId;
  LUID AuthenticationId;
  LARGE_INTEGER ExpirationTime;
  TOKEN_TYPE TokenType;
  SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
  DWORD DynamicCharged;
  DWORD DynamicAvailable;
  DWORD GroupCount;
  DWORD PrivilegeCount;
  LUID ModifiedId;
} TOKEN_STATISTICS, *PTOKEN_STATISTICS;

typedef struct _TOKEN_USER
{ SID_AND_ATTRIBUTES User;
} TOKEN_USER, *PTOKEN_USER;
# 2642 "c:\\mingw\\include\\winnt.h" 3
typedef DWORD SECURITY_INFORMATION, *PSECURITY_INFORMATION;
typedef WORD SECURITY_DESCRIPTOR_CONTROL, *PSECURITY_DESCRIPTOR_CONTROL;

typedef struct _SECURITY_DESCRIPTOR
{ BYTE Revision;
  BYTE Sbz1;
  SECURITY_DESCRIPTOR_CONTROL Control;
  PSID Owner;
  PSID Group;
  PACL Sacl;
  PACL Dacl;
} SECURITY_DESCRIPTOR, *PSECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;

typedef enum _TOKEN_INFORMATION_CLASS
{ TokenUser = 1,
  TokenGroups,
  TokenPrivileges,
  TokenOwner,
  TokenPrimaryGroup,
  TokenDefaultDacl,
  TokenSource,
  TokenType,
  TokenImpersonationLevel,
  TokenStatistics,
  TokenRestrictedSids,
  TokenSessionId,
  TokenGroupsAndPrivileges,
  TokenSessionReference,
  TokenSandBoxInert,
  TokenAuditPolicy,
  TokenOrigin,
# 2686 "c:\\mingw\\include\\winnt.h" 3
  MaxTokenInfoClass
} TOKEN_INFORMATION_CLASS;

typedef enum _SID_NAME_USE
{ SidTypeUser = 1,
  SidTypeGroup,
  SidTypeDomain,
  SidTypeAlias,
  SidTypeWellKnownGroup,
  SidTypeDeletedAccount,
  SidTypeInvalid,
  SidTypeUnknown,
  SidTypeComputer
} SID_NAME_USE, *PSID_NAME_USE;

typedef struct _QUOTA_LIMITS
{ SIZE_T PagedPoolLimit;
  SIZE_T NonPagedPoolLimit;
  SIZE_T MinimumWorkingSetSize;
  SIZE_T MaximumWorkingSetSize;
  SIZE_T PagefileLimit;
  LARGE_INTEGER TimeLimit;
} QUOTA_LIMITS, *PQUOTA_LIMITS;

typedef struct _IO_COUNTERS
{ ULONGLONG ReadOperationCount;
  ULONGLONG WriteOperationCount;
  ULONGLONG OtherOperationCount;
  ULONGLONG ReadTransferCount;
  ULONGLONG WriteTransferCount;
  ULONGLONG OtherTransferCount;
} IO_COUNTERS, *PIO_COUNTERS;

typedef struct _FILE_NOTIFY_INFORMATION
{ DWORD NextEntryOffset;
  DWORD Action;
  DWORD FileNameLength;
  WCHAR FileName[1];
} FILE_NOTIFY_INFORMATION, *PFILE_NOTIFY_INFORMATION;

typedef struct _TAPE_ERASE
{ DWORD Type;
  BOOLEAN Immediate;
} TAPE_ERASE, *PTAPE_ERASE;

typedef struct _TAPE_GET_DRIVE_PARAMETERS
{ BOOLEAN ECC;
  BOOLEAN Compression;
  BOOLEAN DataPadding;
  BOOLEAN ReportSetmarks;
  DWORD DefaultBlockSize;
  DWORD MaximumBlockSize;
  DWORD MinimumBlockSize;
  DWORD MaximumPartitionCount;
  DWORD FeaturesLow;
  DWORD FeaturesHigh;
  DWORD EOTWarningZoneSize;
} TAPE_GET_DRIVE_PARAMETERS, *PTAPE_GET_DRIVE_PARAMETERS;

typedef struct _TAPE_GET_MEDIA_PARAMETERS
{ LARGE_INTEGER Capacity;
  LARGE_INTEGER Remaining;
  DWORD BlockSize;
  DWORD PartitionCount;
  BOOLEAN WriteProtected;
} TAPE_GET_MEDIA_PARAMETERS, *PTAPE_GET_MEDIA_PARAMETERS;

typedef struct _TAPE_GET_POSITION
{ ULONG Type;
  ULONG Partition;
  ULONG OffsetLow;
  ULONG OffsetHigh;
} TAPE_GET_POSITION, *PTAPE_GET_POSITION;

typedef struct _TAPE_PREPARE
{ DWORD Operation;
  BOOLEAN Immediate;
} TAPE_PREPARE, *PTAPE_PREPARE;

typedef struct _TAPE_SET_DRIVE_PARAMETERS
{ BOOLEAN ECC;
  BOOLEAN Compression;
  BOOLEAN DataPadding;
  BOOLEAN ReportSetmarks;
  ULONG EOTWarningZoneSize;
} TAPE_SET_DRIVE_PARAMETERS, *PTAPE_SET_DRIVE_PARAMETERS;

typedef struct _TAPE_SET_MEDIA_PARAMETERS
{ ULONG BlockSize;
} TAPE_SET_MEDIA_PARAMETERS, *PTAPE_SET_MEDIA_PARAMETERS;

typedef struct _TAPE_SET_POSITION
{ DWORD Method;
  DWORD Partition;
  LARGE_INTEGER Offset;
  BOOLEAN Immediate;
} TAPE_SET_POSITION, *PTAPE_SET_POSITION;

typedef struct _TAPE_WRITE_MARKS
{ DWORD Type;
  DWORD Count;
  BOOLEAN Immediate;
} TAPE_WRITE_MARKS, *PTAPE_WRITE_MARKS;

typedef struct _TAPE_CREATE_PARTITION
{ DWORD Method;
  DWORD Count;
  DWORD Size;
} TAPE_CREATE_PARTITION, *PTAPE_CREATE_PARTITION;

typedef struct _MEMORY_BASIC_INFORMATION
{ PVOID BaseAddress;
  PVOID AllocationBase;
  DWORD AllocationProtect;
  DWORD RegionSize;
  DWORD State;
  DWORD Protect;
  DWORD Type;
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;

typedef struct _MESSAGE_RESOURCE_ENTRY
{ WORD Length;
  WORD Flags;
  BYTE Text[1];
} MESSAGE_RESOURCE_ENTRY, *PMESSAGE_RESOURCE_ENTRY;

typedef struct _MESSAGE_RESOURCE_BLOCK
{ DWORD LowId;
  DWORD HighId;
  DWORD OffsetToEntries;
} MESSAGE_RESOURCE_BLOCK, *PMESSAGE_RESOURCE_BLOCK;

typedef struct _MESSAGE_RESOURCE_DATA
{ DWORD NumberOfBlocks;
  MESSAGE_RESOURCE_BLOCK Blocks[1];
} MESSAGE_RESOURCE_DATA, *PMESSAGE_RESOURCE_DATA;

typedef struct _LIST_ENTRY
{ struct _LIST_ENTRY *Flink;
  struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY;

typedef struct _SINGLE_LIST_ENTRY
{ struct _SINGLE_LIST_ENTRY *Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;







typedef union _SLIST_HEADER
{ ULONGLONG Alignment;
  __extension__ struct
  { SINGLE_LIST_ENTRY Next;
    WORD Depth;
    WORD Sequence;
  } ;
} SLIST_HEADER, *PSLIST_HEADER;


typedef struct _RTL_CRITICAL_SECTION_DEBUG
{ WORD Type;
  WORD CreatorBackTraceIndex;
  struct _RTL_CRITICAL_SECTION *CriticalSection;
  LIST_ENTRY ProcessLocksList;
  DWORD EntryCount;
  DWORD ContentionCount;
  DWORD Spare[2];
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG;

typedef struct _RTL_CRITICAL_SECTION
{ PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
  LONG LockCount;
  LONG RecursionCount;
  HANDLE OwningThread;
  HANDLE LockSemaphore;
  DWORD Reserved;
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;

typedef struct _EVENTLOGRECORD
{ DWORD Length;
  DWORD Reserved;
  DWORD RecordNumber;
  DWORD TimeGenerated;
  DWORD TimeWritten;
  DWORD EventID;
  WORD EventType;
  WORD NumStrings;
  WORD EventCategory;
  WORD ReservedFlags;
  DWORD ClosingRecordNumber;
  DWORD StringOffset;
  DWORD UserSidLength;
  DWORD UserSidOffset;
  DWORD DataLength;
  DWORD DataOffset;
} EVENTLOGRECORD, *PEVENTLOGRECORD;

typedef struct _OSVERSIONINFOA
{ DWORD dwOSVersionInfoSize;
  DWORD dwMajorVersion;
  DWORD dwMinorVersion;
  DWORD dwBuildNumber;
  DWORD dwPlatformId;
  CHAR szCSDVersion[128];
} OSVERSIONINFOA, *POSVERSIONINFOA, *LPOSVERSIONINFOA;

typedef struct _OSVERSIONINFOW
{ DWORD dwOSVersionInfoSize;
  DWORD dwMajorVersion;
  DWORD dwMinorVersion;
  DWORD dwBuildNumber;
  DWORD dwPlatformId;
  WCHAR szCSDVersion[128];
} OSVERSIONINFOW, *POSVERSIONINFOW, *LPOSVERSIONINFOW;

typedef struct _OSVERSIONINFOEXA
{ DWORD dwOSVersionInfoSize;
  DWORD dwMajorVersion;
  DWORD dwMinorVersion;
  DWORD dwBuildNumber;
  DWORD dwPlatformId;
  CHAR szCSDVersion[128];
  WORD wServicePackMajor;
  WORD wServicePackMinor;
  WORD wSuiteMask;
  BYTE wProductType;
  BYTE wReserved;
} OSVERSIONINFOEXA, *POSVERSIONINFOEXA, *LPOSVERSIONINFOEXA;

typedef struct _OSVERSIONINFOEXW
{ DWORD dwOSVersionInfoSize;
  DWORD dwMajorVersion;
  DWORD dwMinorVersion;
  DWORD dwBuildNumber;
  DWORD dwPlatformId;
  WCHAR szCSDVersion[128];
  WORD wServicePackMajor;
  WORD wServicePackMinor;
  WORD wSuiteMask;
  BYTE wProductType;
  BYTE wReserved;
} OSVERSIONINFOEXW, *POSVERSIONINFOEXW, *LPOSVERSIONINFOEXW;

#pragma pack(push,2)
typedef struct _IMAGE_VXD_HEADER
{ WORD e32_magic;
  BYTE e32_border;
  BYTE e32_worder;
  DWORD e32_level;
  WORD e32_cpu;
  WORD e32_os;
  DWORD e32_ver;
  DWORD e32_mflags;
  DWORD e32_mpages;
  DWORD e32_startobj;
  DWORD e32_eip;
  DWORD e32_stackobj;
  DWORD e32_esp;
  DWORD e32_pagesize;
  DWORD e32_lastpagesize;
  DWORD e32_fixupsize;
  DWORD e32_fixupsum;
  DWORD e32_ldrsize;
  DWORD e32_ldrsum;
  DWORD e32_objtab;
  DWORD e32_objcnt;
  DWORD e32_objmap;
  DWORD e32_itermap;
  DWORD e32_rsrctab;
  DWORD e32_rsrccnt;
  DWORD e32_restab;
  DWORD e32_enttab;
  DWORD e32_dirtab;
  DWORD e32_dircnt;
  DWORD e32_fpagetab;
  DWORD e32_frectab;
  DWORD e32_impmod;
  DWORD e32_impmodcnt;
  DWORD e32_impproc;
  DWORD e32_pagesum;
  DWORD e32_datapage;
  DWORD e32_preload;
  DWORD e32_nrestab;
  DWORD e32_cbnrestab;
  DWORD e32_nressum;
  DWORD e32_autodata;
  DWORD e32_debuginfo;
  DWORD e32_debuglen;
  DWORD e32_instpreload;
  DWORD e32_instdemand;
  DWORD e32_heapsize;
  BYTE e32_res3[12];
  DWORD e32_winresoff;
  DWORD e32_winreslen;
  WORD e32_devid;
  WORD e32_ddkver;
} IMAGE_VXD_HEADER, *PIMAGE_VXD_HEADER;
#pragma pack(pop)

#pragma pack(push,4)
typedef struct _IMAGE_FILE_HEADER
{ WORD Machine;
  WORD NumberOfSections;
  DWORD TimeDateStamp;
  DWORD PointerToSymbolTable;
  DWORD NumberOfSymbols;
  WORD SizeOfOptionalHeader;
  WORD Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;

typedef struct _IMAGE_DATA_DIRECTORY
{ DWORD VirtualAddress;
  DWORD Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;

typedef struct _IMAGE_OPTIONAL_HEADER
{ WORD Magic;
  BYTE MajorLinkerVersion;
  BYTE MinorLinkerVersion;
  DWORD SizeOfCode;
  DWORD SizeOfInitializedData;
  DWORD SizeOfUninitializedData;
  DWORD AddressOfEntryPoint;
  DWORD BaseOfCode;
  DWORD BaseOfData;
  DWORD ImageBase;
  DWORD SectionAlignment;
  DWORD FileAlignment;
  WORD MajorOperatingSystemVersion;
  WORD MinorOperatingSystemVersion;
  WORD MajorImageVersion;
  WORD MinorImageVersion;
  WORD MajorSubsystemVersion;
  WORD MinorSubsystemVersion;
  DWORD Win32VersionValue;
  DWORD SizeOfImage;
  DWORD SizeOfHeaders;
  DWORD CheckSum;
  WORD Subsystem;
  WORD DllCharacteristics;
  DWORD SizeOfStackReserve;
  DWORD SizeOfStackCommit;
  DWORD SizeOfHeapReserve;
  DWORD SizeOfHeapCommit;
  DWORD LoaderFlags;
  DWORD NumberOfRvaAndSizes;
  IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;

typedef struct _IMAGE_OPTIONAL_HEADER64
{ WORD Magic;
  BYTE MajorLinkerVersion;
  BYTE MinorLinkerVersion;
  DWORD SizeOfCode;
  DWORD SizeOfInitializedData;
  DWORD SizeOfUninitializedData;
  DWORD AddressOfEntryPoint;
  DWORD BaseOfCode;
  ULONGLONG ImageBase;
  DWORD SectionAlignment;
  DWORD FileAlignment;
  WORD MajorOperatingSystemVersion;
  WORD MinorOperatingSystemVersion;
  WORD MajorImageVersion;
  WORD MinorImageVersion;
  WORD MajorSubsystemVersion;
  WORD MinorSubsystemVersion;
  DWORD Win32VersionValue;
  DWORD SizeOfImage;
  DWORD SizeOfHeaders;
  DWORD CheckSum;
  WORD Subsystem;
  WORD DllCharacteristics;
  ULONGLONG SizeOfStackReserve;
  ULONGLONG SizeOfStackCommit;
  ULONGLONG SizeOfHeapReserve;
  ULONGLONG SizeOfHeapCommit;
  DWORD LoaderFlags;
  DWORD NumberOfRvaAndSizes;
  IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;




typedef IMAGE_OPTIONAL_HEADER32 IMAGE_OPTIONAL_HEADER;
typedef PIMAGE_OPTIONAL_HEADER32 PIMAGE_OPTIONAL_HEADER;


typedef struct _IMAGE_ROM_OPTIONAL_HEADER
{ WORD Magic;
  BYTE MajorLinkerVersion;
  BYTE MinorLinkerVersion;
  DWORD SizeOfCode;
  DWORD SizeOfInitializedData;
  DWORD SizeOfUninitializedData;
  DWORD AddressOfEntryPoint;
  DWORD BaseOfCode;
  DWORD BaseOfData;
  DWORD BaseOfBss;
  DWORD GprMask;
  DWORD CprMask[4];
  DWORD GpValue;
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER;
#pragma pack(pop)

#pragma pack(push,2)
typedef struct _IMAGE_DOS_HEADER
{ WORD e_magic;
  WORD e_cblp;
  WORD e_cp;
  WORD e_crlc;
  WORD e_cparhdr;
  WORD e_minalloc;
  WORD e_maxalloc;
  WORD e_ss;
  WORD e_sp;
  WORD e_csum;
  WORD e_ip;
  WORD e_cs;
  WORD e_lfarlc;
  WORD e_ovno;
  WORD e_res[4];
  WORD e_oemid;
  WORD e_oeminfo;
  WORD e_res2[10];
  LONG e_lfanew;
} IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

typedef struct _IMAGE_OS2_HEADER
{ WORD ne_magic;
  CHAR ne_ver;
  CHAR ne_rev;
  WORD ne_enttab;
  WORD ne_cbenttab;
  LONG ne_crc;
  WORD ne_flags;
  WORD ne_autodata;
  WORD ne_heap;
  WORD ne_stack;
  LONG ne_csip;
  LONG ne_sssp;
  WORD ne_cseg;
  WORD ne_cmod;
  WORD ne_cbnrestab;
  WORD ne_segtab;
  WORD ne_rsrctab;
  WORD ne_restab;
  WORD ne_modtab;
  WORD ne_imptab;
  LONG ne_nrestab;
  WORD ne_cmovent;
  WORD ne_align;
  WORD ne_cres;
  BYTE ne_exetyp;
  BYTE ne_flagsothers;
  WORD ne_pretthunks;
  WORD ne_psegrefbytes;
  WORD ne_swaparea;
  WORD ne_expver;
} IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;
#pragma pack(pop)

#pragma pack(push,4)
typedef struct _IMAGE_NT_HEADERS
{ DWORD Signature;
  IMAGE_FILE_HEADER FileHeader;
  IMAGE_OPTIONAL_HEADER32 OptionalHeader;
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;

typedef struct _IMAGE_NT_HEADERS64
{ DWORD Signature;
  IMAGE_FILE_HEADER FileHeader;
  IMAGE_OPTIONAL_HEADER64 OptionalHeader;
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;




typedef IMAGE_NT_HEADERS32 IMAGE_NT_HEADERS;
typedef PIMAGE_NT_HEADERS32 PIMAGE_NT_HEADERS;


typedef struct _IMAGE_ROM_HEADERS
{ IMAGE_FILE_HEADER FileHeader;
  IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
} IMAGE_ROM_HEADERS, *PIMAGE_ROM_HEADERS;

typedef struct _IMAGE_SECTION_HEADER
{ BYTE Name[8];
  union
  { DWORD PhysicalAddress;
    DWORD VirtualSize;
  } Misc;
  DWORD VirtualAddress;
  DWORD SizeOfRawData;
  DWORD PointerToRawData;
  DWORD PointerToRelocations;
  DWORD PointerToLinenumbers;
  WORD NumberOfRelocations;
  WORD NumberOfLinenumbers;
  DWORD Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;
#pragma pack(pop)

#pragma pack(push,2)
typedef struct _IMAGE_SYMBOL
{ union
  { BYTE ShortName[8];
    struct
    { DWORD Short;
      DWORD Long;
    } Name;
    PBYTE LongName[2];
  } N;
  DWORD Value;
  SHORT SectionNumber;
  WORD Type;
  BYTE StorageClass;
  BYTE NumberOfAuxSymbols;
} IMAGE_SYMBOL, *PIMAGE_SYMBOL;

typedef union _IMAGE_AUX_SYMBOL
{ struct
  { DWORD TagIndex;
    union
    { struct
      { WORD Linenumber;
 WORD Size;
      } LnSz;
      DWORD TotalSize;
    } Misc;
    union
    { struct
      { DWORD PointerToLinenumber;
 DWORD PointerToNextFunction;
      } Function;
      struct
      { WORD Dimension[4];
      } Array;
    } FcnAry;
    WORD TvIndex;
  } Sym;
  struct
  { BYTE Name[18];
  } File;
  struct
  { DWORD Length;
    WORD NumberOfRelocations;
    WORD NumberOfLinenumbers;
    DWORD CheckSum;
    SHORT Number;
    BYTE Selection;
  } Section;
} IMAGE_AUX_SYMBOL, *PIMAGE_AUX_SYMBOL;

typedef struct _IMAGE_COFF_SYMBOLS_HEADER
{ DWORD NumberOfSymbols;
  DWORD LvaToFirstSymbol;
  DWORD NumberOfLinenumbers;
  DWORD LvaToFirstLinenumber;
  DWORD RvaToFirstByteOfCode;
  DWORD RvaToLastByteOfCode;
  DWORD RvaToFirstByteOfData;
  DWORD RvaToLastByteOfData;
} IMAGE_COFF_SYMBOLS_HEADER, *PIMAGE_COFF_SYMBOLS_HEADER;

typedef struct _IMAGE_RELOCATION
{ __extension__ union
  { DWORD VirtualAddress;
    DWORD RelocCount;
  } ;
  DWORD SymbolTableIndex;
  WORD Type;
} IMAGE_RELOCATION, *PIMAGE_RELOCATION;
#pragma pack(pop)

#pragma pack(push,4)
typedef struct _IMAGE_BASE_RELOCATION
{ DWORD VirtualAddress;
  DWORD SizeOfBlock;
} IMAGE_BASE_RELOCATION, *PIMAGE_BASE_RELOCATION;
#pragma pack(pop)

#pragma pack(push,2)
typedef struct _IMAGE_LINENUMBER
{ union
  { DWORD SymbolTableIndex;
    DWORD VirtualAddress;
  } Type;
  WORD Linenumber;
} IMAGE_LINENUMBER, *PIMAGE_LINENUMBER;
#pragma pack(pop)

#pragma pack(push,4)
typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER
{ BYTE Name[16];
  BYTE Date[12];
  BYTE UserID[6];
  BYTE GroupID[6];
  BYTE Mode[8];
  BYTE Size[10];
  BYTE EndHeader[2];
} IMAGE_ARCHIVE_MEMBER_HEADER, *PIMAGE_ARCHIVE_MEMBER_HEADER;

typedef struct _IMAGE_EXPORT_DIRECTORY
{ DWORD Characteristics;
  DWORD TimeDateStamp;
  WORD MajorVersion;
  WORD MinorVersion;
  DWORD Name;
  DWORD Base;
  DWORD NumberOfFunctions;
  DWORD NumberOfNames;
  DWORD AddressOfFunctions;
  DWORD AddressOfNames;
  DWORD AddressOfNameOrdinals;
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;

typedef struct _IMAGE_IMPORT_BY_NAME
{ WORD Hint;
  BYTE Name[1];
} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;

typedef struct _IMAGE_THUNK_DATA32
{ union
  { DWORD ForwarderString;
    DWORD Function;
    DWORD Ordinal;
    DWORD AddressOfData;
  } u1;
} IMAGE_THUNK_DATA32, *PIMAGE_THUNK_DATA32;

typedef struct _IMAGE_THUNK_DATA64
{ union
  { ULONGLONG ForwarderString;
    ULONGLONG Function;
    ULONGLONG Ordinal;
    ULONGLONG AddressOfData;
  } u1;
} IMAGE_THUNK_DATA64, *PIMAGE_THUNK_DATA64;




typedef IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA;
typedef PIMAGE_THUNK_DATA32 PIMAGE_THUNK_DATA;


typedef struct _IMAGE_IMPORT_DESCRIPTOR
{ __extension__ union
  { DWORD Characteristics;
    DWORD OriginalFirstThunk;
  } ;
  DWORD TimeDateStamp;
  DWORD ForwarderChain;
  DWORD Name;
  DWORD FirstThunk;
} IMAGE_IMPORT_DESCRIPTOR, *PIMAGE_IMPORT_DESCRIPTOR;

typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR
{ DWORD TimeDateStamp;
  WORD OffsetModuleName;
  WORD NumberOfModuleForwarderRefs;
} IMAGE_BOUND_IMPORT_DESCRIPTOR, *PIMAGE_BOUND_IMPORT_DESCRIPTOR;

typedef struct _IMAGE_BOUND_FORWARDER_REF
{ DWORD TimeDateStamp;
  WORD OffsetModuleName;
  WORD Reserved;
} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;
typedef void(__attribute__((__stdcall__)) *PIMAGE_TLS_CALLBACK)(PVOID,DWORD,PVOID);

typedef struct _IMAGE_TLS_DIRECTORY32
{ DWORD StartAddressOfRawData;
  DWORD EndAddressOfRawData;
  DWORD AddressOfIndex;
  DWORD AddressOfCallBacks;
  DWORD SizeOfZeroFill;
  DWORD Characteristics;
} IMAGE_TLS_DIRECTORY32, *PIMAGE_TLS_DIRECTORY32;

typedef struct _IMAGE_TLS_DIRECTORY64
{ ULONGLONG StartAddressOfRawData;
  ULONGLONG EndAddressOfRawData;
  ULONGLONG AddressOfIndex;
  ULONGLONG AddressOfCallBacks;
  DWORD SizeOfZeroFill;
  DWORD Characteristics;
} IMAGE_TLS_DIRECTORY64, *PIMAGE_TLS_DIRECTORY64;




typedef IMAGE_TLS_DIRECTORY32 IMAGE_TLS_DIRECTORY;
typedef PIMAGE_TLS_DIRECTORY32 PIMAGE_TLS_DIRECTORY;


typedef struct _IMAGE_RESOURCE_DIRECTORY
{ DWORD Characteristics;
  DWORD TimeDateStamp;
  WORD MajorVersion;
  WORD MinorVersion;
  WORD NumberOfNamedEntries;
  WORD NumberOfIdEntries;
} IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;

__extension__ typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY
{ __extension__ union
  { __extension__ struct
    { DWORD NameOffset : 31;
      DWORD NameIsString : 1;
    } ;
    DWORD Name;
    WORD Id;
  } ;
  __extension__ union
  { DWORD OffsetToData;
    __extension__ struct
    { DWORD OffsetToDirectory:31;
      DWORD DataIsDirectory:1;
    } ;
  } ;
} IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;

typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING
{ WORD Length;
  CHAR NameString[1];
} IMAGE_RESOURCE_DIRECTORY_STRING, *PIMAGE_RESOURCE_DIRECTORY_STRING;

typedef struct _IMAGE_RESOURCE_DIR_STRING_U
{ WORD Length;
  WCHAR NameString[1];
} IMAGE_RESOURCE_DIR_STRING_U, *PIMAGE_RESOURCE_DIR_STRING_U;

typedef struct _IMAGE_RESOURCE_DATA_ENTRY
{ DWORD OffsetToData;
  DWORD Size;
  DWORD CodePage;
  DWORD Reserved;
} IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;

typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY
{ DWORD Characteristics;
  DWORD TimeDateStamp;
  WORD MajorVersion;
  WORD MinorVersion;
  DWORD GlobalFlagsClear;
  DWORD GlobalFlagsSet;
  DWORD CriticalSectionDefaultTimeout;
  DWORD DeCommitFreeBlockThreshold;
  DWORD DeCommitTotalFreeThreshold;
  PVOID LockPrefixTable;
  DWORD MaximumAllocationSize;
  DWORD VirtualMemoryThreshold;
  DWORD ProcessHeapFlags;
  DWORD Reserved[4];
} IMAGE_LOAD_CONFIG_DIRECTORY, *PIMAGE_LOAD_CONFIG_DIRECTORY;

typedef struct
{ DWORD Characteristics;
  DWORD TimeDateStamp;
  WORD MajorVersion;
  WORD MinorVersion;
  DWORD GlobalFlagsClear;
  DWORD GlobalFlagsSet;
  DWORD CriticalSectionDefaultTimeout;
  ULONGLONG DeCommitFreeBlockThreshold;
  ULONGLONG DeCommitTotalFreeThreshold;
  ULONGLONG LockPrefixTable;
  ULONGLONG MaximumAllocationSize;
  ULONGLONG VirtualMemoryThreshold;
  ULONGLONG ProcessAffinityMask;
  DWORD ProcessHeapFlags;
  WORD CSDFlags;
  WORD Reserved1;
  ULONGLONG EditList;
  DWORD Reserved[2];
} IMAGE_LOAD_CONFIG_DIRECTORY64, *PIMAGE_LOAD_CONFIG_DIRECTORY64;

typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY
{ DWORD BeginAddress;
  DWORD EndAddress;
  PVOID ExceptionHandler;
  PVOID HandlerData;
  DWORD PrologEndAddress;
} IMAGE_RUNTIME_FUNCTION_ENTRY, *PIMAGE_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY
{ unsigned int FuncStart:32;
  unsigned int PrologLen:8;
  unsigned int FuncLen:22;
  unsigned int ThirtyTwoBit:1;
  unsigned int ExceptionFlag:1;
} IMAGE_CE_RUNTIME_FUNCTION_ENTRY, *PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_DEBUG_DIRECTORY
{ DWORD Characteristics;
  DWORD TimeDateStamp;
  WORD MajorVersion;
  WORD MinorVersion;
  DWORD Type;
  DWORD SizeOfData;
  DWORD AddressOfRawData;
  DWORD PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;

typedef struct _FPO_DATA
{ DWORD ulOffStart;
  DWORD cbProcSize;
  DWORD cdwLocals;
  WORD cdwParams;
  WORD cbProlog:8;
  WORD cbRegs:3;
  WORD fHasSEH:1;
  WORD fUseBP:1;
  WORD reserved:1;
  WORD cbFrame:2;
} FPO_DATA, *PFPO_DATA;

typedef struct _IMAGE_DEBUG_MISC
{ DWORD DataType;
  DWORD Length;
  BOOLEAN Unicode;
  BYTE Reserved[3];
  BYTE Data[1];
} IMAGE_DEBUG_MISC, *PIMAGE_DEBUG_MISC;

typedef struct _IMAGE_FUNCTION_ENTRY
{ DWORD StartingAddress;
  DWORD EndingAddress;
  DWORD EndOfPrologue;
} IMAGE_FUNCTION_ENTRY, *PIMAGE_FUNCTION_ENTRY;

typedef struct _IMAGE_FUNCTION_ENTRY64
{ ULONGLONG StartingAddress;
  ULONGLONG EndingAddress;
  __extension__ union
  { ULONGLONG EndOfPrologue;
    ULONGLONG UnwindInfoAddress;
  } ;
} IMAGE_FUNCTION_ENTRY64, *PIMAGE_FUNCTION_ENTRY64;

typedef struct _IMAGE_SEPARATE_DEBUG_HEADER
{ WORD Signature;
  WORD Flags;
  WORD Machine;
  WORD Characteristics;
  DWORD TimeDateStamp;
  DWORD CheckSum;
  DWORD ImageBase;
  DWORD SizeOfImage;
  DWORD NumberOfSections;
  DWORD ExportedNamesSize;
  DWORD DebugDirectorySize;
  DWORD SectionAlignment;
  DWORD Reserved[2];
} IMAGE_SEPARATE_DEBUG_HEADER, *PIMAGE_SEPARATE_DEBUG_HEADER;
#pragma pack(pop)

typedef enum _CM_SERVICE_NODE_TYPE
{ DriverType = 1,
  FileSystemType = 2,
  Win32ServiceOwnProcess = 16,
  Win32ServiceShareProcess = 32,
  AdapterType = 4,
  RecognizerType = 8
} SERVICE_NODE_TYPE;

typedef enum _CM_SERVICE_LOAD_TYPE
{ BootLoad = 0,
  SystemLoad = 1,
  AutoLoad = 2,
  DemandLoad = 3,
  DisableLoad = 4
} SERVICE_LOAD_TYPE;

typedef enum _CM_ERROR_CONTROL_TYPE
{ IgnoreError = 0,
  NormalError = 1,
  SevereError = 2,
  CriticalError = 3
} SERVICE_ERROR_TYPE;

typedef struct _NT_TIB
{ struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
  PVOID StackBase;
  PVOID StackLimit;
  PVOID SubSystemTib;
  __extension__ union
  { PVOID FiberData;
    DWORD Version;
  } ;
  PVOID ArbitraryUserPointer;
  struct _NT_TIB *Self;
} NT_TIB, *PNT_TIB;

typedef struct _REPARSE_DATA_BUFFER
{ DWORD ReparseTag;
  WORD ReparseDataLength;
  WORD Reserved;
  __extension__ union
  { struct
    { WORD SubstituteNameOffset;
      WORD SubstituteNameLength;
      WORD PrintNameOffset;
      WORD PrintNameLength;
      ULONG Flags;
      WCHAR PathBuffer[1];
    } SymbolicLinkReparseBuffer;
    struct
    { WORD SubstituteNameOffset;
      WORD SubstituteNameLength;
      WORD PrintNameOffset;
      WORD PrintNameLength;
      WCHAR PathBuffer[1];
    } MountPointReparseBuffer;
    struct
    { BYTE DataBuffer[1];
    } GenericReparseBuffer;
  } ;
} REPARSE_DATA_BUFFER, *PREPARSE_DATA_BUFFER;

typedef struct _REPARSE_GUID_DATA_BUFFER
{ DWORD ReparseTag;
  WORD ReparseDataLength;
  WORD Reserved;
  GUID ReparseGuid;
  struct
  { BYTE DataBuffer[1];
  } GenericReparseBuffer;
} REPARSE_GUID_DATA_BUFFER, *PREPARSE_GUID_DATA_BUFFER;

typedef struct _REPARSE_POINT_INFORMATION
{ WORD ReparseDataLength;
  WORD UnparsedNameLength;
} REPARSE_POINT_INFORMATION, *PREPARSE_POINT_INFORMATION;


typedef union _FILE_SEGMENT_ELEMENT
{ PVOID64 Buffer;
  ULONGLONG Alignment;
} FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT;
# 3686 "c:\\mingw\\include\\winnt.h" 3
typedef enum _JOBOBJECTINFOCLASS
{ JobObjectBasicAccountingInformation = 1,
  JobObjectBasicLimitInformation,
  JobObjectBasicProcessIdList,
  JobObjectBasicUIRestrictions,
  JobObjectSecurityLimitInformation,
  JobObjectEndOfJobTimeInformation,
  JobObjectAssociateCompletionPortInformation,
  JobObjectBasicAndIoAccountingInformation,
  JobObjectExtendedLimitInformation,
  JobObjectJobSetInformation,
  MaxJobObjectInfoClass
} JOBOBJECTINFOCLASS;

typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
{ LARGE_INTEGER TotalUserTime;
  LARGE_INTEGER TotalKernelTime;
  LARGE_INTEGER ThisPeriodTotalUserTime;
  LARGE_INTEGER ThisPeriodTotalKernelTime;
  DWORD TotalPageFaultCount;
  DWORD TotalProcesses;
  DWORD ActiveProcesses;
  DWORD TotalTerminatedProcesses;
} JOBOBJECT_BASIC_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION
{ LARGE_INTEGER PerProcessUserTimeLimit;
  LARGE_INTEGER PerJobUserTimeLimit;
  DWORD LimitFlags;
  SIZE_T MinimumWorkingSetSize;
  SIZE_T MaximumWorkingSetSize;
  DWORD ActiveProcessLimit;
  ULONG_PTR Affinity;
  DWORD PriorityClass;
  DWORD SchedulingClass;
} JOBOBJECT_BASIC_LIMIT_INFORMATION, *PJOBOBJECT_BASIC_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST
{ DWORD NumberOfAssignedProcesses;
  DWORD NumberOfProcessIdsInList;
  ULONG_PTR ProcessIdList[1];
} JOBOBJECT_BASIC_PROCESS_ID_LIST, *PJOBOBJECT_BASIC_PROCESS_ID_LIST;

typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS
{ DWORD UIRestrictionsClass;
} JOBOBJECT_BASIC_UI_RESTRICTIONS, *PJOBOBJECT_BASIC_UI_RESTRICTIONS;

typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION
{ DWORD SecurityLimitFlags;
  HANDLE JobToken;
  PTOKEN_GROUPS SidsToDisable;
  PTOKEN_PRIVILEGES PrivilegesToDelete;
  PTOKEN_GROUPS RestrictedSids;
} JOBOBJECT_SECURITY_LIMIT_INFORMATION, *PJOBOBJECT_SECURITY_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION
{ DWORD EndOfJobTimeAction;
} JOBOBJECT_END_OF_JOB_TIME_INFORMATION, *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;

typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT
{ PVOID CompletionKey;
  HANDLE CompletionPort;
} JOBOBJECT_ASSOCIATE_COMPLETION_PORT, *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;

typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION
{ JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
  IO_COUNTERS IoInfo;
} JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION
{ JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
  IO_COUNTERS IoInfo;
  SIZE_T ProcessMemoryLimit;
  SIZE_T JobMemoryLimit;
  SIZE_T PeakProcessMemoryUsed;
  SIZE_T PeakJobMemoryUsed;
} JOBOBJECT_EXTENDED_LIMIT_INFORMATION, *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_JOBSET_INFORMATION
{ DWORD MemberLevel;
} JOBOBJECT_JOBSET_INFORMATION, *PJOBOBJECT_JOBSET_INFORMATION;



# 1 "c:\\mingw\\include\\pshpack4.h" 1 3

#pragma pack(push,4)
# 3771 "c:\\mingw\\include\\winnt.h" 2 3







typedef enum _LATENCY_TIME
{ LT_DONT_CARE,
  LT_LOWEST_LATENCY
} LATENCY_TIME, *PLATENCY_TIME;


typedef enum _SYSTEM_POWER_STATE
{ PowerSystemUnspecified,
  PowerSystemWorking,
  PowerSystemSleeping1,
  PowerSystemSleeping2,
  PowerSystemSleeping3,
  PowerSystemHibernate,
  PowerSystemShutdown,
  PowerSystemMaximum
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;


typedef enum
{ PowerActionNone,
  PowerActionReserved,
  PowerActionSleep,
  PowerActionHibernate,
  PowerActionShutdown,
  PowerActionShutdownReset,
  PowerActionShutdownOff,
  PowerActionWarmEject
} POWER_ACTION, *PPOWER_ACTION;
# 3818 "c:\\mingw\\include\\winnt.h" 3
typedef enum _DEVICE_POWER_STATE
{ PowerDeviceUnspecified,
  PowerDeviceD0,
  PowerDeviceD1,
  PowerDeviceD2,
  PowerDeviceD3,
  PowerDeviceMaximum
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;


typedef struct
{ DWORD Granularity;
  DWORD Capacity;
} BATTERY_REPORTING_SCALE, *PBATTERY_REPORTING_SCALE;


typedef struct _POWER_ACTION_POLICY
{ POWER_ACTION Action;
  ULONG Flags;
  ULONG EventCode;
} POWER_ACTION_POLICY, *PPOWER_ACTION_POLICY;
# 3867 "c:\\mingw\\include\\winnt.h" 3
typedef struct _SYSTEM_POWER_LEVEL
{ BOOLEAN Enable;
  UCHAR Spare[3];
  ULONG BatteryLevel;
  POWER_ACTION_POLICY PowerPolicy;
  SYSTEM_POWER_STATE MinSystemState;
} SYSTEM_POWER_LEVEL, *PSYSTEM_POWER_LEVEL;

typedef struct _SYSTEM_POWER_POLICY
{ ULONG Revision;
  POWER_ACTION_POLICY PowerButton;
  POWER_ACTION_POLICY SleepButton;
  POWER_ACTION_POLICY LidClose;
  SYSTEM_POWER_STATE LidOpenWake;
  ULONG Reserved;
  POWER_ACTION_POLICY Idle;
  ULONG IdleTimeout;
  UCHAR IdleSensitivity;
  UCHAR DynamicThrottle;
  UCHAR Spare2[2];
  SYSTEM_POWER_STATE MinSleep;
  SYSTEM_POWER_STATE MaxSleep;
  SYSTEM_POWER_STATE ReducedLatencySleep;
  ULONG WinLogonFlags;
  ULONG Spare3;
  ULONG DozeS4Timeout;
  ULONG BroadcastCapacityResolution;
  SYSTEM_POWER_LEVEL DischargePolicy[4];
  ULONG VideoTimeout;
  BOOLEAN VideoDimDisplay;
  ULONG VideoReserved[3];
  ULONG SpindownTimeout;
  BOOLEAN OptimizeForPower;
  UCHAR FanThrottleTolerance;
  UCHAR ForcedThrottle;
  UCHAR MinThrottle;
  POWER_ACTION_POLICY OverThrottled;
} SYSTEM_POWER_POLICY, *PSYSTEM_POWER_POLICY;


typedef struct _SYSTEM_POWER_CAPABILITIES
{ BOOLEAN PowerButtonPresent;
  BOOLEAN SleepButtonPresent;
  BOOLEAN LidPresent;
  BOOLEAN SystemS1;
  BOOLEAN SystemS2;
  BOOLEAN SystemS3;
  BOOLEAN SystemS4;
  BOOLEAN SystemS5;
  BOOLEAN HiberFilePresent;
  BOOLEAN FullWake;
  BOOLEAN VideoDimPresent;
  BOOLEAN ApmPresent;
  BOOLEAN UpsPresent;
  BOOLEAN ThermalControl;
  BOOLEAN ProcessorThrottle;
  UCHAR ProcessorMinThrottle;
  UCHAR ProcessorMaxThrottle;
  BOOLEAN FastSystemS4;
  UCHAR spare2[3];
  BOOLEAN DiskSpinDown;
  UCHAR spare3[8];
  BOOLEAN SystemBatteriesPresent;
  BOOLEAN BatteriesAreShortTerm;
  BATTERY_REPORTING_SCALE BatteryScale[3];
  SYSTEM_POWER_STATE AcOnLineWake;
  SYSTEM_POWER_STATE SoftLidWake;
  SYSTEM_POWER_STATE RtcWake;
  SYSTEM_POWER_STATE MinDeviceWakeState;
  SYSTEM_POWER_STATE DefaultLowLatencyWake;
} SYSTEM_POWER_CAPABILITIES, *PSYSTEM_POWER_CAPABILITIES;


typedef struct _SYSTEM_BATTERY_STATE
{ BOOLEAN AcOnLine;
  BOOLEAN BatteryPresent;
  BOOLEAN Charging;
  BOOLEAN Discharging;
  BOOLEAN Spare1[4];
  ULONG MaxCapacity;
  ULONG RemainingCapacity;
  ULONG Rate;
  ULONG EstimatedTime;
  ULONG DefaultAlert1;
  ULONG DefaultAlert2;
} SYSTEM_BATTERY_STATE, *PSYSTEM_BATTERY_STATE;


typedef enum _POWER_INFORMATION_LEVEL
{ SystemPowerPolicyAc,
  SystemPowerPolicyDc,
  VerifySystemPolicyAc,
  VerifySystemPolicyDc,
  SystemPowerCapabilities,
  SystemBatteryState,
  SystemPowerStateHandler,
  ProcessorStateHandler,
  SystemPowerPolicyCurrent,
  AdministratorPowerPolicy,
  SystemReserveHiberFile,
  ProcessorInformation,
  SystemPowerInformation,
  ProcessorStateHandler2,
  LastWakeTime,
  LastSleepTime,
  SystemExecutionState,
  SystemPowerStateNotifyHandler,
  ProcessorPowerPolicyAc,
  ProcessorPowerPolicyDc,
  VerifyProcessorPowerPolicyAc,
  VerifyProcessorPowerPolicyDc,
  ProcessorPowerPolicyCurrent
} POWER_INFORMATION_LEVEL;


typedef LONG (__attribute__((__stdcall__)) *PVECTORED_EXCEPTION_HANDLER)(PEXCEPTION_POINTERS);



typedef struct _SYSTEM_POWER_INFORMATION
{ ULONG MaxIdlenessAllowed;
  ULONG Idleness;
  ULONG TimeRemaining;
  UCHAR CoolingMode;
} SYSTEM_POWER_INFORMATION, *PSYSTEM_POWER_INFORMATION;
# 4061 "c:\\mingw\\include\\winnt.h" 3
typedef struct _PROCESSOR_POWER_POLICY_INFO
{ ULONG TimeCheck;
  ULONG DemoteLimit;
  ULONG PromoteLimit;
  UCHAR DemotePercent;
  UCHAR PromotePercent;
  UCHAR Spare[2];
  ULONG AllowDemotion : 1;
  ULONG AllowPromotion : 1;
  ULONG Reserved : 30;
} PROCESSOR_POWER_POLICY_INFO, *PPROCESSOR_POWER_POLICY_INFO;

typedef struct _PROCESSOR_POWER_POLICY
{ ULONG Revision;
  UCHAR DynamicThrottle;
  UCHAR Spare[3];
  ULONG Reserved;
  ULONG PolicyCount;
  PROCESSOR_POWER_POLICY_INFO Policy[3];
} PROCESSOR_POWER_POLICY, *PPROCESSOR_POWER_POLICY;

typedef struct _ADMINISTRATOR_POWER_POLICY
{ SYSTEM_POWER_STATE MinSleep;
  SYSTEM_POWER_STATE MaxSleep;
  ULONG MinVideoTimeout;
  ULONG MaxVideoTimeout;
  ULONG MinSpindownTimeout;
  ULONG MaxSpindownTimeout;
} ADMINISTRATOR_POWER_POLICY, *PADMINISTRATOR_POWER_POLICY;
# 1 "c:\\mingw\\include\\poppack.h" 1 3

#pragma pack(pop)
# 4091 "c:\\mingw\\include\\winnt.h" 2 3



typedef void (__attribute__((__stdcall__)) *WAITORTIMERCALLBACKFUNC)(PVOID,BOOLEAN);






typedef OSVERSIONINFOA OSVERSIONINFO, *POSVERSIONINFO, *LPOSVERSIONINFO;
typedef OSVERSIONINFOEXA OSVERSIONINFOEX, *POSVERSIONINFOEX, *LPOSVERSIONINFOEX;



ULONGLONG __attribute__((__stdcall__)) VerSetConditionMask(ULONGLONG,DWORD,BYTE);
# 4142 "c:\\mingw\\include\\winnt.h" 3
static __inline__ PVOID GetCurrentFiber (void)
{
  void *ret;
  __asm__ __volatile__ (
      "mov{%z0}\t{%%" "fs:0x10" ", %0|%0," "fs:0x10" "}"
      : "=a" (ret)
    );
  return ret;
}

static __inline__ PVOID GetFiberData (void)
{
  void *ret;
  __asm__ __volatile__ (
      "mov{%z0}\t{%%" "fs:0x10" ", %0|%0, " "fs:0x10" "}\n\t"
      "mov{%z0}\t{(%0), %0|%0, [%0]}"
      : "=r" (ret)
    );
  return ret;
}

static __inline__ struct _TEB *NtCurrentTeb (void)
{
  struct _TEB *ret;
  __asm__ __volatile__ (
      "mov{%z0}\t{%%" "fs:0x18" ", %0|%0, " "fs:0x18" "}"
      : "=a" (ret)
      :
    );
  return ret;
}
# 4324 "c:\\mingw\\include\\winnt.h" 3
static __inline__ __attribute__((__always_inline__)) void MemoryBarrier (void)
{ __atomic_thread_fence(5); }
# 4334 "c:\\mingw\\include\\winnt.h" 3
}
# 270 "c:\\mingw\\include\\windef.h" 2 3

typedef UINT_PTR WPARAM;
typedef LONG_PTR LPARAM;
typedef LONG_PTR LRESULT;

typedef LONG HRESULT;



typedef WORD ATOM;

typedef HANDLE HHOOK;
typedef HANDLE HGLOBAL;
typedef HANDLE HLOCAL;
typedef HANDLE GLOBALHANDLE;
typedef HANDLE LOCALHANDLE;
typedef void *HGDIOBJ;
typedef struct HACCEL__{int i;}*HACCEL;
typedef struct HBITMAP__{int i;}*HBITMAP;
typedef struct HBRUSH__{int i;}*HBRUSH;
typedef struct HCOLORSPACE__{int i;}*HCOLORSPACE;
typedef struct HDC__{int i;}*HDC;
typedef struct HGLRC__{int i;}*HGLRC;
typedef struct HDESK__{int i;}*HDESK;
typedef struct HENHMETAFILE__{int i;}*HENHMETAFILE;
typedef struct HFONT__{int i;}*HFONT;
typedef struct HICON__{int i;}*HICON;
typedef struct HKEY__{int i;}*HKEY;

typedef struct HMONITOR__{int i;}*HMONITOR;

typedef struct HTERMINAL__{int i;}*HTERMINAL;
typedef struct HWINEVENTHOOK__{int i;}*HWINEVENTHOOK;

typedef HKEY *PHKEY;
typedef struct HMENU__{int i;}*HMENU;
typedef struct HMETAFILE__{int i;}*HMETAFILE;
typedef struct HINSTANCE__{int i;}*HINSTANCE;
typedef HINSTANCE HMODULE;
typedef struct HPALETTE__{int i;}*HPALETTE;
typedef struct HPEN__{int i;}*HPEN;
typedef struct HRGN__{int i;}*HRGN;
typedef struct HRSRC__{int i;}*HRSRC;
typedef struct HSTR__{int i;}*HSTR;
typedef struct HTASK__{int i;}*HTASK;
typedef struct HWND__{int i;}*HWND;
typedef struct HWINSTA__{int i;}*HWINSTA;
typedef struct HKL__{int i;}*HKL;
typedef int HFILE;
typedef HICON HCURSOR;
typedef DWORD COLORREF;
typedef int (__attribute__((__stdcall__)) *FARPROC)();
typedef int (__attribute__((__stdcall__)) *NEARPROC)();
typedef int (__attribute__((__stdcall__)) *PROC)();
typedef struct tagRECT {
 LONG left;
 LONG top;
 LONG right;
 LONG bottom;
} RECT,*PRECT,*LPRECT;
typedef const RECT *LPCRECT;
typedef struct tagRECTL {
 LONG left;
 LONG top;
 LONG right;
 LONG bottom;
} RECTL,*PRECTL,*LPRECTL;
typedef const RECTL *LPCRECTL;
typedef struct tagPOINT {
 LONG x;
 LONG y;
} POINT,POINTL,*PPOINT,*LPPOINT,*PPOINTL,*LPPOINTL;
typedef struct tagSIZE {
 LONG cx;
 LONG cy;
} SIZE,SIZEL,*PSIZE,*LPSIZE,*PSIZEL,*LPSIZEL;
typedef struct tagPOINTS {
 SHORT x;
 SHORT y;
} POINTS,*PPOINTS,*LPPOINTS;

}
# 43 "c:\\mingw\\include\\windows.h" 2 3
# 1 "c:\\mingw\\include\\wincon.h" 1 3
# 34 "c:\\mingw\\include\\wincon.h" 3
       
# 35 "c:\\mingw\\include\\wincon.h" 3
# 49 "c:\\mingw\\include\\wincon.h" 3
extern "C" {
# 116 "c:\\mingw\\include\\wincon.h" 3
typedef
struct _CHAR_INFO
{ union
  { WCHAR UnicodeChar;
    CHAR AsciiChar;
  } Char;
  WORD Attributes;
} CHAR_INFO, *PCHAR_INFO;

typedef
struct _SMALL_RECT
{ SHORT Left;
  SHORT Top;
  SHORT Right;
  SHORT Bottom;
} SMALL_RECT, *PSMALL_RECT;

typedef
struct _CONSOLE_CURSOR_INFO
{ DWORD dwSize;
  BOOL bVisible;
} CONSOLE_CURSOR_INFO, *PCONSOLE_CURSOR_INFO;

typedef
struct _COORD
{ SHORT X;
  SHORT Y;
} COORD, *PCOORD;

typedef
struct _CONSOLE_SCREEN_BUFFER_INFO
{ COORD dwSize;
  COORD dwCursorPosition;
  WORD wAttributes;
  SMALL_RECT srWindow;
  COORD dwMaximumWindowSize;
} CONSOLE_SCREEN_BUFFER_INFO, *PCONSOLE_SCREEN_BUFFER_INFO;

typedef BOOL (__attribute__((__stdcall__)) *PHANDLER_ROUTINE)(DWORD);

typedef
struct _KEY_EVENT_RECORD





{ BOOL bKeyDown;
  WORD wRepeatCount;
  WORD wVirtualKeyCode;
  WORD wVirtualScanCode;
  union
  { WCHAR UnicodeChar;
    CHAR AsciiChar;
  } uChar;
  DWORD dwControlKeyState;
} __attribute__((packed)) KEY_EVENT_RECORD;

typedef
struct _MOUSE_EVENT_RECORD
{ COORD dwMousePosition;
  DWORD dwButtonState;
  DWORD dwControlKeyState;
  DWORD dwEventFlags;
} MOUSE_EVENT_RECORD;

typedef
struct _WINDOW_BUFFER_SIZE_RECORD
{ COORD dwSize;
} WINDOW_BUFFER_SIZE_RECORD;

typedef
struct _MENU_EVENT_RECORD
{ UINT dwCommandId;
} MENU_EVENT_RECORD, *PMENU_EVENT_RECORD;

typedef
struct _FOCUS_EVENT_RECORD
{ BOOL bSetFocus;
} FOCUS_EVENT_RECORD;

typedef
struct _INPUT_RECORD
{ WORD EventType;
  union
  { KEY_EVENT_RECORD KeyEvent;
    MOUSE_EVENT_RECORD MouseEvent;
    WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
    MENU_EVENT_RECORD MenuEvent;
    FOCUS_EVENT_RECORD FocusEvent;
  } Event;
} INPUT_RECORD, *PINPUT_RECORD;

__attribute__((__stdcall__)) BOOL AllocConsole (void);
__attribute__((__stdcall__)) HANDLE CreateConsoleScreenBuffer (DWORD, DWORD, const SECURITY_ATTRIBUTES *, DWORD, LPVOID);
__attribute__((__stdcall__)) BOOL FillConsoleOutputAttribute (HANDLE, WORD, DWORD, COORD, PDWORD);


__attribute__((__stdcall__)) BOOL FillConsoleOutputCharacterA (HANDLE, CHAR, DWORD, COORD, PDWORD);
__attribute__((__stdcall__)) BOOL FillConsoleOutputCharacterW (HANDLE, WCHAR, DWORD, COORD, PDWORD);

__attribute__((__stdcall__)) BOOL FlushConsoleInputBuffer (HANDLE);
__attribute__((__stdcall__)) BOOL FreeConsole (void);
__attribute__((__stdcall__)) BOOL GenerateConsoleCtrlEvent (DWORD, DWORD);


__attribute__((__stdcall__)) DWORD GetConsoleAliasA (LPSTR, LPSTR, DWORD, LPSTR);
__attribute__((__stdcall__)) DWORD GetConsoleAliasW (LPWSTR, LPWSTR, DWORD, LPWSTR);

__attribute__((__stdcall__)) UINT GetConsoleCP (void);
__attribute__((__stdcall__)) BOOL GetConsoleCursorInfo (HANDLE, PCONSOLE_CURSOR_INFO);
__attribute__((__stdcall__)) BOOL GetConsoleMode (HANDLE, PDWORD);
__attribute__((__stdcall__)) UINT GetConsoleOutputCP (void);
__attribute__((__stdcall__)) BOOL GetConsoleScreenBufferInfo (HANDLE, PCONSOLE_SCREEN_BUFFER_INFO);


__attribute__((__stdcall__)) DWORD GetConsoleTitleA (LPSTR, DWORD);
__attribute__((__stdcall__)) DWORD GetConsoleTitleW (LPWSTR, DWORD);

__attribute__((__stdcall__)) COORD GetLargestConsoleWindowSize (HANDLE);
__attribute__((__stdcall__)) BOOL GetNumberOfConsoleInputEvents (HANDLE, PDWORD);
__attribute__((__stdcall__)) BOOL GetNumberOfConsoleMouseButtons (PDWORD);
__attribute__((__stdcall__)) BOOL HandlerRoutine (DWORD);


__attribute__((__stdcall__)) BOOL PeekConsoleInputA (HANDLE, PINPUT_RECORD, DWORD, PDWORD);
__attribute__((__stdcall__)) BOOL PeekConsoleInputW (HANDLE, PINPUT_RECORD, DWORD, PDWORD);


__attribute__((__stdcall__)) BOOL ReadConsoleA (HANDLE, PVOID, DWORD, PDWORD, PVOID);
__attribute__((__stdcall__)) BOOL ReadConsoleW (HANDLE, PVOID, DWORD, PDWORD, PVOID);


__attribute__((__stdcall__)) BOOL ReadConsoleInputA (HANDLE, PINPUT_RECORD, DWORD, PDWORD);
__attribute__((__stdcall__)) BOOL ReadConsoleInputW (HANDLE, PINPUT_RECORD, DWORD, PDWORD);

__attribute__((__stdcall__)) BOOL ReadConsoleOutputAttribute (HANDLE, LPWORD, DWORD, COORD, LPDWORD);


__attribute__((__stdcall__)) BOOL ReadConsoleOutputCharacterA (HANDLE, LPSTR, DWORD, COORD, PDWORD);
__attribute__((__stdcall__)) BOOL ReadConsoleOutputCharacterW (HANDLE, LPWSTR, DWORD, COORD, PDWORD);


__attribute__((__stdcall__)) BOOL ReadConsoleOutputA (HANDLE, PCHAR_INFO, COORD, COORD, PSMALL_RECT);
__attribute__((__stdcall__)) BOOL ReadConsoleOutputW (HANDLE, PCHAR_INFO, COORD, COORD, PSMALL_RECT);


__attribute__((__stdcall__)) BOOL ScrollConsoleScreenBufferA
(HANDLE, const SMALL_RECT *, const SMALL_RECT *, COORD, const CHAR_INFO *);
__attribute__((__stdcall__)) BOOL ScrollConsoleScreenBufferW
(HANDLE, const SMALL_RECT *, const SMALL_RECT *, COORD, const CHAR_INFO *);

__attribute__((__stdcall__)) BOOL SetConsoleActiveScreenBuffer (HANDLE);
__attribute__((__stdcall__)) BOOL SetConsoleCP (UINT);
__attribute__((__stdcall__)) BOOL SetConsoleCtrlHandler (PHANDLER_ROUTINE, BOOL);
__attribute__((__stdcall__)) BOOL SetConsoleCursorInfo (HANDLE, const CONSOLE_CURSOR_INFO *);
__attribute__((__stdcall__)) BOOL SetConsoleCursorPosition (HANDLE, COORD);
__attribute__((__stdcall__)) BOOL SetConsoleMode (HANDLE, DWORD);
__attribute__((__stdcall__)) BOOL SetConsoleOutputCP (UINT);
__attribute__((__stdcall__)) BOOL SetConsoleScreenBufferSize (HANDLE, COORD);
__attribute__((__stdcall__)) BOOL SetConsoleTextAttribute (HANDLE, WORD);


__attribute__((__stdcall__)) BOOL SetConsoleTitleA (LPCSTR);
__attribute__((__stdcall__)) BOOL SetConsoleTitleW (LPCWSTR);

__attribute__((__stdcall__)) BOOL SetConsoleWindowInfo (HANDLE, BOOL, const SMALL_RECT *);


__attribute__((__stdcall__)) BOOL WriteConsoleA (HANDLE, PCVOID, DWORD, PDWORD, PVOID);
__attribute__((__stdcall__)) BOOL WriteConsoleW (HANDLE, PCVOID, DWORD, PDWORD, PVOID);


__attribute__((__stdcall__)) BOOL WriteConsoleInputA (HANDLE, const INPUT_RECORD *, DWORD, PDWORD);
__attribute__((__stdcall__)) BOOL WriteConsoleInputW (HANDLE, const INPUT_RECORD *, DWORD, PDWORD);


__attribute__((__stdcall__)) BOOL WriteConsoleOutputA (HANDLE, const CHAR_INFO *, COORD, COORD, PSMALL_RECT);
__attribute__((__stdcall__)) BOOL WriteConsoleOutputW (HANDLE, const CHAR_INFO *, COORD, COORD, PSMALL_RECT);

__attribute__((__stdcall__)) BOOL WriteConsoleOutputAttribute (HANDLE, const WORD *, DWORD, COORD, PDWORD);


__attribute__((__stdcall__)) BOOL WriteConsoleOutputCharacterA (HANDLE, LPCSTR, DWORD, COORD, PDWORD);
__attribute__((__stdcall__)) BOOL WriteConsoleOutputCharacterW (HANDLE, LPCWSTR, DWORD, COORD, PDWORD);






__attribute__((__stdcall__)) BOOL GetConsoleDisplayMode (LPDWORD);
__attribute__((__stdcall__)) COORD GetConsoleFontSize (HANDLE, DWORD);
__attribute__((__stdcall__)) HWND GetConsoleWindow (void);
# 422 "c:\\mingw\\include\\wincon.h" 3
}
# 44 "c:\\mingw\\include\\windows.h" 2 3
# 1 "c:\\mingw\\include\\winbase.h" 1 3
# 33 "c:\\mingw\\include\\winbase.h" 3
       
# 34 "c:\\mingw\\include\\winbase.h" 3
# 64 "c:\\mingw\\include\\winbase.h" 3
extern "C" {
# 759 "c:\\mingw\\include\\winbase.h" 3
typedef struct _FILETIME
{ DWORD dwLowDateTime;
  DWORD dwHighDateTime;
} FILETIME, *PFILETIME, *LPFILETIME;

typedef struct _BY_HANDLE_FILE_INFORMATION
{ DWORD dwFileAttributes;
  FILETIME ftCreationTime;
  FILETIME ftLastAccessTime;
  FILETIME ftLastWriteTime;
  DWORD dwVolumeSerialNumber;
  DWORD nFileSizeHigh;
  DWORD nFileSizeLow;
  DWORD nNumberOfLinks;
  DWORD nFileIndexHigh;
  DWORD nFileIndexLow;
} BY_HANDLE_FILE_INFORMATION, *LPBY_HANDLE_FILE_INFORMATION;

typedef struct _DCB
{ DWORD DCBlength;
  DWORD BaudRate;
  DWORD fBinary:1;
  DWORD fParity:1;
  DWORD fOutxCtsFlow:1;
  DWORD fOutxDsrFlow:1;
  DWORD fDtrControl:2;
  DWORD fDsrSensitivity:1;
  DWORD fTXContinueOnXoff:1;
  DWORD fOutX:1;
  DWORD fInX:1;
  DWORD fErrorChar:1;
  DWORD fNull:1;
  DWORD fRtsControl:2;
  DWORD fAbortOnError:1;
  DWORD fDummy2:17;
  WORD wReserved;
  WORD XonLim;
  WORD XoffLim;
  BYTE ByteSize;
  BYTE Parity;
  BYTE StopBits;
  char XonChar;
  char XoffChar;
  char ErrorChar;
  char EofChar;
  char EvtChar;
  WORD wReserved1;
} DCB, *LPDCB;

typedef struct _COMM_CONFIG
{ DWORD dwSize;
  WORD wVersion;
  WORD wReserved;
  DCB dcb;
  DWORD dwProviderSubType;
  DWORD dwProviderOffset;
  DWORD dwProviderSize;
  WCHAR wcProviderData[1];
} COMMCONFIG, *LPCOMMCONFIG;

typedef struct _COMMPROP
{ WORD wPacketLength;
  WORD wPacketVersion;
  DWORD dwServiceMask;
  DWORD dwReserved1;
  DWORD dwMaxTxQueue;
  DWORD dwMaxRxQueue;
  DWORD dwMaxBaud;
  DWORD dwProvSubType;
  DWORD dwProvCapabilities;
  DWORD dwSettableParams;
  DWORD dwSettableBaud;
  WORD wSettableData;
  WORD wSettableStopParity;
  DWORD dwCurrentTxQueue;
  DWORD dwCurrentRxQueue;
  DWORD dwProvSpec1;
  DWORD dwProvSpec2;
  WCHAR wcProvChar[1];
} COMMPROP, *LPCOMMPROP;

typedef struct _COMMTIMEOUTS
{ DWORD ReadIntervalTimeout;
  DWORD ReadTotalTimeoutMultiplier;
  DWORD ReadTotalTimeoutConstant;
  DWORD WriteTotalTimeoutMultiplier;
  DWORD WriteTotalTimeoutConstant;
} COMMTIMEOUTS, *LPCOMMTIMEOUTS;

typedef struct _COMSTAT
{ DWORD fCtsHold:1;
  DWORD fDsrHold:1;
  DWORD fRlsdHold:1;
  DWORD fXoffHold:1;
  DWORD fXoffSent:1;
  DWORD fEof:1;
  DWORD fTxim:1;
  DWORD fReserved:25;
  DWORD cbInQue;
  DWORD cbOutQue;
} COMSTAT, *LPCOMSTAT;

typedef DWORD (__attribute__((__stdcall__)) *LPTHREAD_START_ROUTINE)(LPVOID);

typedef struct _CREATE_PROCESS_DEBUG_INFO
{ HANDLE hFile;
  HANDLE hProcess;
  HANDLE hThread;
  LPVOID lpBaseOfImage;
  DWORD dwDebugInfoFileOffset;
  DWORD nDebugInfoSize;
  LPVOID lpThreadLocalBase;
  LPTHREAD_START_ROUTINE lpStartAddress;
  LPVOID lpImageName;
  WORD fUnicode;
} CREATE_PROCESS_DEBUG_INFO, *LPCREATE_PROCESS_DEBUG_INFO;

typedef struct _CREATE_THREAD_DEBUG_INFO
{ HANDLE hThread;
  LPVOID lpThreadLocalBase;
  LPTHREAD_START_ROUTINE lpStartAddress;
} CREATE_THREAD_DEBUG_INFO, *LPCREATE_THREAD_DEBUG_INFO;

typedef struct _EXCEPTION_DEBUG_INFO
{ EXCEPTION_RECORD ExceptionRecord;
  DWORD dwFirstChance;
} EXCEPTION_DEBUG_INFO, *LPEXCEPTION_DEBUG_INFO;

typedef struct _EXIT_THREAD_DEBUG_INFO
{ DWORD dwExitCode;
} EXIT_THREAD_DEBUG_INFO, *LPEXIT_THREAD_DEBUG_INFO;

typedef struct _EXIT_PROCESS_DEBUG_INFO
{ DWORD dwExitCode;
} EXIT_PROCESS_DEBUG_INFO, *LPEXIT_PROCESS_DEBUG_INFO;

typedef struct _LOAD_DLL_DEBUG_INFO
{ HANDLE hFile;
  LPVOID lpBaseOfDll;
  DWORD dwDebugInfoFileOffset;
  DWORD nDebugInfoSize;
  LPVOID lpImageName;
  WORD fUnicode;
} LOAD_DLL_DEBUG_INFO, *LPLOAD_DLL_DEBUG_INFO;

typedef struct _UNLOAD_DLL_DEBUG_INFO
{ LPVOID lpBaseOfDll;
} UNLOAD_DLL_DEBUG_INFO, *LPUNLOAD_DLL_DEBUG_INFO;

typedef struct _OUTPUT_DEBUG_STRING_INFO
{ LPSTR lpDebugStringData;
  WORD fUnicode;
  WORD nDebugStringLength;
} OUTPUT_DEBUG_STRING_INFO, *LPOUTPUT_DEBUG_STRING_INFO;

typedef struct _RIP_INFO
{ DWORD dwError;
  DWORD dwType;
} RIP_INFO, *LPRIP_INFO;

typedef struct _DEBUG_EVENT
{ DWORD dwDebugEventCode;
  DWORD dwProcessId;
  DWORD dwThreadId;
  union
  { EXCEPTION_DEBUG_INFO Exception;
    CREATE_THREAD_DEBUG_INFO CreateThread;
    CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
    EXIT_THREAD_DEBUG_INFO ExitThread;
    EXIT_PROCESS_DEBUG_INFO ExitProcess;
    LOAD_DLL_DEBUG_INFO LoadDll;
    UNLOAD_DLL_DEBUG_INFO UnloadDll;
    OUTPUT_DEBUG_STRING_INFO DebugString;
    RIP_INFO RipInfo;
  } u;
} DEBUG_EVENT, *LPDEBUG_EVENT;

typedef struct _OVERLAPPED
{ ULONG_PTR Internal;
  ULONG_PTR InternalHigh;
  __extension__ union
  { __extension__ struct
    { DWORD Offset;
      DWORD OffsetHigh;
    };
    PVOID Pointer;
  };
  HANDLE hEvent;
} OVERLAPPED, *POVERLAPPED, *LPOVERLAPPED;

typedef struct _STARTUPINFOA
{ DWORD cb;
  LPSTR lpReserved;
  LPSTR lpDesktop;
  LPSTR lpTitle;
  DWORD dwX;
  DWORD dwY;
  DWORD dwXSize;
  DWORD dwYSize;
  DWORD dwXCountChars;
  DWORD dwYCountChars;
  DWORD dwFillAttribute;
  DWORD dwFlags;
  WORD wShowWindow;
  WORD cbReserved2;
  PBYTE lpReserved2;
  HANDLE hStdInput;
  HANDLE hStdOutput;
  HANDLE hStdError;
} STARTUPINFOA, *LPSTARTUPINFOA;

typedef struct _STARTUPINFOW
{ DWORD cb;
  LPWSTR lpReserved;
  LPWSTR lpDesktop;
  LPWSTR lpTitle;
  DWORD dwX;
  DWORD dwY;
  DWORD dwXSize;
  DWORD dwYSize;
  DWORD dwXCountChars;
  DWORD dwYCountChars;
  DWORD dwFillAttribute;
  DWORD dwFlags;
  WORD wShowWindow;
  WORD cbReserved2;
  PBYTE lpReserved2;
  HANDLE hStdInput;
  HANDLE hStdOutput;
  HANDLE hStdError;
} STARTUPINFOW, *LPSTARTUPINFOW;

typedef STARTUPINFOA STARTUPINFO, *LPSTARTUPINFO;

typedef struct _PROCESS_INFORMATION
{ HANDLE hProcess;
  HANDLE hThread;
  DWORD dwProcessId;
  DWORD dwThreadId;
} PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;

typedef struct _CRITICAL_SECTION_DEBUG
{ WORD Type;
  WORD CreatorBackTraceIndex;
  struct _CRITICAL_SECTION *CriticalSection;
  LIST_ENTRY ProcessLocksList;
  DWORD EntryCount;
  DWORD ContentionCount;
  DWORD Spare[2];
} CRITICAL_SECTION_DEBUG, *PCRITICAL_SECTION_DEBUG;

typedef struct _CRITICAL_SECTION
{ PCRITICAL_SECTION_DEBUG DebugInfo;
  LONG LockCount;
  LONG RecursionCount;
  HANDLE OwningThread;
  HANDLE LockSemaphore;
  DWORD SpinCount;
} CRITICAL_SECTION, *PCRITICAL_SECTION, *LPCRITICAL_SECTION;

typedef struct _SYSTEMTIME
{ WORD wYear;
  WORD wMonth;
  WORD wDayOfWeek;
  WORD wDay;
  WORD wHour;
  WORD wMinute;
  WORD wSecond;
  WORD wMilliseconds;
} SYSTEMTIME, *LPSYSTEMTIME;

typedef struct _WIN32_FILE_ATTRIBUTE_DATA
{ DWORD dwFileAttributes;
  FILETIME ftCreationTime;
  FILETIME ftLastAccessTime;
  FILETIME ftLastWriteTime;
  DWORD nFileSizeHigh;
  DWORD nFileSizeLow;
} WIN32_FILE_ATTRIBUTE_DATA, *LPWIN32_FILE_ATTRIBUTE_DATA;

typedef struct _WIN32_FIND_DATAA
{ DWORD dwFileAttributes;
  FILETIME ftCreationTime;
  FILETIME ftLastAccessTime;
  FILETIME ftLastWriteTime;
  DWORD nFileSizeHigh;
  DWORD nFileSizeLow;



  DWORD dwReserved0;
  DWORD dwReserved1;

  CHAR cFileName[260];

  CHAR cAlternateFileName[14];

} WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA;

typedef struct _WIN32_FIND_DATAW
{ DWORD dwFileAttributes;
  FILETIME ftCreationTime;
  FILETIME ftLastAccessTime;
  FILETIME ftLastWriteTime;
  DWORD nFileSizeHigh;
  DWORD nFileSizeLow;



  DWORD dwReserved0;
  DWORD dwReserved1;

  WCHAR cFileName[260];

  WCHAR cAlternateFileName[14];

} WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW;

typedef WIN32_FIND_DATAA WIN32_FIND_DATA, *PWIN32_FIND_DATA, *LPWIN32_FIND_DATA;

typedef struct _WIN32_STREAM_ID
{ DWORD dwStreamId;
  DWORD dwStreamAttributes;
  LARGE_INTEGER Size;
  DWORD dwStreamNameSize;
  WCHAR cStreamName[1];
} WIN32_STREAM_ID, *LPWIN32_STREAM_ID;

typedef enum _FINDEX_INFO_LEVELS
{ FindExInfoStandard,
  FindExInfoMaxInfoLevel
} FINDEX_INFO_LEVELS;

typedef enum _FINDEX_SEARCH_OPS
{ FindExSearchNameMatch,
  FindExSearchLimitToDirectories,
  FindExSearchLimitToDevices,
  FindExSearchMaxSearchOp
} FINDEX_SEARCH_OPS;

typedef enum _ACL_INFORMATION_CLASS
{ AclRevisionInformation=1,
  AclSizeInformation
} ACL_INFORMATION_CLASS;

typedef struct tagHW_PROFILE_INFOA
{ DWORD dwDockInfo;
  CHAR szHwProfileGuid[39];
  CHAR szHwProfileName[80];
} HW_PROFILE_INFOA, *LPHW_PROFILE_INFOA;

typedef struct tagHW_PROFILE_INFOW
{ DWORD dwDockInfo;
  WCHAR szHwProfileGuid[39];
  WCHAR szHwProfileName[80];
} HW_PROFILE_INFOW, *LPHW_PROFILE_INFOW;

typedef HW_PROFILE_INFOA HW_PROFILE_INFO, *LPHW_PROFILE_INFO;

typedef enum _GET_FILEEX_INFO_LEVELS
{ GetFileExInfoStandard,
  GetFileExMaxInfoLevel
} GET_FILEEX_INFO_LEVELS;

typedef struct _SYSTEM_INFO
{ __extension__ union
  { DWORD dwOemId;
    __extension__ struct
    { WORD wProcessorArchitecture;
      WORD wReserved;
    } ;
  } ;
  DWORD dwPageSize;
  PVOID lpMinimumApplicationAddress;
  PVOID lpMaximumApplicationAddress;
  DWORD dwActiveProcessorMask;
  DWORD dwNumberOfProcessors;
  DWORD dwProcessorType;
  DWORD dwAllocationGranularity;
  WORD wProcessorLevel;
  WORD wProcessorRevision;
} SYSTEM_INFO, *LPSYSTEM_INFO;

typedef struct _SYSTEM_POWER_STATUS
{ BYTE ACLineStatus;
  BYTE BatteryFlag;
  BYTE BatteryLifePercent;
  BYTE Reserved1;
  DWORD BatteryLifeTime;
  DWORD BatteryFullLifeTime;
} SYSTEM_POWER_STATUS, *LPSYSTEM_POWER_STATUS;

typedef struct _TIME_ZONE_INFORMATION
{ LONG Bias;
  WCHAR StandardName[32];
  SYSTEMTIME StandardDate;
  LONG StandardBias;
  WCHAR DaylightName[32];
  SYSTEMTIME DaylightDate;
  LONG DaylightBias;
} TIME_ZONE_INFORMATION, *LPTIME_ZONE_INFORMATION;

typedef struct _MEMORYSTATUS
{ DWORD dwLength;
  DWORD dwMemoryLoad;
  DWORD dwTotalPhys;
  DWORD dwAvailPhys;
  DWORD dwTotalPageFile;
  DWORD dwAvailPageFile;
  DWORD dwTotalVirtual;
  DWORD dwAvailVirtual;
} MEMORYSTATUS, *LPMEMORYSTATUS;

typedef struct _LDT_ENTRY
{ WORD LimitLow;
  WORD BaseLow;
  union
  { struct
    { BYTE BaseMid;
      BYTE Flags1;
      BYTE Flags2;
      BYTE BaseHi;
    } Bytes;
    struct
    { DWORD BaseMid:8;
      DWORD Type:5;
      DWORD Dpl:2;
      DWORD Pres:1;
      DWORD LimitHi:4;
      DWORD Sys:1;
      DWORD Reserved_0:1;
      DWORD Default_Big:1;
      DWORD Granularity:1;
      DWORD BaseHi:8;
    } Bits;
  } HighWord;
} LDT_ENTRY, *PLDT_ENTRY, *LPLDT_ENTRY;

typedef struct _PROCESS_HEAP_ENTRY
{ PVOID lpData;
  DWORD cbData;
  BYTE cbOverhead;
  BYTE iRegionIndex;
  WORD wFlags;
  __extension__ union
  { struct
    { HANDLE hMem;
      DWORD dwReserved[3];
    } Block;
    struct
    { DWORD dwCommittedSize;
      DWORD dwUnCommittedSize;
      LPVOID lpFirstBlock;
      LPVOID lpLastBlock;
    } Region;
  } ;
} PROCESS_HEAP_ENTRY, *LPPROCESS_HEAP_ENTRY;

typedef struct _OFSTRUCT
{ BYTE cBytes;
  BYTE fFixedDisk;
  WORD nErrCode;
  WORD Reserved1;
  WORD Reserved2;
  CHAR szPathName[128];
} OFSTRUCT, *LPOFSTRUCT, *POFSTRUCT;

typedef struct _WIN_CERTIFICATE
{ DWORD dwLength;
  WORD wRevision;
  WORD wCertificateType;
  BYTE bCertificate[1];
} WIN_CERTIFICATE, *LPWIN_CERTIFICATE;

typedef DWORD (__attribute__((__stdcall__)) *LPPROGRESS_ROUTINE)
( LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER,
  DWORD, DWORD, HANDLE, HANDLE, LPVOID
);
typedef void (__attribute__((__stdcall__)) *LPFIBER_START_ROUTINE)(PVOID);


typedef BOOL (__attribute__((__stdcall__)) *ENUMRESLANGPROCA)(HMODULE, LPCSTR, LPCSTR, WORD, LONG);
typedef BOOL (__attribute__((__stdcall__)) *ENUMRESLANGPROCW)
(HMODULE, LPCWSTR, LPCWSTR, WORD, LONG);


typedef BOOL (__attribute__((__stdcall__)) *ENUMRESNAMEPROCA)(HMODULE, LPCSTR, LPSTR, LONG);
typedef BOOL (__attribute__((__stdcall__)) *ENUMRESNAMEPROCW)(HMODULE, LPCWSTR, LPWSTR, LONG);


typedef BOOL (__attribute__((__stdcall__)) *ENUMRESTYPEPROCA)(HMODULE, LPSTR, LONG);
typedef BOOL (__attribute__((__stdcall__)) *ENUMRESTYPEPROCW)(HMODULE, LPWSTR, LONG);

typedef void (__attribute__((__stdcall__)) *LPOVERLAPPED_COMPLETION_ROUTINE)
(DWORD, DWORD, LPOVERLAPPED);
typedef LONG (__attribute__((__stdcall__)) *PTOP_LEVEL_EXCEPTION_FILTER)(LPEXCEPTION_POINTERS);
typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;
typedef void (__attribute__((__stdcall__)) *PAPCFUNC)(ULONG_PTR);
typedef void (__attribute__((__stdcall__)) *PTIMERAPCROUTINE)(PVOID, DWORD, DWORD);





int __attribute__((__stdcall__)) WinMain (HINSTANCE, HINSTANCE, LPSTR, int);




int __attribute__((__stdcall__)) wWinMain (HINSTANCE, HINSTANCE, LPWSTR, int);

 long __attribute__((__stdcall__)) _hread (HFILE, LPVOID, long);
 long __attribute__((__stdcall__)) _hwrite (HFILE, LPCSTR, long);
 HFILE __attribute__((__stdcall__)) _lclose (HFILE);
 HFILE __attribute__((__stdcall__)) _lcreat (LPCSTR, int);
 LONG __attribute__((__stdcall__)) _llseek (HFILE, LONG, int);
 HFILE __attribute__((__stdcall__)) _lopen (LPCSTR, int);
 UINT __attribute__((__stdcall__)) _lread (HFILE, LPVOID, UINT);
 UINT __attribute__((__stdcall__)) _lwrite (HFILE, LPCSTR, UINT);



 BOOL __attribute__((__stdcall__)) AccessCheck
( PSECURITY_DESCRIPTOR, HANDLE, DWORD, PGENERIC_MAPPING, PPRIVILEGE_SET,
  PDWORD, PDWORD, PBOOL
);


 BOOL __attribute__((__stdcall__)) AccessCheckAndAuditAlarmA
( LPCSTR, LPVOID, LPSTR, LPSTR, PSECURITY_DESCRIPTOR, DWORD, PGENERIC_MAPPING,
  BOOL, PDWORD, PBOOL, PBOOL
);
 BOOL __attribute__((__stdcall__)) AccessCheckAndAuditAlarmW
( LPCWSTR, LPVOID, LPWSTR, LPWSTR, PSECURITY_DESCRIPTOR, DWORD,
  PGENERIC_MAPPING, BOOL, PDWORD, PBOOL, PBOOL
);

 BOOL __attribute__((__stdcall__)) AddAccessAllowedAce (PACL, DWORD, DWORD, PSID);
 BOOL __attribute__((__stdcall__)) AddAccessDeniedAce (PACL, DWORD, DWORD, PSID);
 BOOL __attribute__((__stdcall__)) AddAce (PACL, DWORD, DWORD, PVOID, DWORD);


 ATOM __attribute__((__stdcall__)) AddAtomA (LPCSTR);
 ATOM __attribute__((__stdcall__)) AddAtomW (LPCWSTR);

 BOOL __attribute__((__stdcall__)) AddAuditAccessAce (PACL, DWORD, DWORD, PSID, BOOL, BOOL);
 BOOL __attribute__((__stdcall__)) AdjustTokenGroups
(HANDLE, BOOL, PTOKEN_GROUPS, DWORD, PTOKEN_GROUPS, PDWORD);
 BOOL __attribute__((__stdcall__)) AdjustTokenPrivileges
(HANDLE, BOOL, PTOKEN_PRIVILEGES, DWORD, PTOKEN_PRIVILEGES, PDWORD);
 BOOL __attribute__((__stdcall__)) AllocateAndInitializeSid
( PSID_IDENTIFIER_AUTHORITY, BYTE, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD,
  DWORD, DWORD, PSID *
);
 BOOL __attribute__((__stdcall__)) AllocateLocallyUniqueId (PLUID);
 BOOL __attribute__((__stdcall__)) AreAllAccessesGranted (DWORD, DWORD);
 BOOL __attribute__((__stdcall__)) AreAnyAccessesGranted (DWORD, DWORD);
 BOOL __attribute__((__stdcall__)) AreFileApisANSI (void);


 BOOL __attribute__((__stdcall__)) BackupEventLogA (HANDLE, LPCSTR);
 BOOL __attribute__((__stdcall__)) BackupEventLogW (HANDLE, LPCWSTR);

 BOOL __attribute__((__stdcall__)) BackupRead
(HANDLE, LPBYTE, DWORD, LPDWORD, BOOL, BOOL, LPVOID *);
 BOOL __attribute__((__stdcall__)) BackupSeek
(HANDLE, DWORD, DWORD, LPDWORD, LPDWORD, LPVOID *);
 BOOL __attribute__((__stdcall__)) BackupWrite
(HANDLE, LPBYTE, DWORD, LPDWORD, BOOL, BOOL, LPVOID *);
 BOOL __attribute__((__stdcall__)) Beep (DWORD, DWORD);


 HANDLE __attribute__((__stdcall__)) BeginUpdateResourceA (LPCSTR, BOOL);
 HANDLE __attribute__((__stdcall__)) BeginUpdateResourceW (LPCWSTR, BOOL);


 BOOL __attribute__((__stdcall__)) BuildCommDCBA (LPCSTR, LPDCB);
 BOOL __attribute__((__stdcall__)) BuildCommDCBW (LPCWSTR, LPDCB);


 BOOL __attribute__((__stdcall__)) BuildCommDCBAndTimeoutsA (LPCSTR, LPDCB, LPCOMMTIMEOUTS);
 BOOL __attribute__((__stdcall__)) BuildCommDCBAndTimeoutsW
(LPCWSTR, LPDCB, LPCOMMTIMEOUTS);


 BOOL __attribute__((__stdcall__)) CallNamedPipeA
(LPCSTR, PVOID, DWORD, PVOID, DWORD, PDWORD, DWORD);
 BOOL __attribute__((__stdcall__)) CallNamedPipeW
(LPCWSTR, PVOID, DWORD, PVOID, DWORD, PDWORD, DWORD);

 BOOL __attribute__((__stdcall__)) CancelDeviceWakeupRequest (HANDLE);
 BOOL __attribute__((__stdcall__)) CancelIo (HANDLE);
 BOOL __attribute__((__stdcall__)) CancelWaitableTimer (HANDLE);
 BOOL __attribute__((__stdcall__)) ClearCommBreak (HANDLE);
 BOOL __attribute__((__stdcall__)) ClearCommError (HANDLE, PDWORD, LPCOMSTAT);


 BOOL __attribute__((__stdcall__)) ClearEventLogA (HANDLE, LPCSTR);
 BOOL __attribute__((__stdcall__)) ClearEventLogW (HANDLE, LPCWSTR);

 BOOL __attribute__((__stdcall__)) CloseEventLog (HANDLE);
 BOOL __attribute__((__stdcall__)) CloseHandle (HANDLE);


 BOOL __attribute__((__stdcall__)) CommConfigDialogA (LPCSTR, HWND, LPCOMMCONFIG);
 BOOL __attribute__((__stdcall__)) CommConfigDialogW (LPCWSTR, HWND, LPCOMMCONFIG);

 LONG __attribute__((__stdcall__)) CompareFileTime (const FILETIME *, const FILETIME *);
 BOOL __attribute__((__stdcall__)) ConnectNamedPipe (HANDLE, LPOVERLAPPED);
 BOOL __attribute__((__stdcall__)) ContinueDebugEvent (DWORD, DWORD, DWORD);
 PVOID __attribute__((__stdcall__)) ConvertThreadToFiber (PVOID);


 BOOL __attribute__((__stdcall__)) CopyFileA (LPCSTR, LPCSTR, BOOL);
 BOOL __attribute__((__stdcall__)) CopyFileW (LPCWSTR, LPCWSTR, BOOL);


 BOOL __attribute__((__stdcall__)) CopyFileExA
(LPCSTR, LPCSTR, LPPROGRESS_ROUTINE, LPVOID, LPBOOL, DWORD);
 BOOL __attribute__((__stdcall__)) CopyFileExW
(LPCWSTR, LPCWSTR, LPPROGRESS_ROUTINE, LPVOID, LPBOOL, DWORD);
# 1390 "c:\\mingw\\include\\winbase.h" 3
 BOOL __attribute__((__stdcall__)) CopySid (DWORD, PSID, PSID);


 BOOL __attribute__((__stdcall__)) CreateDirectoryA (LPCSTR, LPSECURITY_ATTRIBUTES);
 BOOL __attribute__((__stdcall__)) CreateDirectoryW (LPCWSTR, LPSECURITY_ATTRIBUTES);


 BOOL __attribute__((__stdcall__)) CreateDirectoryExA
(LPCSTR, LPCSTR, LPSECURITY_ATTRIBUTES);
 BOOL __attribute__((__stdcall__)) CreateDirectoryExW
(LPCWSTR, LPCWSTR, LPSECURITY_ATTRIBUTES);


 HANDLE __attribute__((__stdcall__)) CreateEventA
(LPSECURITY_ATTRIBUTES, BOOL, BOOL, LPCSTR);
 HANDLE __attribute__((__stdcall__)) CreateEventW
(LPSECURITY_ATTRIBUTES, BOOL, BOOL, LPCWSTR);

 LPVOID __attribute__((__stdcall__)) CreateFiber (SIZE_T, LPFIBER_START_ROUTINE, LPVOID);


 HANDLE __attribute__((__stdcall__)) CreateFileA
(LPCSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD, DWORD, HANDLE);
 HANDLE __attribute__((__stdcall__)) CreateFileW
(LPCWSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES, DWORD, DWORD, HANDLE);


 HANDLE __attribute__((__stdcall__)) CreateFileMappingA
(HANDLE, LPSECURITY_ATTRIBUTES, DWORD, DWORD, DWORD, LPCSTR);
 HANDLE __attribute__((__stdcall__)) CreateFileMappingW
(HANDLE, LPSECURITY_ATTRIBUTES, DWORD, DWORD, DWORD, LPCWSTR);

 HANDLE __attribute__((__stdcall__)) CreateIoCompletionPort
(HANDLE, HANDLE, ULONG_PTR, DWORD);


 HANDLE __attribute__((__stdcall__)) CreateMailslotA
(LPCSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES);
 HANDLE __attribute__((__stdcall__)) CreateMailslotW
(LPCWSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES);


 HANDLE __attribute__((__stdcall__)) CreateMutexA (LPSECURITY_ATTRIBUTES, BOOL, LPCSTR);
 HANDLE __attribute__((__stdcall__)) CreateMutexW (LPSECURITY_ATTRIBUTES, BOOL, LPCWSTR);


 HANDLE __attribute__((__stdcall__)) CreateNamedPipeA
(LPCSTR, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, LPSECURITY_ATTRIBUTES);
 HANDLE __attribute__((__stdcall__)) CreateNamedPipeW
(LPCWSTR, DWORD, DWORD, DWORD, DWORD, DWORD, DWORD, LPSECURITY_ATTRIBUTES);

 BOOL __attribute__((__stdcall__)) CreatePipe
(PHANDLE, PHANDLE, LPSECURITY_ATTRIBUTES, DWORD);
 BOOL __attribute__((__stdcall__)) CreatePrivateObjectSecurity
( PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR *, BOOL,
  HANDLE, PGENERIC_MAPPING
);


 BOOL __attribute__((__stdcall__)) CreateProcessA
( LPCSTR, LPSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL, DWORD,
  PVOID, LPCSTR, LPSTARTUPINFOA, LPPROCESS_INFORMATION
);
 BOOL __attribute__((__stdcall__)) CreateProcessW
( LPCWSTR, LPWSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL,
  DWORD, PVOID, LPCWSTR, LPSTARTUPINFOW, LPPROCESS_INFORMATION
);


 BOOL __attribute__((__stdcall__)) CreateProcessAsUserA
( HANDLE, LPCSTR, LPSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES, BOOL,
  DWORD, PVOID, LPCSTR, LPSTARTUPINFOA, LPPROCESS_INFORMATION
);
 BOOL __attribute__((__stdcall__)) CreateProcessAsUserW
( HANDLE, LPCWSTR, LPWSTR, LPSECURITY_ATTRIBUTES, LPSECURITY_ATTRIBUTES,
  BOOL, DWORD, PVOID, LPCWSTR, LPSTARTUPINFOW, LPPROCESS_INFORMATION
);

 HANDLE __attribute__((__stdcall__)) CreateRemoteThread
( HANDLE, LPSECURITY_ATTRIBUTES, DWORD, LPTHREAD_START_ROUTINE,
  LPVOID, DWORD, LPDWORD
);


 HANDLE __attribute__((__stdcall__)) CreateSemaphoreA
(LPSECURITY_ATTRIBUTES, LONG, LONG, LPCSTR);
 HANDLE __attribute__((__stdcall__)) CreateSemaphoreW
(LPSECURITY_ATTRIBUTES, LONG, LONG, LPCWSTR);

 DWORD __attribute__((__stdcall__)) CreateTapePartition (HANDLE, DWORD, DWORD, DWORD);
 HANDLE __attribute__((__stdcall__)) CreateThread
(LPSECURITY_ATTRIBUTES, DWORD, LPTHREAD_START_ROUTINE, PVOID, DWORD, PDWORD);


 HANDLE __attribute__((__stdcall__)) CreateWaitableTimerA
(LPSECURITY_ATTRIBUTES, BOOL, LPCSTR);
 HANDLE __attribute__((__stdcall__)) CreateWaitableTimerW
(LPSECURITY_ATTRIBUTES, BOOL, LPCWSTR);

 BOOL __attribute__((__stdcall__)) DebugActiveProcess (DWORD);
 void __attribute__((__stdcall__)) DebugBreak (void);


 BOOL __attribute__((__stdcall__)) DefineDosDeviceA (DWORD, LPCSTR, LPCSTR);
 BOOL __attribute__((__stdcall__)) DefineDosDeviceW (DWORD, LPCWSTR, LPCWSTR);



 BOOL __attribute__((__stdcall__)) DeleteAce (PACL, DWORD);
 ATOM __attribute__((__stdcall__)) DeleteAtom (ATOM);
 void __attribute__((__stdcall__)) DeleteCriticalSection (PCRITICAL_SECTION);
 void __attribute__((__stdcall__)) DeleteFiber (PVOID);


 BOOL __attribute__((__stdcall__)) DeleteFileA (LPCSTR);
 BOOL __attribute__((__stdcall__)) DeleteFileW (LPCWSTR);

 BOOL __attribute__((__stdcall__)) DeregisterEventSource (HANDLE);
 BOOL __attribute__((__stdcall__)) DestroyPrivateObjectSecurity (PSECURITY_DESCRIPTOR *);
 BOOL __attribute__((__stdcall__)) DeviceIoControl
(HANDLE, DWORD, PVOID, DWORD, PVOID, DWORD, PDWORD, POVERLAPPED);
 BOOL __attribute__((__stdcall__)) DisableThreadLibraryCalls (HMODULE);
 BOOL __attribute__((__stdcall__)) DisconnectNamedPipe (HANDLE);
 BOOL __attribute__((__stdcall__)) DosDateTimeToFileTime (WORD, WORD, LPFILETIME);
 BOOL __attribute__((__stdcall__)) DuplicateHandle
(HANDLE, HANDLE, HANDLE, PHANDLE, DWORD, BOOL, DWORD);
 BOOL __attribute__((__stdcall__)) DuplicateToken
(HANDLE, SECURITY_IMPERSONATION_LEVEL, PHANDLE);
 BOOL __attribute__((__stdcall__)) DuplicateTokenEx
( HANDLE, DWORD, LPSECURITY_ATTRIBUTES, SECURITY_IMPERSONATION_LEVEL,
  TOKEN_TYPE, PHANDLE
);


 BOOL __attribute__((__stdcall__)) EncryptFileA (LPCSTR);
 BOOL __attribute__((__stdcall__)) EncryptFileW (LPCWSTR);


 BOOL __attribute__((__stdcall__)) EndUpdateResourceA (HANDLE, BOOL);
 BOOL __attribute__((__stdcall__)) EndUpdateResourceW (HANDLE, BOOL);

 void __attribute__((__stdcall__)) EnterCriticalSection (LPCRITICAL_SECTION);


 BOOL __attribute__((__stdcall__)) EnumResourceLanguagesA
(HMODULE, LPCSTR, LPCSTR, ENUMRESLANGPROCA, LONG_PTR);
 BOOL __attribute__((__stdcall__)) EnumResourceLanguagesW
(HMODULE, LPCWSTR, LPCWSTR, ENUMRESLANGPROCW, LONG_PTR);


 BOOL __attribute__((__stdcall__)) EnumResourceNamesA
(HMODULE, LPCSTR, ENUMRESNAMEPROCA, LONG_PTR);
 BOOL __attribute__((__stdcall__)) EnumResourceNamesW
(HMODULE, LPCWSTR, ENUMRESNAMEPROCW, LONG_PTR);


 BOOL __attribute__((__stdcall__)) EnumResourceTypesA (HMODULE, ENUMRESTYPEPROCA, LONG_PTR);
 BOOL __attribute__((__stdcall__)) EnumResourceTypesW (HMODULE, ENUMRESTYPEPROCW, LONG_PTR);

 BOOL __attribute__((__stdcall__)) EqualPrefixSid (PSID, PSID);
 BOOL __attribute__((__stdcall__)) EqualSid (PSID, PSID);
 DWORD __attribute__((__stdcall__)) EraseTape (HANDLE, DWORD, BOOL);
 BOOL __attribute__((__stdcall__)) EscapeCommFunction (HANDLE, DWORD);
__attribute__((noreturn)) void __attribute__((__stdcall__)) ExitProcess (UINT);
__attribute__((noreturn)) void __attribute__((__stdcall__)) ExitThread (DWORD);


 DWORD __attribute__((__stdcall__)) ExpandEnvironmentStringsA (LPCSTR, LPSTR, DWORD);
 DWORD __attribute__((__stdcall__)) ExpandEnvironmentStringsW (LPCWSTR, LPWSTR, DWORD);


 void __attribute__((__stdcall__)) FatalAppExitA (UINT, LPCSTR);
 void __attribute__((__stdcall__)) FatalAppExitW (UINT, LPCWSTR);

 void __attribute__((__stdcall__)) FatalExit (int);


 BOOL __attribute__((__stdcall__)) FileEncryptionStatusA (LPCSTR, LPDWORD);
 BOOL __attribute__((__stdcall__)) FileEncryptionStatusW (LPCWSTR, LPDWORD);

 BOOL __attribute__((__stdcall__)) FileTimeToDosDateTime (const FILETIME *, LPWORD, LPWORD);
 BOOL __attribute__((__stdcall__)) FileTimeToLocalFileTime (const FILETIME *, LPFILETIME);
 BOOL __attribute__((__stdcall__)) FileTimeToSystemTime (const FILETIME *, LPSYSTEMTIME);


 ATOM __attribute__((__stdcall__)) FindAtomA (LPCSTR);
 ATOM __attribute__((__stdcall__)) FindAtomW (LPCWSTR);

 BOOL __attribute__((__stdcall__)) FindClose (HANDLE);
 BOOL __attribute__((__stdcall__)) FindCloseChangeNotification (HANDLE);


 HANDLE __attribute__((__stdcall__)) FindFirstChangeNotificationA (LPCSTR, BOOL, DWORD);
 HANDLE __attribute__((__stdcall__)) FindFirstChangeNotificationW (LPCWSTR, BOOL, DWORD);


 HANDLE __attribute__((__stdcall__)) FindFirstFileA (LPCSTR, LPWIN32_FIND_DATAA);
 HANDLE __attribute__((__stdcall__)) FindFirstFileW (LPCWSTR, LPWIN32_FIND_DATAW);


 HANDLE __attribute__((__stdcall__)) FindFirstFileExA
(LPCSTR, FINDEX_INFO_LEVELS, PVOID, FINDEX_SEARCH_OPS, PVOID, DWORD);
 HANDLE __attribute__((__stdcall__)) FindFirstFileExW
(LPCWSTR, FINDEX_INFO_LEVELS, PVOID, FINDEX_SEARCH_OPS, PVOID, DWORD);

 BOOL __attribute__((__stdcall__)) FindFirstFreeAce (PACL, PVOID *);
 BOOL __attribute__((__stdcall__)) FindNextChangeNotification (HANDLE);


 BOOL __attribute__((__stdcall__)) FindNextFileA (HANDLE, LPWIN32_FIND_DATAA);
 BOOL __attribute__((__stdcall__)) FindNextFileW (HANDLE, LPWIN32_FIND_DATAW);


 HRSRC __attribute__((__stdcall__)) FindResourceA (HMODULE, LPCSTR, LPCSTR);
 HRSRC __attribute__((__stdcall__)) FindResourceW (HINSTANCE, LPCWSTR, LPCWSTR);


 HRSRC __attribute__((__stdcall__)) FindResourceExA (HINSTANCE, LPCSTR, LPCSTR, WORD);
 HRSRC __attribute__((__stdcall__)) FindResourceExW (HINSTANCE, LPCWSTR, LPCWSTR, WORD);

 BOOL __attribute__((__stdcall__)) FlushFileBuffers (HANDLE);
 BOOL __attribute__((__stdcall__)) FlushInstructionCache (HANDLE, PCVOID, DWORD);
 BOOL __attribute__((__stdcall__)) FlushViewOfFile (PCVOID, DWORD);


 DWORD __attribute__((__stdcall__)) FormatMessageA
(DWORD, PCVOID, DWORD, DWORD, LPSTR, DWORD, va_list *);
 DWORD __attribute__((__stdcall__)) FormatMessageW
(DWORD, PCVOID, DWORD, DWORD, LPWSTR, DWORD, va_list *);


 BOOL __attribute__((__stdcall__)) FreeEnvironmentStringsA (LPSTR);
 BOOL __attribute__((__stdcall__)) FreeEnvironmentStringsW (LPWSTR);

 BOOL __attribute__((__stdcall__)) FreeLibrary (HMODULE);
__attribute__((noreturn)) void __attribute__((__stdcall__)) FreeLibraryAndExitThread
(HMODULE, DWORD);





 BOOL __attribute__((__stdcall__)) FreeResource (HGLOBAL);


 PVOID __attribute__((__stdcall__)) FreeSid (PSID);
 BOOL __attribute__((__stdcall__)) GetAce (PACL, DWORD, LPVOID *);
 BOOL __attribute__((__stdcall__)) GetAclInformation
(PACL, PVOID, DWORD, ACL_INFORMATION_CLASS);


 UINT __attribute__((__stdcall__)) GetAtomNameA (ATOM, LPSTR, int);
 UINT __attribute__((__stdcall__)) GetAtomNameW (ATOM, LPWSTR, int);


 BOOL __attribute__((__stdcall__)) GetBinaryTypeA (LPCSTR, PDWORD);
 BOOL __attribute__((__stdcall__)) GetBinaryTypeW (LPCWSTR, PDWORD);


 LPSTR __attribute__((__stdcall__)) GetCommandLineA (void);
 LPWSTR __attribute__((__stdcall__)) GetCommandLineW (void);

 BOOL __attribute__((__stdcall__)) GetCommConfig (HANDLE, LPCOMMCONFIG, PDWORD);
 BOOL __attribute__((__stdcall__)) GetCommMask (HANDLE, PDWORD);
 BOOL __attribute__((__stdcall__)) GetCommModemStatus (HANDLE, PDWORD);
 BOOL __attribute__((__stdcall__)) GetCommProperties (HANDLE, LPCOMMPROP);
 BOOL __attribute__((__stdcall__)) GetCommState (HANDLE, LPDCB);
 BOOL __attribute__((__stdcall__)) GetCommTimeouts (HANDLE, LPCOMMTIMEOUTS);


 DWORD __attribute__((__stdcall__)) GetCompressedFileSizeA (LPCSTR, PDWORD);
 DWORD __attribute__((__stdcall__)) GetCompressedFileSizeW (LPCWSTR, PDWORD);


 BOOL __attribute__((__stdcall__)) GetComputerNameA (LPSTR, PDWORD);
 BOOL __attribute__((__stdcall__)) GetComputerNameW (LPWSTR, PDWORD);


 DWORD __attribute__((__stdcall__)) GetCurrentDirectoryA (DWORD, LPSTR);
 DWORD __attribute__((__stdcall__)) GetCurrentDirectoryW (DWORD, LPWSTR);



 BOOL __attribute__((__stdcall__)) GetCurrentHwProfileA (LPHW_PROFILE_INFOA);
 BOOL __attribute__((__stdcall__)) GetCurrentHwProfileW (LPHW_PROFILE_INFOW);

 HANDLE __attribute__((__stdcall__)) GetCurrentProcess (void);
 DWORD __attribute__((__stdcall__)) GetCurrentProcessId (void);
 HANDLE __attribute__((__stdcall__)) GetCurrentThread (void);




 DWORD __attribute__((__stdcall__)) GetCurrentThreadId (void);





 BOOL __attribute__((__stdcall__)) GetDefaultCommConfigA (LPCSTR, LPCOMMCONFIG, PDWORD);
 BOOL __attribute__((__stdcall__)) GetDefaultCommConfigW (LPCWSTR, LPCOMMCONFIG, PDWORD);

 BOOL __attribute__((__stdcall__)) GetDevicePowerState (HANDLE, BOOL *);


 BOOL __attribute__((__stdcall__)) GetDiskFreeSpaceA
(LPCSTR, PDWORD, PDWORD, PDWORD, PDWORD);
 BOOL __attribute__((__stdcall__)) GetDiskFreeSpaceW
(LPCWSTR, PDWORD, PDWORD, PDWORD, PDWORD);


 BOOL __attribute__((__stdcall__)) GetDiskFreeSpaceExA
(LPCSTR, PULARGE_INTEGER, PULARGE_INTEGER, PULARGE_INTEGER);
 BOOL __attribute__((__stdcall__)) GetDiskFreeSpaceExW
(LPCWSTR, PULARGE_INTEGER, PULARGE_INTEGER, PULARGE_INTEGER);


 UINT __attribute__((__stdcall__)) GetDriveTypeA (LPCSTR);
 UINT __attribute__((__stdcall__)) GetDriveTypeW (LPCWSTR);

 LPCH __attribute__((__stdcall__)) GetEnvironmentStrings (void);


 LPCH __attribute__((__stdcall__)) GetEnvironmentStringsA (void);
 LPWCH __attribute__((__stdcall__)) GetEnvironmentStringsW (void);


 DWORD __attribute__((__stdcall__)) GetEnvironmentVariableA (LPCSTR, LPSTR, DWORD);
 DWORD __attribute__((__stdcall__)) GetEnvironmentVariableW (LPCWSTR, LPWSTR, DWORD);

 BOOL __attribute__((__stdcall__)) GetExitCodeProcess (HANDLE, PDWORD);
 BOOL __attribute__((__stdcall__)) GetExitCodeThread (HANDLE, PDWORD);


 DWORD __attribute__((__stdcall__)) GetFileAttributesA (LPCSTR);
 DWORD __attribute__((__stdcall__)) GetFileAttributesW (LPCWSTR);


 BOOL __attribute__((__stdcall__)) GetFileAttributesExA
(LPCSTR, GET_FILEEX_INFO_LEVELS, PVOID);
 BOOL __attribute__((__stdcall__)) GetFileAttributesExW
(LPCWSTR, GET_FILEEX_INFO_LEVELS, PVOID);

 BOOL __attribute__((__stdcall__)) GetFileInformationByHandle
(HANDLE, LPBY_HANDLE_FILE_INFORMATION);


 BOOL __attribute__((__stdcall__)) GetFileSecurityA
(LPCSTR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, DWORD, PDWORD);
 BOOL __attribute__((__stdcall__)) GetFileSecurityW
(LPCWSTR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, DWORD, PDWORD);

 DWORD __attribute__((__stdcall__)) GetFileSize (HANDLE, PDWORD);
 BOOL __attribute__((__stdcall__)) GetFileTime (HANDLE, LPFILETIME, LPFILETIME, LPFILETIME);
 DWORD __attribute__((__stdcall__)) GetFileType (HANDLE);




 DWORD __attribute__((__stdcall__)) GetFullPathNameA (LPCSTR, DWORD, LPSTR, LPSTR *);
 DWORD __attribute__((__stdcall__)) GetFullPathNameW (LPCWSTR, DWORD, LPWSTR, LPWSTR *);

 BOOL __attribute__((__stdcall__)) GetHandleInformation (HANDLE, PDWORD);
 BOOL __attribute__((__stdcall__)) GetKernelObjectSecurity
(HANDLE, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, DWORD, PDWORD);
 DWORD __attribute__((__stdcall__)) GetLastError (void);
 DWORD __attribute__((__stdcall__)) GetLengthSid (PSID);
 void __attribute__((__stdcall__)) GetLocalTime (LPSYSTEMTIME);
 DWORD __attribute__((__stdcall__)) GetLogicalDrives (void);


 DWORD __attribute__((__stdcall__)) GetLogicalDriveStringsA (DWORD, LPSTR);
 DWORD __attribute__((__stdcall__)) GetLogicalDriveStringsW (DWORD, LPWSTR);

 BOOL __attribute__((__stdcall__)) GetMailslotInfo (HANDLE, PDWORD, PDWORD, PDWORD, PDWORD);


 DWORD __attribute__((__stdcall__)) GetModuleFileNameA (HINSTANCE, LPSTR, DWORD);
 DWORD __attribute__((__stdcall__)) GetModuleFileNameW (HINSTANCE, LPWSTR, DWORD);


 HMODULE __attribute__((__stdcall__)) GetModuleHandleA (LPCSTR);
 HMODULE __attribute__((__stdcall__)) GetModuleHandleW (LPCWSTR);


 BOOL __attribute__((__stdcall__)) GetNamedPipeHandleStateA
(HANDLE, PDWORD, PDWORD, PDWORD, PDWORD, LPSTR, DWORD);
 BOOL __attribute__((__stdcall__)) GetNamedPipeHandleStateW
(HANDLE, PDWORD, PDWORD, PDWORD, PDWORD, LPWSTR, DWORD);

 BOOL __attribute__((__stdcall__)) GetNamedPipeInfo
(HANDLE, PDWORD, PDWORD, PDWORD, PDWORD);
 BOOL __attribute__((__stdcall__)) GetNumberOfEventLogRecords (HANDLE, PDWORD);
 BOOL __attribute__((__stdcall__)) GetOldestEventLogRecord (HANDLE, PDWORD);
 BOOL __attribute__((__stdcall__)) GetOverlappedResult (HANDLE, LPOVERLAPPED, PDWORD, BOOL);
 DWORD __attribute__((__stdcall__)) GetPriorityClass (HANDLE);
 BOOL __attribute__((__stdcall__)) GetPrivateObjectSecurity
( PSECURITY_DESCRIPTOR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR,
  DWORD, PDWORD
);


 UINT __attribute__((__stdcall__)) GetPrivateProfileIntA (LPCSTR, LPCSTR, INT, LPCSTR);
 UINT __attribute__((__stdcall__)) GetPrivateProfileIntW (LPCWSTR, LPCWSTR, INT, LPCWSTR);


 DWORD __attribute__((__stdcall__)) GetPrivateProfileSectionA
(LPCSTR, LPSTR, DWORD, LPCSTR);
 DWORD __attribute__((__stdcall__)) GetPrivateProfileSectionW
(LPCWSTR, LPWSTR, DWORD, LPCWSTR);



 DWORD __attribute__((__stdcall__)) GetPrivateProfileSectionNamesA (LPSTR, DWORD, LPCSTR);
 DWORD __attribute__((__stdcall__)) GetPrivateProfileSectionNamesW (LPWSTR, DWORD, LPCWSTR);


 DWORD __attribute__((__stdcall__)) GetPrivateProfileStringA
(LPCSTR, LPCSTR, LPCSTR, LPSTR, DWORD, LPCSTR);
 DWORD __attribute__((__stdcall__)) GetPrivateProfileStringW
(LPCWSTR, LPCWSTR, LPCWSTR, LPWSTR, DWORD, LPCWSTR);


 BOOL __attribute__((__stdcall__)) GetPrivateProfileStructA
(LPCSTR, LPCSTR, LPVOID, UINT, LPCSTR);
 BOOL __attribute__((__stdcall__)) GetPrivateProfileStructW
(LPCWSTR, LPCWSTR, LPVOID, UINT, LPCWSTR);

 FARPROC __attribute__((__stdcall__)) GetProcAddress (HINSTANCE, LPCSTR);
 BOOL __attribute__((__stdcall__)) GetProcessAffinityMask (HANDLE, PDWORD, PDWORD);

 HANDLE __attribute__((__stdcall__)) GetProcessHeap (void);
 DWORD __attribute__((__stdcall__)) GetProcessHeaps (DWORD, PHANDLE);
 BOOL __attribute__((__stdcall__)) GetProcessPriorityBoost (HANDLE, PBOOL);
 BOOL __attribute__((__stdcall__)) GetProcessShutdownParameters (PDWORD, PDWORD);
 BOOL __attribute__((__stdcall__)) GetProcessTimes
(HANDLE, LPFILETIME, LPFILETIME, LPFILETIME, LPFILETIME);
 DWORD __attribute__((__stdcall__)) GetProcessVersion (DWORD);
 HWINSTA __attribute__((__stdcall__)) GetProcessWindowStation (void);
 BOOL __attribute__((__stdcall__)) GetProcessWorkingSetSize (HANDLE, PSIZE_T, PSIZE_T);


 UINT __attribute__((__stdcall__)) GetProfileIntA (LPCSTR, LPCSTR, INT);
 UINT __attribute__((__stdcall__)) GetProfileIntW (LPCWSTR, LPCWSTR, INT);


 DWORD __attribute__((__stdcall__)) GetProfileSectionA (LPCSTR, LPSTR, DWORD);
 DWORD __attribute__((__stdcall__)) GetProfileSectionW (LPCWSTR, LPWSTR, DWORD);


 DWORD __attribute__((__stdcall__)) GetProfileStringA
(LPCSTR, LPCSTR, LPCSTR, LPSTR, DWORD);
 DWORD __attribute__((__stdcall__)) GetProfileStringW
(LPCWSTR, LPCWSTR, LPCWSTR, LPWSTR, DWORD);

 BOOL __attribute__((__stdcall__)) GetQueuedCompletionStatus
(HANDLE, PDWORD, PULONG_PTR, LPOVERLAPPED *, DWORD);
 BOOL __attribute__((__stdcall__)) GetSecurityDescriptorControl
(PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR_CONTROL, PDWORD);
 BOOL __attribute__((__stdcall__)) GetSecurityDescriptorDacl
(PSECURITY_DESCRIPTOR, LPBOOL, PACL *, LPBOOL);
 BOOL __attribute__((__stdcall__)) GetSecurityDescriptorGroup
(PSECURITY_DESCRIPTOR, PSID *, LPBOOL);
 DWORD __attribute__((__stdcall__)) GetSecurityDescriptorLength (PSECURITY_DESCRIPTOR);
 BOOL __attribute__((__stdcall__)) GetSecurityDescriptorOwner
(PSECURITY_DESCRIPTOR, PSID *, LPBOOL);
 BOOL __attribute__((__stdcall__)) GetSecurityDescriptorSacl
(PSECURITY_DESCRIPTOR, LPBOOL, PACL *, LPBOOL);


 DWORD __attribute__((__stdcall__)) GetShortPathNameA (LPCSTR, LPSTR, DWORD);
 DWORD __attribute__((__stdcall__)) GetShortPathNameW (LPCWSTR, LPWSTR, DWORD);

 PSID_IDENTIFIER_AUTHORITY __attribute__((__stdcall__)) GetSidIdentifierAuthority (PSID);
 DWORD __attribute__((__stdcall__)) GetSidLengthRequired (UCHAR);
 PDWORD __attribute__((__stdcall__)) GetSidSubAuthority (PSID, DWORD);
 PUCHAR __attribute__((__stdcall__)) GetSidSubAuthorityCount (PSID);


 void __attribute__((__stdcall__)) GetStartupInfoA (LPSTARTUPINFOA);
 void __attribute__((__stdcall__)) GetStartupInfoW (LPSTARTUPINFOW);

 HANDLE __attribute__((__stdcall__)) GetStdHandle (DWORD);


 UINT __attribute__((__stdcall__)) GetSystemDirectoryA (LPSTR, UINT);
 UINT __attribute__((__stdcall__)) GetSystemDirectoryW (LPWSTR, UINT);

 void __attribute__((__stdcall__)) GetSystemInfo (LPSYSTEM_INFO);
 BOOL __attribute__((__stdcall__)) GetSystemPowerStatus (LPSYSTEM_POWER_STATUS);
 void __attribute__((__stdcall__)) GetSystemTime (LPSYSTEMTIME);
 BOOL __attribute__((__stdcall__)) GetSystemTimeAdjustment (PDWORD, PDWORD, PBOOL);
 void __attribute__((__stdcall__)) GetSystemTimeAsFileTime (LPFILETIME);
 DWORD __attribute__((__stdcall__)) GetTapeParameters (HANDLE, DWORD, PDWORD, PVOID);
 DWORD __attribute__((__stdcall__)) GetTapePosition (HANDLE, DWORD, PDWORD, PDWORD, PDWORD);
 DWORD __attribute__((__stdcall__)) GetTapeStatus (HANDLE);


 UINT __attribute__((__stdcall__)) GetTempFileNameA (LPCSTR, LPCSTR, UINT, LPSTR);
 UINT __attribute__((__stdcall__)) GetTempFileNameW (LPCWSTR, LPCWSTR, UINT, LPWSTR);


 DWORD __attribute__((__stdcall__)) GetTempPathA (DWORD, LPSTR);
 DWORD __attribute__((__stdcall__)) GetTempPathW (DWORD, LPWSTR);

 BOOL __attribute__((__stdcall__)) GetThreadContext (HANDLE, LPCONTEXT);
 int __attribute__((__stdcall__)) GetThreadPriority (HANDLE);
 BOOL __attribute__((__stdcall__)) GetThreadPriorityBoost (HANDLE, PBOOL);
 BOOL __attribute__((__stdcall__)) GetThreadSelectorEntry (HANDLE, DWORD, LPLDT_ENTRY);
 BOOL __attribute__((__stdcall__)) GetThreadTimes
(HANDLE, LPFILETIME, LPFILETIME, LPFILETIME, LPFILETIME);
 DWORD __attribute__((__stdcall__)) GetTickCount (void);
 DWORD __attribute__((__stdcall__)) GetTimeZoneInformation (LPTIME_ZONE_INFORMATION);
 BOOL __attribute__((__stdcall__)) GetTokenInformation
(HANDLE, TOKEN_INFORMATION_CLASS, PVOID, DWORD, PDWORD);


 BOOL __attribute__((__stdcall__)) GetUserNameA (LPSTR, PDWORD);
 BOOL __attribute__((__stdcall__)) GetUserNameW (LPWSTR, PDWORD);

 DWORD __attribute__((__stdcall__)) GetVersion (void);


 BOOL __attribute__((__stdcall__)) GetVersionExA (LPOSVERSIONINFOA);
 BOOL __attribute__((__stdcall__)) GetVersionExW (LPOSVERSIONINFOW);


 BOOL __attribute__((__stdcall__)) GetVolumeInformationA
(LPCSTR, LPSTR, DWORD, PDWORD, PDWORD, PDWORD, LPSTR, DWORD);
 BOOL __attribute__((__stdcall__)) GetVolumeInformationW
(LPCWSTR, LPWSTR, DWORD, PDWORD, PDWORD, PDWORD, LPWSTR, DWORD);


 UINT __attribute__((__stdcall__)) GetWindowsDirectoryA (LPSTR, UINT);
 UINT __attribute__((__stdcall__)) GetWindowsDirectoryW (LPWSTR, UINT);

 DWORD __attribute__((__stdcall__)) GetWindowThreadProcessId (HWND, PDWORD);
 UINT __attribute__((__stdcall__)) GetWriteWatch
(DWORD, PVOID, SIZE_T, PVOID *, PULONG_PTR, PULONG);


 ATOM __attribute__((__stdcall__)) GlobalAddAtomA (LPCSTR);
 ATOM __attribute__((__stdcall__)) GlobalAddAtomW (LPCWSTR);

 HGLOBAL __attribute__((__stdcall__)) GlobalAlloc (UINT, DWORD);
 SIZE_T __attribute__((__stdcall__)) GlobalCompact (DWORD);
 ATOM __attribute__((__stdcall__)) GlobalDeleteAtom (ATOM);




 ATOM __attribute__((__stdcall__)) GlobalFindAtomA (LPCSTR);
 ATOM __attribute__((__stdcall__)) GlobalFindAtomW (LPCWSTR);

 void __attribute__((__stdcall__)) GlobalFix (HGLOBAL);
 UINT __attribute__((__stdcall__)) GlobalFlags (HGLOBAL);
 HGLOBAL __attribute__((__stdcall__)) GlobalFree (HGLOBAL);


 UINT __attribute__((__stdcall__)) GlobalGetAtomNameA (ATOM, LPSTR, int);
 UINT __attribute__((__stdcall__)) GlobalGetAtomNameW (ATOM, LPWSTR, int);

 HGLOBAL __attribute__((__stdcall__)) GlobalHandle (PCVOID);
 LPVOID __attribute__((__stdcall__)) GlobalLock (HGLOBAL);
 void __attribute__((__stdcall__)) GlobalMemoryStatus (LPMEMORYSTATUS);
 HGLOBAL __attribute__((__stdcall__)) GlobalReAlloc (HGLOBAL, DWORD, UINT);
 DWORD __attribute__((__stdcall__)) GlobalSize (HGLOBAL);
 void __attribute__((__stdcall__)) GlobalUnfix (HGLOBAL);
 BOOL __attribute__((__stdcall__)) GlobalUnlock (HGLOBAL);
 BOOL __attribute__((__stdcall__)) GlobalUnWire (HGLOBAL);
 PVOID __attribute__((__stdcall__)) GlobalWire (HGLOBAL);




 PVOID __attribute__((__stdcall__)) HeapAlloc (HANDLE, DWORD, DWORD);
SIZE_T __attribute__((__stdcall__)) HeapCompact (HANDLE, DWORD);
 HANDLE __attribute__((__stdcall__)) HeapCreate (DWORD, DWORD, DWORD);
 BOOL __attribute__((__stdcall__)) HeapDestroy (HANDLE);
 BOOL __attribute__((__stdcall__)) HeapFree (HANDLE, DWORD, PVOID);
 BOOL __attribute__((__stdcall__)) HeapLock (HANDLE);
 PVOID __attribute__((__stdcall__)) HeapReAlloc (HANDLE, DWORD, PVOID, DWORD);
 DWORD __attribute__((__stdcall__)) HeapSize (HANDLE, DWORD, PCVOID);
 BOOL __attribute__((__stdcall__)) HeapUnlock (HANDLE);
 BOOL __attribute__((__stdcall__)) HeapValidate (HANDLE, DWORD, PCVOID);
 BOOL __attribute__((__stdcall__)) HeapWalk (HANDLE, LPPROCESS_HEAP_ENTRY);
 BOOL __attribute__((__stdcall__)) ImpersonateLoggedOnUser (HANDLE);
 BOOL __attribute__((__stdcall__)) ImpersonateNamedPipeClient (HANDLE);
 BOOL __attribute__((__stdcall__)) ImpersonateSelf (SECURITY_IMPERSONATION_LEVEL);
 BOOL __attribute__((__stdcall__)) InitAtomTable (DWORD);
 BOOL __attribute__((__stdcall__)) InitializeAcl (PACL, DWORD, DWORD);
 void __attribute__((__stdcall__)) InitializeCriticalSection (LPCRITICAL_SECTION);
 BOOL __attribute__((__stdcall__)) InitializeCriticalSectionAndSpinCount
(LPCRITICAL_SECTION, DWORD);
 DWORD __attribute__((__stdcall__)) SetCriticalSectionSpinCount (LPCRITICAL_SECTION, DWORD);
 BOOL __attribute__((__stdcall__)) InitializeSecurityDescriptor
(PSECURITY_DESCRIPTOR, DWORD);
 BOOL __attribute__((__stdcall__)) InitializeSid (PSID, PSID_IDENTIFIER_AUTHORITY, BYTE);
# 2001 "c:\\mingw\\include\\winbase.h" 3
LONG __attribute__((__stdcall__)) InterlockedCompareExchange (LONG volatile *, LONG, LONG);



LONG __attribute__((__stdcall__)) InterlockedDecrement (LONG volatile *);
LONG __attribute__((__stdcall__)) InterlockedExchange (LONG volatile *, LONG);



LONG __attribute__((__stdcall__)) InterlockedExchangeAdd (LONG volatile *, LONG);





LONG __attribute__((__stdcall__)) InterlockedIncrement (LONG volatile *);
# 2025 "c:\\mingw\\include\\winbase.h" 3
 BOOL __attribute__((__stdcall__)) IsBadCodePtr (FARPROC);
 BOOL __attribute__((__stdcall__)) IsBadHugeReadPtr (PCVOID, UINT);
 BOOL __attribute__((__stdcall__)) IsBadHugeWritePtr (PVOID, UINT);
 BOOL __attribute__((__stdcall__)) IsBadReadPtr (PCVOID, UINT);


 BOOL __attribute__((__stdcall__)) IsBadStringPtrA (LPCSTR, UINT);
 BOOL __attribute__((__stdcall__)) IsBadStringPtrW (LPCWSTR, UINT);

 BOOL __attribute__((__stdcall__)) IsBadWritePtr (PVOID, UINT);
 BOOL __attribute__((__stdcall__)) IsDebuggerPresent (void);
 BOOL __attribute__((__stdcall__)) IsProcessorFeaturePresent (DWORD);
 BOOL __attribute__((__stdcall__)) IsSystemResumeAutomatic (void);
 BOOL __attribute__((__stdcall__)) IsTextUnicode (PCVOID, int, LPINT);
 BOOL __attribute__((__stdcall__)) IsValidAcl (PACL);
 BOOL __attribute__((__stdcall__)) IsValidSecurityDescriptor (PSECURITY_DESCRIPTOR);
 BOOL __attribute__((__stdcall__)) IsValidSid (PSID);

 void __attribute__((__stdcall__)) LeaveCriticalSection (LPCRITICAL_SECTION);




 HINSTANCE __attribute__((__stdcall__)) LoadLibraryA (LPCSTR);
 HINSTANCE __attribute__((__stdcall__)) LoadLibraryW (LPCWSTR);


 HINSTANCE __attribute__((__stdcall__)) LoadLibraryExA (LPCSTR, HANDLE, DWORD);
 HINSTANCE __attribute__((__stdcall__)) LoadLibraryExW (LPCWSTR, HANDLE, DWORD);

 DWORD __attribute__((__stdcall__)) LoadModule (LPCSTR, PVOID);
 HGLOBAL __attribute__((__stdcall__)) LoadResource (HINSTANCE, HRSRC);
 HLOCAL __attribute__((__stdcall__)) LocalAlloc (UINT, SIZE_T);
 SIZE_T __attribute__((__stdcall__)) LocalCompact (UINT);
 HLOCAL LocalDiscard (HLOCAL);
 BOOL __attribute__((__stdcall__)) LocalFileTimeToFileTime (const FILETIME *, LPFILETIME);
 UINT __attribute__((__stdcall__)) LocalFlags (HLOCAL);
 HLOCAL __attribute__((__stdcall__)) LocalFree (HLOCAL);
 HLOCAL __attribute__((__stdcall__)) LocalHandle (LPCVOID);
 PVOID __attribute__((__stdcall__)) LocalLock (HLOCAL);
 HLOCAL __attribute__((__stdcall__)) LocalReAlloc (HLOCAL, SIZE_T, UINT);
 SIZE_T __attribute__((__stdcall__)) LocalShrink (HLOCAL, UINT);
 UINT __attribute__((__stdcall__)) LocalSize (HLOCAL);
 BOOL __attribute__((__stdcall__)) LocalUnlock (HLOCAL);
 BOOL __attribute__((__stdcall__)) LockFile (HANDLE, DWORD, DWORD, DWORD, DWORD);
 BOOL __attribute__((__stdcall__)) LockFileEx
(HANDLE, DWORD, DWORD, DWORD, DWORD, LPOVERLAPPED);
 PVOID __attribute__((__stdcall__)) LockResource (HGLOBAL);




 BOOL __attribute__((__stdcall__)) LogonUserA (LPSTR, LPSTR, LPSTR, DWORD, DWORD, PHANDLE);
 BOOL __attribute__((__stdcall__)) LogonUserW
(LPWSTR, LPWSTR, LPWSTR, DWORD, DWORD, PHANDLE);


 BOOL __attribute__((__stdcall__)) LookupAccountNameA
(LPCSTR, LPCSTR, PSID, PDWORD, LPSTR, PDWORD, PSID_NAME_USE);
 BOOL __attribute__((__stdcall__)) LookupAccountNameW
(LPCWSTR, LPCWSTR, PSID, PDWORD, LPWSTR, PDWORD, PSID_NAME_USE);


 BOOL __attribute__((__stdcall__)) LookupAccountSidA
(LPCSTR, PSID, LPSTR, PDWORD, LPSTR, PDWORD, PSID_NAME_USE);
 BOOL __attribute__((__stdcall__)) LookupAccountSidW
(LPCWSTR, PSID, LPWSTR, PDWORD, LPWSTR, PDWORD, PSID_NAME_USE);


 BOOL __attribute__((__stdcall__)) LookupPrivilegeDisplayNameA
(LPCSTR, LPCSTR, LPSTR, PDWORD, PDWORD);
 BOOL __attribute__((__stdcall__)) LookupPrivilegeDisplayNameW
(LPCWSTR, LPCWSTR, LPWSTR, PDWORD, PDWORD);


 BOOL __attribute__((__stdcall__)) LookupPrivilegeNameA (LPCSTR, PLUID, LPSTR, PDWORD);
 BOOL __attribute__((__stdcall__)) LookupPrivilegeNameW (LPCWSTR, PLUID, LPWSTR, PDWORD);


 BOOL __attribute__((__stdcall__)) LookupPrivilegeValueA (LPCSTR, LPCSTR, PLUID);
 BOOL __attribute__((__stdcall__)) LookupPrivilegeValueW (LPCWSTR, LPCWSTR, PLUID);


 LPSTR __attribute__((__stdcall__)) lstrcatA (LPSTR, LPCSTR);
 LPWSTR __attribute__((__stdcall__)) lstrcatW (LPWSTR, LPCWSTR);


 int __attribute__((__stdcall__)) lstrcmpA (LPCSTR, LPCSTR);
 int __attribute__((__stdcall__)) lstrcmpW (LPCWSTR, LPCWSTR);


 int __attribute__((__stdcall__)) lstrcmpiA (LPCSTR, LPCSTR);
 int __attribute__((__stdcall__)) lstrcmpiW (LPCWSTR, LPCWSTR);


 LPSTR __attribute__((__stdcall__)) lstrcpyA (LPSTR, LPCSTR);
 LPWSTR __attribute__((__stdcall__)) lstrcpyW (LPWSTR, LPCWSTR);


 LPSTR __attribute__((__stdcall__)) lstrcpynA (LPSTR, LPCSTR, int);
 LPWSTR __attribute__((__stdcall__)) lstrcpynW (LPWSTR, LPCWSTR, int);


 int __attribute__((__stdcall__)) lstrlenA (LPCSTR);
 int __attribute__((__stdcall__)) lstrlenW (LPCWSTR);

 BOOL __attribute__((__stdcall__)) MakeAbsoluteSD
( PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR, PDWORD, PACL, PDWORD, PACL,
  PDWORD, PSID, PDWORD, PSID, PDWORD
);



 BOOL __attribute__((__stdcall__)) MakeSelfRelativeSD
(PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR, PDWORD);
 void __attribute__((__stdcall__)) MapGenericMask (PDWORD, PGENERIC_MAPPING);
 PVOID __attribute__((__stdcall__)) MapViewOfFile (HANDLE, DWORD, DWORD, DWORD, DWORD);
 PVOID __attribute__((__stdcall__)) MapViewOfFileEx
(HANDLE, DWORD, DWORD, DWORD, DWORD, PVOID);


 BOOL __attribute__((__stdcall__)) MoveFileA (LPCSTR, LPCSTR);
 BOOL __attribute__((__stdcall__)) MoveFileW (LPCWSTR, LPCWSTR);


 BOOL __attribute__((__stdcall__)) MoveFileExA (LPCSTR, LPCSTR, DWORD);
 BOOL __attribute__((__stdcall__)) MoveFileExW (LPCWSTR, LPCWSTR, DWORD);

 int __attribute__((__stdcall__)) MulDiv (int, int, int);
 BOOL __attribute__((__stdcall__)) NotifyChangeEventLog (HANDLE, HANDLE);


 BOOL __attribute__((__stdcall__)) ObjectCloseAuditAlarmA (LPCSTR, PVOID, BOOL);
 BOOL __attribute__((__stdcall__)) ObjectCloseAuditAlarmW (LPCWSTR, PVOID, BOOL);


 BOOL __attribute__((__stdcall__)) ObjectDeleteAuditAlarmA (LPCSTR, PVOID, BOOL);
 BOOL __attribute__((__stdcall__)) ObjectDeleteAuditAlarmW (LPCWSTR, PVOID, BOOL);


 BOOL __attribute__((__stdcall__)) ObjectOpenAuditAlarmA
( LPCSTR, PVOID, LPSTR, LPSTR, PSECURITY_DESCRIPTOR, HANDLE, DWORD, DWORD,
  PPRIVILEGE_SET, BOOL, BOOL, PBOOL
);
 BOOL __attribute__((__stdcall__)) ObjectOpenAuditAlarmW
( LPCWSTR, PVOID, LPWSTR, LPWSTR, PSECURITY_DESCRIPTOR, HANDLE, DWORD,
  DWORD, PPRIVILEGE_SET, BOOL, BOOL, PBOOL
);


 BOOL __attribute__((__stdcall__)) ObjectPrivilegeAuditAlarmA
(LPCSTR, PVOID, HANDLE, DWORD, PPRIVILEGE_SET, BOOL);
 BOOL __attribute__((__stdcall__)) ObjectPrivilegeAuditAlarmW
(LPCWSTR, PVOID, HANDLE, DWORD, PPRIVILEGE_SET, BOOL);


 HANDLE __attribute__((__stdcall__)) OpenBackupEventLogA (LPCSTR, LPCSTR);
 HANDLE __attribute__((__stdcall__)) OpenBackupEventLogW (LPCWSTR, LPCWSTR);


 HANDLE __attribute__((__stdcall__)) OpenEventA (DWORD, BOOL, LPCSTR);
 HANDLE __attribute__((__stdcall__)) OpenEventW (DWORD, BOOL, LPCWSTR);


 HANDLE __attribute__((__stdcall__)) OpenEventLogA (LPCSTR, LPCSTR);
 HANDLE __attribute__((__stdcall__)) OpenEventLogW (LPCWSTR, LPCWSTR);

 HFILE __attribute__((__stdcall__)) OpenFile (LPCSTR, LPOFSTRUCT, UINT);


 HANDLE __attribute__((__stdcall__)) OpenFileMappingA (DWORD, BOOL, LPCSTR);
 HANDLE __attribute__((__stdcall__)) OpenFileMappingW (DWORD, BOOL, LPCWSTR);


 HANDLE __attribute__((__stdcall__)) OpenMutexA (DWORD, BOOL, LPCSTR);
 HANDLE __attribute__((__stdcall__)) OpenMutexW (DWORD, BOOL, LPCWSTR);

 HANDLE __attribute__((__stdcall__)) OpenProcess (DWORD, BOOL, DWORD);
 BOOL __attribute__((__stdcall__)) OpenProcessToken (HANDLE, DWORD, PHANDLE);


 HANDLE __attribute__((__stdcall__)) OpenSemaphoreA (DWORD, BOOL, LPCSTR);
 HANDLE __attribute__((__stdcall__)) OpenSemaphoreW (DWORD, BOOL, LPCWSTR);

 BOOL __attribute__((__stdcall__)) OpenThreadToken (HANDLE, DWORD, BOOL, PHANDLE);



 HANDLE __attribute__((__stdcall__)) OpenWaitableTimerA (DWORD, BOOL, LPCSTR);
 HANDLE __attribute__((__stdcall__)) OpenWaitableTimerW (DWORD, BOOL, LPCWSTR);


 void __attribute__((__stdcall__)) OutputDebugStringA (LPCSTR);
 void __attribute__((__stdcall__)) OutputDebugStringW (LPCWSTR);

 BOOL __attribute__((__stdcall__)) PeekNamedPipe
(HANDLE, PVOID, DWORD, PDWORD, PDWORD, PDWORD);
 BOOL __attribute__((__stdcall__)) PostQueuedCompletionStatus
(HANDLE, DWORD, ULONG_PTR, LPOVERLAPPED);
 DWORD __attribute__((__stdcall__)) PrepareTape (HANDLE, DWORD, BOOL);
 BOOL __attribute__((__stdcall__)) PrivilegeCheck (HANDLE, PPRIVILEGE_SET, PBOOL);


 BOOL __attribute__((__stdcall__)) PrivilegedServiceAuditAlarmA
(LPCSTR, LPCSTR, HANDLE, PPRIVILEGE_SET, BOOL);
 BOOL __attribute__((__stdcall__)) PrivilegedServiceAuditAlarmW
(LPCWSTR, LPCWSTR, HANDLE, PPRIVILEGE_SET, BOOL);

 BOOL __attribute__((__stdcall__)) PulseEvent (HANDLE);
 BOOL __attribute__((__stdcall__)) PurgeComm (HANDLE, DWORD);


 DWORD __attribute__((__stdcall__)) QueryDosDeviceA (LPCSTR, LPSTR, DWORD);
 DWORD __attribute__((__stdcall__)) QueryDosDeviceW (LPCWSTR, LPWSTR, DWORD);
 BOOL __attribute__((__stdcall__)) QueryPerformanceCounter (PLARGE_INTEGER);
 BOOL __attribute__((__stdcall__)) QueryPerformanceFrequency (PLARGE_INTEGER);
 DWORD __attribute__((__stdcall__)) QueueUserAPC (PAPCFUNC, HANDLE, ULONG_PTR);

 void __attribute__((__stdcall__)) RaiseException (DWORD, DWORD, DWORD, const DWORD *);
 BOOL __attribute__((__stdcall__)) ReadDirectoryChangesW
( HANDLE, PVOID, DWORD, BOOL, DWORD, PDWORD, LPOVERLAPPED,
  LPOVERLAPPED_COMPLETION_ROUTINE
);


 BOOL __attribute__((__stdcall__)) ReadEventLogA
(HANDLE, DWORD, DWORD, PVOID, DWORD, DWORD *, DWORD *);
 BOOL __attribute__((__stdcall__)) ReadEventLogW
(HANDLE, DWORD, DWORD, PVOID, DWORD, DWORD *, DWORD *);

 BOOL __attribute__((__stdcall__)) ReadFile (HANDLE, PVOID, DWORD, PDWORD, LPOVERLAPPED);
 BOOL __attribute__((__stdcall__)) ReadFileEx
(HANDLE, PVOID, DWORD, LPOVERLAPPED, LPOVERLAPPED_COMPLETION_ROUTINE);
 BOOL __attribute__((__stdcall__)) ReadFileScatter
(HANDLE, FILE_SEGMENT_ELEMENT *, DWORD, LPDWORD, LPOVERLAPPED);
 BOOL __attribute__((__stdcall__)) ReadProcessMemory (HANDLE, PCVOID, PVOID, DWORD, PDWORD);


 HANDLE __attribute__((__stdcall__)) RegisterEventSourceA (LPCSTR, LPCSTR);
 HANDLE __attribute__((__stdcall__)) RegisterEventSourceW (LPCWSTR, LPCWSTR);

 BOOL __attribute__((__stdcall__)) ReleaseMutex (HANDLE);
 BOOL __attribute__((__stdcall__)) ReleaseSemaphore (HANDLE, LONG, LPLONG);


 BOOL __attribute__((__stdcall__)) RemoveDirectoryA (LPCSTR);
 BOOL __attribute__((__stdcall__)) RemoveDirectoryW (LPCWSTR);


 BOOL __attribute__((__stdcall__)) ReportEventA
(HANDLE, WORD, WORD, DWORD, PSID, WORD, DWORD, LPCSTR *, PVOID);
 BOOL __attribute__((__stdcall__)) ReportEventW
(HANDLE, WORD, WORD, DWORD, PSID, WORD, DWORD, LPCWSTR *, PVOID);




 BOOL __attribute__((__stdcall__)) ResetEvent (HANDLE);


 UINT __attribute__((__stdcall__)) ResetWriteWatch (LPVOID, SIZE_T);
 DWORD __attribute__((__stdcall__)) ResumeThread (HANDLE);
 BOOL __attribute__((__stdcall__)) RevertToSelf (void);


 DWORD __attribute__((__stdcall__)) SearchPathA
(LPCSTR, LPCSTR, LPCSTR, DWORD, LPSTR, LPSTR *);
 DWORD __attribute__((__stdcall__)) SearchPathW
(LPCWSTR, LPCWSTR, LPCWSTR, DWORD, LPWSTR, LPWSTR *);

 BOOL __attribute__((__stdcall__)) SetAclInformation
(PACL, PVOID, DWORD, ACL_INFORMATION_CLASS);
 BOOL __attribute__((__stdcall__)) SetCommBreak (HANDLE);
 BOOL __attribute__((__stdcall__)) SetCommConfig (HANDLE, LPCOMMCONFIG, DWORD);
 BOOL __attribute__((__stdcall__)) SetCommMask (HANDLE, DWORD);
 BOOL __attribute__((__stdcall__)) SetCommState (HANDLE, LPDCB);
 BOOL __attribute__((__stdcall__)) SetCommTimeouts (HANDLE, LPCOMMTIMEOUTS);


 BOOL __attribute__((__stdcall__)) SetComputerNameA (LPCSTR);
 BOOL __attribute__((__stdcall__)) SetComputerNameW (LPCWSTR);


 BOOL __attribute__((__stdcall__)) SetCurrentDirectoryA (LPCSTR);
 BOOL __attribute__((__stdcall__)) SetCurrentDirectoryW (LPCWSTR);


 BOOL __attribute__((__stdcall__)) SetDefaultCommConfigA (LPCSTR, LPCOMMCONFIG, DWORD);
 BOOL __attribute__((__stdcall__)) SetDefaultCommConfigW (LPCWSTR, LPCOMMCONFIG, DWORD);

 BOOL __attribute__((__stdcall__)) SetEndOfFile (HANDLE);


 BOOL __attribute__((__stdcall__)) SetEnvironmentVariableA (LPCSTR, LPCSTR);
 BOOL __attribute__((__stdcall__)) SetEnvironmentVariableW (LPCWSTR, LPCWSTR);

 UINT __attribute__((__stdcall__)) SetErrorMode (UINT);




 BOOL __attribute__((__stdcall__)) SetEvent (HANDLE);


 void __attribute__((__stdcall__)) SetFileApisToANSI (void);
 void __attribute__((__stdcall__)) SetFileApisToOEM (void);


 BOOL __attribute__((__stdcall__)) SetFileAttributesA (LPCSTR, DWORD);
 BOOL __attribute__((__stdcall__)) SetFileAttributesW (LPCWSTR, DWORD);

 DWORD __attribute__((__stdcall__)) SetFilePointer (HANDLE, LONG, PLONG, DWORD);
 BOOL __attribute__((__stdcall__)) SetFilePointerEx
(HANDLE, LARGE_INTEGER, PLARGE_INTEGER, DWORD);


 BOOL __attribute__((__stdcall__)) SetFileSecurityA
(LPCSTR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR);
 BOOL __attribute__((__stdcall__)) SetFileSecurityW
(LPCWSTR, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR);

 BOOL __attribute__((__stdcall__)) SetFileTime
(HANDLE, const FILETIME *, const FILETIME *, const FILETIME *);

 UINT __attribute__((__stdcall__)) SetHandleCount (UINT);
 BOOL __attribute__((__stdcall__)) SetHandleInformation (HANDLE, DWORD, DWORD);
 BOOL __attribute__((__stdcall__)) SetKernelObjectSecurity
(HANDLE, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR);
 void __attribute__((__stdcall__)) SetLastError (DWORD);
 void __attribute__((__stdcall__)) SetLastErrorEx (DWORD, DWORD);
 BOOL __attribute__((__stdcall__)) SetLocalTime (const SYSTEMTIME *);
 BOOL __attribute__((__stdcall__)) SetMailslotInfo (HANDLE, DWORD);
 BOOL __attribute__((__stdcall__)) SetNamedPipeHandleState (HANDLE, PDWORD, PDWORD, PDWORD);
 BOOL __attribute__((__stdcall__)) SetPriorityClass (HANDLE, DWORD);
 BOOL __attribute__((__stdcall__)) SetPrivateObjectSecurity
( SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, PSECURITY_DESCRIPTOR *,
  PGENERIC_MAPPING, HANDLE
);
 BOOL __attribute__((__stdcall__)) SetProcessAffinityMask (HANDLE, DWORD);
 BOOL __attribute__((__stdcall__)) SetProcessPriorityBoost (HANDLE, BOOL);
 BOOL __attribute__((__stdcall__)) SetProcessShutdownParameters (DWORD, DWORD);
 BOOL __attribute__((__stdcall__)) SetProcessWorkingSetSize (HANDLE, SIZE_T, SIZE_T);
 BOOL __attribute__((__stdcall__)) SetSecurityDescriptorControl
( PSECURITY_DESCRIPTOR, SECURITY_DESCRIPTOR_CONTROL, SECURITY_DESCRIPTOR_CONTROL
);
 BOOL __attribute__((__stdcall__)) SetSecurityDescriptorDacl
(PSECURITY_DESCRIPTOR, BOOL, PACL, BOOL);
 BOOL __attribute__((__stdcall__)) SetSecurityDescriptorGroup
(PSECURITY_DESCRIPTOR, PSID, BOOL);
 BOOL __attribute__((__stdcall__)) SetSecurityDescriptorOwner
(PSECURITY_DESCRIPTOR, PSID, BOOL);
 BOOL __attribute__((__stdcall__)) SetSecurityDescriptorSacl
(PSECURITY_DESCRIPTOR, BOOL, PACL, BOOL);
 BOOL __attribute__((__stdcall__)) SetStdHandle (DWORD, HANDLE);



 BOOL __attribute__((__stdcall__)) SetSystemPowerState (BOOL, BOOL);
 BOOL __attribute__((__stdcall__)) SetSystemTime (const SYSTEMTIME *);
 BOOL __attribute__((__stdcall__)) SetSystemTimeAdjustment (DWORD, BOOL);
 DWORD __attribute__((__stdcall__)) SetTapeParameters (HANDLE, DWORD, PVOID);
 DWORD __attribute__((__stdcall__)) SetTapePosition
(HANDLE, DWORD, DWORD, DWORD, DWORD, BOOL);
 DWORD __attribute__((__stdcall__)) SetThreadAffinityMask (HANDLE, DWORD);
 BOOL __attribute__((__stdcall__)) SetThreadContext (HANDLE, const CONTEXT *);

 DWORD __attribute__((__stdcall__)) SetThreadIdealProcessor (HANDLE, DWORD);
 BOOL __attribute__((__stdcall__)) SetThreadPriority (HANDLE, int);
 BOOL __attribute__((__stdcall__)) SetThreadPriorityBoost (HANDLE, BOOL);
 BOOL __attribute__((__stdcall__)) SetThreadToken (PHANDLE, HANDLE);
 BOOL __attribute__((__stdcall__)) SetTimeZoneInformation (const TIME_ZONE_INFORMATION *);
 BOOL __attribute__((__stdcall__)) SetTokenInformation
(HANDLE, TOKEN_INFORMATION_CLASS, PVOID, DWORD);
 LPTOP_LEVEL_EXCEPTION_FILTER __attribute__((__stdcall__)) SetUnhandledExceptionFilter
(LPTOP_LEVEL_EXCEPTION_FILTER);
 BOOL __attribute__((__stdcall__)) SetupComm (HANDLE, DWORD, DWORD);


 BOOL __attribute__((__stdcall__)) SetVolumeLabelA (LPCSTR, LPCSTR);
 BOOL __attribute__((__stdcall__)) SetVolumeLabelW (LPCWSTR, LPCWSTR);

 BOOL __attribute__((__stdcall__)) SetWaitableTimer
(HANDLE, const LARGE_INTEGER *, LONG, PTIMERAPCROUTINE, PVOID, BOOL);
 DWORD __attribute__((__stdcall__)) SignalObjectAndWait (HANDLE, HANDLE, DWORD, BOOL);
 DWORD __attribute__((__stdcall__)) SizeofResource (HINSTANCE, HRSRC);
 void __attribute__((__stdcall__)) Sleep (DWORD);
 DWORD __attribute__((__stdcall__)) SleepEx (DWORD, BOOL);
 DWORD __attribute__((__stdcall__)) SuspendThread (HANDLE);
 void __attribute__((__stdcall__)) SwitchToFiber (PVOID);
 BOOL __attribute__((__stdcall__)) SwitchToThread (void);
 BOOL __attribute__((__stdcall__)) SystemTimeToFileTime (const SYSTEMTIME *, LPFILETIME);
 BOOL __attribute__((__stdcall__)) SystemTimeToTzSpecificLocalTime
(LPTIME_ZONE_INFORMATION, LPSYSTEMTIME, LPSYSTEMTIME);

 BOOL __attribute__((__stdcall__)) TerminateProcess (HANDLE, UINT);
 BOOL __attribute__((__stdcall__)) TerminateThread (HANDLE, DWORD);
 DWORD __attribute__((__stdcall__)) TlsAlloc (void);
 BOOL __attribute__((__stdcall__)) TlsFree (DWORD);
 PVOID __attribute__((__stdcall__)) TlsGetValue (DWORD);
 BOOL __attribute__((__stdcall__)) TlsSetValue (DWORD, PVOID);
 BOOL __attribute__((__stdcall__)) TransactNamedPipe
(HANDLE, PVOID, DWORD, PVOID, DWORD, PDWORD, LPOVERLAPPED);
 BOOL __attribute__((__stdcall__)) TransmitCommChar (HANDLE, char);
 BOOL __attribute__((__stdcall__)) TryEnterCriticalSection (LPCRITICAL_SECTION);
 LONG __attribute__((__stdcall__)) UnhandledExceptionFilter (LPEXCEPTION_POINTERS);
 BOOL __attribute__((__stdcall__)) UnlockFile (HANDLE, DWORD, DWORD, DWORD, DWORD);
 BOOL __attribute__((__stdcall__)) UnlockFileEx (HANDLE, DWORD, DWORD, DWORD, LPOVERLAPPED);




 BOOL __attribute__((__stdcall__)) UnmapViewOfFile (LPCVOID);


 BOOL __attribute__((__stdcall__)) UpdateResourceA
(HANDLE, LPCSTR, LPCSTR, WORD, PVOID, DWORD);
 BOOL __attribute__((__stdcall__)) UpdateResourceW
(HANDLE, LPCWSTR, LPCWSTR, WORD, PVOID, DWORD);


 BOOL __attribute__((__stdcall__)) VerifyVersionInfoA
(LPOSVERSIONINFOEXA, DWORD, DWORDLONG);
 BOOL __attribute__((__stdcall__)) VerifyVersionInfoW
(LPOSVERSIONINFOEXW, DWORD, DWORDLONG);

 PVOID __attribute__((__stdcall__)) VirtualAlloc (PVOID, DWORD, DWORD, DWORD);
 PVOID __attribute__((__stdcall__)) VirtualAllocEx (HANDLE, PVOID, DWORD, DWORD, DWORD);
 BOOL __attribute__((__stdcall__)) VirtualFree (PVOID, DWORD, DWORD);
 BOOL __attribute__((__stdcall__)) VirtualFreeEx (HANDLE, PVOID, DWORD, DWORD);
 BOOL __attribute__((__stdcall__)) VirtualLock (PVOID, DWORD);
 BOOL __attribute__((__stdcall__)) VirtualProtect (PVOID, DWORD, DWORD, PDWORD);
 BOOL __attribute__((__stdcall__)) VirtualProtectEx (HANDLE, PVOID, DWORD, DWORD, PDWORD);
 DWORD __attribute__((__stdcall__)) VirtualQuery (LPCVOID, PMEMORY_BASIC_INFORMATION, DWORD);
 DWORD __attribute__((__stdcall__)) VirtualQueryEx
(HANDLE, LPCVOID, PMEMORY_BASIC_INFORMATION, DWORD);
 BOOL __attribute__((__stdcall__)) VirtualUnlock (PVOID, DWORD);
 BOOL __attribute__((__stdcall__)) WaitCommEvent (HANDLE, PDWORD, LPOVERLAPPED);
 BOOL __attribute__((__stdcall__)) WaitForDebugEvent (LPDEBUG_EVENT, DWORD);
 DWORD __attribute__((__stdcall__)) WaitForMultipleObjects
(DWORD, const HANDLE *, BOOL, DWORD);
 DWORD __attribute__((__stdcall__)) WaitForMultipleObjectsEx
(DWORD, const HANDLE *, BOOL, DWORD, BOOL);
 DWORD __attribute__((__stdcall__)) WaitForSingleObject (HANDLE, DWORD);
 DWORD __attribute__((__stdcall__)) WaitForSingleObjectEx (HANDLE, DWORD, BOOL);


 BOOL __attribute__((__stdcall__)) WaitNamedPipeA (LPCSTR, DWORD);
 BOOL __attribute__((__stdcall__)) WaitNamedPipeW (LPCWSTR, DWORD);

 BOOL __attribute__((__stdcall__)) WinLoadTrustProvider (GUID *);
 BOOL __attribute__((__stdcall__)) WriteFile (HANDLE, PCVOID, DWORD, PDWORD, LPOVERLAPPED);
 BOOL __attribute__((__stdcall__)) WriteFileEx
(HANDLE, PCVOID, DWORD, LPOVERLAPPED, LPOVERLAPPED_COMPLETION_ROUTINE);
 BOOL __attribute__((__stdcall__)) WriteFileGather
(HANDLE, FILE_SEGMENT_ELEMENT *, DWORD, LPDWORD, LPOVERLAPPED);


 BOOL __attribute__((__stdcall__)) WritePrivateProfileSectionA (LPCSTR, LPCSTR, LPCSTR);
 BOOL __attribute__((__stdcall__)) WritePrivateProfileSectionW (LPCWSTR, LPCWSTR, LPCWSTR);


 BOOL __attribute__((__stdcall__)) WritePrivateProfileStringA
(LPCSTR, LPCSTR, LPCSTR, LPCSTR);
 BOOL __attribute__((__stdcall__)) WritePrivateProfileStringW
(LPCWSTR, LPCWSTR, LPCWSTR, LPCWSTR);


 BOOL __attribute__((__stdcall__)) WritePrivateProfileStructA
(LPCSTR, LPCSTR, LPVOID, UINT, LPCSTR);
 BOOL __attribute__((__stdcall__)) WritePrivateProfileStructW
(LPCWSTR, LPCWSTR, LPVOID, UINT, LPCWSTR);

 BOOL __attribute__((__stdcall__)) WriteProcessMemory
(HANDLE, LPVOID, LPCVOID, SIZE_T, SIZE_T *);


 BOOL __attribute__((__stdcall__)) WriteProfileSectionA (LPCSTR, LPCSTR);
 BOOL __attribute__((__stdcall__)) WriteProfileSectionW (LPCWSTR, LPCWSTR);


 BOOL __attribute__((__stdcall__)) WriteProfileStringA (LPCSTR, LPCSTR, LPCSTR);
 BOOL __attribute__((__stdcall__)) WriteProfileStringW (LPCWSTR, LPCWSTR, LPCWSTR);

 DWORD __attribute__((__stdcall__)) WriteTapemark (HANDLE, DWORD, DWORD, BOOL);







 BOOL __attribute__((__stdcall__)) ConvertFiberToThread (void);
 LPVOID __attribute__((__stdcall__)) CreateFiberEx
(SIZE_T, SIZE_T, DWORD, LPFIBER_START_ROUTINE, LPVOID);






typedef DWORD EXECUTION_STATE;


 DWORD __attribute__((__stdcall__)) GetLongPathNameA (LPCSTR, LPSTR, DWORD);
 DWORD __attribute__((__stdcall__)) GetLongPathNameW (LPCWSTR, LPWSTR, DWORD);

 EXECUTION_STATE __attribute__((__stdcall__)) SetThreadExecutionState (EXECUTION_STATE);





 HANDLE __attribute__((__stdcall__)) OpenThread (DWORD, BOOL, DWORD);





typedef struct _MEMORYSTATUSEX
{ DWORD dwLength;
  DWORD dwMemoryLoad;
  DWORDLONG ullTotalPhys;
  DWORDLONG ullAvailPhys;
  DWORDLONG ullTotalPageFile;
  DWORDLONG ullAvailPageFile;
  DWORDLONG ullTotalVirtual;
  DWORDLONG ullAvailVirtual;
  DWORDLONG ullAvailExtendedVirtual;
} MEMORYSTATUSEX, *LPMEMORYSTATUSEX;

typedef enum _COMPUTER_NAME_FORMAT
{ ComputerNameNetBIOS,
  ComputerNameDnsHostname,
  ComputerNameDnsDomain,
  ComputerNameDnsFullyQualified,
  ComputerNamePhysicalNetBIOS,
  ComputerNamePhysicalDnsHostname,
  ComputerNamePhysicalDnsDomain,
  ComputerNamePhysicalDnsFullyQualified,
  ComputerNameMax
} COMPUTER_NAME_FORMAT;

typedef void (__attribute__((__stdcall__)) *WAITORTIMERCALLBACK)(PVOID, BOOLEAN);

 BOOL __attribute__((__stdcall__)) AddAccessAllowedAceEx (PACL, DWORD, DWORD, DWORD, PSID);
 BOOL __attribute__((__stdcall__)) AddAccessDeniedAceEx (PACL, DWORD, DWORD, DWORD, PSID);
 PVOID __attribute__((__stdcall__)) AddVectoredExceptionHandler
(ULONG, PVECTORED_EXCEPTION_HANDLER);

 BOOL __attribute__((__stdcall__)) ChangeTimerQueueTimer (HANDLE, HANDLE, ULONG, ULONG);
 BOOL __attribute__((__stdcall__)) CheckTokenMembership (HANDLE, PSID, PBOOL);


 BOOL __attribute__((__stdcall__)) CreateHardLinkA (LPCSTR, LPCSTR, LPSECURITY_ATTRIBUTES);
 BOOL __attribute__((__stdcall__)) CreateHardLinkW
(LPCWSTR, LPCWSTR, LPSECURITY_ATTRIBUTES);


 HANDLE __attribute__((__stdcall__)) CreateJobObjectA (LPSECURITY_ATTRIBUTES, LPCSTR);
 HANDLE __attribute__((__stdcall__)) CreateJobObjectW (LPSECURITY_ATTRIBUTES, LPCWSTR);

 BOOL __attribute__((__stdcall__)) TerminateJobObject (HANDLE, UINT);
 BOOL __attribute__((__stdcall__)) AssignProcessToJobObject (HANDLE, HANDLE);

 BOOL __attribute__((__stdcall__)) SetInformationJobObject
(HANDLE, JOBOBJECTINFOCLASS, LPVOID, DWORD);
 BOOL __attribute__((__stdcall__)) QueryInformationJobObject
(HANDLE, JOBOBJECTINFOCLASS, LPVOID, DWORD, LPDWORD);

 BOOL __attribute__((__stdcall__)) CreateProcessWithLogonW
( LPCWSTR, LPCWSTR, LPCWSTR, DWORD, LPCWSTR, LPWSTR, DWORD, LPVOID,
  LPCWSTR, LPSTARTUPINFOW, LPPROCESS_INFORMATION
);



 BOOL __attribute__((__stdcall__)) CreateRestrictedToken
( HANDLE, DWORD, DWORD, PSID_AND_ATTRIBUTES, DWORD, PLUID_AND_ATTRIBUTES,
  DWORD, PSID_AND_ATTRIBUTES, PHANDLE
);





 HANDLE __attribute__((__stdcall__)) CreateTimerQueue (void);
 BOOL __attribute__((__stdcall__)) CreateTimerQueueTimer
(PHANDLE, HANDLE, WAITORTIMERCALLBACK, PVOID, DWORD, DWORD, ULONG);

 BOOL __attribute__((__stdcall__)) DeleteTimerQueue (HANDLE);
 BOOL __attribute__((__stdcall__)) DeleteTimerQueueEx (HANDLE, HANDLE);
 BOOL __attribute__((__stdcall__)) DeleteTimerQueueTimer (HANDLE, HANDLE, HANDLE);


 BOOL __attribute__((__stdcall__)) DeleteVolumeMountPointA (LPCSTR);
 BOOL __attribute__((__stdcall__)) DeleteVolumeMountPointW (LPCWSTR);


 BOOL __attribute__((__stdcall__)) DnsHostnameToComputerNameA (LPCSTR, LPSTR, LPDWORD);
 BOOL __attribute__((__stdcall__)) DnsHostnameToComputerNameW (LPCWSTR, LPWSTR, LPDWORD);


 HANDLE __attribute__((__stdcall__)) FindFirstVolumeA (LPCSTR, DWORD);
 HANDLE __attribute__((__stdcall__)) FindFirstVolumeW (LPCWSTR, DWORD);


 HANDLE __attribute__((__stdcall__)) FindFirstVolumeMountPointA (LPSTR, LPSTR, DWORD);
 HANDLE __attribute__((__stdcall__)) FindFirstVolumeMountPointW (LPWSTR, LPWSTR, DWORD);


 BOOL __attribute__((__stdcall__)) FindNextVolumeA (HANDLE, LPCSTR, DWORD);
 BOOL __attribute__((__stdcall__)) FindNextVolumeW (HANDLE, LPWSTR, DWORD);


 BOOL __attribute__((__stdcall__)) FindNextVolumeMountPointA (HANDLE, LPSTR, DWORD);
 BOOL __attribute__((__stdcall__)) FindNextVolumeMountPointW (HANDLE, LPWSTR, DWORD);

 BOOL __attribute__((__stdcall__)) FindVolumeClose (HANDLE);
 BOOL __attribute__((__stdcall__)) FindVolumeMountPointClose (HANDLE);


 BOOL __attribute__((__stdcall__)) GetComputerNameExA
(COMPUTER_NAME_FORMAT, LPSTR, LPDWORD);
 BOOL __attribute__((__stdcall__)) GetComputerNameExW
(COMPUTER_NAME_FORMAT, LPWSTR, LPDWORD);

 BOOL __attribute__((__stdcall__)) GetFileSizeEx (HANDLE, PLARGE_INTEGER);
 BOOL __attribute__((__stdcall__)) GetProcessIoCounters (HANDLE, PIO_COUNTERS);


 UINT __attribute__((__stdcall__)) GetSystemWindowsDirectoryA (LPSTR, UINT);
 UINT __attribute__((__stdcall__)) GetSystemWindowsDirectoryW (LPWSTR, UINT);


 BOOL __attribute__((__stdcall__)) GetVolumeNameForVolumeMountPointA (LPCSTR, LPSTR, DWORD);
 BOOL __attribute__((__stdcall__)) GetVolumeNameForVolumeMountPointW
(LPCWSTR, LPWSTR, DWORD);


 BOOL __attribute__((__stdcall__)) GetVolumePathNameA (LPCSTR, LPSTR, DWORD);
 BOOL __attribute__((__stdcall__)) GetVolumePathNameW (LPCWSTR, LPWSTR, DWORD);

 BOOL __attribute__((__stdcall__)) GlobalMemoryStatusEx (LPMEMORYSTATUSEX);

 BOOL __attribute__((__stdcall__)) IsTokenRestricted (HANDLE);


 BOOL __attribute__((__stdcall__)) MoveFileWithProgressA
(LPCSTR, LPCSTR, LPPROGRESS_ROUTINE, LPVOID, DWORD);
 BOOL __attribute__((__stdcall__)) MoveFileWithProgressW
(LPCWSTR, LPCWSTR, LPPROGRESS_ROUTINE, LPVOID, DWORD);

 BOOL __attribute__((__stdcall__)) ProcessIdToSessionId (DWORD, DWORD *);

 BOOL __attribute__((__stdcall__)) QueueUserWorkItem (LPTHREAD_START_ROUTINE, PVOID, ULONG);

 BOOL __attribute__((__stdcall__)) RegisterWaitForSingleObject
(PHANDLE, HANDLE, WAITORTIMERCALLBACK, PVOID, ULONG, ULONG);
 HANDLE __attribute__((__stdcall__)) RegisterWaitForSingleObjectEx
(HANDLE, WAITORTIMERCALLBACK, PVOID, ULONG, ULONG);
 ULONG __attribute__((__stdcall__)) RemoveVectoredExceptionHandler (PVOID);


 BOOL __attribute__((__stdcall__)) ReplaceFileA
(LPCSTR, LPCSTR, LPCSTR, DWORD, LPVOID, LPVOID);
 BOOL __attribute__((__stdcall__)) ReplaceFileW
(LPCWSTR, LPCWSTR, LPCWSTR, DWORD, LPVOID, LPVOID);



 BOOL __attribute__((__stdcall__)) SetComputerNameExA (COMPUTER_NAME_FORMAT, LPCSTR);
 BOOL __attribute__((__stdcall__)) SetComputerNameExW (COMPUTER_NAME_FORMAT, LPCWSTR);


 BOOL __attribute__((__stdcall__)) SetVolumeMountPointA (LPCSTR, LPCSTR);
 BOOL __attribute__((__stdcall__)) SetVolumeMountPointW (LPCWSTR, LPCWSTR);

 BOOL __attribute__((__stdcall__)) UnregisterWait (HANDLE);
 BOOL __attribute__((__stdcall__)) UnregisterWaitEx (HANDLE, HANDLE);

 BOOL __attribute__((__stdcall__)) AllocateUserPhysicalPages
(HANDLE, PULONG_PTR, PULONG_PTR);

 BOOL __attribute__((__stdcall__)) FreeUserPhysicalPages (HANDLE, PULONG_PTR, PULONG_PTR);

 BOOL __attribute__((__stdcall__)) MapUserPhysicalPages (PVOID, ULONG_PTR, PULONG_PTR);
 BOOL __attribute__((__stdcall__)) MapUserPhysicalPagesScatter
(PVOID *, ULONG_PTR, PULONG_PTR);
# 3054 "c:\\mingw\\include\\winbase.h" 3
}
# 45 "c:\\mingw\\include\\windows.h" 2 3

# 1 "c:\\mingw\\include\\wingdi.h" 1 3
# 33 "c:\\mingw\\include\\wingdi.h" 3
       
# 34 "c:\\mingw\\include\\wingdi.h" 3
# 42 "c:\\mingw\\include\\wingdi.h" 3
extern "C" {
# 55 "c:\\mingw\\include\\wingdi.h" 3
typedef BYTE BCHAR;
# 1382 "c:\\mingw\\include\\wingdi.h" 3
typedef struct _ABC
{ int abcA;
  UINT abcB;
  int abcC;
} ABC, *LPABC;

typedef struct _ABCFLOAT
{ FLOAT abcfA;
  FLOAT abcfB;
  FLOAT abcfC;
} ABCFLOAT, *LPABCFLOAT;

typedef struct tagBITMAP
{ LONG bmType;
  LONG bmWidth;
  LONG bmHeight;
  LONG bmWidthBytes;
  WORD bmPlanes;
  WORD bmBitsPixel;
  LPVOID bmBits;
} BITMAP, *PBITMAP, *LPBITMAP;

typedef struct tagBITMAPCOREHEADER
{ DWORD bcSize;
  WORD bcWidth;
  WORD bcHeight;
  WORD bcPlanes;
  WORD bcBitCount;
} BITMAPCOREHEADER, *LPBITMAPCOREHEADER, *PBITMAPCOREHEADER;

#pragma pack (push, 1)

typedef struct tagRGBTRIPLE
{ BYTE rgbtBlue;
  BYTE rgbtGreen;
  BYTE rgbtRed;
} RGBTRIPLE, *LPRGBTRIPLE;

#pragma pack (2)

typedef struct tagBITMAPFILEHEADER
{ WORD bfType;
  DWORD bfSize;
  WORD bfReserved1;
  WORD bfReserved2;
  DWORD bfOffBits;
} BITMAPFILEHEADER, *LPBITMAPFILEHEADER, *PBITMAPFILEHEADER;

#pragma pack (pop)

typedef struct _BITMAPCOREINFO
{ BITMAPCOREHEADER bmciHeader;
  RGBTRIPLE bmciColors[1];
} BITMAPCOREINFO, *LPBITMAPCOREINFO, *PBITMAPCOREINFO;

typedef struct tagBITMAPINFOHEADE
{ DWORD biSize;
  LONG biWidth;
  LONG biHeight;
  WORD biPlanes;
  WORD biBitCount;
  DWORD biCompression;
  DWORD biSizeImage;
  LONG biXPelsPerMeter;
  LONG biYPelsPerMeter;
  DWORD biClrUsed;
  DWORD biClrImportant;
} BITMAPINFOHEADER, *LPBITMAPINFOHEADER, *PBITMAPINFOHEADER;

typedef struct tagRGBQUAD
{ BYTE rgbBlue;
  BYTE rgbGreen;
  BYTE rgbRed;
  BYTE rgbReserved;
} RGBQUAD, *LPRGBQUAD;

typedef struct tagBITMAPINFO
{ BITMAPINFOHEADER bmiHeader;
  RGBQUAD bmiColors[1];
} BITMAPINFO, *LPBITMAPINFO, *PBITMAPINFO;
typedef long FXPT16DOT16, *LPFXPT16DOT16;
typedef long FXPT2DOT30, *LPFXPT2DOT30;

typedef struct tagCIEXYZ
{ FXPT2DOT30 ciexyzX;
  FXPT2DOT30 ciexyzY;
  FXPT2DOT30 ciexyzZ;
} CIEXYZ, *LPCIEXYZ;

typedef struct tagCIEXYZTRIPLE
{ CIEXYZ ciexyzRed;
  CIEXYZ ciexyzGreen;
  CIEXYZ ciexyzBlue;
} CIEXYZTRIPLE, *LPCIEXYZTRIPLE;

typedef struct
{ DWORD bV4Size;
  LONG bV4Width;
  LONG bV4Height;
  WORD bV4Planes;
  WORD bV4BitCount;
  DWORD bV4V4Compression;
  DWORD bV4SizeImage;
  LONG bV4XPelsPerMeter;
  LONG bV4YPelsPerMeter;
  DWORD bV4ClrUsed;
  DWORD bV4ClrImportant;
  DWORD bV4RedMask;
  DWORD bV4GreenMask;
  DWORD bV4BlueMask;
  DWORD bV4AlphaMask;
  DWORD bV4CSType;
  CIEXYZTRIPLE bV4Endpoints;
  DWORD bV4GammaRed;
  DWORD bV4GammaGreen;
  DWORD bV4GammaBlue;
} BITMAPV4HEADER, *LPBITMAPV4HEADER, *PBITMAPV4HEADER;

typedef struct
{ DWORD bV5Size;
  LONG bV5Width;
  LONG bV5Height;
  WORD bV5Planes;
  WORD bV5BitCount;
  DWORD bV5Compression;
  DWORD bV5SizeImage;
  LONG bV5XPelsPerMeter;
  LONG bV5YPelsPerMeter;
  DWORD bV5ClrUsed;
  DWORD bV5ClrImportant;
  DWORD bV5RedMask;
  DWORD bV5GreenMask;
  DWORD bV5BlueMask;
  DWORD bV5AlphaMask;
  DWORD bV5CSType;
  CIEXYZTRIPLE bV5Endpoints;
  DWORD bV5GammaRed;
  DWORD bV5GammaGreen;
  DWORD bV5GammaBlue;
  DWORD bV5Intent;
  DWORD bV5ProfileData;
  DWORD bV5ProfileSize;
  DWORD bV5Reserved;
} BITMAPV5HEADER, *LPBITMAPV5HEADER, *PBITMAPV5HEADER;

typedef struct tagFONTSIGNATURE
{ DWORD fsUsb[4];
  DWORD fsCsb[2];
} FONTSIGNATURE, *LPFONTSIGNATURE;

typedef struct
{ UINT ciCharset;
  UINT ciACP;
  FONTSIGNATURE fs;
} CHARSETINFO, *LPCHARSETINFO;

typedef struct tagCOLORADJUSTMENT
{ WORD caSize;
  WORD caFlags;
  WORD caIlluminantIndex;
  WORD caRedGamma;
  WORD caGreenGamma;
  WORD caBlueGamma;
  WORD caReferenceBlack;
  WORD caReferenceWhite;
  SHORT caContrast;
  SHORT caBrightness;
  SHORT caColorfulness;
  SHORT caRedGreenTint;
} COLORADJUSTMENT, *LPCOLORADJUSTMENT;

typedef struct _devicemodeA
{ BYTE dmDeviceName[32];
  WORD dmSpecVersion;
  WORD dmDriverVersion;
  WORD dmSize;
  WORD dmDriverExtra;
  DWORD dmFields;
  __extension__ union
  { __extension__ struct
    { short dmOrientation;
      short dmPaperSize;
      short dmPaperLength;
      short dmPaperWidth;
      short dmScale;
      short dmCopies;
      short dmDefaultSource;
      short dmPrintQuality;
    } ;
    __extension__ struct
    { POINTL dmPosition;
      DWORD dmDisplayOrientation;
      DWORD dmDisplayFixedOutput;
    } ;
  } ;

  short dmColor;
  short dmDuplex;
  short dmYResolution;
  short dmTTOption;
  short dmCollate;
  BYTE dmFormName[32];
  WORD dmLogPixels;
  DWORD dmBitsPerPel;
  DWORD dmPelsWidth;
  DWORD dmPelsHeight;
  __extension__ union
  { DWORD dmDisplayFlags;
    DWORD dmNup;
  } ;

  DWORD dmDisplayFrequency;



  DWORD dmICMMethod;
  DWORD dmICMIntent;
  DWORD dmMediaType;
  DWORD dmDitherType;
  DWORD dmReserved1;
  DWORD dmReserved2;



  DWORD dmPanningWidth;
  DWORD dmPanningHeight;




} DEVMODEA, *LPDEVMODEA, *PDEVMODEA;

typedef struct _devicemodeW
{ WCHAR dmDeviceName[32];
  WORD dmSpecVersion;
  WORD dmDriverVersion;
  WORD dmSize;
  WORD dmDriverExtra;
  DWORD dmFields;
  __extension__ union
  { __extension__ struct
    { short dmOrientation;
      short dmPaperSize;
      short dmPaperLength;
      short dmPaperWidth;
      short dmScale;
      short dmCopies;
      short dmDefaultSource;
      short dmPrintQuality;
    } ;
    __extension__ struct
    { POINTL dmPosition;
      DWORD dmDisplayOrientation;
      DWORD dmDisplayFixedOutput;
    } ;
  } ;

  short dmColor;
  short dmDuplex;
  short dmYResolution;
  short dmTTOption;
  short dmCollate;
  WCHAR dmFormName[32];
  WORD dmLogPixels;
  DWORD dmBitsPerPel;
  DWORD dmPelsWidth;
  DWORD dmPelsHeight;
  __extension__ union
  { DWORD dmDisplayFlags;
    DWORD dmNup;
  } ;

  DWORD dmDisplayFrequency;



  DWORD dmICMMethod;
  DWORD dmICMIntent;
  DWORD dmMediaType;
  DWORD dmDitherType;
  DWORD dmReserved1;
  DWORD dmReserved2;



  DWORD dmPanningWidth;
  DWORD dmPanningHeight;




} DEVMODEW, *LPDEVMODEW, *PDEVMODEW;

typedef DEVMODEA DEVMODE, *PDEVMODE, *LPDEVMODE;

typedef struct tagDIBSECTION
{ BITMAP dsBm;
  BITMAPINFOHEADER dsBmih;
  DWORD dsBitfields[3];
  HANDLE dshSection;
  DWORD dsOffset;
} DIBSECTION;

typedef struct _DOCINFOA
{ int cbSize;
  LPCSTR lpszDocName;
  LPCSTR lpszOutput;
  LPCSTR lpszDatatype;
  DWORD fwType;
} DOCINFOA, *LPDOCINFOA;

typedef struct _DOCINFOW
{ int cbSize;
  LPCWSTR lpszDocName;
  LPCWSTR lpszOutput;
  LPCWSTR lpszDatatype;
  DWORD fwType;
} DOCINFOW, *LPDOCINFOW;

typedef DOCINFOA DOCINFO, *LPDOCINFO;

typedef struct tagEMR
{ DWORD iType;
  DWORD nSize;
} EMR, *PEMR;

typedef struct tagEMRANGLEARC
{ EMR emr;
  POINTL ptlCenter;
  DWORD nRadius;
  FLOAT eStartAngle;
  FLOAT eSweepAngle;
} EMRANGLEARC, *PEMRANGLEARC;

typedef struct tagEMRARC
{ EMR emr;
  RECTL rclBox;
  POINTL ptlStart;
  POINTL ptlEnd;
} EMRARC, *PEMRARC, EMRARCTO, *PEMRARCTO;

typedef struct tagEMRARC EMRCHORD, *PEMRCHORD, EMRPIE, *PEMRPIE;

typedef struct _XFORM
{ FLOAT eM11;
  FLOAT eM12;
  FLOAT eM21;
  FLOAT eM22;
  FLOAT eDx;
  FLOAT eDy;
} XFORM, *PXFORM, *LPXFORM;

typedef struct tagEMRBITBLT
{ EMR emr;
  RECTL rclBounds;
  LONG xDest;
  LONG yDest;
  LONG cxDest;
  LONG cyDest;
  DWORD dwRop;
  LONG xSrc;
  LONG ySrc;
  XFORM xformSrc;
  COLORREF crBkColorSrc;
  DWORD iUsageSrc;
  DWORD offBmiSrc;
  DWORD offBitsSrc;
  DWORD cbBitsSrc;
} EMRBITBLT, *PEMRBITBLT;

typedef struct tagLOGBRUSH
{ UINT lbStyle;
  COLORREF lbColor;
  LONG lbHatch;
} LOGBRUSH, *PLOGBRUSH, *LPLOGBRUSH;
typedef LOGBRUSH PATTERN, *PPATTERN, *LPPATTERN;

typedef struct tagEMRCREATEBRUSHINDIRECT
{ EMR emr;
  DWORD ihBrush;
  LOGBRUSH lb;
} EMRCREATEBRUSHINDIRECT, *PEMRCREATEBRUSHINDIRECT;
typedef LONG LCSCSTYPE;
typedef LONG LCSGAMUTMATCH;

typedef struct tagLOGCOLORSPACEA
{ DWORD lcsSignature;
  DWORD lcsVersion;
  DWORD lcsSize;
  LCSCSTYPE lcsCSType;
  LCSGAMUTMATCH lcsIntent;
  CIEXYZTRIPLE lcsEndpoints;
  DWORD lcsGammaRed;
  DWORD lcsGammaGreen;
  DWORD lcsGammaBlue;
  CHAR lcsFilename[260];
} LOGCOLORSPACEA, *LPLOGCOLORSPACEA;

typedef struct tagLOGCOLORSPACEW
{ DWORD lcsSignature;
  DWORD lcsVersion;
  DWORD lcsSize;
  LCSCSTYPE lcsCSType;
  LCSGAMUTMATCH lcsIntent;
  CIEXYZTRIPLE lcsEndpoints;
  DWORD lcsGammaRed;
  DWORD lcsGammaGreen;
  DWORD lcsGammaBlue;
  WCHAR lcsFilename[260];
} LOGCOLORSPACEW, *LPLOGCOLORSPACEW;

typedef LOGCOLORSPACEA LOGCOLORSPACE, *LPLOGCOLORSPACE;

typedef struct tagEMRCREATECOLORSPACE
{ EMR emr;
  DWORD ihCS;
  LOGCOLORSPACEW lcs;
} EMRCREATECOLORSPACE, *PEMRCREATECOLORSPACE;

typedef struct tagEMRCREATEDIBPATTERNBRUSHPT
{ EMR emr;
  DWORD ihBrush;
  DWORD iUsage;
  DWORD offBmi;
  DWORD cbBmi;
  DWORD offBits;
  DWORD cbBits;
} EMRCREATEDIBPATTERNBRUSHPT, *PEMRCREATEDIBPATTERNBRUSHPT;

typedef struct tagEMRCREATEMONOBRUSH
{ EMR emr;
  DWORD ihBrush;
  DWORD iUsage;
  DWORD offBmi;
  DWORD cbBmi;
  DWORD offBits;
  DWORD cbBits;
} EMRCREATEMONOBRUSH, *PEMRCREATEMONOBRUSH;

typedef struct tagPALETTEENTRY
{ BYTE peRed;
  BYTE peGreen;
  BYTE peBlue;
  BYTE peFlags;
} PALETTEENTRY, *LPPALETTEENTRY, *PPALETTEENTRY;

typedef struct tagLOGPALETTE
{ WORD palVersion;
  WORD palNumEntries;
  PALETTEENTRY palPalEntry[1];
} LOGPALETTE, *NPLOGPALETTE, *PLOGPALETTE, *LPLOGPALETTE;

typedef struct tagEMRCREATEPALETTE
{ EMR emr;
  DWORD ihPal;
  LOGPALETTE lgpl;
} EMRCREATEPALETTE, *PEMRCREATEPALETTE;

typedef struct tagLOGPEN
{ UINT lopnStyle;
  POINT lopnWidth;
  COLORREF lopnColor;
} LOGPEN, *PLOGPEN, *LPLOGPEN;

typedef struct tagEMRCREATEPEN
{ EMR emr;
  DWORD ihPen;
  LOGPEN lopn;
} EMRCREATEPEN, *PEMRCREATEPEN;

typedef struct tagEMRELLIPSE
{ EMR emr;
  RECTL rclBox;
} EMRELLIPSE, *PEMRELLIPSE, EMRRECTANGLE, *PEMRRECTANGLE;

typedef struct tagEMREOF
{ EMR emr;
  DWORD nPalEntries;
  DWORD offPalEntries;
  DWORD nSizeLast;
} EMREOF, *PEMREOF;

typedef struct tagEMREXCLUDECLIPRECT
{ EMR emr;
  RECTL rclClip;
} EMREXCLUDECLIPRECT, *PEMREXCLUDECLIPRECT;

typedef struct tagEMREXCLUDECLIPRECT EMRINTERSECTCLIPRECT;
typedef struct tagEMREXCLUDECLIPRECT *PEMRINTERSECTCLIPRECT;

typedef struct tagPANOSE
{ BYTE bFamilyType;
  BYTE bSerifStyle;
  BYTE bWeight;
  BYTE bProportion;
  BYTE bContrast;
  BYTE bStrokeVariation;
  BYTE bArmStyle;
  BYTE bLetterform;
  BYTE bMidline;
  BYTE bXHeight;
} PANOSE;

typedef struct tagLOGFONTA
{ LONG lfHeight;
  LONG lfWidth;
  LONG lfEscapement;
  LONG lfOrientation;
  LONG lfWeight;
  BYTE lfItalic;
  BYTE lfUnderline;
  BYTE lfStrikeOut;
  BYTE lfCharSet;
  BYTE lfOutPrecision;
  BYTE lfClipPrecision;
  BYTE lfQuality;
  BYTE lfPitchAndFamily;
  CHAR lfFaceName[32];
} LOGFONTA, *PLOGFONTA, *LPLOGFONTA;

typedef struct tagLOGFONTW
{ LONG lfHeight;
  LONG lfWidth;
  LONG lfEscapement;
  LONG lfOrientation;
  LONG lfWeight;
  BYTE lfItalic;
  BYTE lfUnderline;
  BYTE lfStrikeOut;
  BYTE lfCharSet;
  BYTE lfOutPrecision;
  BYTE lfClipPrecision;
  BYTE lfQuality;
  BYTE lfPitchAndFamily;
  WCHAR lfFaceName[32];
} LOGFONTW, *PLOGFONTW, *LPLOGFONTW;

typedef LOGFONTA LOGFONT, *PLOGFONT, *LPLOGFONT;

typedef struct tagEXTLOGFONTA
{ LOGFONTA elfLogFont;
  BYTE elfFullName[64];
  BYTE elfStyle[32];
  DWORD elfVersion;
  DWORD elfStyleSize;
  DWORD elfMatch;
  DWORD elfReserved;
  BYTE elfVendorId[4];
  DWORD elfCulture;
  PANOSE elfPanose;
} EXTLOGFONTA, *PEXTLOGFONTA, *LPEXTLOGFONTA;

typedef struct tagEXTLOGFONTW
{ LOGFONTW elfLogFont;
  WCHAR elfFullName[64];
  WCHAR elfStyle[32];
  DWORD elfVersion;
  DWORD elfStyleSize;
  DWORD elfMatch;
  DWORD elfReserved;
  BYTE elfVendorId[4];
  DWORD elfCulture;
  PANOSE elfPanose;
} EXTLOGFONTW, *PEXTLOGFONTW, *LPEXTLOGFONTW;

typedef EXTLOGFONTA EXTLOGFONT, *PEXTLOGFONT, *LPEXTLOGFONT;

typedef struct tagEMREXTCREATEFONTINDIRECTW
{ EMR emr;
  DWORD ihFont;
  EXTLOGFONTW elfw;
} EMREXTCREATEFONTINDIRECTW, *PEMREXTCREATEFONTINDIRECTW;

typedef struct tagEXTLOGPEN
{ UINT elpPenStyle;
  UINT elpWidth;
  UINT elpBrushStyle;
  COLORREF elpColor;
  LONG elpHatch;
  DWORD elpNumEntries;
  DWORD elpStyleEntry[1];
} EXTLOGPEN, *PEXTLOGPEN, *LPEXTLOGPEN;

typedef struct tagEMREXTCREATEPEN
{ EMR emr;
  DWORD ihPen;
  DWORD offBmi;
  DWORD cbBmi;
  DWORD offBits;
  DWORD cbBits;
  EXTLOGPEN elp;
} EMREXTCREATEPEN, *PEMREXTCREATEPEN;

typedef struct tagEMREXTFLOODFILL
{ EMR emr;
  POINTL ptlStart;
  COLORREF crColor;
  DWORD iMode;
} EMREXTFLOODFILL, *PEMREXTFLOODFILL;

typedef struct tagEMREXTSELECTCLIPRGN
{ EMR emr;
  DWORD cbRgnData;
  DWORD iMode;
  BYTE RgnData[1];
} EMREXTSELECTCLIPRGN, *PEMREXTSELECTCLIPRGN;

typedef struct tagEMRTEXT
{ POINTL ptlReference;
  DWORD nChars;
  DWORD offString;
  DWORD fOptions;
  RECTL rcl;
  DWORD offDx;
} EMRTEXT, *PEMRTEXT;

typedef struct tagEMREXTTEXTOUTA
{ EMR emr;
  RECTL rclBounds;
  DWORD iGraphicsMode;
  FLOAT exScale;
  FLOAT eyScale;
  EMRTEXT emrtext;
} EMREXTTEXTOUTA, *PEMREXTTEXTOUTA, EMREXTTEXTOUTW, *PEMREXTTEXTOUTW;

typedef struct tagEMRFILLPATH
{ EMR emr;
  RECTL rclBounds;
} EMRFILLPATH, *PEMRFILLPATH, EMRSTROKEANDFILLPATH, *PEMRSTROKEANDFILLPATH;

typedef struct tagEMRFILLPATH EMRSTROKEPATH, *PEMRSTROKEPATH;

typedef struct tagEMRFILLRGN
{ EMR emr;
  RECTL rclBounds;
  DWORD cbRgnData;
  DWORD ihBrush;
  BYTE RgnData[1];
} EMRFILLRGN, *PEMRFILLRGN;

typedef struct tagEMRFORMAT
{ DWORD dSignature;
  DWORD nVersion;
  DWORD cbData;
  DWORD offData;
} EMRFORMAT;

typedef struct tagEMRFRAMERGN
{ EMR emr;
  RECTL rclBounds;
  DWORD cbRgnData;
  DWORD ihBrush;
  SIZEL szlStroke;
  BYTE RgnData[1];
} EMRFRAMERGN, *PEMRFRAMERGN;

typedef struct tagEMRGDICOMMENT
{ EMR emr;
  DWORD cbData;
  BYTE Data[1];
} EMRGDICOMMENT, *PEMRGDICOMMENT;

typedef struct tagEMRINVERTRGN
{ EMR emr;
  RECTL rclBounds;
  DWORD cbRgnData;
  BYTE RgnData[1];
} EMRINVERTRGN, *PEMRINVERTRGN, EMRPAINTRGN, *PEMRPAINTRGN;

typedef struct tagEMRLINETO
{ EMR emr;
  POINTL ptl;
} EMRLINETO, *PEMRLINETO, EMRMOVETOEX, *PEMRMOVETOEX;

typedef struct tagEMRMASKBLT
{ EMR emr;
  RECTL rclBounds;
  LONG xDest;
  LONG yDest;
  LONG cxDest;
  LONG cyDest;
  DWORD dwRop;
  LONG xSrc;
  LONG ySrc;
  XFORM xformSrc;
  COLORREF crBkColorSrc;
  DWORD iUsageSrc;
  DWORD offBmiSrc;
  DWORD cbBmiSrc;
  DWORD offBitsSrc;
  DWORD cbBitsSrc;
  LONG xMask;
  LONG yMask;
  DWORD iUsageMask;
  DWORD offBmiMask;
  DWORD cbBmiMask;
  DWORD offBitsMask;
  DWORD cbBitsMask;
} EMRMASKBLT, *PEMRMASKBLT;

typedef struct tagEMRMODIFYWORLDTRANSFORM
{ EMR emr;
  XFORM xform;
  DWORD iMode;
} EMRMODIFYWORLDTRANSFORM, *PEMRMODIFYWORLDTRANSFORM;

typedef struct tagEMROFFSETCLIPRGN
{ EMR emr;
  POINTL ptlOffset;
} EMROFFSETCLIPRGN, *PEMROFFSETCLIPRGN;

typedef struct tagEMRPLGBLT
{ EMR emr;
  RECTL rclBounds;
  POINTL aptlDest[3];
  LONG xSrc;
  LONG ySrc;
  LONG cxSrc;
  LONG cySrc;
  XFORM xformSrc;
  COLORREF crBkColorSrc;
  DWORD iUsageSrc;
  DWORD offBmiSrc;
  DWORD cbBmiSrc;
  DWORD offBitsSrc;
  DWORD cbBitsSrc;
  LONG xMask;
  LONG yMask;
  DWORD iUsageMask;
  DWORD offBmiMask;
  DWORD cbBmiMask;
  DWORD offBitsMask;
  DWORD cbBitsMask;
} EMRPLGBLT, *PEMRPLGBLT;

typedef struct tagEMRPOLYDRAW
{ EMR emr;
  RECTL rclBounds;
  DWORD cptl;
  POINTL aptl[1];
  BYTE abTypes[1];
} EMRPOLYDRAW, *PEMRPOLYDRAW;

typedef struct tagEMRPOLYDRAW16
{ EMR emr;
  RECTL rclBounds;
  DWORD cpts;
  POINTS apts[1];
  BYTE abTypes[1];
} EMRPOLYDRAW16, *PEMRPOLYDRAW16;

typedef struct tagEMRPOLYLINE
{ EMR emr;
  RECTL rclBounds;
  DWORD cptl;
  POINTL aptl[1];
} EMRPOLYLINE, *PEMRPOLYLINE, EMRPOLYBEZIER, *PEMRPOLYBEZIER;

typedef struct tagEMRPOLYLINE EMRPOLYGON, *PEMRPOLYGON;
typedef struct tagEMRPOLYLINE EMRPOLYBEZIERTO, *PEMRPOLYBEZIERTO;
typedef struct tagEMRPOLYLINE EMRPOLYLINETO, *PEMRPOLYLINETO;

typedef struct tagEMRPOLYLINE16
{ EMR emr;
  RECTL rclBounds;
  DWORD cpts;
  POINTL apts[1];
} EMRPOLYLINE16, *PEMRPOLYLINE16, EMRPOLYBEZIER16, *PEMRPOLYBEZIER16;

typedef struct tagEMRPOLYLINE16 EMRPOLYGON16, *PEMRPOLYGON16;
typedef struct tagEMRPOLYLINE16 EMRPOLYBEZIERTO16, *PEMRPOLYBEZIERTO16;
typedef struct tagEMRPOLYLINE16 EMRPOLYLINETO16, *PEMRPOLYLINETO16;

typedef struct tagEMRPOLYPOLYLINE
{ EMR emr;
  RECTL rclBounds;
  DWORD nPolys;
  DWORD cptl;
  DWORD aPolyCounts[1];
  POINTL aptl[1];
} EMRPOLYPOLYLINE, *PEMRPOLYPOLYLINE, EMRPOLYPOLYGON, *PEMRPOLYPOLYGON;

typedef struct tagEMRPOLYPOLYLINE16
{ EMR emr;
  RECTL rclBounds;
  DWORD nPolys;
  DWORD cpts;
  DWORD aPolyCounts[1];
  POINTS apts[1];
} EMRPOLYPOLYLINE16, *PEMRPOLYPOLYLINE16, EMRPOLYPOLYGON16, *PEMRPOLYPOLYGON16;

typedef struct tagEMRPOLYTEXTOUTA
{ EMR emr;
  RECTL rclBounds;
  DWORD iGraphicsMode;
  FLOAT exScale;
  FLOAT eyScale;
  LONG cStrings;
  EMRTEXT aemrtext[1];
} EMRPOLYTEXTOUTA, *PEMRPOLYTEXTOUTA, EMRPOLYTEXTOUTW, *PEMRPOLYTEXTOUTW;

typedef struct tagEMRRESIZEPALETTE
{ EMR emr;
  DWORD ihPal;
  DWORD cEntries;
} EMRRESIZEPALETTE, *PEMRRESIZEPALETTE;

typedef struct tagEMRRESTOREDC
{ EMR emr;
  LONG iRelative;
} EMRRESTOREDC, *PEMRRESTOREDC;

typedef struct tagEMRROUNDRECT
{ EMR emr;
  RECTL rclBox;
  SIZEL szlCorner;
} EMRROUNDRECT, *PEMRROUNDRECT;

typedef struct tagEMRSCALEVIEWPORTEXTEX
{ EMR emr;
  LONG xNum;
  LONG xDenom;
  LONG yNum;
  LONG yDenom;
} EMRSCALEVIEWPORTEXTEX, *PEMRSCALEVIEWPORTEXTEX;

typedef struct tagEMRSCALEVIEWPORTEXTEX EMRSCALEWINDOWEXTEX;
typedef struct tagEMRSCALEVIEWPORTEXTEX *PEMRSCALEWINDOWEXTEX;

typedef struct tagEMRSELECTCOLORSPACE
{ EMR emr;
  DWORD ihCS;
} EMRSELECTCOLORSPACE, *PEMRSELECTCOLORSPACE, EMRDELETECOLORSPACE;

typedef struct tagEMRSELECTCOLORSPACE *PEMRDELETECOLORSPACE;

typedef struct tagEMRSELECTOBJECT
{ EMR emr;
  DWORD ihObject;
} EMRSELECTOBJECT, *PEMRSELECTOBJECT, EMRDELETEOBJECT, *PEMRDELETEOBJECT;

typedef struct tagEMRSELECTPALETTE
{ EMR emr;
  DWORD ihPal;
} EMRSELECTPALETTE, *PEMRSELECTPALETTE;

typedef struct tagEMRSETARCDIRECTION
{ EMR emr;
  DWORD iArcDirection;
} EMRSETARCDIRECTION, *PEMRSETARCDIRECTION;

typedef struct tagEMRSETTEXTCOLOR
{ EMR emr;
  COLORREF crColor;
} EMRSETBKCOLOR, *PEMRSETBKCOLOR, EMRSETTEXTCOLOR, *PEMRSETTEXTCOLOR;

typedef struct tagEMRSETCOLORADJUSTMENT
{ EMR emr;
  COLORADJUSTMENT ColorAdjustment;
} EMRSETCOLORADJUSTMENT, *PEMRSETCOLORADJUSTMENT;

typedef struct tagEMRSETDIBITSTODEVICE
{ EMR emr;
  RECTL rclBounds;
  LONG xDest;
  LONG yDest;
  LONG xSrc;
  LONG ySrc;
  LONG cxSrc;
  LONG cySrc;
  DWORD offBmiSrc;
  DWORD cbBmiSrc;
  DWORD offBitsSrc;
  DWORD cbBitsSrc;
  DWORD iUsageSrc;
  DWORD iStartScan;
  DWORD cScans;
} EMRSETDIBITSTODEVICE, *PEMRSETDIBITSTODEVICE;

typedef struct tagEMRSETMAPPERFLAGS
{ EMR emr;
  DWORD dwFlags;
} EMRSETMAPPERFLAGS, *PEMRSETMAPPERFLAGS;

typedef struct tagEMRSETMITERLIMIT
{ EMR emr;
  FLOAT eMiterLimit;
} EMRSETMITERLIMIT, *PEMRSETMITERLIMIT;

typedef struct tagEMRSETPALETTEENTRIES
{ EMR emr;
  DWORD ihPal;
  DWORD iStart;
  DWORD cEntries;
  PALETTEENTRY aPalEntries[1];
} EMRSETPALETTEENTRIES, *PEMRSETPALETTEENTRIES;

typedef struct tagEMRSETPIXELV
{ EMR emr;
  POINTL ptlPixel;
  COLORREF crColor;
} EMRSETPIXELV, *PEMRSETPIXELV;

typedef struct tagEMRSETVIEWPORTEXTEX
{ EMR emr;
  SIZEL szlExtent;
} EMRSETVIEWPORTEXTEX, *PEMRSETVIEWPORTEXTEX, EMRSETWINDOWEXTEX;

typedef struct tagEMRSETVIEWPORTEXTEX *PEMRSETWINDOWEXTEX;

typedef struct tagEMRSETVIEWPORTORGEX
{ EMR emr;
  POINTL ptlOrigin;
} EMRSETVIEWPORTORGEX, *PEMRSETVIEWPORTORGEX, EMRSETWINDOWORGEX;

typedef struct tagEMRSETVIEWPORTORGEX *PEMRSETWINDOWORGEX;
typedef struct tagEMRSETVIEWPORTORGEX EMRSETBRUSHORGEX;
typedef struct tagEMRSETVIEWPORTORGEX *PEMRSETBRUSHORGEX;

typedef struct tagEMRSETWORLDTRANSFORM
{ EMR emr;
  XFORM xform;
} EMRSETWORLDTRANSFORM, *PEMRSETWORLDTRANSFORM;

typedef struct tagEMRSTRETCHBLT
{ EMR emr;
  RECTL rclBounds;
  LONG xDest;
  LONG yDest;
  LONG cxDest;
  LONG cyDest;
  DWORD dwRop;
  LONG xSrc;
  LONG ySrc;
  XFORM xformSrc;
  COLORREF crBkColorSrc;
  DWORD iUsageSrc;
  DWORD offBmiSrc;
  DWORD cbBmiSrc;
  DWORD offBitsSrc;
  DWORD cbBitsSrc;
  LONG cxSrc;
  LONG cySrc;
} EMRSTRETCHBLT, *PEMRSTRETCHBLT;

typedef struct tagEMRSTRETCHDIBITS
{ EMR emr;
  RECTL rclBounds;
  LONG xDest;
  LONG yDest;
  LONG xSrc;
  LONG ySrc;
  LONG cxSrc;
  LONG cySrc;
  DWORD offBmiSrc;
  DWORD cbBmiSrc;
  DWORD offBitsSrc;
  DWORD cbBitsSrc;
  DWORD iUsageSrc;
  DWORD dwRop;
  LONG cxDest;
  LONG cyDest;
} EMRSTRETCHDIBITS, *PEMRSTRETCHDIBITS;

typedef struct tagABORTPATH
{ EMR emr;
} EMRABORTPATH, *PEMRABORTPATH, EMRBEGINPATH, *PEMRBEGINPATH;

typedef struct tagABORTPATH EMRENDPATH, *PEMRENDPATH;
typedef struct tagABORTPATH EMRCLOSEFIGURE, *PEMRCLOSEFIGURE;
typedef struct tagABORTPATH EMRFLATTENPATH, *PEMRFLATTENPATH;
typedef struct tagABORTPATH EMRWIDENPATH, *PEMRWIDENPATH;
typedef struct tagABORTPATH EMRSETMETARGN, *PEMRSETMETARGN;
typedef struct tagABORTPATH EMRSAVEDC, *PEMRSAVEDC;
typedef struct tagABORTPATH EMRREALIZEPALETTE, *PEMRREALIZEPALETTE;

typedef struct tagEMRSELECTCLIPPATH
{ EMR emr;
  DWORD iMode;
} EMRSELECTCLIPPATH, *PEMRSELECTCLIPPATH, EMRSETBKMODE, *PEMRSETBKMODE;

typedef struct tagEMRSELECTCLIPPATH EMRSETMAPMODE, *PEMRSETMAPMODE;
typedef struct tagEMRSELECTCLIPPATH EMRSETPOLYFILLMODE, *PEMRSETPOLYFILLMODE;
typedef struct tagEMRSELECTCLIPPATH EMRSETROP2, *PEMRSETROP2;
typedef struct tagEMRSELECTCLIPPATH EMRSETSTRETCHBLTMODE;
typedef struct tagEMRSELECTCLIPPATH *PEMRSETSTRETCHBLTMODE;
typedef struct tagEMRSELECTCLIPPATH EMRSETTEXTALIGN, *PEMRSETTEXTALIGN;
typedef struct tagEMRSELECTCLIPPATH EMRENABLEICM, *PEMRENABLEICM;

#pragma pack (push, 2)

typedef struct tagMETAHEADER
{ WORD mtType;
  WORD mtHeaderSize;
  WORD mtVersion;
  DWORD mtSize;
  WORD mtNoObjects;
  DWORD mtMaxRecord;
  WORD mtNoParameters;
} METAHEADER, *PMETAHEADER, *LPMETAHEADER;

#pragma pack (pop)

typedef struct tagENHMETAHEADER
{ DWORD iType;
  DWORD nSize;
  RECTL rclBounds;
  RECTL rclFrame;
  DWORD dSignature;
  DWORD nVersion;
  DWORD nBytes;
  DWORD nRecords;
  WORD nHandles;
  WORD sReserved;
  DWORD nDescription;
  DWORD offDescription;
  DWORD nPalEntries;
  SIZEL szlDevice;
  SIZEL szlMillimeters;



  DWORD cbPixelFormat;
  DWORD offPixelFormat;
  DWORD bOpenGL;



  SIZEL szlMicrometers;




} ENHMETAHEADER, *LPENHMETAHEADER;

typedef struct tagMETARECORD
{ DWORD rdSize;
  WORD rdFunction;
  WORD rdParm[1];
} METARECORD, *PMETARECORD, *LPMETARECORD;

typedef struct tagENHMETARECORD
{ DWORD iType;
  DWORD nSize;
  DWORD dParm[1];
} ENHMETARECORD, *LPENHMETARECORD;

typedef struct tagHANDLETABLE
{ HGDIOBJ objectHandle[1];
} HANDLETABLE, *LPHANDLETABLE;

typedef struct tagTEXTMETRICA
{ LONG tmHeight;
  LONG tmAscent;
  LONG tmDescent;
  LONG tmInternalLeading;
  LONG tmExternalLeading;
  LONG tmAveCharWidth;
  LONG tmMaxCharWidth;
  LONG tmWeight;
  LONG tmOverhang;
  LONG tmDigitizedAspectX;
  LONG tmDigitizedAspectY;
  BYTE tmFirstChar;
  BYTE tmLastChar;
  BYTE tmDefaultChar;
  BYTE tmBreakChar;
  BYTE tmItalic;
  BYTE tmUnderlined;
  BYTE tmStruckOut;
  BYTE tmPitchAndFamily;
  BYTE tmCharSet;
} TEXTMETRICA, *PTEXTMETRICA, *LPTEXTMETRICA;

typedef struct tagTEXTMETRICW
{ LONG tmHeight;
  LONG tmAscent;
  LONG tmDescent;
  LONG tmInternalLeading;
  LONG tmExternalLeading;
  LONG tmAveCharWidth;
  LONG tmMaxCharWidth;
  LONG tmWeight;
  LONG tmOverhang;
  LONG tmDigitizedAspectX;
  LONG tmDigitizedAspectY;
  WCHAR tmFirstChar;
  WCHAR tmLastChar;
  WCHAR tmDefaultChar;
  WCHAR tmBreakChar;
  BYTE tmItalic;
  BYTE tmUnderlined;
  BYTE tmStruckOut;
  BYTE tmPitchAndFamily;
  BYTE tmCharSet;
} TEXTMETRICW, *PTEXTMETRICW, *LPTEXTMETRICW;

typedef TEXTMETRICA TEXTMETRIC, *PTEXTMETRIC, *LPTEXTMETRIC;

typedef struct _RGNDATAHEADER
{ DWORD dwSize;
  DWORD iType;
  DWORD nCount;
  DWORD nRgnSize;
  RECT rcBound;
} RGNDATAHEADER;

typedef struct _RGNDATA
{ RGNDATAHEADER rdh;
  char Buffer[1];
} RGNDATA, *PRGNDATA, *LPRGNDATA;


typedef struct tagGCP_RESULTSA
{ DWORD lStructSize;
  LPSTR lpOutString;
  UINT *lpOrder;
  INT *lpDx;
  INT *lpCaretPos;
  LPSTR lpClass;
  LPWSTR lpGlyphs;
  UINT nGlyphs;
  UINT nMaxFit;
} GCP_RESULTSA, *LPGCP_RESULTSA;

typedef struct tagGCP_RESULTSW
{ DWORD lStructSize;
  LPWSTR lpOutString;
  UINT *lpOrder;
  INT *lpDx;
  INT *lpCaretPos;
  LPSTR lpClass;
  LPWSTR lpGlyphs;
  UINT nGlyphs;
  UINT nMaxFit;
} GCP_RESULTSW, *LPGCP_RESULTSW;

typedef GCP_RESULTSA GCP_RESULTS, *LPGCP_RESULTS;

typedef struct _GLYPHMETRICS
{ UINT gmBlackBoxX;
  UINT gmBlackBoxY;
  POINT gmptGlyphOrigin;
  short gmCellIncX;
  short gmCellIncY;
} GLYPHMETRICS, *LPGLYPHMETRICS;

typedef struct tagKERNINGPAIR
{ WORD wFirst;
  WORD wSecond;
  int iKernAmount;
} KERNINGPAIR, *LPKERNINGPAIR;

typedef struct _FIXED
{ WORD fract;
  short value;
} FIXED;

typedef struct _MAT2
{ FIXED eM11;
  FIXED eM12;
  FIXED eM21;
  FIXED eM22;
} MAT2, *LPMAT2;

typedef struct _OUTLINETEXTMETRICA
{ UINT otmSize;
  TEXTMETRICA otmTextMetrics;
  BYTE otmFiller;
  PANOSE otmPanoseNumber;
  UINT otmfsSelection;
  UINT otmfsType;
  int otmsCharSlopeRise;
  int otmsCharSlopeRun;
  int otmItalicAngle;
  UINT otmEMSquare;
  int otmAscent;
  int otmDescent;
  UINT otmLineGap;
  UINT otmsCapEmHeight;
  UINT otmsXHeight;
  RECT otmrcFontBox;
  int otmMacAscent;
  int otmMacDescent;
  UINT otmMacLineGap;
  UINT otmusMinimumPPEM;
  POINT otmptSubscriptSize;
  POINT otmptSubscriptOffset;
  POINT otmptSuperscriptSize;
  POINT otmptSuperscriptOffset;
  UINT otmsStrikeoutSize;
  int otmsStrikeoutPosition;
  int otmsUnderscoreSize;
  int otmsUnderscorePosition;
  PSTR otmpFamilyName;
  PSTR otmpFaceName;
  PSTR otmpStyleName;
  PSTR otmpFullName;
} OUTLINETEXTMETRICA, *POUTLINETEXTMETRICA, *LPOUTLINETEXTMETRICA;

typedef struct _OUTLINETEXTMETRICW
{ UINT otmSize;
  TEXTMETRICW otmTextMetrics;
  BYTE otmFiller;
  PANOSE otmPanoseNumber;
  UINT otmfsSelection;
  UINT otmfsType;
  int otmsCharSlopeRise;
  int otmsCharSlopeRun;
  int otmItalicAngle;
  UINT otmEMSquare;
  int otmAscent;
  int otmDescent;
  UINT otmLineGap;
  UINT otmsCapEmHeight;
  UINT otmsXHeight;
  RECT otmrcFontBox;
  int otmMacAscent;
  int otmMacDescent;
  UINT otmMacLineGap;
  UINT otmusMinimumPPEM;
  POINT otmptSubscriptSize;
  POINT otmptSubscriptOffset;
  POINT otmptSuperscriptSize;
  POINT otmptSuperscriptOffset;
  UINT otmsStrikeoutSize;
  int otmsStrikeoutPosition;
  int otmsUnderscoreSize;
  int otmsUnderscorePosition;
  PSTR otmpFamilyName;
  PSTR otmpFaceName;
  PSTR otmpStyleName;
  PSTR otmpFullName;
} OUTLINETEXTMETRICW, *POUTLINETEXTMETRICW, *LPOUTLINETEXTMETRICW;

typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
typedef POUTLINETEXTMETRICA POUTLINETEXTMETRIC;
typedef LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC;

typedef struct _RASTERIZER_STATUS
{ short nSize;
  short wFlags;
  short nLanguageID;
} RASTERIZER_STATUS, *LPRASTERIZER_STATUS;

typedef struct _POLYTEXTA
{ int x;
  int y;
  UINT n;
  LPCSTR lpstr;
  UINT uiFlags;
  RECT rcl;
  int *pdx;
} POLYTEXTA, *PPOLYTEXTA, *LPPOLYTEXTA;

typedef struct _POLYTEXTW
{ int x;
  int y;
  UINT n;
  LPCWSTR lpstr;
  UINT uiFlags;
  RECT rcl;
  int *pdx;
} POLYTEXTW, *PPOLYTEXTW, *LPPOLYTEXTW;

typedef POLYTEXTA POLYTEXT, *PPOLYTEXT, *LPPOLYTEXT;

typedef struct tagPIXELFORMATDESCRIPTOR
{ WORD nSize;
  WORD nVersion;
  DWORD dwFlags;
  BYTE iPixelType;
  BYTE cColorBits;
  BYTE cRedBits;
  BYTE cRedShift;
  BYTE cGreenBits;
  BYTE cGreenShift;
  BYTE cBlueBits;
  BYTE cBlueShift;
  BYTE cAlphaBits;
  BYTE cAlphaShift;
  BYTE cAccumBits;
  BYTE cAccumRedBits;
  BYTE cAccumGreenBits;
  BYTE cAccumBlueBits;
  BYTE cAccumAlphaBits;
  BYTE cDepthBits;
  BYTE cStencilBits;
  BYTE cAuxBuffers;
  BYTE iLayerType;
  BYTE bReserved;
  DWORD dwLayerMask;
  DWORD dwVisibleMask;
  DWORD dwDamageMask;
} PIXELFORMATDESCRIPTOR, *PPIXELFORMATDESCRIPTOR, *LPPIXELFORMATDESCRIPTOR;

typedef struct tagMETAFILEPICT
{ LONG mm;
  LONG xExt;
  LONG yExt;
  HMETAFILE hMF;
} METAFILEPICT, *LPMETAFILEPICT;

typedef struct tagLOCALESIGNATURE
{ DWORD lsUsb[4];
  DWORD lsCsbDefault[2];
  DWORD lsCsbSupported[2];
} LOCALESIGNATURE, *PLOCALESIGNATURE, *LPLOCALESIGNATURE;
typedef LONG LCSTYPE;

#pragma pack (push, 4)

typedef struct tagNEWTEXTMETRICA
{ LONG tmHeight;
  LONG tmAscent;
  LONG tmDescent;
  LONG tmInternalLeading;
  LONG tmExternalLeading;
  LONG tmAveCharWidth;
  LONG tmMaxCharWidth;
  LONG tmWeight;
  LONG tmOverhang;
  LONG tmDigitizedAspectX;
  LONG tmDigitizedAspectY;
  BYTE tmFirstChar;
  BYTE tmLastChar;
  BYTE tmDefaultChar;
  BYTE tmBreakChar;
  BYTE tmItalic;
  BYTE tmUnderlined;
  BYTE tmStruckOut;
  BYTE tmPitchAndFamily;
  BYTE tmCharSet;
  DWORD ntmFlags;
  UINT ntmSizeEM;
  UINT ntmCellHeight;
  UINT ntmAvgWidth;
} NEWTEXTMETRICA, *PNEWTEXTMETRICA, *LPNEWTEXTMETRICA;

typedef struct tagNEWTEXTMETRICW
{ LONG tmHeight;
  LONG tmAscent;
  LONG tmDescent;
  LONG tmInternalLeading;
  LONG tmExternalLeading;
  LONG tmAveCharWidth;
  LONG tmMaxCharWidth;
  LONG tmWeight;
  LONG tmOverhang;
  LONG tmDigitizedAspectX;
  LONG tmDigitizedAspectY;
  WCHAR tmFirstChar;
  WCHAR tmLastChar;
  WCHAR tmDefaultChar;
  WCHAR tmBreakChar;
  BYTE tmItalic;
  BYTE tmUnderlined;
  BYTE tmStruckOut;
  BYTE tmPitchAndFamily;
  BYTE tmCharSet;
  DWORD ntmFlags;
  UINT ntmSizeEM;
  UINT ntmCellHeight;
  UINT ntmAvgWidth;
} NEWTEXTMETRICW, *PNEWTEXTMETRICW, *LPNEWTEXTMETRICW;

#pragma pack (pop)

typedef NEWTEXTMETRICA NEWTEXTMETRIC, *PNEWTEXTMETRIC, *LPNEWTEXTMETRIC;

typedef struct tagNEWTEXTMETRICEXA
{ NEWTEXTMETRICA ntmTm;
  FONTSIGNATURE ntmFontSig;
} NEWTEXTMETRICEXA;

typedef struct tagNEWTEXTMETRICEXW
{ NEWTEXTMETRICW ntmTm;
  FONTSIGNATURE ntmFontSig;
} NEWTEXTMETRICEXW;

typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX;

typedef struct tagPELARRAY
{ LONG paXCount;
  LONG paYCount;
  LONG paXExt;
  LONG paYExt;
  BYTE paRGBs;
} PELARRAY, *PPELARRAY, *LPPELARRAY;

typedef struct tagENUMLOGFONTA
{ LOGFONTA elfLogFont;
  BYTE elfFullName[64];
  BYTE elfStyle[32];
} ENUMLOGFONTA, *LPENUMLOGFONTA;

typedef struct tagENUMLOGFONTW
{ LOGFONTW elfLogFont;
  WCHAR elfFullName[64];
  WCHAR elfStyle[32];
} ENUMLOGFONTW, *LPENUMLOGFONTW;

typedef ENUMLOGFONTA ENUMLOGFONT, *LPENUMLOGFONT;

typedef struct tagENUMLOGFONTEXA
{ LOGFONTA elfLogFont;
  BYTE elfFullName[64];
  BYTE elfStyle[32];
  BYTE elfScript[32];
} ENUMLOGFONTEXA, *LPENUMLOGFONTEXA;

typedef struct tagENUMLOGFONTEXW
{ LOGFONTW elfLogFont;
  WCHAR elfFullName[64];
  WCHAR elfStyle[32];
  WCHAR elfScript[32];
} ENUMLOGFONTEXW, *LPENUMLOGFONTEXW;

typedef ENUMLOGFONTEXA ENUMLOGFONTEX, *LPENUMLOGFONTEX;

typedef struct tagPOINTFX
{ FIXED x;
  FIXED y;
} POINTFX, *LPPOINTFX;

typedef struct tagTTPOLYCURVE
{ WORD wType;
  WORD cpfx;
  POINTFX apfx[1];
} TTPOLYCURVE, *LPTTPOLYCURVE;

typedef struct tagTTPOLYGONHEADER
{ DWORD cb;
  DWORD dwType;
  POINTFX pfxStart;
} TTPOLYGONHEADER, *LPTTPOLYGONHEADER;

typedef struct _POINTFLOAT
{ FLOAT x;
  FLOAT y;
} POINTFLOAT, *PPOINTFLOAT;

typedef struct _GLYPHMETRICSFLOAT
{ FLOAT gmfBlackBoxX;
  FLOAT gmfBlackBoxY;
  POINTFLOAT gmfptGlyphOrigin;
  FLOAT gmfCellIncX;
  FLOAT gmfCellIncY;
} GLYPHMETRICSFLOAT, *PGLYPHMETRICSFLOAT, *LPGLYPHMETRICSFLOAT;

typedef struct tagLAYERPLANEDESCRIPTOR
{ WORD nSize;
  WORD nVersion;
  DWORD dwFlags;
  BYTE iPixelType;
  BYTE cColorBits;
  BYTE cRedBits;
  BYTE cRedShift;
  BYTE cGreenBits;
  BYTE cGreenShift;
  BYTE cBlueBits;
  BYTE cBlueShift;
  BYTE cAlphaBits;
  BYTE cAlphaShift;
  BYTE cAccumBits;
  BYTE cAccumRedBits;
  BYTE cAccumGreenBits;
  BYTE cAccumBlueBits;
  BYTE cAccumAlphaBits;
  BYTE cDepthBits;
  BYTE cStencilBits;
  BYTE cAuxBuffers;
  BYTE iLayerPlane;
  BYTE bReserved;
  COLORREF crTransparent;
} LAYERPLANEDESCRIPTOR, *PLAYERPLANEDESCRIPTOR, *LPLAYERPLANEDESCRIPTOR;

typedef struct _BLENDFUNCTION
{ BYTE BlendOp;
  BYTE BlendFlags;
  BYTE SourceConstantAlpha;
  BYTE AlphaFormat;
} BLENDFUNCTION, *PBLENDFUNCTION, *LPBLENDFUNCTION;


typedef struct _DESIGNVECTOR
{ DWORD dvReserved;
  DWORD dvNumAxes;
  LONG dvValues[16];
} DESIGNVECTOR, *PDESIGNVECTOR, *LPDESIGNVECTOR;

typedef USHORT COLOR16;

typedef struct _TRIVERTEX
{ LONG x;
  LONG y;
  COLOR16 Red;
  COLOR16 Green;
  COLOR16 Blue;
  COLOR16 Alpha;
} TRIVERTEX, *PTRIVERTEX, *LPTRIVERTEX;

typedef struct _GRADIENT_TRIANGLE
{ ULONG Vertex1;
  ULONG Vertex2;
  ULONG Vertex3;
} GRADIENT_TRIANGLE, *PGRADIENT_TRIANGLE, *LPGRADIENT_TRIANGLE;

typedef struct _GRADIENT_RECT
{ ULONG UpperLeft;
  ULONG LowerRight;
}GRADIENT_RECT, *PGRADIENT_RECT, *LPGRADIENT_RECT;

typedef struct _DISPLAY_DEVICEA
{ DWORD cb;
  CHAR DeviceName[32];
  CHAR DeviceString[128];
  DWORD StateFlags;
  CHAR DeviceID[128];
  CHAR DeviceKey[128];
} DISPLAY_DEVICEA, *PDISPLAY_DEVICEA, *LPDISPLAY_DEVICEA;

typedef struct _DISPLAY_DEVICEW
{ DWORD cb;
  WCHAR DeviceName[32];
  WCHAR DeviceString[128];
  DWORD StateFlags;
  WCHAR DeviceID[128];
  WCHAR DeviceKey[128];
} DISPLAY_DEVICEW, *PDISPLAY_DEVICEW, *LPDISPLAY_DEVICEW;

typedef DISPLAY_DEVICEA DISPLAY_DEVICE, *PDISPLAY_DEVICE, *LPDISPLAY_DEVICE;

typedef BOOL (__attribute__((__stdcall__)) *ABORTPROC) (HDC, int);

typedef int (__attribute__((__stdcall__)) *MFENUMPROC)
(HDC, HANDLETABLE *, METARECORD *, int, LPARAM);

typedef int (__attribute__((__stdcall__)) *ENHMFENUMPROC)
(HDC, HANDLETABLE *, const ENHMETARECORD *, int, LPARAM);

typedef int (__attribute__((__stdcall__)) *OLDFONTENUMPROCA)
(const LOGFONTA *, const TEXTMETRICA *, DWORD, LPARAM);

typedef int (__attribute__((__stdcall__)) *OLDFONTENUMPROCW)
(const LOGFONTW *, const TEXTMETRICW *, DWORD, LPARAM);


typedef OLDFONTENUMPROCA FONTENUMPROCA;
typedef OLDFONTENUMPROCW FONTENUMPROCW;


typedef int (__attribute__((__stdcall__)) *ICMENUMPROCA) (LPSTR, LPARAM);
typedef int (__attribute__((__stdcall__)) *ICMENUMPROCW) (LPWSTR, LPARAM);

typedef void (__attribute__((__stdcall__)) *GOBJENUMPROC) (LPVOID, LPARAM);
typedef void (__attribute__((__stdcall__)) *LINEDDAPROC) (int, int, LPARAM);
typedef UINT (__attribute__((__stdcall__)) *LPFNDEVMODE)
(HWND, HMODULE, LPDEVMODEA, LPSTR, LPSTR, LPDEVMODEA, LPSTR, UINT);

typedef DWORD (__attribute__((__stdcall__)) *LPFNDEVCAPS) (LPSTR, LPSTR, UINT, LPSTR, LPDEVMODEA);
# 2966 "c:\\mingw\\include\\wingdi.h" 3
 int __attribute__((__stdcall__)) AbortDoc (HDC);
 BOOL __attribute__((__stdcall__)) AbortPath (HDC);


 int __attribute__((__stdcall__)) AddFontResourceA (LPCSTR);
 int __attribute__((__stdcall__)) AddFontResourceW (LPCWSTR);

 BOOL __attribute__((__stdcall__)) AngleArc (HDC, int, int, DWORD, FLOAT, FLOAT);

 BOOL __attribute__((__stdcall__)) AnimatePalette
(HPALETTE, UINT, UINT, const PALETTEENTRY *);

 BOOL __attribute__((__stdcall__)) Arc (HDC, int, int, int, int, int, int, int, int);
 BOOL __attribute__((__stdcall__)) ArcTo (HDC, int, int, int, int, int, int, int, int);
 BOOL __attribute__((__stdcall__)) BeginPath (HDC);
 BOOL __attribute__((__stdcall__)) BitBlt (HDC, int, int, int, int, HDC, int, int, DWORD);
 BOOL __attribute__((__stdcall__)) CancelDC (HDC);
 BOOL __attribute__((__stdcall__)) CheckColorsInGamut (HDC, PVOID, PVOID, DWORD);
 BOOL __attribute__((__stdcall__)) Chord (HDC, int, int, int, int, int, int, int, int);
 int __attribute__((__stdcall__)) ChoosePixelFormat (HDC, const PIXELFORMATDESCRIPTOR *);
 HENHMETAFILE __attribute__((__stdcall__)) CloseEnhMetaFile (HDC);
 BOOL __attribute__((__stdcall__)) CloseFigure (HDC);
 HMETAFILE __attribute__((__stdcall__)) CloseMetaFile (HDC);


 BOOL __attribute__((__stdcall__)) ColorCorrectPalette (HDC, HPALETTE, DWORD, DWORD);
 BOOL __attribute__((__stdcall__)) ColorMatchToTarget (HDC, HDC, DWORD);


 int __attribute__((__stdcall__)) CombineRgn (HRGN, HRGN, HRGN, int);
 BOOL __attribute__((__stdcall__)) CombineTransform (LPXFORM, const XFORM *, const XFORM *);


 HENHMETAFILE __attribute__((__stdcall__)) CopyEnhMetaFileA (HENHMETAFILE, LPCSTR);
 HENHMETAFILE __attribute__((__stdcall__)) CopyEnhMetaFileW (HENHMETAFILE, LPCWSTR);


 HMETAFILE __attribute__((__stdcall__)) CopyMetaFileA (HMETAFILE, LPCSTR);
 HMETAFILE __attribute__((__stdcall__)) CopyMetaFileW (HMETAFILE, LPCWSTR);

 HBITMAP __attribute__((__stdcall__)) CreateBitmap (int, int, UINT, UINT, PCVOID);
 HBITMAP __attribute__((__stdcall__)) CreateBitmapIndirect (const BITMAP *);
 HBRUSH __attribute__((__stdcall__)) CreateBrushIndirect (const LOGBRUSH *);


 HCOLORSPACE __attribute__((__stdcall__)) CreateColorSpaceA (LPLOGCOLORSPACEA);
 HCOLORSPACE __attribute__((__stdcall__)) CreateColorSpaceW (LPLOGCOLORSPACEW);

 HBITMAP __attribute__((__stdcall__)) CreateCompatibleBitmap (HDC, int, int);
 HDC __attribute__((__stdcall__)) CreateCompatibleDC (HDC);


 HDC __attribute__((__stdcall__)) CreateDCA (LPCSTR, LPCSTR, LPCSTR, const DEVMODEA *);
 HDC __attribute__((__stdcall__)) CreateDCW (LPCWSTR, LPCWSTR, LPCWSTR, const DEVMODEW *);

 HBITMAP __attribute__((__stdcall__)) CreateDIBitmap
(HDC, const BITMAPINFOHEADER *, DWORD, PCVOID, const BITMAPINFO *, UINT);

 HBRUSH __attribute__((__stdcall__)) CreateDIBPatternBrush (HGLOBAL, UINT);
 HBRUSH __attribute__((__stdcall__)) CreateDIBPatternBrushPt (PCVOID, UINT);

 HBITMAP __attribute__((__stdcall__)) CreateDIBSection
(HDC, const BITMAPINFO *, UINT, void **, HANDLE, DWORD);

 HBITMAP __attribute__((__stdcall__)) CreateDiscardableBitmap (HDC, int, int);
 HRGN __attribute__((__stdcall__)) CreateEllipticRgn (int, int, int, int);
 HRGN __attribute__((__stdcall__)) CreateEllipticRgnIndirect (LPCRECT);


 HDC __attribute__((__stdcall__)) CreateEnhMetaFileA (HDC, LPCSTR, LPCRECT, LPCSTR);
 HDC __attribute__((__stdcall__)) CreateEnhMetaFileW (HDC, LPCWSTR, LPCRECT, LPCWSTR);


 HFONT __attribute__((__stdcall__)) CreateFontA
(int, int, int, int, int, DWORD, DWORD, DWORD, DWORD, DWORD,
 DWORD, DWORD, DWORD, LPCSTR
);

 HFONT __attribute__((__stdcall__)) CreateFontW
(int, int, int, int, int, DWORD, DWORD, DWORD, DWORD, DWORD,
 DWORD, DWORD, DWORD, LPCWSTR
);



 HFONT __attribute__((__stdcall__)) CreateFontIndirectA (const LOGFONTA *);
 HFONT __attribute__((__stdcall__)) CreateFontIndirectW (const LOGFONTW *);

 HPALETTE __attribute__((__stdcall__)) CreateHalftonePalette (HDC);
 HBRUSH __attribute__((__stdcall__)) CreateHatchBrush (int, COLORREF);


 HDC __attribute__((__stdcall__)) CreateICA (LPCSTR, LPCSTR, LPCSTR, const DEVMODEA *);
 HDC __attribute__((__stdcall__)) CreateICW (LPCWSTR, LPCWSTR, LPCWSTR, const DEVMODEW *);


 HDC __attribute__((__stdcall__)) CreateMetaFileA (LPCSTR);
 HDC __attribute__((__stdcall__)) CreateMetaFileW (LPCWSTR);

 HPALETTE __attribute__((__stdcall__)) CreatePalette (const LOGPALETTE *);
 HBRUSH __attribute__((__stdcall__)) CreatePatternBrush (HBITMAP);
 HPEN __attribute__((__stdcall__)) CreatePen (int, int, COLORREF);
 HPEN __attribute__((__stdcall__)) CreatePenIndirect (const LOGPEN *);
 HRGN __attribute__((__stdcall__)) CreatePolygonRgn (const POINT *, int, int);

 HRGN __attribute__((__stdcall__)) CreatePolyPolygonRgn
(const POINT *, const INT *, int, int);

 HRGN __attribute__((__stdcall__)) CreateRectRgn (int, int, int, int);
 HRGN __attribute__((__stdcall__)) CreateRectRgnIndirect (LPCRECT);
 HRGN __attribute__((__stdcall__)) CreateRoundRectRgn (int, int, int, int, int, int);


 BOOL __attribute__((__stdcall__)) CreateScalableFontResourceA
(DWORD, LPCSTR, LPCSTR, LPCSTR);

 BOOL __attribute__((__stdcall__)) CreateScalableFontResourceW
(DWORD, LPCWSTR, LPCWSTR, LPCWSTR);

 HBRUSH __attribute__((__stdcall__)) CreateSolidBrush (COLORREF);
 BOOL __attribute__((__stdcall__)) DeleteColorSpace (HCOLORSPACE);
 BOOL __attribute__((__stdcall__)) DeleteDC (HDC);
 BOOL __attribute__((__stdcall__)) DeleteEnhMetaFile (HENHMETAFILE);
 BOOL __attribute__((__stdcall__)) DeleteMetaFile (HMETAFILE);
 BOOL __attribute__((__stdcall__)) DeleteObject (HGDIOBJ);

 int __attribute__((__stdcall__)) DescribePixelFormat
(HDC, int, UINT, LPPIXELFORMATDESCRIPTOR);



 DWORD __attribute__((__stdcall__)) DeviceCapabilitiesA
(LPCSTR, LPCSTR, WORD, LPSTR, const DEVMODEA *);

 DWORD __attribute__((__stdcall__)) DeviceCapabilitiesW
(LPCWSTR, LPCWSTR, WORD, LPWSTR, const DEVMODEW *);

 BOOL __attribute__((__stdcall__)) DPtoLP (HDC, LPPOINT, int);
 int __attribute__((__stdcall__)) DrawEscape (HDC, int, int, LPCSTR);
 BOOL __attribute__((__stdcall__)) Ellipse (HDC, int, int, int, int);
 int __attribute__((__stdcall__)) EndDoc (HDC);
 int __attribute__((__stdcall__)) EndPage (HDC);
 BOOL __attribute__((__stdcall__)) EndPath (HDC);

 BOOL __attribute__((__stdcall__)) EnumEnhMetaFile
(HDC, HENHMETAFILE, ENHMFENUMPROC, PVOID, LPCRECT);


 int __attribute__((__stdcall__)) EnumFontFamiliesA (HDC, LPCSTR, FONTENUMPROCA, LPARAM);
 int __attribute__((__stdcall__)) EnumFontFamiliesW (HDC, LPCWSTR, FONTENUMPROCW, LPARAM);


 int __attribute__((__stdcall__)) EnumFontFamiliesExA
(HDC, PLOGFONTA, FONTENUMPROCA, LPARAM, DWORD);

 int __attribute__((__stdcall__)) EnumFontFamiliesExW
(HDC, PLOGFONTW, FONTENUMPROCW, LPARAM, DWORD);


 int __attribute__((__stdcall__)) EnumFontsA (HDC, LPCSTR, FONTENUMPROCA, LPARAM);
 int __attribute__((__stdcall__)) EnumFontsW (HDC, LPCWSTR, FONTENUMPROCW, LPARAM);


 int __attribute__((__stdcall__)) EnumICMProfilesA (HDC, ICMENUMPROCA, LPARAM);
 int __attribute__((__stdcall__)) EnumICMProfilesW (HDC, ICMENUMPROCW, LPARAM);

 BOOL __attribute__((__stdcall__)) EnumMetaFile (HDC, HMETAFILE, MFENUMPROC, LPARAM);
 int __attribute__((__stdcall__)) EnumObjects (HDC, int, GOBJENUMPROC, LPARAM);
 BOOL __attribute__((__stdcall__)) EqualRgn (HRGN, HRGN);
 int __attribute__((__stdcall__)) Escape (HDC, int, int, LPCSTR, PVOID);
 int __attribute__((__stdcall__)) ExcludeClipRect (HDC, int, int, int, int);
 int __attribute__((__stdcall__)) ExcludeUpdateRgn (HDC, HWND);

 HPEN __attribute__((__stdcall__)) ExtCreatePen
(DWORD, DWORD, const LOGBRUSH *, DWORD, const DWORD *);

 HRGN __attribute__((__stdcall__)) ExtCreateRegion (const XFORM *, DWORD, const RGNDATA *);
 int __attribute__((__stdcall__)) ExtEscape (HDC, int, int, LPCSTR, int, LPSTR);
 BOOL __attribute__((__stdcall__)) ExtFloodFill (HDC, int, int, COLORREF, UINT);
 int __attribute__((__stdcall__)) ExtSelectClipRgn (HDC, HRGN, int);


 BOOL __attribute__((__stdcall__)) ExtTextOutA
(HDC, int, int, UINT, LPCRECT, LPCSTR, UINT, const INT *);

 BOOL __attribute__((__stdcall__)) ExtTextOutW
(HDC, int, int, UINT, LPCRECT, LPCWSTR, UINT, const INT *);

 BOOL __attribute__((__stdcall__)) FillPath (HDC);
 int __attribute__((__stdcall__)) FillRect (HDC, LPCRECT, HBRUSH);
 int __attribute__((__stdcall__)) FillRgn (HDC, HRGN, HBRUSH);
 BOOL __attribute__((__stdcall__)) FixBrushOrgEx (HDC, int, int, LPPOINT);
 BOOL __attribute__((__stdcall__)) FlattenPath (HDC);
 BOOL __attribute__((__stdcall__)) FloodFill (HDC, int, int, COLORREF);
 BOOL __attribute__((__stdcall__)) GdiComment (HDC, UINT, const BYTE *);
 BOOL __attribute__((__stdcall__)) GdiFlush (void);
 DWORD __attribute__((__stdcall__)) GdiGetBatchLimit (void);
 DWORD __attribute__((__stdcall__)) GdiSetBatchLimit (DWORD);
 int __attribute__((__stdcall__)) GetArcDirection (HDC);
 BOOL __attribute__((__stdcall__)) GetAspectRatioFilterEx (HDC, LPSIZE);
 LONG __attribute__((__stdcall__)) GetBitmapBits (HBITMAP, LONG, PVOID);
 BOOL __attribute__((__stdcall__)) GetBitmapDimensionEx (HBITMAP, LPSIZE);
 COLORREF __attribute__((__stdcall__)) GetBkColor (HDC);
 int __attribute__((__stdcall__)) GetBkMode (HDC);
 UINT __attribute__((__stdcall__)) GetBoundsRect (HDC, LPRECT, UINT);
 BOOL __attribute__((__stdcall__)) GetBrushOrgEx (HDC, LPPOINT);


 BOOL __attribute__((__stdcall__)) GetCharABCWidthsA (HDC, UINT, UINT, LPABC);
 BOOL __attribute__((__stdcall__)) GetCharABCWidthsW (HDC, UINT, UINT, LPABC);


 BOOL __attribute__((__stdcall__)) GetCharABCWidthsFloatA (HDC, UINT, UINT, LPABCFLOAT);
 BOOL __attribute__((__stdcall__)) GetCharABCWidthsFloatW (HDC, UINT, UINT, LPABCFLOAT);


 DWORD __attribute__((__stdcall__)) GetCharacterPlacementA
(HDC, LPCSTR, int, int, LPGCP_RESULTSA, DWORD);

 DWORD __attribute__((__stdcall__)) GetCharacterPlacementW
(HDC, LPCWSTR, int, int, LPGCP_RESULTSW, DWORD);


 BOOL __attribute__((__stdcall__)) GetCharWidth32A (HDC, UINT, UINT, LPINT);
 BOOL __attribute__((__stdcall__)) GetCharWidth32W (HDC, UINT, UINT, LPINT);


 BOOL __attribute__((__stdcall__)) GetCharWidthA (HDC, UINT, UINT, LPINT);
 BOOL __attribute__((__stdcall__)) GetCharWidthW (HDC, UINT, UINT, LPINT);


 BOOL __attribute__((__stdcall__)) GetCharWidthFloatA (HDC, UINT, UINT, PFLOAT);
 BOOL __attribute__((__stdcall__)) GetCharWidthFloatW (HDC, UINT, UINT, PFLOAT);

 int __attribute__((__stdcall__)) GetClipBox (HDC, LPRECT);
 int __attribute__((__stdcall__)) GetClipRgn (HDC, HRGN);
 BOOL __attribute__((__stdcall__)) GetColorAdjustment (HDC, LPCOLORADJUSTMENT);
 HANDLE __attribute__((__stdcall__)) GetColorSpace (HDC);
 HGDIOBJ __attribute__((__stdcall__)) GetCurrentObject (HDC, UINT);
 BOOL __attribute__((__stdcall__)) GetCurrentPositionEx (HDC, LPPOINT);
 HCURSOR __attribute__((__stdcall__)) GetCursor (void);

 BOOL __attribute__((__stdcall__)) GetDCOrgEx (HDC, LPPOINT);
 int __attribute__((__stdcall__)) GetDeviceCaps (HDC, int);
 BOOL __attribute__((__stdcall__)) GetDeviceGammaRamp (HDC, PVOID);
 UINT __attribute__((__stdcall__)) GetDIBColorTable (HDC, UINT, UINT, RGBQUAD *);

 int __attribute__((__stdcall__)) GetDIBits
(HDC, HBITMAP, UINT, UINT, PVOID, LPBITMAPINFO, UINT);


 HENHMETAFILE __attribute__((__stdcall__)) GetEnhMetaFileA (LPCSTR);
 HENHMETAFILE __attribute__((__stdcall__)) GetEnhMetaFileW (LPCWSTR);

 UINT __attribute__((__stdcall__)) GetEnhMetaFileBits (HENHMETAFILE, UINT, LPBYTE);


 UINT __attribute__((__stdcall__)) GetEnhMetaFileDescriptionA (HENHMETAFILE, UINT, LPSTR);
 UINT __attribute__((__stdcall__)) GetEnhMetaFileDescriptionW (HENHMETAFILE, UINT, LPWSTR);

 UINT __attribute__((__stdcall__)) GetEnhMetaFileHeader
(HENHMETAFILE, UINT, LPENHMETAHEADER);

 UINT __attribute__((__stdcall__)) GetEnhMetaFilePaletteEntries
(HENHMETAFILE, UINT, LPPALETTEENTRY);

 UINT __attribute__((__stdcall__)) GetEnhMetaFilePixelFormat
(HENHMETAFILE, DWORD, const PIXELFORMATDESCRIPTOR *);

 DWORD __attribute__((__stdcall__)) GetFontData (HDC, DWORD, DWORD, PVOID, DWORD);
 DWORD __attribute__((__stdcall__)) GetFontLanguageInfo (HDC);


 DWORD __attribute__((__stdcall__)) GetGlyphOutlineA
(HDC, UINT, UINT, LPGLYPHMETRICS, DWORD, PVOID, const MAT2 *);

 DWORD __attribute__((__stdcall__)) GetGlyphOutlineW
(HDC, UINT, UINT, LPGLYPHMETRICS, DWORD, PVOID, const MAT2 *);

 int __attribute__((__stdcall__)) GetGraphicsMode (HDC);


 BOOL __attribute__((__stdcall__)) GetICMProfileA (HDC, LPDWORD, LPSTR);
 BOOL __attribute__((__stdcall__)) GetICMProfileW (HDC, LPDWORD, LPWSTR);


 DWORD __attribute__((__stdcall__)) GetKerningPairsA (HDC, DWORD, LPKERNINGPAIR);
 DWORD __attribute__((__stdcall__)) GetKerningPairsW (HDC, DWORD, LPKERNINGPAIR);


 BOOL __attribute__((__stdcall__)) GetLogColorSpaceA (HCOLORSPACE, LPLOGCOLORSPACEA, DWORD);
 BOOL __attribute__((__stdcall__)) GetLogColorSpaceW (HCOLORSPACE, LPLOGCOLORSPACEW, DWORD);

 int __attribute__((__stdcall__)) GetMapMode (HDC);


 HMETAFILE __attribute__((__stdcall__)) GetMetaFileA (LPCSTR);
 HMETAFILE __attribute__((__stdcall__)) GetMetaFileW (LPCWSTR);

 UINT __attribute__((__stdcall__)) GetMetaFileBitsEx (HMETAFILE, UINT, PVOID);
 int __attribute__((__stdcall__)) GetMetaRgn (HDC, HRGN);
 BOOL __attribute__((__stdcall__)) GetMiterLimit (HDC, PFLOAT);
 COLORREF __attribute__((__stdcall__)) GetNearestColor (HDC, COLORREF);
 UINT __attribute__((__stdcall__)) GetNearestPaletteIndex (HPALETTE, COLORREF);


 int __attribute__((__stdcall__)) GetObjectA (HGDIOBJ, int, PVOID);
 int __attribute__((__stdcall__)) GetObjectW (HGDIOBJ, int, PVOID);

 DWORD __attribute__((__stdcall__)) GetObjectType (HGDIOBJ);


 UINT __attribute__((__stdcall__)) GetOutlineTextMetricsA (HDC, UINT, LPOUTLINETEXTMETRICA);
 UINT __attribute__((__stdcall__)) GetOutlineTextMetricsW (HDC, UINT, LPOUTLINETEXTMETRICW);

 UINT __attribute__((__stdcall__)) GetPaletteEntries (HPALETTE, UINT, UINT, LPPALETTEENTRY);
 int __attribute__((__stdcall__)) GetPath (HDC, LPPOINT, PBYTE, int);
 COLORREF __attribute__((__stdcall__)) GetPixel (HDC, int, int);
 int __attribute__((__stdcall__)) GetPixelFormat (HDC);
 int __attribute__((__stdcall__)) GetPolyFillMode (HDC);
 BOOL __attribute__((__stdcall__)) GetRasterizerCaps (LPRASTERIZER_STATUS, UINT);
 int __attribute__((__stdcall__)) GetRandomRgn (HDC, HRGN, INT);
 DWORD __attribute__((__stdcall__)) GetRegionData (HRGN, DWORD, LPRGNDATA);
 int __attribute__((__stdcall__)) GetRgnBox (HRGN, LPRECT);
 int __attribute__((__stdcall__)) GetROP2 (HDC);
 HGDIOBJ __attribute__((__stdcall__)) GetStockObject (int);
 int __attribute__((__stdcall__)) GetStretchBltMode (HDC);

 UINT __attribute__((__stdcall__)) GetSystemPaletteEntries
(HDC, UINT, UINT, LPPALETTEENTRY);

 UINT __attribute__((__stdcall__)) GetSystemPaletteUse (HDC);
 UINT __attribute__((__stdcall__)) GetTextAlign (HDC);
 int __attribute__((__stdcall__)) GetTextCharacterExtra (HDC);
 int __attribute__((__stdcall__)) GetTextCharset (HDC);
 int __attribute__((__stdcall__)) GetTextCharsetInfo (HDC, LPFONTSIGNATURE, DWORD);
 COLORREF __attribute__((__stdcall__)) GetTextColor (HDC);


 BOOL __attribute__((__stdcall__)) GetTextExtentExPointA
(HDC, LPCSTR, int, int, LPINT, LPINT, LPSIZE);

 BOOL __attribute__((__stdcall__)) GetTextExtentExPointW
( HDC, LPCWSTR, int, int, LPINT, LPINT, LPSIZE );


 BOOL __attribute__((__stdcall__)) GetTextExtentPointA (HDC, LPCSTR, int, LPSIZE);
 BOOL __attribute__((__stdcall__)) GetTextExtentPointW (HDC, LPCWSTR, int, LPSIZE);


 BOOL __attribute__((__stdcall__)) GetTextExtentPoint32A (HDC, LPCSTR, int, LPSIZE);
 BOOL __attribute__((__stdcall__)) GetTextExtentPoint32W (HDC, LPCWSTR, int, LPSIZE);


 int __attribute__((__stdcall__)) GetTextFaceA (HDC, int, LPSTR);
 int __attribute__((__stdcall__)) GetTextFaceW (HDC, int, LPWSTR);


 BOOL __attribute__((__stdcall__)) GetTextMetricsA (HDC, LPTEXTMETRICA);
 BOOL __attribute__((__stdcall__)) GetTextMetricsW (HDC, LPTEXTMETRICW);

 BOOL __attribute__((__stdcall__)) GetViewportExtEx (HDC, LPSIZE);
 BOOL __attribute__((__stdcall__)) GetViewportOrgEx (HDC, LPPOINT);
 BOOL __attribute__((__stdcall__)) GetWindowExtEx (HDC, LPSIZE);
 BOOL __attribute__((__stdcall__)) GetWindowOrgEx (HDC, LPPOINT);

 UINT __attribute__((__stdcall__)) GetWinMetaFileBits
(HENHMETAFILE, UINT, LPBYTE, INT, HDC);

 BOOL __attribute__((__stdcall__)) GetWorldTransform (HDC, LPXFORM);
 int __attribute__((__stdcall__)) IntersectClipRect (HDC, int, int, int, int);
 BOOL __attribute__((__stdcall__)) InvertRgn (HDC, HRGN);
 BOOL __attribute__((__stdcall__)) LineDDA (int, int, int, int, LINEDDAPROC, LPARAM);
 BOOL __attribute__((__stdcall__)) LineTo (HDC, int, int);
 BOOL __attribute__((__stdcall__)) LPtoDP (HDC, LPPOINT, int);

 BOOL __attribute__((__stdcall__)) MaskBlt
(HDC, int, int, int, int, HDC, int, int, HBITMAP, int, int, DWORD);

 BOOL __attribute__((__stdcall__)) ModifyWorldTransform (HDC, const XFORM *, DWORD);
 BOOL __attribute__((__stdcall__)) MoveToEx (HDC, int, int, LPPOINT);
 int __attribute__((__stdcall__)) OffsetClipRgn (HDC, int, int);
 int __attribute__((__stdcall__)) OffsetRgn (HRGN, int, int);
 BOOL __attribute__((__stdcall__)) OffsetViewportOrgEx (HDC, int, int, LPPOINT);
 BOOL __attribute__((__stdcall__)) OffsetWindowOrgEx (HDC, int, int, LPPOINT);
 BOOL __attribute__((__stdcall__)) PaintRgn (HDC, HRGN);
 BOOL __attribute__((__stdcall__)) PatBlt (HDC, int, int, int, int, DWORD);
 HRGN __attribute__((__stdcall__)) PathToRegion (HDC);
 BOOL __attribute__((__stdcall__)) Pie (HDC, int, int, int, int, int, int, int, int);
 BOOL __attribute__((__stdcall__)) PlayEnhMetaFile (HDC, HENHMETAFILE, LPCRECT);

 BOOL __attribute__((__stdcall__)) PlayEnhMetaFileRecord
(HDC, LPHANDLETABLE, const ENHMETARECORD *, UINT);

 BOOL __attribute__((__stdcall__)) PlayMetaFile (HDC, HMETAFILE);

 BOOL __attribute__((__stdcall__)) PlayMetaFileRecord
(HDC, LPHANDLETABLE, LPMETARECORD, UINT);

 BOOL __attribute__((__stdcall__)) PlgBlt
(HDC, const POINT *, HDC, int, int, int, int, HBITMAP, int, int);

 BOOL __attribute__((__stdcall__)) PolyBezier (HDC, const POINT *, DWORD);
 BOOL __attribute__((__stdcall__)) PolyBezierTo (HDC, const POINT *, DWORD);
 BOOL __attribute__((__stdcall__)) PolyDraw (HDC, const POINT *, const BYTE *, int);
 BOOL __attribute__((__stdcall__)) Polygon (HDC, const POINT *, int);
 BOOL __attribute__((__stdcall__)) Polyline (HDC, const POINT *, int);
 BOOL __attribute__((__stdcall__)) PolylineTo (HDC, const POINT *, DWORD);
 BOOL __attribute__((__stdcall__)) PolyPolygon (HDC, const POINT *, const INT *, int);
 BOOL __attribute__((__stdcall__)) PolyPolyline (HDC, const POINT *, const DWORD *, DWORD);


 BOOL __attribute__((__stdcall__)) PolyTextOutA (HDC, const POLYTEXTA *, int);
 BOOL __attribute__((__stdcall__)) PolyTextOutW (HDC, const POLYTEXTW *, int);

 BOOL __attribute__((__stdcall__)) PtInRegion (HRGN, int, int);
 BOOL __attribute__((__stdcall__)) PtVisible (HDC, int, int);
 UINT __attribute__((__stdcall__)) RealizePalette (HDC);
 BOOL __attribute__((__stdcall__)) Rectangle (HDC, int, int, int, int);
 BOOL __attribute__((__stdcall__)) RectInRegion (HRGN, LPCRECT);
 BOOL __attribute__((__stdcall__)) RectVisible (HDC, LPCRECT);


 BOOL __attribute__((__stdcall__)) RemoveFontResourceA (LPCSTR);
 BOOL __attribute__((__stdcall__)) RemoveFontResourceW (LPCWSTR);


 HDC __attribute__((__stdcall__)) ResetDCA (HDC, const DEVMODEA *);
 HDC __attribute__((__stdcall__)) ResetDCW (HDC, const DEVMODEW *);

 BOOL __attribute__((__stdcall__)) ResizePalette (HPALETTE, UINT);
 BOOL __attribute__((__stdcall__)) RestoreDC (HDC, int);
 BOOL __attribute__((__stdcall__)) RoundRect (HDC, int, int, int, int, int, int);
 int __attribute__((__stdcall__)) SaveDC (HDC);
 BOOL __attribute__((__stdcall__)) ScaleViewportExtEx (HDC, int, int, int, int, LPSIZE);
 BOOL __attribute__((__stdcall__)) ScaleWindowExtEx (HDC, int, int, int, int, LPSIZE);
 BOOL __attribute__((__stdcall__)) SelectClipPath (HDC, int);
 int __attribute__((__stdcall__)) SelectClipRgn (HDC, HRGN);
 HGDIOBJ __attribute__((__stdcall__)) SelectObject (HDC, HGDIOBJ);
 HPALETTE __attribute__((__stdcall__)) SelectPalette (HDC, HPALETTE, BOOL);
 int __attribute__((__stdcall__)) SetAbortProc (HDC, ABORTPROC);
 int __attribute__((__stdcall__)) SetArcDirection (HDC, int);
 LONG __attribute__((__stdcall__)) SetBitmapBits (HBITMAP, DWORD, PCVOID);
 BOOL __attribute__((__stdcall__)) SetBitmapDimensionEx (HBITMAP, int, int, LPSIZE);
 COLORREF __attribute__((__stdcall__)) SetBkColor (HDC, COLORREF);
 int __attribute__((__stdcall__)) SetBkMode (HDC, int);
 UINT __attribute__((__stdcall__)) SetBoundsRect (HDC, LPCRECT, UINT);
 BOOL __attribute__((__stdcall__)) SetBrushOrgEx (HDC, int, int, LPPOINT);
 BOOL __attribute__((__stdcall__)) SetColorAdjustment (HDC, const COLORADJUSTMENT *);
 BOOL __attribute__((__stdcall__)) SetColorSpace (HDC, HCOLORSPACE);

 BOOL __attribute__((__stdcall__)) SetDeviceGammaRamp (HDC, PVOID);
 UINT __attribute__((__stdcall__)) SetDIBColorTable (HDC, UINT, UINT, const RGBQUAD *);

 int __attribute__((__stdcall__)) SetDIBits
(HDC, HBITMAP, UINT, UINT, PCVOID, const BITMAPINFO *, UINT);

 int __attribute__((__stdcall__)) SetDIBitsToDevice
(HDC, int, int, DWORD, DWORD, int, int, UINT, UINT, PCVOID,
 const BITMAPINFO *, UINT
);

 HENHMETAFILE __attribute__((__stdcall__)) SetEnhMetaFileBits (UINT, const BYTE *);
 int __attribute__((__stdcall__)) SetGraphicsMode (HDC, int);
 int __attribute__((__stdcall__)) SetICMMode (HDC, int);


 BOOL __attribute__((__stdcall__)) SetICMProfileA (HDC, LPSTR);
 BOOL __attribute__((__stdcall__)) SetICMProfileW (HDC, LPWSTR);

 int __attribute__((__stdcall__)) SetMapMode (HDC, int);
 DWORD __attribute__((__stdcall__)) SetMapperFlags (HDC, DWORD);
 HMETAFILE __attribute__((__stdcall__)) SetMetaFileBitsEx (UINT, const BYTE *);
 int __attribute__((__stdcall__)) SetMetaRgn (HDC);
 BOOL __attribute__((__stdcall__)) SetMiterLimit (HDC, FLOAT, PFLOAT);

 UINT __attribute__((__stdcall__)) SetPaletteEntries
(HPALETTE, UINT, UINT, const PALETTEENTRY *);

 COLORREF __attribute__((__stdcall__)) SetPixel (HDC, int, int, COLORREF);
 BOOL __attribute__((__stdcall__)) SetPixelFormat (HDC, int, const PIXELFORMATDESCRIPTOR *);
 BOOL __attribute__((__stdcall__)) SetPixelV (HDC, int, int, COLORREF);
 int __attribute__((__stdcall__)) SetPolyFillMode (HDC, int);
 BOOL __attribute__((__stdcall__)) SetRectRgn (HRGN, int, int, int, int);
 int __attribute__((__stdcall__)) SetROP2 (HDC, int);
 int __attribute__((__stdcall__)) SetStretchBltMode (HDC, int);
 UINT __attribute__((__stdcall__)) SetSystemPaletteUse (HDC, UINT);
 UINT __attribute__((__stdcall__)) SetTextAlign (HDC, UINT);
 int __attribute__((__stdcall__)) SetTextCharacterExtra (HDC, int);
 COLORREF __attribute__((__stdcall__)) SetTextColor (HDC, COLORREF);
 BOOL __attribute__((__stdcall__)) SetTextJustification (HDC, int, int);
 BOOL __attribute__((__stdcall__)) SetViewportExtEx (HDC, int, int, LPSIZE);
 BOOL __attribute__((__stdcall__)) SetViewportOrgEx (HDC, int, int, LPPOINT);
 BOOL __attribute__((__stdcall__)) SetWindowExtEx (HDC, int, int, LPSIZE);
 BOOL __attribute__((__stdcall__)) SetWindowOrgEx (HDC, int, int, LPPOINT);

 HENHMETAFILE __attribute__((__stdcall__)) SetWinMetaFileBits
(UINT, const BYTE *, HDC, const METAFILEPICT *);

 BOOL __attribute__((__stdcall__)) SetWorldTransform (HDC, const XFORM *);


 int __attribute__((__stdcall__)) StartDocA (HDC, const DOCINFOA *);
 int __attribute__((__stdcall__)) StartDocW (HDC, const DOCINFOW *);

 int __attribute__((__stdcall__)) StartPage (HDC);

 BOOL __attribute__((__stdcall__)) StretchBlt
(HDC, int, int, int, int, HDC, int, int, int, int, DWORD);

 int __attribute__((__stdcall__)) StretchDIBits
(HDC, int, int, int, int, int, int, int, int, const void *,
 const BITMAPINFO *, UINT, DWORD
);

 BOOL __attribute__((__stdcall__)) StrokeAndFillPath (HDC);
 BOOL __attribute__((__stdcall__)) StrokePath (HDC);
 BOOL __attribute__((__stdcall__)) SwapBuffers (HDC);


 BOOL __attribute__((__stdcall__)) TextOutA (HDC, int, int, LPCSTR, int);
 BOOL __attribute__((__stdcall__)) TextOutW (HDC, int, int, LPCWSTR, int);

 BOOL __attribute__((__stdcall__)) TranslateCharsetInfo (PDWORD, LPCHARSETINFO, DWORD);
 BOOL __attribute__((__stdcall__)) UnrealizeObject (HGDIOBJ);
 BOOL __attribute__((__stdcall__)) UpdateColors (HDC);


 BOOL __attribute__((__stdcall__)) UpdateICMRegKeyA (DWORD, DWORD, LPSTR, UINT);
 BOOL __attribute__((__stdcall__)) UpdateICMRegKeyW (DWORD, DWORD, LPWSTR, UINT);

 BOOL __attribute__((__stdcall__)) WidenPath (HDC);
 BOOL __attribute__((__stdcall__)) wglCopyContext (HGLRC, HGLRC, UINT);
 HGLRC __attribute__((__stdcall__)) wglCreateContext (HDC);
 HGLRC __attribute__((__stdcall__)) wglCreateLayerContext (HDC, int);
 BOOL __attribute__((__stdcall__)) wglDeleteContext (HGLRC);

 BOOL __attribute__((__stdcall__)) wglDescribeLayerPlane
(HDC, int, int, UINT, LPLAYERPLANEDESCRIPTOR);

 HGLRC __attribute__((__stdcall__)) wglGetCurrentContext (void);
 HDC __attribute__((__stdcall__)) wglGetCurrentDC (void);

 int __attribute__((__stdcall__)) wglGetLayerPaletteEntries
(HDC, int, int, int, COLORREF *);

 PROC __attribute__((__stdcall__)) wglGetProcAddress (LPCSTR);
 BOOL __attribute__((__stdcall__)) wglMakeCurrent (HDC, HGLRC);
 BOOL __attribute__((__stdcall__)) wglRealizeLayerPalette (HDC, int, BOOL);

 int __attribute__((__stdcall__)) wglSetLayerPaletteEntries
(HDC, int, int, int, const COLORREF *);

 BOOL __attribute__((__stdcall__)) wglShareLists (HGLRC, HGLRC);
 BOOL __attribute__((__stdcall__)) wglSwapLayerBuffers (HDC, UINT);


 BOOL __attribute__((__stdcall__)) wglUseFontBitmapsA (HDC, DWORD, DWORD, DWORD);
 BOOL __attribute__((__stdcall__)) wglUseFontBitmapsW (HDC, DWORD, DWORD, DWORD);


 BOOL __attribute__((__stdcall__)) wglUseFontOutlinesA
(HDC, DWORD, DWORD, DWORD, FLOAT, FLOAT, int, LPGLYPHMETRICSFLOAT);

 BOOL __attribute__((__stdcall__)) wglUseFontOutlinesW
(HDC, DWORD, DWORD, DWORD, FLOAT, FLOAT, int, LPGLYPHMETRICSFLOAT);


 BOOL __attribute__((__stdcall__)) AlphaBlend
(HDC, int, int, int, int, HDC, int, int, int, int, BLENDFUNCTION);

 BOOL __attribute__((__stdcall__)) GradientFill
(HDC, PTRIVERTEX, ULONG, PVOID, ULONG, ULONG);

 BOOL __attribute__((__stdcall__)) TransparentBlt
(HDC, int, int, int, int, HDC, int, int, int, int, UINT);


 DWORD __attribute__((__stdcall__)) GetLayout (HDC);
 DWORD __attribute__((__stdcall__)) SetLayout (HDC, DWORD);

 COLORREF __attribute__((__stdcall__)) GetDCBrushColor (HDC);
 COLORREF __attribute__((__stdcall__)) GetDCPenColor (HDC);




typedef struct tagWCRANGE
{ WCHAR wcLow;
  USHORT cGlyphs;
} WCRANGE, *PWCRANGE, *LPWCRANGE;

typedef struct tagGLYPHSET
{ DWORD cbThis;
  DWORD flAccel;
  DWORD cGlyphsSupported;
  DWORD cRanges;
  WCRANGE ranges[1];
} GLYPHSET, *PGLYPHSET, *LPGLYPHSET;

typedef struct tagENUMLOGFONTEXDVA
{ ENUMLOGFONTEXA elfEnumLogfontEx;
  DESIGNVECTOR elfDesignVector;
} ENUMLOGFONTEXDVA, *PENUMLOGFONTEXDVA, *LPENUMLOGFONTEXDVA;

typedef struct tagENUMLOGFONTEXDVW
{ ENUMLOGFONTEXW elfEnumLogfontEx;
  DESIGNVECTOR elfDesignVector;
} ENUMLOGFONTEXDVW, *PENUMLOGFONTEXDVW, *LPENUMLOGFONTEXDVW;

typedef ENUMLOGFONTEXDVA ENUMLOGFONTEXDV, *PENUMLOGFONTEXDV, *LPENUMLOGFONTEXDV;

 HANDLE __attribute__((__stdcall__)) AddFontMemResourceEx (PVOID, DWORD, PVOID, DWORD *);


 int __attribute__((__stdcall__)) AddFontResourceExA (LPCSTR, DWORD, PVOID);
 int __attribute__((__stdcall__)) AddFontResourceExW (LPCWSTR, DWORD, PVOID);

 BOOL __attribute__((__stdcall__)) GetTextExtentExPointI
(HDC, LPWORD, int, int, LPINT, LPINT, LPSIZE);

 BOOL __attribute__((__stdcall__)) RemoveFontMemResourceEx (HANDLE);


 BOOL __attribute__((__stdcall__)) RemoveFontResourceExA (LPCSTR, DWORD, PVOID);
 BOOL __attribute__((__stdcall__)) RemoveFontResourceExW (LPCWSTR, DWORD, PVOID);

 COLORREF __attribute__((__stdcall__)) SetDCBrushColor (HDC, COLORREF);
 COLORREF __attribute__((__stdcall__)) SetDCPenColor (HDC, COLORREF);

 DWORD __attribute__((__stdcall__)) GetFontUnicodeRanges (HDC, LPGLYPHSET);


 DWORD __attribute__((__stdcall__)) GetGlyphIndicesA (HDC, LPCSTR, int, LPWORD, DWORD);
 DWORD __attribute__((__stdcall__)) GetGlyphIndicesW (HDC, LPCWSTR, int, LPWORD, DWORD);



}
# 47 "c:\\mingw\\include\\windows.h" 2 3

# 1 "c:\\mingw\\include\\winuser.h" 1 3
# 34 "c:\\mingw\\include\\winuser.h" 3
       
# 35 "c:\\mingw\\include\\winuser.h" 3
# 53 "c:\\mingw\\include\\winuser.h" 3
extern "C" {
# 183 "c:\\mingw\\include\\winuser.h" 3
# 1 "c:\\mingw\\include\\dbt.h" 1 3
# 33 "c:\\mingw\\include\\dbt.h" 3
       
# 34 "c:\\mingw\\include\\dbt.h" 3
# 184 "c:\\mingw\\include\\winuser.h" 2 3
# 2606 "c:\\mingw\\include\\winuser.h" 3
typedef BOOL (__attribute__((__stdcall__)) *DLGPROC) (HWND, UINT, WPARAM, LPARAM);
typedef void (__attribute__((__stdcall__)) *TIMERPROC) (HWND, UINT, UINT_PTR, DWORD);
typedef BOOL (__attribute__((__stdcall__)) *GRAYSTRINGPROC) (HDC, LPARAM, int);
typedef LRESULT (__attribute__((__stdcall__)) *HOOKPROC) (int, WPARAM, LPARAM);


typedef BOOL (__attribute__((__stdcall__)) *PROPENUMPROCA) (HWND, LPCSTR, HANDLE);
typedef BOOL (__attribute__((__stdcall__)) *PROPENUMPROCW) (HWND, LPCWSTR, HANDLE);


typedef BOOL (__attribute__((__stdcall__)) *PROPENUMPROCEXA) (HWND, LPSTR, HANDLE, DWORD);
typedef BOOL (__attribute__((__stdcall__)) *PROPENUMPROCEXW) (HWND, LPWSTR, HANDLE, DWORD);


typedef int (__attribute__((__stdcall__)) *EDITWORDBREAKPROCA) (LPSTR, int, int, int);
typedef int (__attribute__((__stdcall__)) *EDITWORDBREAKPROCW) (LPWSTR, int, int, int);
typedef LRESULT (__attribute__((__stdcall__)) *WNDPROC) (HWND, UINT, WPARAM, LPARAM);
typedef BOOL (__attribute__((__stdcall__)) *DRAWSTATEPROC) (HDC, LPARAM, WPARAM, int, int);
typedef BOOL (__attribute__((__stdcall__)) *WNDENUMPROC) (HWND, LPARAM);
typedef BOOL (__attribute__((__stdcall__)) *ENUMWINDOWSPROC) (HWND, LPARAM);
typedef BOOL (__attribute__((__stdcall__)) *MONITORENUMPROC) (HMONITOR, HDC, LPRECT, LPARAM);
typedef BOOL (__attribute__((__stdcall__)) *NAMEENUMPROCA) (LPSTR, LPARAM);
typedef BOOL (__attribute__((__stdcall__)) *NAMEENUMPROCW) (LPWSTR, LPARAM);

typedef NAMEENUMPROCA DESKTOPENUMPROCA;
typedef NAMEENUMPROCW DESKTOPENUMPROCW;
typedef NAMEENUMPROCA WINSTAENUMPROCA;
typedef NAMEENUMPROCW WINSTAENUMPROCW;

typedef void (__attribute__((__stdcall__)) *SENDASYNCPROC) (HWND, UINT, DWORD, LRESULT);

typedef struct HDWP__{int i;}*HDWP;
typedef struct HDEVNOTIFY__{int i;}*HDEVNOTIFY;

typedef struct tagMENUGETOBJECTINFO
{ DWORD dwFlags;
  UINT uPos;
  HMENU hmenu;
  PVOID riid;
  PVOID pvObj;
} MENUGETOBJECTINFO, *PMENUGETOBJECTINFO;

typedef struct tagACCEL
{ BYTE fVirt;
  WORD key;
  WORD cmd;
} ACCEL, *LPACCEL;

typedef struct tagACCESSTIMEOUT
{ UINT cbSize;
  DWORD dwFlags;
  DWORD iTimeOutMSec;
} ACCESSTIMEOUT, *LPACCESSTIMEOUT;

typedef struct tagANIMATIONINFO
{ UINT cbSize;
  int iMinAnimate;
} ANIMATIONINFO, *LPANIMATIONINFO;

typedef struct tagCREATESTRUCTA
{ LPVOID lpCreateParams;
  HINSTANCE hInstance;
  HMENU hMenu;
  HWND hwndParent;
  int cy;
  int cx;
  int y;
  int x;
  LONG style;
  LPCSTR lpszName;
  LPCSTR lpszClass;
  DWORD dwExStyle;
} CREATESTRUCTA, *LPCREATESTRUCTA;

typedef struct tagCREATESTRUCTW
{ LPVOID lpCreateParams;
  HINSTANCE hInstance;
  HMENU hMenu;
  HWND hwndParent;
  int cy;
  int cx;
  int y;
  int x;
  LONG style;
  LPCWSTR lpszName;
  LPCWSTR lpszClass;
  DWORD dwExStyle;
} CREATESTRUCTW, *LPCREATESTRUCTW;

typedef CREATESTRUCTA CREATESTRUCT, *LPCREATESTRUCT;

typedef struct tagCBT_CREATEWNDA
{ LPCREATESTRUCTA lpcs;
  HWND hwndInsertAfter;
} CBT_CREATEWNDA, *LPCBT_CREATEWNDA;

typedef struct tagCBT_CREATEWNDW
{ LPCREATESTRUCTW lpcs;
  HWND hwndInsertAfter;
} CBT_CREATEWNDW, *LPCBT_CREATEWNDW;

typedef CBT_CREATEWNDA CBT_CREATEWND, *LPCBT_CREATEWND;

typedef struct tagCBTACTIVATESTRUCT
{ BOOL fMouse;
  HWND hWndActive;
} CBTACTIVATESTRUCT, *LPCBTACTIVATESTRUCT;

typedef struct tagCLIENTCREATESTRUCT
{ HANDLE hWindowMenu;
  UINT idFirstChild;
} CLIENTCREATESTRUCT, *LPCLIENTCREATESTRUCT;

typedef struct tagCOMPAREITEMSTRUCT
{ UINT CtlType;
  UINT CtlID;
  HWND hwndItem;
  UINT itemID1;
  DWORD itemData1;
  UINT itemID2;
  DWORD itemData2;
  DWORD dwLocaleId;
} COMPAREITEMSTRUCT, *LPCOMPAREITEMSTRUCT;

typedef struct tagCOPYDATASTRUCT
{ DWORD dwData;
  DWORD cbData;
  PVOID lpData;
} COPYDATASTRUCT, *PCOPYDATASTRUCT;

typedef struct tagCURSORSHAPE
{ int xHotSpot;
  int yHotSpot;
  int cx;
  int cy;
  int cbWidth;
  BYTE Planes;
  BYTE BitsPixel;
} CURSORSHAPE, *LPCURSORSHAPE;

typedef struct tagCWPRETSTRUCT
{ LRESULT lResult;
  LPARAM lParam;
  WPARAM wParam;
  DWORD message;
  HWND hwnd;
} CWPRETSTRUCT;

typedef struct tagCWPSTRUCT
{ LPARAM lParam;
  WPARAM wParam;
  UINT message;
  HWND hwnd;
} CWPSTRUCT, *PCWPSTRUCT;

typedef struct tagDEBUGHOOKINFO
{ DWORD idThread;
  DWORD idThreadInstaller;
  LPARAM lParam;
  WPARAM wParam;
  int code;
} DEBUGHOOKINFO, *PDEBUGHOOKINFO, *LPDEBUGHOOKINFO;

typedef struct tagDELETEITEMSTRUCT
{ UINT CtlType;
  UINT CtlID;
  UINT itemID;
  HWND hwndItem;
  UINT itemData;
} DELETEITEMSTRUCT, *PDELETEITEMSTRUCT, *LPDELETEITEMSTRUCT;

#pragma pack(push,2)

typedef struct
{ DWORD style;
  DWORD dwExtendedStyle;
  short x;
  short y;
  short cx;
  short cy;
  WORD id;
} DLGITEMTEMPLATE, *LPDLGITEMTEMPLATE;

typedef struct
{ DWORD style;
  DWORD dwExtendedStyle;
  WORD cdit;
  short x;
  short y;
  short cx;
  short cy;
} DLGTEMPLATE, *LPDLGTEMPLATE, *LPDLGTEMPLATEA, *LPDLGTEMPLATEW;

typedef const DLGTEMPLATE *LPCDLGTEMPLATE;

#pragma pack(pop)

typedef struct tagDRAWITEMSTRUCT
{ UINT CtlType;
  UINT CtlID;
  UINT itemID;
  UINT itemAction;
  UINT itemState;
  HWND hwndItem;
  HDC hDC;
  RECT rcItem;
  DWORD itemData;
} DRAWITEMSTRUCT, *LPDRAWITEMSTRUCT, *PDRAWITEMSTRUCT;

typedef struct
{ UINT cbSize;
  int iTabLength;
  int iLeftMargin;
  int iRightMargin;
  UINT uiLengthDrawn;
} DRAWTEXTPARAMS, *LPDRAWTEXTPARAMS;

typedef struct tagPAINTSTRUCT
{ HDC hdc;
  BOOL fErase;
  RECT rcPaint;
  BOOL fRestore;
  BOOL fIncUpdate;
  BYTE rgbReserved[32];
} PAINTSTRUCT, *LPPAINTSTRUCT;

typedef struct tagMSG
{ HWND hwnd;
  UINT message;
  WPARAM wParam;
  LPARAM lParam;
  DWORD time;
  POINT pt;
} MSG, *LPMSG, *PMSG;

typedef struct _ICONINFO
{ BOOL fIcon;
  DWORD xHotspot;
  DWORD yHotspot;
  HBITMAP hbmMask;
  HBITMAP hbmColor;
} ICONINFO, *PICONINFO;

typedef struct tagNMHDR
{ HWND hwndFrom;
  UINT idFrom;
  UINT code;
} NMHDR, *LPNMHDR;

typedef struct _WNDCLASSA
{ UINT style;
  WNDPROC lpfnWndProc;
  int cbClsExtra;
  int cbWndExtra;
  HINSTANCE hInstance;
  HICON hIcon;
  HCURSOR hCursor;
  HBRUSH hbrBackground;
  LPCSTR lpszMenuName;
  LPCSTR lpszClassName;
} WNDCLASSA, *LPWNDCLASSA, *PWNDCLASSA;

typedef struct _WNDCLASSW
{ UINT style;
  WNDPROC lpfnWndProc;
  int cbClsExtra;
  int cbWndExtra;
  HINSTANCE hInstance;
  HICON hIcon;
  HCURSOR hCursor;
  HBRUSH hbrBackground;
  LPCWSTR lpszMenuName;
  LPCWSTR lpszClassName;
} WNDCLASSW, *LPWNDCLASSW, *PWNDCLASSW;

typedef WNDCLASSA WNDCLASS, *LPWNDCLASS, *PWNDCLASS;

typedef struct _WNDCLASSEXA
{ UINT cbSize;
  UINT style;
  WNDPROC lpfnWndProc;
  int cbClsExtra;
  int cbWndExtra;
  HINSTANCE hInstance;
  HICON hIcon;
  HCURSOR hCursor;
  HBRUSH hbrBackground;
  LPCSTR lpszMenuName;
  LPCSTR lpszClassName;
  HICON hIconSm;
} WNDCLASSEXA, *LPWNDCLASSEXA, *PWNDCLASSEXA;

typedef struct _WNDCLASSEXW
{ UINT cbSize;
  UINT style;
  WNDPROC lpfnWndProc;
  int cbClsExtra;
  int cbWndExtra;
  HINSTANCE hInstance;
  HICON hIcon;
  HCURSOR hCursor;
  HBRUSH hbrBackground;
  LPCWSTR lpszMenuName;
  LPCWSTR lpszClassName;
  HICON hIconSm;
} WNDCLASSEXW, *LPWNDCLASSEXW, *PWNDCLASSEXW;

typedef WNDCLASSEXA WNDCLASSEX, *LPWNDCLASSEX, *PWNDCLASSEX;

typedef struct tagMENUITEMINFOA
{ UINT cbSize;
  UINT fMask;
  UINT fType;
  UINT fState;
  UINT wID;
  HMENU hSubMenu;
  HBITMAP hbmpChecked;
  HBITMAP hbmpUnchecked;
  ULONG_PTR dwItemData;
  LPSTR dwTypeData;
  UINT cch;

  HBITMAP hbmpItem;

} MENUITEMINFOA, *LPMENUITEMINFOA;

typedef const MENUITEMINFOA *LPCMENUITEMINFOA;

typedef struct tagMENUITEMINFOW
{ UINT cbSize;
  UINT fMask;
  UINT fType;
  UINT fState;
  UINT wID;
  HMENU hSubMenu;
  HBITMAP hbmpChecked;
  HBITMAP hbmpUnchecked;
  ULONG_PTR dwItemData;
  LPWSTR dwTypeData;
  UINT cch;

  HBITMAP hbmpItem;

} MENUITEMINFOW, *LPMENUITEMINFOW;

typedef const MENUITEMINFOW *LPCMENUITEMINFOW;
typedef MENUITEMINFOA MENUITEMINFO, *LPMENUITEMINFO;
typedef LPCMENUITEMINFOA LPCMENUITEMINFO;

typedef struct tagSCROLLINFO
{ UINT cbSize;
  UINT fMask;
  int nMin;
  int nMax;
  UINT nPage;
  int nPos;
  int nTrackPos;
} SCROLLINFO, *LPSCROLLINFO;

typedef const SCROLLINFO *LPCSCROLLINFO;

typedef struct _WINDOWPLACEMENT
{ UINT length;
  UINT flags;
  UINT showCmd;
  POINT ptMinPosition;
  POINT ptMaxPosition;
  RECT rcNormalPosition;
} WINDOWPLACEMENT, *LPWINDOWPLACEMENT, *PWINDOWPLACEMENT;

typedef struct
{ WORD versionNumber;
  WORD offset;
} MENUITEMTEMPLATEHEADER;

typedef struct
{ WORD mtOption;
  WORD mtID;
  WCHAR mtString[1];
} MENUITEMTEMPLATE;

typedef void MENUTEMPLATE, MENUTEMPLATEA, MENUTEMPLATEW;
typedef void *LPMENUTEMPLATE, *LPMENUTEMPLATEA, *LPMENUTEMPLATEW;

typedef struct tagHELPINFO
{ UINT cbSize;
  int iContextType;
  int iCtrlId;
  HANDLE hItemHandle;
  DWORD dwContextId;
  POINT MousePos;
} HELPINFO, *LPHELPINFO;

typedef void (__attribute__((__stdcall__)) *MSGBOXCALLBACK) (LPHELPINFO);

typedef struct
{ UINT cbSize;
  HWND hwndOwner;
  HINSTANCE hInstance;
  LPCSTR lpszText;
  LPCSTR lpszCaption;
  DWORD dwStyle;
  LPCSTR lpszIcon;
  DWORD dwContextHelpId;
  MSGBOXCALLBACK lpfnMsgBoxCallback;
  DWORD dwLanguageId;
} MSGBOXPARAMSA, *PMSGBOXPARAMSA, *LPMSGBOXPARAMSA;

typedef struct
{ UINT cbSize;
  HWND hwndOwner;
  HINSTANCE hInstance;
  LPCWSTR lpszText;
  LPCWSTR lpszCaption;
  DWORD dwStyle;
  LPCWSTR lpszIcon;
  DWORD dwContextHelpId;
  MSGBOXCALLBACK lpfnMsgBoxCallback;
  DWORD dwLanguageId;
} MSGBOXPARAMSW, *PMSGBOXPARAMSW, *LPMSGBOXPARAMSW;

typedef MSGBOXPARAMSA MSGBOXPARAMS, *PMSGBOXPARAMS, *LPMSGBOXPARAMS;

typedef struct tagUSEROBJECTFLAGS
{ BOOL fInherit;
  BOOL fReserved;
  DWORD dwFlags;
} USEROBJECTFLAGS;

typedef struct tagFILTERKEYS
{ UINT cbSize;
  DWORD dwFlags;
  DWORD iWaitMSec;
  DWORD iDelayMSec;
  DWORD iRepeatMSec;
  DWORD iBounceMSec;
} FILTERKEYS;

typedef struct tagHIGHCONTRASTA
{ UINT cbSize;
  DWORD dwFlags;
  LPSTR lpszDefaultScheme;
} HIGHCONTRASTA, *LPHIGHCONTRASTA;

typedef struct tagHIGHCONTRASTW
{ UINT cbSize;
  DWORD dwFlags;
  LPWSTR lpszDefaultScheme;
} HIGHCONTRASTW, *LPHIGHCONTRASTW;

typedef HIGHCONTRASTA HIGHCONTRAST, *LPHIGHCONTRAST;

typedef struct tagMINIMIZEDMETRICS
{ UINT cbSize;
  int iWidth;
  int iHorzGap;
  int iVertGap;
  int iArrange;
} MINIMIZEDMETRICS, *LPMINIMIZEDMETRICS;

typedef struct tagMOUSEKEYS
{ UINT cbSize;
  DWORD dwFlags;
  DWORD iMaxSpeed;
  DWORD iTimeToMaxSpeed;
  DWORD iCtrlSpeed;
  DWORD dwReserved1;
  DWORD dwReserved2;
} MOUSEKEYS, *LPMOUSEKEYS;

typedef struct tagSERIALKEYSA
{ UINT cbSize;
  DWORD dwFlags;
  LPSTR lpszActivePort;
  LPSTR lpszPort;
  UINT iBaudRate;
  UINT iPortState;
  UINT iActive;
} SERIALKEYSA, *LPSERIALKEYSA;

typedef struct tagSERIALKEYSW
{ UINT cbSize;
  DWORD dwFlags;
  LPWSTR lpszActivePort;
  LPWSTR lpszPort;
  UINT iBaudRate;
  UINT iPortState;
  UINT iActive;
} SERIALKEYSW, *LPSERIALKEYSW;

typedef SERIALKEYSA SERIALKEYS, *LPSERIALKEYS;

typedef struct tagSOUNDSENTRYA
{ UINT cbSize;
  DWORD dwFlags;
  DWORD iFSTextEffect;
  DWORD iFSTextEffectMSec;
  DWORD iFSTextEffectColorBits;
  DWORD iFSGrafEffect;
  DWORD iFSGrafEffectMSec;
  DWORD iFSGrafEffectColor;
  DWORD iWindowsEffect;
  DWORD iWindowsEffectMSec;
  LPSTR lpszWindowsEffectDLL;
  DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYA, *LPSOUNDSENTRYA;

typedef struct tagSOUNDSENTRYW
{ UINT cbSize;
  DWORD dwFlags;
  DWORD iFSTextEffect;
  DWORD iFSTextEffectMSec;
  DWORD iFSTextEffectColorBits;
  DWORD iFSGrafEffect;
  DWORD iFSGrafEffectMSec;
  DWORD iFSGrafEffectColor;
  DWORD iWindowsEffect;
  DWORD iWindowsEffectMSec;
  LPWSTR lpszWindowsEffectDLL;
  DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYW, *LPSOUNDSENTRYW;

typedef SOUNDSENTRYA SOUNDSENTRY, *LPSOUNDSENTRY;

typedef struct tagSTICKYKEYS
{ DWORD cbSize;
  DWORD dwFlags;
} STICKYKEYS, *LPSTICKYKEYS;

typedef struct tagTOGGLEKEYS
{ DWORD cbSize;
  DWORD dwFlags;
} TOGGLEKEYS;

typedef struct tagMOUSEHOOKSTRUCT
{ POINT pt;
  HWND hwnd;
  UINT wHitTestCode;
  DWORD dwExtraInfo;
} MOUSEHOOKSTRUCT, *LPMOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT;

typedef struct tagTRACKMOUSEEVENT
{ DWORD cbSize;
  DWORD dwFlags;
  HWND hwndTrack;
  DWORD dwHoverTime;
} TRACKMOUSEEVENT, *LPTRACKMOUSEEVENT;

typedef struct tagTPMPARAMS
{ UINT cbSize;
  RECT rcExclude;
} TPMPARAMS, *LPTPMPARAMS;

typedef struct tagEVENTMSG
{ UINT message;
  UINT paramL;
  UINT paramH;
  DWORD time;
  HWND hwnd;
} EVENTMSG, *PEVENTMSGMSG, *LPEVENTMSGMSG, *PEVENTMSG, *LPEVENTMSG;

typedef struct _WINDOWPOS
{ HWND hwnd;
  HWND hwndInsertAfter;
  int x;
  int y;
  int cx;
  int cy;
  UINT flags;
} WINDOWPOS, *PWINDOWPOS, *LPWINDOWPOS;

typedef struct tagNCCALCSIZE_PARAMS
{ RECT rgrc[3];
  PWINDOWPOS lppos;
} NCCALCSIZE_PARAMS, *LPNCCALCSIZE_PARAMS;

typedef struct tagMDICREATESTRUCTA
{ LPCSTR szClass;
  LPCSTR szTitle;
  HANDLE hOwner;
  int x;
  int y;
  int cx;
  int cy;
  DWORD style;
  LPARAM lParam;
} MDICREATESTRUCTA, *LPMDICREATESTRUCTA;

typedef struct tagMDICREATESTRUCTW
{ LPCWSTR szClass;
  LPCWSTR szTitle;
  HANDLE hOwner;
  int x;
  int y;
  int cx;
  int cy;
  DWORD style;
  LPARAM lParam;
} MDICREATESTRUCTW, *LPMDICREATESTRUCTW;

typedef MDICREATESTRUCTA MDICREATESTRUCT, *LPMDICREATESTRUCT;

typedef struct tagMINMAXINFO
{ POINT ptReserved;
  POINT ptMaxSize;
  POINT ptMaxPosition;
  POINT ptMinTrackSize;
  POINT ptMaxTrackSize;
} MINMAXINFO, *PMINMAXINFO, *LPMINMAXINFO;

typedef struct tagMDINEXTMENU
{ HMENU hmenuIn;
  HMENU hmenuNext;
  HWND hwndNext;
} MDINEXTMENU, *PMDINEXTMENU, *LPMDINEXTMENU;

typedef struct tagMEASUREITEMSTRUCT
{ UINT CtlType;
  UINT CtlID;
  UINT itemID;
  UINT itemWidth;
  UINT itemHeight;
  DWORD itemData;
} MEASUREITEMSTRUCT, *PMEASUREITEMSTRUCT, *LPMEASUREITEMSTRUCT;

typedef struct tagDROPSTRUCT
{ HWND hwndSource;
  HWND hwndSink;
  DWORD wFmt;
  DWORD dwData;
  POINT ptDrop;
  DWORD dwControlData;
} DROPSTRUCT, *PDROPSTRUCT, *LPDROPSTRUCT;

typedef DWORD HELPPOLY;

typedef struct tagMULTIKEYHELPA
{ DWORD mkSize;
  CHAR mkKeylist;
  CHAR szKeyphrase[1];
} MULTIKEYHELPA, *PMULTIKEYHELPA, *LPMULTIKEYHELPA;

typedef struct tagMULTIKEYHELPW
{ DWORD mkSize;
  WCHAR mkKeylist;
  WCHAR szKeyphrase[1];
} MULTIKEYHELPW, *PMULTIKEYHELPW, *LPMULTIKEYHELPW;

typedef MULTIKEYHELPA MULTIKEYHELP, *PMULTIKEYHELP, *LPMULTIKEYHELP;

typedef struct tagHELPWININFOA
{ int wStructSize;
  int x;
  int y;
  int dx;
  int dy;
  int wMax;
  CHAR rgchMember[2];
} HELPWININFOA, *PHELPWININFOA, *LPHELPWININFOA;

typedef struct tagHELPWININFOW
{ int wStructSize;
  int x;
  int y;
  int dx;
  int dy;
  int wMax;
  WCHAR rgchMember[2];
} HELPWININFOW, *PHELPWININFOW, *LPHELPWININFOW;

typedef struct tagSTYLESTRUCT
{ DWORD styleOld;
  DWORD styleNew;
} STYLESTRUCT, *LPSTYLESTRUCT;

typedef struct tagALTTABINFO
{ DWORD cbSize;
  int cItems;
  int cColumns;
  int cRows;
  int iColFocus;
  int iRowFocus;
  int cxItem;
  int cyItem;
  POINT ptStart;
} ALTTABINFO, *PALTTABINFO, *LPALTTABINFO;

typedef struct tagCOMBOBOXINFO
{ DWORD cbSize;
  RECT rcItem;
  RECT rcButton;
  DWORD stateButton;
  HWND hwndCombo;
  HWND hwndItem;
  HWND hwndList;
} COMBOBOXINFO, *PCOMBOBOXINFO, *LPCOMBOBOXINFO;

typedef struct tagCURSORINFO
{ DWORD cbSize;
  DWORD flags;
  HCURSOR hCursor;
  POINT ptScreenPos;
} CURSORINFO, *PCURSORINFO, *LPCURSORINFO;

typedef struct tagMENUBARINFO
{ DWORD cbSize;
  RECT rcBar;
  HMENU hMenu;
  HWND hwndMenu;
  BOOL fBarFocused:1;
  BOOL fFocused:1;
} MENUBARINFO, *PMENUBARINFO;

typedef struct tagMENUINFO
{ DWORD cbSize;
  DWORD fMask;
  DWORD dwStyle;
  UINT cyMax;
  HBRUSH hbrBack;
  DWORD dwContextHelpID;
  ULONG_PTR dwMenuData;
} MENUINFO, *LPMENUINFO;

typedef MENUINFO const *LPCMENUINFO;



typedef struct tagSCROLLBARINFO
{ DWORD cbSize;
  RECT rcScrollBar;
  int dxyLineButton;
  int xyThumbTop;
  int xyThumbBottom;
  int reserved;
  DWORD rgstate[5 +1];
} SCROLLBARINFO, *PSCROLLBARINFO, *LPSCROLLBARINFO;

typedef struct tagWINDOWINFO
{ DWORD cbSize;
  RECT rcWindow;
  RECT rcClient;
  DWORD dwStyle;
  DWORD dwExStyle;
  DWORD dwWindowStatus;
  UINT cxWindowBorders;
  UINT cyWindowBorders;
  ATOM atomWindowType;
  WORD wCreatorVersion;
} WINDOWINFO, *PWINDOWINFO, *LPWINDOWINFO;

typedef struct tagLASTINPUTINFO
{ UINT cbSize;
  DWORD dwTime;
} LASTINPUTINFO, *PLASTINPUTINFO;

typedef struct tagMONITORINFO
{ DWORD cbSize;
  RECT rcMonitor;
  RECT rcWork;
  DWORD dwFlags;
} MONITORINFO, *LPMONITORINFO;




typedef struct tagMONITORINFOEXA : public tagMONITORINFO
{ CHAR szDevice[32];
} MONITORINFOEXA, *LPMONITORINFOEXA;

typedef struct tagMONITORINFOEXW : public tagMONITORINFO
{ WCHAR szDevice[32];
} MONITORINFOEXW, *LPMONITORINFOEXW;
# 3397 "c:\\mingw\\include\\winuser.h" 3
typedef MONITORINFOEXA MONITORINFOEX, *LPMONITORINFOEX;

typedef struct tagKBDLLHOOKSTRUCT
{ DWORD vkCode;
  DWORD scanCode;
  DWORD flags;
  DWORD time;
  DWORD dwExtraInfo;
} KBDLLHOOKSTRUCT, *LPKBDLLHOOKSTRUCT, *PKBDLLHOOKSTRUCT;

typedef struct
{ POINT pt;
  DWORD mouseData;
  DWORD flags;
  DWORD time;
  ULONG_PTR dwExtraInfo;
} MSLLHOOKSTRUCT, *PMSLLHOOKSTRUCT;
# 3437 "c:\\mingw\\include\\winuser.h" 3
typedef const GUID *LPCGUID;


 HKL __attribute__((__stdcall__)) ActivateKeyboardLayout (HKL, UINT);
 BOOL __attribute__((__stdcall__)) AdjustWindowRect (LPRECT, DWORD, BOOL);
 BOOL __attribute__((__stdcall__)) AdjustWindowRectEx (LPRECT, DWORD, BOOL, DWORD);

 BOOL __attribute__((__stdcall__)) AnyPopup (void);


 BOOL __attribute__((__stdcall__)) AppendMenuA (HMENU, UINT, UINT_PTR, LPCSTR);
 BOOL __attribute__((__stdcall__)) AppendMenuW (HMENU, UINT, UINT_PTR, LPCWSTR);

 UINT __attribute__((__stdcall__)) ArrangeIconicWindows (HWND);
 BOOL __attribute__((__stdcall__)) AttachThreadInput (DWORD, DWORD, BOOL);
 HDWP __attribute__((__stdcall__)) BeginDeferWindowPos (int);
 HDC __attribute__((__stdcall__)) BeginPaint (HWND, LPPAINTSTRUCT);
 BOOL __attribute__((__stdcall__)) BringWindowToTop (HWND);
 long __attribute__((__stdcall__)) BroadcastSystemMessage (DWORD, LPDWORD, UINT, WPARAM, LPARAM);


 BOOL __attribute__((__stdcall__)) CallMsgFilterA (LPMSG, INT);
 BOOL __attribute__((__stdcall__)) CallMsgFilterW (LPMSG, INT);


 LRESULT __attribute__((__stdcall__)) CallWindowProcA (WNDPROC, HWND, UINT, WPARAM, LPARAM);
 LRESULT __attribute__((__stdcall__)) CallWindowProcW (WNDPROC, HWND, UINT, WPARAM, LPARAM);

 WORD __attribute__((__stdcall__)) CascadeWindows (HWND, UINT, LPCRECT, UINT, const HWND *);
 BOOL __attribute__((__stdcall__)) ChangeClipboardChain (HWND, HWND);


 LRESULT __attribute__((__stdcall__)) CallNextHookEx (HHOOK, int, WPARAM, LPARAM);


 BOOL __attribute__((__stdcall__)) ChangeMenuA (HMENU, UINT, LPCSTR, UINT, UINT);
 BOOL __attribute__((__stdcall__)) ChangeMenuW (HMENU, UINT, LPCWSTR, UINT, UINT);


 LPSTR __attribute__((__stdcall__)) CharLowerA (LPSTR);
 LPWSTR __attribute__((__stdcall__)) CharLowerW (LPWSTR);


 DWORD __attribute__((__stdcall__)) CharLowerBuffA (LPSTR, DWORD);
 DWORD __attribute__((__stdcall__)) CharLowerBuffW (LPWSTR, DWORD);


 LPSTR __attribute__((__stdcall__)) CharNextA (LPCSTR);
 LPWSTR __attribute__((__stdcall__)) CharNextW (LPCWSTR);
 LPSTR __attribute__((__stdcall__)) CharNextExA (WORD, LPCSTR, DWORD);


 LPSTR __attribute__((__stdcall__)) CharPrevA (LPCSTR, LPCSTR);
 LPWSTR __attribute__((__stdcall__)) CharPrevW (LPCWSTR, LPCWSTR);
 LPSTR __attribute__((__stdcall__)) CharPrevExA (WORD, LPCSTR, LPCSTR, DWORD);


 BOOL __attribute__((__stdcall__)) CharToOemA (LPCSTR, LPSTR);
 BOOL __attribute__((__stdcall__)) CharToOemW (LPCWSTR, LPSTR);


 BOOL __attribute__((__stdcall__)) CharToOemBuffA (LPCSTR, LPSTR, DWORD);
 BOOL __attribute__((__stdcall__)) CharToOemBuffW (LPCWSTR, LPSTR, DWORD);


 LPSTR __attribute__((__stdcall__)) CharUpperA (LPSTR);
 LPWSTR __attribute__((__stdcall__)) CharUpperW (LPWSTR);


 DWORD __attribute__((__stdcall__)) CharUpperBuffA (LPSTR, DWORD);
 DWORD __attribute__((__stdcall__)) CharUpperBuffW (LPWSTR, DWORD);

 BOOL __attribute__((__stdcall__)) CheckDlgButton (HWND, int, UINT);
 DWORD __attribute__((__stdcall__)) CheckMenuItem (HMENU, UINT, UINT);
 BOOL __attribute__((__stdcall__)) CheckMenuRadioItem (HMENU, UINT, UINT, UINT, UINT);
 BOOL __attribute__((__stdcall__)) CheckRadioButton (HWND, int, int, int);
 HWND __attribute__((__stdcall__)) ChildWindowFromPoint (HWND, POINT);
 HWND __attribute__((__stdcall__)) ChildWindowFromPointEx (HWND, POINT, UINT);
 BOOL __attribute__((__stdcall__)) ClientToScreen (HWND, LPPOINT);
 BOOL __attribute__((__stdcall__)) ClipCursor (LPCRECT);
 BOOL __attribute__((__stdcall__)) CloseClipboard (void);
 BOOL __attribute__((__stdcall__)) CloseDesktop (HDESK);
 BOOL __attribute__((__stdcall__)) CloseWindow (HWND);
 BOOL __attribute__((__stdcall__)) CloseWindowStation (HWINSTA);


 int __attribute__((__stdcall__)) CopyAcceleratorTableA (HACCEL, LPACCEL, int);
 int __attribute__((__stdcall__)) CopyAcceleratorTableW (HACCEL, LPACCEL, int);


 HICON __attribute__((__stdcall__)) CopyIcon (HICON);
 HANDLE __attribute__((__stdcall__)) CopyImage (HANDLE, UINT, int, int, UINT);
 BOOL __attribute__((__stdcall__)) CopyRect (LPRECT, LPCRECT);
 int __attribute__((__stdcall__)) CountClipboardFormats (void);


 HACCEL __attribute__((__stdcall__)) CreateAcceleratorTableA (LPACCEL, int);
 HACCEL __attribute__((__stdcall__)) CreateAcceleratorTableW (LPACCEL, int);

 BOOL __attribute__((__stdcall__)) CreateCaret (HWND, HBITMAP, int, int);
 HCURSOR __attribute__((__stdcall__)) CreateCursor (HINSTANCE, int, int, int, int, PCVOID, PCVOID);
# 3548 "c:\\mingw\\include\\winuser.h" 3
 HWND __attribute__((__stdcall__))
CreateDialogIndirectParamA (HINSTANCE, LPCDLGTEMPLATE, HWND, DLGPROC, LPARAM);
 HWND __attribute__((__stdcall__))
CreateDialogIndirectParamW (HINSTANCE, LPCDLGTEMPLATE, HWND, DLGPROC, LPARAM);


 HWND __attribute__((__stdcall__)) CreateDialogParamA (HINSTANCE, LPCSTR, HWND, DLGPROC, LPARAM);
 HWND __attribute__((__stdcall__)) CreateDialogParamW (HINSTANCE, LPCWSTR, HWND, DLGPROC, LPARAM);

 HICON __attribute__((__stdcall__)) CreateIcon (HINSTANCE, int, int, BYTE, BYTE, const BYTE *, const BYTE *);
 HICON __attribute__((__stdcall__)) CreateIconFromResource (PBYTE, DWORD, BOOL, DWORD);
 HICON __attribute__((__stdcall__)) CreateIconFromResourceEx (PBYTE, DWORD, BOOL, DWORD, int, int, UINT);
 HICON __attribute__((__stdcall__)) CreateIconIndirect (PICONINFO);


 HWND __attribute__((__stdcall__)) CreateMDIWindowA (LPCSTR, LPCSTR, DWORD, int, int, int, int, HWND, HINSTANCE, LPARAM);
 HWND __attribute__((__stdcall__)) CreateMDIWindowW (LPCWSTR, LPCWSTR, DWORD, int, int, int, int, HWND, HINSTANCE, LPARAM);
 HMENU __attribute__((__stdcall__)) CreateMenu (void);
 HMENU __attribute__((__stdcall__)) CreatePopupMenu (void);
# 3575 "c:\\mingw\\include\\winuser.h" 3
 HWND __attribute__((__stdcall__)) CreateWindowExA
(DWORD, LPCSTR, LPCSTR, DWORD, int, int, int, int, HWND, HMENU, HINSTANCE, LPVOID);
 HWND __attribute__((__stdcall__)) CreateWindowExW
(DWORD, LPCWSTR, LPCWSTR, DWORD, int, int, int, int, HWND, HMENU, HINSTANCE, LPVOID);


 HWINSTA __attribute__((__stdcall__)) CreateWindowStationA (LPCSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES);
 HWINSTA __attribute__((__stdcall__)) CreateWindowStationW (LPCWSTR, DWORD, DWORD, LPSECURITY_ATTRIBUTES);

 HDWP __attribute__((__stdcall__)) DeferWindowPos (HDWP, HWND, HWND, int, int, int, int, UINT);


 LRESULT __attribute__((__stdcall__)) DefDlgProcA (HWND, UINT, WPARAM, LPARAM);
 LRESULT __attribute__((__stdcall__)) DefDlgProcW (HWND, UINT, WPARAM, LPARAM);


 LRESULT __attribute__((__stdcall__)) DefFrameProcA (HWND, HWND, UINT, WPARAM, LPARAM);
 LRESULT __attribute__((__stdcall__)) DefFrameProcW (HWND, HWND, UINT, WPARAM, LPARAM);


 LRESULT __attribute__((__stdcall__)) DefMDIChildProcA (HWND, UINT, WPARAM, LPARAM);
 LRESULT __attribute__((__stdcall__)) DefMDIChildProcW (HWND, UINT, WPARAM, LPARAM);


 LRESULT __attribute__((__stdcall__)) DefWindowProcA (HWND, UINT, WPARAM, LPARAM);
 LRESULT __attribute__((__stdcall__)) DefWindowProcW (HWND, UINT, WPARAM, LPARAM);

 BOOL __attribute__((__stdcall__)) DeleteMenu (HMENU, UINT, UINT);
 BOOL __attribute__((__stdcall__)) DeregisterShellHookWindow (HWND);
 BOOL __attribute__((__stdcall__)) DestroyAcceleratorTable (HACCEL);
 BOOL __attribute__((__stdcall__)) DestroyCaret (void);
 BOOL __attribute__((__stdcall__)) DestroyCursor (HCURSOR);
 BOOL __attribute__((__stdcall__)) DestroyIcon (HICON);
 BOOL __attribute__((__stdcall__)) DestroyMenu (HMENU);
 BOOL __attribute__((__stdcall__)) DestroyWindow (HWND);
# 3620 "c:\\mingw\\include\\winuser.h" 3
 int __attribute__((__stdcall__)) DialogBoxIndirectParamA (HINSTANCE, LPCDLGTEMPLATE, HWND, DLGPROC, LPARAM);
 int __attribute__((__stdcall__)) DialogBoxIndirectParamW (HINSTANCE, LPCDLGTEMPLATE, HWND, DLGPROC, LPARAM);







 int __attribute__((__stdcall__)) DialogBoxParamA (HINSTANCE, LPCSTR, HWND, DLGPROC, LPARAM);
 int __attribute__((__stdcall__)) DialogBoxParamW (HINSTANCE, LPCWSTR, HWND, DLGPROC, LPARAM);



 LONG __attribute__((__stdcall__)) DispatchMessageA (const MSG *);
 LONG __attribute__((__stdcall__)) DispatchMessageW (const MSG *);


 int __attribute__((__stdcall__)) DlgDirListA (HWND, LPSTR, int, int, UINT);
 int __attribute__((__stdcall__)) DlgDirListW (HWND, LPWSTR, int, int, UINT);


 int __attribute__((__stdcall__)) DlgDirListComboBoxA (HWND, LPSTR, int, int, UINT);
 int __attribute__((__stdcall__)) DlgDirListComboBoxW (HWND, LPWSTR, int, int, UINT);


 BOOL __attribute__((__stdcall__)) DlgDirSelectComboBoxExA (HWND, LPSTR, int, int);
 BOOL __attribute__((__stdcall__)) DlgDirSelectComboBoxExW (HWND, LPWSTR, int, int);


 BOOL __attribute__((__stdcall__)) DlgDirSelectExA (HWND, LPSTR, int, int);
 BOOL __attribute__((__stdcall__)) DlgDirSelectExW (HWND, LPWSTR, int, int);

 BOOL __attribute__((__stdcall__)) DragDetect (HWND, POINT);
 DWORD __attribute__((__stdcall__)) DragObject (HWND, HWND, UINT, DWORD, HCURSOR);
 BOOL __attribute__((__stdcall__)) DrawAnimatedRects (HWND, int, LPCRECT, LPCRECT);
 BOOL __attribute__((__stdcall__)) DrawCaption (HWND, HDC, LPCRECT, UINT);
 BOOL __attribute__((__stdcall__)) DrawEdge (HDC, LPRECT, UINT, UINT);
 BOOL __attribute__((__stdcall__)) DrawFocusRect (HDC, LPCRECT);
 BOOL __attribute__((__stdcall__)) DrawFrameControl (HDC, LPRECT, UINT, UINT);
 BOOL __attribute__((__stdcall__)) DrawIcon (HDC, int, int, HICON);
 BOOL __attribute__((__stdcall__)) DrawIconEx (HDC, int, int, HICON, int, int, UINT, HBRUSH, UINT);
 BOOL __attribute__((__stdcall__)) DrawMenuBar (HWND);


 BOOL __attribute__((__stdcall__)) DrawStateA
(HDC, HBRUSH, DRAWSTATEPROC, LPARAM, WPARAM, int, int, int, int, UINT);
 BOOL __attribute__((__stdcall__)) DrawStateW
(HDC, HBRUSH, DRAWSTATEPROC, LPARAM, WPARAM, int, int, int, int, UINT);


 int __attribute__((__stdcall__)) DrawTextA (HDC, LPCSTR, int, LPRECT, UINT);
 int __attribute__((__stdcall__)) DrawTextW (HDC, LPCWSTR, int, LPRECT, UINT);


 int __attribute__((__stdcall__)) DrawTextExA (HDC, LPSTR, int, LPRECT, UINT, LPDRAWTEXTPARAMS);
 int __attribute__((__stdcall__)) DrawTextExW (HDC, LPWSTR, int, LPRECT, UINT, LPDRAWTEXTPARAMS);

 BOOL __attribute__((__stdcall__)) EmptyClipboard (void);
 BOOL __attribute__((__stdcall__)) EnableMenuItem (HMENU, UINT, UINT);
 BOOL __attribute__((__stdcall__)) EnableScrollBar (HWND, UINT, UINT);
 BOOL __attribute__((__stdcall__)) EnableWindow (HWND, BOOL);
 BOOL __attribute__((__stdcall__)) EndDeferWindowPos (HDWP);
 BOOL __attribute__((__stdcall__)) EndDialog (HWND, int);
 BOOL __attribute__((__stdcall__)) EndMenu (void);
 BOOL __attribute__((__stdcall__)) EndPaint (HWND, const PAINTSTRUCT *);

 BOOL __attribute__((__stdcall__)) EnumChildWindows (HWND, ENUMWINDOWSPROC, LPARAM);
 UINT __attribute__((__stdcall__)) EnumClipboardFormats (UINT);


 BOOL __attribute__((__stdcall__)) EnumDesktopsA (HWINSTA, DESKTOPENUMPROCA, LPARAM);
 BOOL __attribute__((__stdcall__)) EnumDesktopsW (HWINSTA, DESKTOPENUMPROCW, LPARAM);

 BOOL __attribute__((__stdcall__)) EnumDesktopWindows (HDESK, ENUMWINDOWSPROC, LPARAM);
 BOOL __attribute__((__stdcall__)) EnumDisplayMonitors (HDC, LPCRECT, MONITORENUMPROC, LPARAM);


 int __attribute__((__stdcall__)) EnumPropsA (HWND, PROPENUMPROCA);
 int __attribute__((__stdcall__)) EnumPropsW (HWND, PROPENUMPROCW);


 int __attribute__((__stdcall__)) EnumPropsExA (HWND, PROPENUMPROCEXA, LPARAM);
 int __attribute__((__stdcall__)) EnumPropsExW (HWND, PROPENUMPROCEXW, LPARAM);


 BOOL __attribute__((__stdcall__)) EnumThreadWindows (DWORD, WNDENUMPROC, LPARAM);
 BOOL __attribute__((__stdcall__)) EnumWindows (WNDENUMPROC, LPARAM);


 BOOL __attribute__((__stdcall__)) EnumWindowStationsA (WINSTAENUMPROCA, LPARAM);
 BOOL __attribute__((__stdcall__)) EnumWindowStationsW (WINSTAENUMPROCW, LPARAM);

 BOOL __attribute__((__stdcall__)) EqualRect (LPCRECT, LPCRECT);


 BOOL __attribute__((__stdcall__)) ExitWindowsEx (UINT, DWORD);


 HWND __attribute__((__stdcall__)) FindWindowA (LPCSTR, LPCSTR);
 HWND __attribute__((__stdcall__)) FindWindowW (LPCWSTR, LPCWSTR);


 HWND __attribute__((__stdcall__)) FindWindowExA (HWND, HWND, LPCSTR, LPCSTR);
 HWND __attribute__((__stdcall__)) FindWindowExW (HWND, HWND, LPCWSTR, LPCWSTR);

 BOOL __attribute__((__stdcall__)) FlashWindow (HWND, BOOL);

int __attribute__((__stdcall__)) FrameRect (HDC, LPCRECT, HBRUSH);
 BOOL __attribute__((__stdcall__)) FrameRgn (HDC, HRGN, HBRUSH, int, int);
 HWND __attribute__((__stdcall__)) GetActiveWindow (void);
 HWND __attribute__((__stdcall__)) GetAncestor (HWND, UINT);
 SHORT __attribute__((__stdcall__)) GetAsyncKeyState (int);
 HWND __attribute__((__stdcall__)) GetCapture (void);
 UINT __attribute__((__stdcall__)) GetCaretBlinkTime (void);
 BOOL __attribute__((__stdcall__)) GetCaretPos (LPPOINT);


 BOOL __attribute__((__stdcall__)) GetClassInfoA (HINSTANCE, LPCSTR, LPWNDCLASSA);
 BOOL __attribute__((__stdcall__)) GetClassInfoW (HINSTANCE, LPCWSTR, LPWNDCLASSW);


 BOOL __attribute__((__stdcall__)) GetClassInfoExA (HINSTANCE, LPCSTR, LPWNDCLASSEXA);
 BOOL __attribute__((__stdcall__)) GetClassInfoExW (HINSTANCE, LPCWSTR, LPWNDCLASSEXW);


 DWORD __attribute__((__stdcall__)) GetClassLongA (HWND, int);
 DWORD __attribute__((__stdcall__)) GetClassLongW (HWND, int);
# 3760 "c:\\mingw\\include\\winuser.h" 3
 int __attribute__((__stdcall__)) GetClassNameA (HWND, LPSTR, int);
 int __attribute__((__stdcall__)) GetClassNameW (HWND, LPWSTR, int);

 WORD __attribute__((__stdcall__)) GetClassWord (HWND, int);
 BOOL __attribute__((__stdcall__)) GetClientRect (HWND, LPRECT);


 int __attribute__((__stdcall__)) GetClipboardFormatNameA (UINT, LPSTR, int);
 int __attribute__((__stdcall__)) GetClipboardFormatNameW (UINT, LPWSTR, int);

 HANDLE __attribute__((__stdcall__)) GetClipboardData (UINT);
 HWND __attribute__((__stdcall__)) GetClipboardOwner (void);

HWND __attribute__((__stdcall__)) GetClipboardViewer (void);
 BOOL __attribute__((__stdcall__)) GetClipCursor (LPRECT);
 BOOL __attribute__((__stdcall__)) GetCursorPos (LPPOINT);
 HDC __attribute__((__stdcall__)) GetDC (HWND);
 HDC __attribute__((__stdcall__)) GetDCEx (HWND, HRGN, DWORD);
 HWND __attribute__((__stdcall__)) GetDesktopWindow (void);
 long __attribute__((__stdcall__)) GetDialogBaseUnits (void);
 int __attribute__((__stdcall__)) GetDlgCtrlID (HWND);
 HWND __attribute__((__stdcall__)) GetDlgItem (HWND, int);
 UINT __attribute__((__stdcall__)) GetDlgItemInt (HWND, int, PBOOL, BOOL);


 UINT __attribute__((__stdcall__)) GetDlgItemTextA (HWND, int, LPSTR, int);
 UINT __attribute__((__stdcall__)) GetDlgItemTextW (HWND, int, LPWSTR, int);

 UINT __attribute__((__stdcall__)) GetDoubleClickTime (void);
 HWND __attribute__((__stdcall__)) GetFocus (void);
 HWND __attribute__((__stdcall__)) GetForegroundWindow (void);
 BOOL __attribute__((__stdcall__)) GetIconInfo (HICON, PICONINFO);
 BOOL __attribute__((__stdcall__)) GetInputState (void);
 UINT __attribute__((__stdcall__)) GetKBCodePage (void);
 HKL __attribute__((__stdcall__)) GetKeyboardLayout (DWORD);
 UINT __attribute__((__stdcall__)) GetKeyboardLayoutList (int, HKL *);


 BOOL __attribute__((__stdcall__)) GetKeyboardLayoutNameA (LPSTR);
 BOOL __attribute__((__stdcall__)) GetKeyboardLayoutNameW (LPWSTR);

 BOOL __attribute__((__stdcall__)) GetKeyboardState (PBYTE);
 int __attribute__((__stdcall__)) GetKeyboardType (int);


 int __attribute__((__stdcall__)) GetKeyNameTextA (LONG, LPSTR, int);
 int __attribute__((__stdcall__)) GetKeyNameTextW (LONG, LPWSTR, int);

 SHORT __attribute__((__stdcall__)) GetKeyState (int);
 HWND __attribute__((__stdcall__)) GetLastActivePopup (HWND);
 HMENU __attribute__((__stdcall__)) GetMenu (HWND);
 LONG __attribute__((__stdcall__)) GetMenuCheckMarkDimensions (void);
 DWORD __attribute__((__stdcall__)) GetMenuContextHelpId (HMENU);
 UINT __attribute__((__stdcall__)) GetMenuDefaultItem (HMENU, UINT, UINT);
 int __attribute__((__stdcall__)) GetMenuItemCount (HMENU);
 UINT __attribute__((__stdcall__)) GetMenuItemID (HMENU, int);


 BOOL __attribute__((__stdcall__)) GetMenuItemInfoA (HMENU, UINT, BOOL, LPMENUITEMINFOA);
 BOOL __attribute__((__stdcall__)) GetMenuItemInfoW (HMENU, UINT, BOOL, LPMENUITEMINFOW);

 BOOL __attribute__((__stdcall__)) GetMenuItemRect (HWND, HMENU, UINT, LPRECT);
 UINT __attribute__((__stdcall__)) GetMenuState (HMENU, UINT, UINT);


 int __attribute__((__stdcall__)) GetMenuStringA (HMENU, UINT, LPSTR, int, UINT);
 int __attribute__((__stdcall__)) GetMenuStringW (HMENU, UINT, LPWSTR, int, UINT);


 BOOL __attribute__((__stdcall__)) GetMessageA (LPMSG, HWND, UINT, UINT);
 BOOL __attribute__((__stdcall__)) GetMessageW (LPMSG, HWND, UINT, UINT);

 LONG __attribute__((__stdcall__)) GetMessageExtraInfo (void);
 DWORD __attribute__((__stdcall__)) GetMessagePos (void);
 LONG __attribute__((__stdcall__)) GetMessageTime (void);

 HWND __attribute__((__stdcall__)) GetNextDlgGroupItem (HWND, HWND, BOOL);
 HWND __attribute__((__stdcall__)) GetNextDlgTabItem (HWND, HWND, BOOL);
 HWND __attribute__((__stdcall__)) GetOpenClipboardWindow (void);
 HWND __attribute__((__stdcall__)) GetParent (HWND);
 int __attribute__((__stdcall__)) GetPriorityClipboardFormat (UINT *, int);


 HANDLE __attribute__((__stdcall__)) GetPropA (HWND, LPCSTR);
 HANDLE __attribute__((__stdcall__)) GetPropW (HWND, LPCWSTR);

 DWORD __attribute__((__stdcall__)) GetQueueStatus (UINT);
 BOOL __attribute__((__stdcall__)) GetScrollInfo (HWND, int, LPSCROLLINFO);
 int __attribute__((__stdcall__)) GetScrollPos (HWND, int);
 BOOL __attribute__((__stdcall__)) GetScrollRange (HWND, int, LPINT, LPINT);
 HMENU __attribute__((__stdcall__)) GetSubMenu (HMENU, int);
 DWORD __attribute__((__stdcall__)) GetSysColor (int);
 HBRUSH __attribute__((__stdcall__)) GetSysColorBrush (int);
 HMENU __attribute__((__stdcall__)) GetSystemMenu (HWND, BOOL);
 int __attribute__((__stdcall__)) GetSystemMetrics (int);



 DWORD __attribute__((__stdcall__)) GetTabbedTextExtentA (HDC, LPCSTR, int, int, LPINT);
 DWORD __attribute__((__stdcall__)) GetTabbedTextExtentW (HDC, LPCWSTR, int, int, LPINT);


 LONG __attribute__((__stdcall__)) GetWindowLongA (HWND, int);
 LONG __attribute__((__stdcall__)) GetWindowLongW (HWND, int);
# 3875 "c:\\mingw\\include\\winuser.h" 3
 HDESK __attribute__((__stdcall__)) GetThreadDesktop (DWORD);
 HWND __attribute__((__stdcall__)) GetTopWindow (HWND);
 BOOL __attribute__((__stdcall__)) GetUpdateRect (HWND, LPRECT, BOOL);
 int __attribute__((__stdcall__)) GetUpdateRgn (HWND, HRGN, BOOL);


 BOOL __attribute__((__stdcall__)) GetUserObjectInformationA (HANDLE, int, PVOID, DWORD, PDWORD);
 BOOL __attribute__((__stdcall__)) GetUserObjectInformationW (HANDLE, int, PVOID, DWORD, PDWORD);

 BOOL __attribute__((__stdcall__)) GetUserObjectSecurity
(HANDLE, PSECURITY_INFORMATION, PSECURITY_DESCRIPTOR, DWORD, PDWORD);

 HWND __attribute__((__stdcall__)) GetWindow (HWND, UINT);


 DWORD __attribute__((__stdcall__)) GetWindowContextHelpId (HWND);
 HDC __attribute__((__stdcall__)) GetWindowDC (HWND);
 BOOL __attribute__((__stdcall__)) GetWindowPlacement (HWND, WINDOWPLACEMENT *);
 BOOL __attribute__((__stdcall__)) GetWindowRect (HWND, LPRECT);
 int __attribute__((__stdcall__)) GetWindowRgn (HWND, HRGN);
 WORD __attribute__((__stdcall__)) GetWindowWord (HWND, int);




 int __attribute__((__stdcall__)) GetWindowTextA (HWND, LPSTR, int);
 int __attribute__((__stdcall__)) GetWindowTextW (HWND, LPWSTR, int);


 int __attribute__((__stdcall__)) GetWindowTextLengthA (HWND);
 int __attribute__((__stdcall__)) GetWindowTextLengthW (HWND);


 BOOL __attribute__((__stdcall__)) GetAltTabInfoA (HWND, int, PALTTABINFO, LPSTR, UINT);
 BOOL __attribute__((__stdcall__)) GetAltTabInfoW (HWND, int, PALTTABINFO, LPWSTR, UINT);

 BOOL __attribute__((__stdcall__)) GetComboBoxInfo (HWND, PCOMBOBOXINFO);
 BOOL __attribute__((__stdcall__)) GetCursorInfo (PCURSORINFO);

 BOOL __attribute__((__stdcall__)) GetLastInputInfo (PLASTINPUTINFO);
 DWORD __attribute__((__stdcall__)) GetListBoxInfo (HWND);
 BOOL __attribute__((__stdcall__)) GetMenuBarInfo (HWND, LONG, LONG, PMENUBARINFO);
 BOOL __attribute__((__stdcall__)) GetMenuInfo (HMENU, LPMENUINFO);

 BOOL __attribute__((__stdcall__)) GetWindowInfo (HWND, PWINDOWINFO);
 BOOL __attribute__((__stdcall__)) GetScrollBarInfo (HWND, LONG, PSCROLLBARINFO);


 BOOL __attribute__((__stdcall__)) GetMonitorInfoA (HMONITOR, LPMONITORINFO);
 BOOL __attribute__((__stdcall__)) GetMonitorInfoW (HMONITOR, LPMONITORINFO);


 UINT __attribute__((__stdcall__)) GetWindowModuleFileNameA (HWND, LPSTR, UINT);
 UINT __attribute__((__stdcall__)) GetWindowModuleFileNameW (HWND, LPWSTR, UINT);


 BOOL __attribute__((__stdcall__)) GrayStringA (HDC, HBRUSH, GRAYSTRINGPROC, LPARAM, int, int, int, int, int);
 BOOL __attribute__((__stdcall__)) GrayStringW (HDC, HBRUSH, GRAYSTRINGPROC, LPARAM, int, int, int, int, int);

 BOOL __attribute__((__stdcall__)) HideCaret (HWND);
 BOOL __attribute__((__stdcall__)) HiliteMenuItem (HWND, HMENU, UINT, UINT);
 BOOL __attribute__((__stdcall__)) InflateRect (LPRECT, int, int);
 BOOL __attribute__((__stdcall__)) InSendMessage (void);


 BOOL __attribute__((__stdcall__)) InsertMenuA (HMENU, UINT, UINT, UINT, LPCSTR);
 BOOL __attribute__((__stdcall__)) InsertMenuW (HMENU, UINT, UINT, UINT, LPCWSTR);


 BOOL __attribute__((__stdcall__)) InsertMenuItemA (HMENU, UINT, BOOL, LPCMENUITEMINFOA);
 BOOL __attribute__((__stdcall__)) InsertMenuItemW (HMENU, UINT, BOOL, LPCMENUITEMINFOW);

 INT __attribute__((__stdcall__)) InternalGetWindowText (HWND, LPWSTR, INT);
 BOOL __attribute__((__stdcall__)) IntersectRect (LPRECT, LPCRECT, LPCRECT);
 BOOL __attribute__((__stdcall__)) InvalidateRect (HWND, LPCRECT, BOOL);
 BOOL __attribute__((__stdcall__)) InvalidateRgn (HWND, HRGN, BOOL);
 BOOL __attribute__((__stdcall__)) InvertRect (HDC, LPCRECT);


 BOOL __attribute__((__stdcall__)) IsCharAlphaA (CHAR ch);
 BOOL __attribute__((__stdcall__)) IsCharAlphaW (WCHAR);


 BOOL __attribute__((__stdcall__)) IsCharAlphaNumericA (CHAR);
 BOOL __attribute__((__stdcall__)) IsCharAlphaNumericW (WCHAR);


 BOOL __attribute__((__stdcall__)) IsCharLowerA (CHAR);
 BOOL __attribute__((__stdcall__)) IsCharLowerW (WCHAR);


 BOOL __attribute__((__stdcall__)) IsCharUpperA (CHAR);
 BOOL __attribute__((__stdcall__)) IsCharUpperW (WCHAR);

 BOOL __attribute__((__stdcall__)) IsChild (HWND, HWND);
 BOOL __attribute__((__stdcall__)) IsClipboardFormatAvailable (UINT);
 UINT __attribute__((__stdcall__)) IsDlgButtonChecked (HWND, int);


 BOOL __attribute__((__stdcall__)) IsDialogMessageA (HWND, LPMSG);
 BOOL __attribute__((__stdcall__)) IsDialogMessageW (HWND, LPMSG);

 BOOL __attribute__((__stdcall__)) IsIconic (HWND);
 BOOL __attribute__((__stdcall__)) IsMenu (HMENU);
 BOOL __attribute__((__stdcall__)) IsRectEmpty (LPCRECT);
 BOOL __attribute__((__stdcall__)) IsWindow (HWND);
 BOOL __attribute__((__stdcall__)) IsWindowEnabled (HWND);
 BOOL __attribute__((__stdcall__)) IsWindowUnicode (HWND);
 BOOL __attribute__((__stdcall__)) IsWindowVisible (HWND);

 BOOL __attribute__((__stdcall__)) IsZoomed (HWND);
 void __attribute__((__stdcall__)) keybd_event (BYTE, BYTE, DWORD, DWORD);
 BOOL __attribute__((__stdcall__)) KillTimer (HWND, UINT_PTR);


 HACCEL __attribute__((__stdcall__)) LoadAcceleratorsA (HINSTANCE, LPCSTR);
 HACCEL __attribute__((__stdcall__)) LoadAcceleratorsW (HINSTANCE, LPCWSTR);


 HBITMAP __attribute__((__stdcall__)) LoadBitmapA (HINSTANCE, LPCSTR);
 HBITMAP __attribute__((__stdcall__)) LoadBitmapW (HINSTANCE, LPCWSTR);


 HCURSOR __attribute__((__stdcall__)) LoadCursorA (HINSTANCE, LPCSTR);
 HCURSOR __attribute__((__stdcall__)) LoadCursorW (HINSTANCE, LPCWSTR);


 HCURSOR __attribute__((__stdcall__)) LoadCursorFromFileA (LPCSTR);
 HCURSOR __attribute__((__stdcall__)) LoadCursorFromFileW (LPCWSTR);


 HICON __attribute__((__stdcall__)) LoadIconA (HINSTANCE, LPCSTR);
 HICON __attribute__((__stdcall__)) LoadIconW (HINSTANCE, LPCWSTR);


 HANDLE __attribute__((__stdcall__)) LoadImageA (HINSTANCE, LPCSTR, UINT, int, int, UINT);
 HANDLE __attribute__((__stdcall__)) LoadImageW (HINSTANCE, LPCWSTR, UINT, int, int, UINT);


 HKL __attribute__((__stdcall__)) LoadKeyboardLayoutA (LPCSTR, UINT);
 HKL __attribute__((__stdcall__)) LoadKeyboardLayoutW (LPCWSTR, UINT);


 HMENU __attribute__((__stdcall__)) LoadMenuA (HINSTANCE, LPCSTR);
 HMENU __attribute__((__stdcall__)) LoadMenuW (HINSTANCE, LPCWSTR);


 HMENU __attribute__((__stdcall__)) LoadMenuIndirectA (const MENUTEMPLATE *);
 HMENU __attribute__((__stdcall__)) LoadMenuIndirectW (const MENUTEMPLATE *);


 int __attribute__((__stdcall__)) LoadStringA (HINSTANCE, UINT, LPSTR, int);
 int __attribute__((__stdcall__)) LoadStringW (HINSTANCE, UINT, LPWSTR, int);

 BOOL __attribute__((__stdcall__)) LockWindowUpdate (HWND);

 int __attribute__((__stdcall__)) LookupIconIdFromDirectory (PBYTE, BOOL);
 int __attribute__((__stdcall__)) LookupIconIdFromDirectoryEx (PBYTE, BOOL, int, int, UINT);
 BOOL __attribute__((__stdcall__)) MapDialogRect (HWND, LPRECT);


 UINT __attribute__((__stdcall__)) MapVirtualKeyA (UINT, UINT);
 UINT __attribute__((__stdcall__)) MapVirtualKeyW (UINT, UINT);


 UINT __attribute__((__stdcall__)) MapVirtualKeyExA (UINT, UINT, HKL);
 UINT __attribute__((__stdcall__)) MapVirtualKeyExW (UINT, UINT, HKL);

 int __attribute__((__stdcall__)) MapWindowPoints (HWND, HWND, LPPOINT, UINT);
 int __attribute__((__stdcall__)) MenuItemFromPoint (HWND, HMENU, POINT);
 BOOL __attribute__((__stdcall__)) MessageBeep (UINT);


 int __attribute__((__stdcall__)) MessageBoxA (HWND, LPCSTR, LPCSTR, UINT);
 int __attribute__((__stdcall__)) MessageBoxW (HWND, LPCWSTR, LPCWSTR, UINT);


 int __attribute__((__stdcall__)) MessageBoxExA (HWND, LPCSTR, LPCSTR, UINT, WORD);
 int __attribute__((__stdcall__)) MessageBoxExW (HWND, LPCWSTR, LPCWSTR, UINT, WORD);


 int __attribute__((__stdcall__)) MessageBoxIndirectA (const MSGBOXPARAMSA *);
 int __attribute__((__stdcall__)) MessageBoxIndirectW (const MSGBOXPARAMSW *);


 BOOL __attribute__((__stdcall__)) ModifyMenuA (HMENU, UINT, UINT, UINT, LPCSTR);
 BOOL __attribute__((__stdcall__)) ModifyMenuW (HMENU, UINT, UINT, UINT, LPCWSTR);

 void __attribute__((__stdcall__)) mouse_event (DWORD, DWORD, DWORD, DWORD, ULONG_PTR);
 BOOL __attribute__((__stdcall__)) MoveWindow (HWND, int, int, int, int, BOOL);
 DWORD __attribute__((__stdcall__)) MsgWaitForMultipleObjects (DWORD, const HANDLE *, BOOL, DWORD, DWORD);
 DWORD __attribute__((__stdcall__)) MsgWaitForMultipleObjectsEx (DWORD, const HANDLE *, DWORD, DWORD, DWORD);

 DWORD __attribute__((__stdcall__)) OemKeyScan (WORD);


 BOOL __attribute__((__stdcall__)) OemToCharA (LPCSTR, LPSTR);
 BOOL __attribute__((__stdcall__)) OemToCharW (LPCSTR, LPWSTR);


 BOOL __attribute__((__stdcall__)) OemToCharBuffA (LPCSTR, LPSTR, DWORD);
 BOOL __attribute__((__stdcall__)) OemToCharBuffW (LPCSTR, LPWSTR, DWORD);

 BOOL __attribute__((__stdcall__)) OffsetRect (LPRECT, int, int);
 BOOL __attribute__((__stdcall__)) OpenClipboard (HWND);


 HDESK __attribute__((__stdcall__)) OpenDesktopA (LPSTR, DWORD, BOOL, DWORD);
 HDESK __attribute__((__stdcall__)) OpenDesktopW (LPWSTR, DWORD, BOOL, DWORD);

 BOOL __attribute__((__stdcall__)) OpenIcon (HWND);
 HDESK __attribute__((__stdcall__)) OpenInputDesktop (DWORD, BOOL, DWORD);


 HWINSTA __attribute__((__stdcall__)) OpenWindowStationA (LPSTR, BOOL, DWORD);
 HWINSTA __attribute__((__stdcall__)) OpenWindowStationW (LPWSTR, BOOL, DWORD);

 BOOL __attribute__((__stdcall__)) PaintDesktop (HDC);


 BOOL __attribute__((__stdcall__)) PeekMessageA (LPMSG, HWND, UINT, UINT, UINT);
 BOOL __attribute__((__stdcall__)) PeekMessageW (LPMSG, HWND, UINT, UINT, UINT);






 BOOL __attribute__((__stdcall__)) PostMessageA (HWND, UINT, WPARAM, LPARAM);
 BOOL __attribute__((__stdcall__)) PostMessageW (HWND, UINT, WPARAM, LPARAM);


 BOOL __attribute__((__stdcall__)) PostThreadMessageA (DWORD, UINT, WPARAM, LPARAM);
 BOOL __attribute__((__stdcall__)) PostThreadMessageW (DWORD, UINT, WPARAM, LPARAM);

 void __attribute__((__stdcall__)) PostQuitMessage (int);

 BOOL __attribute__((__stdcall__)) PtInRect (LPCRECT, POINT);
 BOOL __attribute__((__stdcall__)) RedrawWindow (HWND, LPCRECT, HRGN, UINT);
 HWND __attribute__((__stdcall__)) RealChildWindowFromPoint (HWND, POINT);


 UINT __attribute__((__stdcall__)) RealGetWindowClassA (HWND, LPSTR, UINT);
 UINT __attribute__((__stdcall__)) RealGetWindowClassW (HWND, LPWSTR, UINT);


 ATOM __attribute__((__stdcall__)) RegisterClassA (const WNDCLASSA *);
 ATOM __attribute__((__stdcall__)) RegisterClassW (const WNDCLASSW *);


 ATOM __attribute__((__stdcall__)) RegisterClassExA (const WNDCLASSEXA *);
 ATOM __attribute__((__stdcall__)) RegisterClassExW (const WNDCLASSEXW *);


 UINT __attribute__((__stdcall__)) RegisterClipboardFormatA (LPCSTR);
 UINT __attribute__((__stdcall__)) RegisterClipboardFormatW (LPCWSTR);

 BOOL __attribute__((__stdcall__)) RegisterHotKey (HWND, int, UINT, UINT);


 UINT __attribute__((__stdcall__)) RegisterWindowMessageA (LPCSTR);
 UINT __attribute__((__stdcall__)) RegisterWindowMessageW (LPCWSTR);

 BOOL __attribute__((__stdcall__)) ReleaseCapture (void);
 int __attribute__((__stdcall__)) ReleaseDC (HWND, HDC);
 BOOL __attribute__((__stdcall__)) RemoveMenu (HMENU, UINT, UINT);


 HANDLE __attribute__((__stdcall__)) RemovePropA (HWND, LPCSTR);
 HANDLE __attribute__((__stdcall__)) RemovePropW (HWND, LPCWSTR);

 BOOL __attribute__((__stdcall__)) ReplyMessage (LRESULT);
 BOOL __attribute__((__stdcall__)) ScreenToClient (HWND, LPPOINT);
 BOOL __attribute__((__stdcall__)) ScrollDC (HDC, int, int, LPCRECT, LPCRECT, HRGN, LPRECT);
 BOOL __attribute__((__stdcall__)) ScrollWindow (HWND, int, int, LPCRECT, LPCRECT);
 int __attribute__((__stdcall__)) ScrollWindowEx (HWND, int, int, LPCRECT, LPCRECT, HRGN, LPRECT, UINT);


 LONG __attribute__((__stdcall__)) SendDlgItemMessageA (HWND, int, UINT, WPARAM, LPARAM);
 LONG __attribute__((__stdcall__)) SendDlgItemMessageW (HWND, int, UINT, WPARAM, LPARAM);


 LRESULT __attribute__((__stdcall__)) SendMessageA (HWND, UINT, WPARAM, LPARAM);
 LRESULT __attribute__((__stdcall__)) SendMessageW (HWND, UINT, WPARAM, LPARAM);


 BOOL __attribute__((__stdcall__)) SendMessageCallbackA (HWND, UINT, WPARAM, LPARAM, SENDASYNCPROC, DWORD);
 BOOL __attribute__((__stdcall__)) SendMessageCallbackW (HWND, UINT, WPARAM, LPARAM, SENDASYNCPROC, DWORD);


 LRESULT __attribute__((__stdcall__)) SendMessageTimeoutA (HWND, UINT, WPARAM, LPARAM, UINT, UINT, PDWORD_PTR);
 LRESULT __attribute__((__stdcall__)) SendMessageTimeoutW (HWND, UINT, WPARAM, LPARAM, UINT, UINT, PDWORD_PTR);


 BOOL __attribute__((__stdcall__)) SendNotifyMessageA (HWND, UINT, WPARAM, LPARAM);
 BOOL __attribute__((__stdcall__)) SendNotifyMessageW (HWND, UINT, WPARAM, LPARAM);

 HWND __attribute__((__stdcall__)) SetActiveWindow (HWND);
 HWND __attribute__((__stdcall__)) SetCapture (HWND hWnd);
 BOOL __attribute__((__stdcall__)) SetCaretBlinkTime (UINT);
 BOOL __attribute__((__stdcall__)) SetCaretPos (int, int);


 DWORD __attribute__((__stdcall__)) SetClassLongA (HWND, int, LONG);
 DWORD __attribute__((__stdcall__)) SetClassLongW (HWND, int, LONG);
# 4191 "c:\\mingw\\include\\winuser.h" 3
 WORD __attribute__((__stdcall__)) SetClassWord (HWND, int, WORD);
 HANDLE __attribute__((__stdcall__)) SetClipboardData (UINT, HANDLE);
 HWND __attribute__((__stdcall__)) SetClipboardViewer (HWND);
 HCURSOR __attribute__((__stdcall__)) SetCursor (HCURSOR);
 BOOL __attribute__((__stdcall__)) SetCursorPos (int, int);
 void __attribute__((__stdcall__)) SetDebugErrorLevel (DWORD);
 BOOL __attribute__((__stdcall__)) SetDlgItemInt (HWND, int, UINT, BOOL);


 BOOL __attribute__((__stdcall__)) SetDlgItemTextA (HWND, int, LPCSTR);
 BOOL __attribute__((__stdcall__)) SetDlgItemTextW (HWND, int, LPCWSTR);

 BOOL __attribute__((__stdcall__)) SetDoubleClickTime (UINT);
 HWND __attribute__((__stdcall__)) SetFocus (HWND);
 BOOL __attribute__((__stdcall__)) SetForegroundWindow (HWND);
 BOOL __attribute__((__stdcall__)) SetKeyboardState (PBYTE);
 BOOL __attribute__((__stdcall__)) SetMenu (HWND, HMENU);
 BOOL __attribute__((__stdcall__)) SetMenuContextHelpId (HMENU, DWORD);
 BOOL __attribute__((__stdcall__)) SetMenuDefaultItem (HMENU, UINT, UINT);
 BOOL __attribute__((__stdcall__)) SetMenuInfo (HMENU, LPCMENUINFO);
 BOOL __attribute__((__stdcall__)) SetMenuItemBitmaps (HMENU, UINT, UINT, HBITMAP, HBITMAP);


 BOOL __attribute__((__stdcall__)) SetMenuItemInfoA (HMENU, UINT, BOOL, LPCMENUITEMINFOA);
 BOOL __attribute__((__stdcall__)) SetMenuItemInfoW ( HMENU, UINT, BOOL, LPCMENUITEMINFOW);

 LPARAM __attribute__((__stdcall__)) SetMessageExtraInfo (LPARAM);
 BOOL __attribute__((__stdcall__)) SetMessageQueue (int);
 HWND __attribute__((__stdcall__)) SetParent (HWND, HWND);
 BOOL __attribute__((__stdcall__)) SetProcessWindowStation (HWINSTA);


 BOOL __attribute__((__stdcall__)) SetPropA (HWND, LPCSTR, HANDLE);
 BOOL __attribute__((__stdcall__)) SetPropW (HWND, LPCWSTR, HANDLE);

 BOOL __attribute__((__stdcall__)) SetRect (LPRECT, int, int, int, int);
 BOOL __attribute__((__stdcall__)) SetRectEmpty (LPRECT);
 int __attribute__((__stdcall__)) SetScrollInfo (HWND, int, LPCSCROLLINFO, BOOL);
 int __attribute__((__stdcall__)) SetScrollPos (HWND, int, int, BOOL);
 BOOL __attribute__((__stdcall__)) SetScrollRange (HWND, int, int, int, BOOL);
 BOOL __attribute__((__stdcall__)) SetSysColors (int, const INT *, const COLORREF *);



 BOOL __attribute__((__stdcall__)) SetSystemCursor (HCURSOR, DWORD);
 BOOL __attribute__((__stdcall__)) SetThreadDesktop (HDESK);
 UINT __attribute__((__stdcall__)) SetTimer (HWND, UINT_PTR, UINT, TIMERPROC);


 BOOL __attribute__((__stdcall__)) SetUserObjectInformationA (HANDLE, int, PVOID, DWORD);
 BOOL __attribute__((__stdcall__)) SetUserObjectInformationW (HANDLE, int, PVOID, DWORD);

 BOOL __attribute__((__stdcall__)) SetUserObjectSecurity
(HANDLE, PSECURITY_INFORMATION, PSECURITY_DESCRIPTOR);

 BOOL __attribute__((__stdcall__)) SetWindowContextHelpId (HWND, DWORD);


 LONG __attribute__((__stdcall__)) SetWindowLongA (HWND, int, LONG);
 LONG __attribute__((__stdcall__)) SetWindowLongW (HWND, int, LONG);
# 4262 "c:\\mingw\\include\\winuser.h" 3
 BOOL __attribute__((__stdcall__)) SetWindowPlacement (HWND hWnd, const WINDOWPLACEMENT *);
 BOOL __attribute__((__stdcall__)) SetWindowPos (HWND, HWND, int, int, int, int, UINT);
 int __attribute__((__stdcall__)) SetWindowRgn (HWND, HRGN, BOOL);


 HHOOK __attribute__((__stdcall__)) SetWindowsHookA (int, HOOKPROC);
 HHOOK __attribute__((__stdcall__)) SetWindowsHookW (int, HOOKPROC);


 HHOOK __attribute__((__stdcall__)) SetWindowsHookExA (int, HOOKPROC, HINSTANCE, DWORD);
 HHOOK __attribute__((__stdcall__)) SetWindowsHookExW (int, HOOKPROC, HINSTANCE, DWORD);


 BOOL __attribute__((__stdcall__)) SetWindowTextA (HWND, LPCSTR);
 BOOL __attribute__((__stdcall__)) SetWindowTextW (HWND, LPCWSTR);

 WORD __attribute__((__stdcall__)) SetWindowWord (HWND, int, WORD);
 BOOL __attribute__((__stdcall__)) ShowCaret (HWND);
 int __attribute__((__stdcall__)) ShowCursor (BOOL);
 BOOL __attribute__((__stdcall__)) ShowOwnedPopups (HWND, BOOL);
 BOOL __attribute__((__stdcall__)) ShowScrollBar (HWND, int, BOOL);
 BOOL __attribute__((__stdcall__)) ShowWindow (HWND, int);
 BOOL __attribute__((__stdcall__)) ShowWindowAsync (HWND, int);
 BOOL __attribute__((__stdcall__)) SubtractRect (LPRECT, LPCRECT, LPCRECT);
 BOOL __attribute__((__stdcall__)) SwapMouseButton (BOOL);
 BOOL __attribute__((__stdcall__)) SwitchDesktop (HDESK);


 BOOL __attribute__((__stdcall__)) SystemParametersInfoA (UINT, UINT, PVOID, UINT);
 BOOL __attribute__((__stdcall__)) SystemParametersInfoW (UINT, UINT, PVOID, UINT);


 LONG __attribute__((__stdcall__)) TabbedTextOutA (HDC, int, int, LPCSTR, int, int, LPINT, int);
 LONG __attribute__((__stdcall__)) TabbedTextOutW (HDC, int, int, LPCWSTR, int, int, LPINT, int);

 WORD __attribute__((__stdcall__)) TileWindows (HWND, UINT, LPCRECT, UINT, const HWND *);
 int __attribute__((__stdcall__)) ToAscii (UINT, UINT, PBYTE, LPWORD, UINT);
 int __attribute__((__stdcall__)) ToAsciiEx (UINT, UINT, PBYTE, LPWORD, UINT, HKL);
 int __attribute__((__stdcall__)) ToUnicode (UINT, UINT, PBYTE, LPWSTR, int, UINT);
 int __attribute__((__stdcall__)) ToUnicodeEx (UINT, UINT, PBYTE, LPWSTR, int, UINT, HKL);
 BOOL __attribute__((__stdcall__)) TrackMouseEvent (LPTRACKMOUSEEVENT);
 BOOL __attribute__((__stdcall__)) TrackPopupMenu (HMENU, UINT, int, int, int, HWND, LPCRECT);
 BOOL __attribute__((__stdcall__)) TrackPopupMenuEx (HMENU, UINT, int, int, HWND, LPTPMPARAMS);


 int __attribute__((__stdcall__)) TranslateAcceleratorA (HWND, HACCEL, LPMSG);
 int __attribute__((__stdcall__)) TranslateAcceleratorW (HWND, HACCEL, LPMSG);

 BOOL __attribute__((__stdcall__)) TranslateMDISysAccel (HWND, LPMSG);
 BOOL __attribute__((__stdcall__)) TranslateMessage (const MSG *);
 BOOL __attribute__((__stdcall__)) UnhookWindowsHook (int, HOOKPROC);
 BOOL __attribute__((__stdcall__)) UnhookWindowsHookEx (HHOOK);

 BOOL __attribute__((__stdcall__)) UnionRect (LPRECT, LPCRECT, LPCRECT);
 BOOL __attribute__((__stdcall__)) UnloadKeyboardLayout (HKL);


 BOOL __attribute__((__stdcall__)) UnregisterClassA (LPCSTR, HINSTANCE);
 BOOL __attribute__((__stdcall__)) UnregisterClassW (LPCWSTR, HINSTANCE);

 BOOL __attribute__((__stdcall__)) UnregisterHotKey (HWND, int);
 BOOL __attribute__((__stdcall__)) UpdateWindow (HWND);

 BOOL __attribute__((__stdcall__)) ValidateRect (HWND, LPCRECT);
 BOOL __attribute__((__stdcall__)) ValidateRgn (HWND, HRGN);


 SHORT __attribute__((__stdcall__)) VkKeyScanA (CHAR);
 SHORT __attribute__((__stdcall__)) VkKeyScanW (WCHAR);


 SHORT __attribute__((__stdcall__)) VkKeyScanExA (CHAR, HKL);
 SHORT __attribute__((__stdcall__)) VkKeyScanExW (WCHAR, HKL);

 DWORD __attribute__((__stdcall__)) WaitForInputIdle (HANDLE, DWORD);
 BOOL __attribute__((__stdcall__)) WaitMessage (void);
 HWND __attribute__((__stdcall__)) WindowFromDC (HDC hDC);
 HWND __attribute__((__stdcall__)) WindowFromPoint (POINT);
 UINT __attribute__((__stdcall__)) WinExec (LPCSTR, UINT);


 BOOL __attribute__((__stdcall__)) WinHelpA (HWND, LPCSTR, UINT, DWORD);
 BOOL __attribute__((__stdcall__)) WinHelpW (HWND, LPCWSTR, UINT, DWORD);


 int __attribute__((__cdecl__)) wsprintfA (LPSTR, LPCSTR,...);
 int __attribute__((__cdecl__)) wsprintfW (LPWSTR, LPCWSTR,...);


 int __attribute__((__stdcall__)) wvsprintfA (LPSTR, LPCSTR, va_list arglist);
 int __attribute__((__stdcall__)) wvsprintfW (LPWSTR, LPCWSTR, va_list arglist);



 long __attribute__((__stdcall__)) BroadcastSystemMessageA (DWORD, LPDWORD, UINT, WPARAM, LPARAM);
 long __attribute__((__stdcall__)) BroadcastSystemMessageW (DWORD, LPDWORD, UINT, WPARAM, LPARAM);


typedef struct tagMOUSEINPUT
{ LONG dx;
  LONG dy;
  DWORD mouseData;
  DWORD dwFlags;
  DWORD time;
  ULONG_PTR dwExtraInfo;
} MOUSEINPUT, *PMOUSEINPUT;

typedef struct tagKEYBDINPUT
{ WORD wVk;
  WORD wScan;
  DWORD dwFlags;
  DWORD time;
  ULONG_PTR dwExtraInfo;
} KEYBDINPUT, *PKEYBDINPUT;

typedef struct tagHARDWAREINPUT
{ DWORD uMsg;
  WORD wParamL;
  WORD wParamH;
} HARDWAREINPUT, *PHARDWAREINPUT;

typedef struct tagINPUT
{ DWORD type;
  __extension__ union
  { MOUSEINPUT mi;
    KEYBDINPUT ki;
    HARDWAREINPUT hi;
  } ;
} INPUT, *PINPUT, *LPINPUT;

 UINT __attribute__((__stdcall__)) SendInput (UINT, LPINPUT, int);





typedef struct
{ UINT cbSize;
  HWND hwnd;
  DWORD dwFlags;
  UINT uCount;
  DWORD dwTimeout;
} FLASHWINFO, *PFLASHWINFO;



typedef struct tagTITLEBARINFO
{ DWORD cbSize;
  RECT rcTitleBar;
  DWORD rgstate[5 +1];
} TITLEBARINFO, *PTITLEBARINFO, *LPTITLEBARINFO;

 BOOL __attribute__((__stdcall__)) GetTitleBarInfo (HWND, PTITLEBARINFO);

 BOOL __attribute__((__stdcall__)) BlockInput(BOOL);
 BOOL __attribute__((__stdcall__)) FlashWindowEx (PFLASHWINFO);
 DWORD __attribute__((__stdcall__)) GetClipboardSequenceNumber (void);
 DWORD __attribute__((__stdcall__)) InSendMessageEx (LPVOID);

 HMONITOR __attribute__((__stdcall__)) MonitorFromPoint (POINT, DWORD);
 HMONITOR __attribute__((__stdcall__)) MonitorFromRect (LPCRECT, DWORD);
 HMONITOR __attribute__((__stdcall__)) MonitorFromWindow (HWND, DWORD);

 BOOL __attribute__((__stdcall__)) UnregisterDeviceNotification (HANDLE);


typedef struct tagMOUSEMOVEPOINT
{ int x;
  int y;
  DWORD time;
  ULONG_PTR dwExtraInfo;
} MOUSEMOVEPOINT, *PMOUSEMOVEPOINT, *LPMOUSEMOVEPOINT;

 BOOL __attribute__((__stdcall__)) AllowSetForegroundWindow (DWORD);
 int __attribute__((__stdcall__)) GetMouseMovePointsEx (UINT, LPMOUSEMOVEPOINT, LPMOUSEMOVEPOINT, int, DWORD);
 BOOL __attribute__((__stdcall__)) LockSetForegroundWindow (UINT);


typedef struct tagGUITHREADINFO
{ DWORD cbSize;
  DWORD flags;
  HWND hwndActive;
  HWND hwndFocus;
  HWND hwndCapture;
  HWND hwndMenuOwner;
  HWND hwndMoveSize;
  HWND hwndCaret;
  RECT rcCaret;
} GUITHREADINFO, *PGUITHREADINFO, *LPGUITHREADINFO;

typedef void (__attribute__((__stdcall__)) *WINEVENTPROC) (HWINEVENTHOOK, DWORD, HWND, LONG, LONG, DWORD, DWORD);

 BOOL __attribute__((__stdcall__)) AnimateWindow (HWND, DWORD, DWORD);

 BOOL __attribute__((__stdcall__)) EndTask (HWND, BOOL, BOOL);

 DWORD __attribute__((__stdcall__)) GetGuiResources (HANDLE, DWORD);
 BOOL __attribute__((__stdcall__)) GetGUIThreadInfo (DWORD, LPGUITHREADINFO);
 BOOL __attribute__((__stdcall__)) GetProcessDefaultLayout (DWORD *);
 HWND __attribute__((__stdcall__)) GetShellWindow (void);

 BOOL __attribute__((__stdcall__)) IsHungAppWindow (HWND);
 BOOL __attribute__((__stdcall__)) LockWorkStation (void);
 void __attribute__((__stdcall__)) NotifyWinEvent (DWORD, HWND, LONG, LONG);


 HDEVNOTIFY __attribute__((__stdcall__)) RegisterDeviceNotificationA (HANDLE, LPVOID, DWORD);
 HDEVNOTIFY __attribute__((__stdcall__)) RegisterDeviceNotificationW (HANDLE, LPVOID, DWORD);

 BOOL __attribute__((__stdcall__)) SetLayeredWindowAttributes (HWND, COLORREF, BYTE, DWORD);
 BOOL __attribute__((__stdcall__)) SetProcessDefaultLayout (DWORD);
 HWINEVENTHOOK __attribute__((__stdcall__)) SetWinEventHook
(UINT, UINT, HMODULE, WINEVENTPROC, DWORD, DWORD, UINT);
 void __attribute__((__stdcall__)) SwitchToThisWindow (HWND, BOOL);

 BOOL __attribute__((__stdcall__)) UnhookWinEvent (HWINEVENTHOOK);
 BOOL __attribute__((__stdcall__)) UserHandleGrantAccess (HANDLE, HANDLE, BOOL);
# 4660 "c:\\mingw\\include\\winuser.h" 3
typedef struct tagICONMETRICSA
{ UINT cbSize;
  int iHorzSpacing;
  int iVertSpacing;
  int iTitleWrap;
  LOGFONTA lfFont;
} ICONMETRICSA, *LPICONMETRICSA;

typedef struct tagICONMETRICSW
{ UINT cbSize;
  int iHorzSpacing;
  int iVertSpacing;
  int iTitleWrap;
  LOGFONTW lfFont;
} ICONMETRICSW, *LPICONMETRICSW;

typedef ICONMETRICSA ICONMETRICS, *LPICONMETRICS;

typedef struct tagNONCLIENTMETRICSA
{ UINT cbSize;
  int iBorderWidth;
  int iScrollWidth;
  int iScrollHeight;
  int iCaptionWidth;
  int iCaptionHeight;
  LOGFONTA lfCaptionFont;
  int iSmCaptionWidth;
  int iSmCaptionHeight;
  LOGFONTA lfSmCaptionFont;
  int iMenuWidth;
  int iMenuHeight;
  LOGFONTA lfMenuFont;
  LOGFONTA lfStatusFont;
  LOGFONTA lfMessageFont;
} NONCLIENTMETRICSA, *LPNONCLIENTMETRICSA;

typedef struct tagNONCLIENTMETRICSW
{ UINT cbSize;
  int iBorderWidth;
  int iScrollWidth;
  int iScrollHeight;
  int iCaptionWidth;
  int iCaptionHeight;
  LOGFONTW lfCaptionFont;
  int iSmCaptionWidth;
  int iSmCaptionHeight;
  LOGFONTW lfSmCaptionFont;
  int iMenuWidth;
  int iMenuHeight;
  LOGFONTW lfMenuFont;
  LOGFONTW lfStatusFont;
  LOGFONTW lfMessageFont;
} NONCLIENTMETRICSW, *LPNONCLIENTMETRICSW;

typedef NONCLIENTMETRICSA NONCLIENTMETRICS, *LPNONCLIENTMETRICS;


 LONG __attribute__((__stdcall__)) ChangeDisplaySettingsA (PDEVMODEA, DWORD);
 LONG __attribute__((__stdcall__)) ChangeDisplaySettingsW (PDEVMODEW, DWORD);


 LONG __attribute__((__stdcall__)) ChangeDisplaySettingsExA (LPCSTR, LPDEVMODEA, HWND, DWORD, LPVOID);
 LONG __attribute__((__stdcall__)) ChangeDisplaySettingsExW (LPCWSTR, LPDEVMODEW, HWND, DWORD, LPVOID);


 HDESK __attribute__((__stdcall__)) CreateDesktopA
(LPCSTR, LPCSTR, LPDEVMODEA, DWORD, ACCESS_MASK, LPSECURITY_ATTRIBUTES);
 HDESK __attribute__((__stdcall__)) CreateDesktopW
(LPCWSTR, LPCWSTR, LPDEVMODEW, DWORD, ACCESS_MASK, LPSECURITY_ATTRIBUTES);


 BOOL __attribute__((__stdcall__)) EnumDisplayDevicesA (LPCSTR, DWORD, PDISPLAY_DEVICEA, DWORD);
 BOOL __attribute__((__stdcall__)) EnumDisplayDevicesW (LPCWSTR, DWORD, PDISPLAY_DEVICEW, DWORD);


 BOOL __attribute__((__stdcall__)) EnumDisplaySettingsA (LPCSTR, DWORD, PDEVMODEA);
 BOOL __attribute__((__stdcall__)) EnumDisplaySettingsW (LPCWSTR, DWORD, PDEVMODEW);


 BOOL __attribute__((__stdcall__)) EnumDisplaySettingsExA (LPCSTR, DWORD, LPDEVMODEA, DWORD);
 BOOL __attribute__((__stdcall__)) EnumDisplaySettingsExW (LPCWSTR, DWORD, LPDEVMODEW, DWORD);



 BOOL __attribute__((__stdcall__)) UpdateLayeredWindow
(HWND, HDC, POINT *, SIZE *, HDC, POINT *, COLORREF, BLENDFUNCTION *, DWORD);







}
# 49 "c:\\mingw\\include\\windows.h" 2 3
# 1 "c:\\mingw\\include\\winnls.h" 1 3



       
# 5 "c:\\mingw\\include\\winnls.h" 3
# 16 "c:\\mingw\\include\\winnls.h" 3
extern "C" {
# 457 "c:\\mingw\\include\\winnls.h" 3
typedef DWORD LCTYPE;
typedef DWORD CALTYPE;
typedef DWORD CALID;
typedef DWORD LGRPID;
typedef DWORD GEOID;
typedef DWORD GEOTYPE;
typedef DWORD GEOCLASS;
typedef BOOL (__attribute__((__stdcall__)) *CALINFO_ENUMPROCA)(LPSTR);
typedef BOOL (__attribute__((__stdcall__)) *CALINFO_ENUMPROCW)(LPWSTR);
typedef BOOL (__attribute__((__stdcall__)) *CALINFO_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (__attribute__((__stdcall__)) *CALINFO_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__attribute__((__stdcall__)) *LANGUAGEGROUP_ENUMPROCA)(LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR);
typedef BOOL (__attribute__((__stdcall__)) *LANGUAGEGROUP_ENUMPROCW)(LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR);
typedef BOOL (__attribute__((__stdcall__)) *LANGGROUPLOCALE_ENUMPROCA)(LGRPID, LCID, LPSTR, LONG_PTR);
typedef BOOL (__attribute__((__stdcall__)) *LANGGROUPLOCALE_ENUMPROCW)(LGRPID, LCID, LPWSTR, LONG_PTR);
typedef BOOL (__attribute__((__stdcall__)) *UILANGUAGE_ENUMPROCW)(LPWSTR, LONG_PTR);
typedef BOOL (__attribute__((__stdcall__)) *UILANGUAGE_ENUMPROCA)(LPSTR, LONG_PTR);
typedef BOOL (__attribute__((__stdcall__)) *LOCALE_ENUMPROCA)(LPSTR);
typedef BOOL (__attribute__((__stdcall__)) *LOCALE_ENUMPROCW)(LPWSTR);
typedef BOOL (__attribute__((__stdcall__)) *CODEPAGE_ENUMPROCA)(LPSTR);
typedef BOOL (__attribute__((__stdcall__)) *CODEPAGE_ENUMPROCW)(LPWSTR);
typedef BOOL (__attribute__((__stdcall__)) *DATEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__attribute__((__stdcall__)) *DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__attribute__((__stdcall__)) *DATEFMT_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (__attribute__((__stdcall__)) *DATEFMT_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__attribute__((__stdcall__)) *TIMEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__attribute__((__stdcall__)) *TIMEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__attribute__((__stdcall__)) *GEO_ENUMPROC)(GEOID);

enum NLS_FUNCTION {
 COMPARE_STRING = 0x0001
};
typedef enum NLS_FUNCTION NLS_FUNCTION;
enum SYSGEOCLASS {
 GEOCLASS_NATION = 16,
 GEOCLASS_REGION = 14
};
enum SYSGEOTYPE {
 GEO_NATION = 0x0001,
 GEO_LATITUDE = 0x0002,
 GEO_LONGITUDE = 0x0003,
 GEO_ISO2 = 0x0004,
 GEO_ISO3 = 0x0005,
 GEO_RFC1766 = 0x0006,
 GEO_LCID = 0x0007,
 GEO_FRIENDLYNAME = 0x0008,
 GEO_OFFICIALNAME = 0x0009,
 GEO_TIMEZONES = 0x000a,
 GEO_OFFICIALLANGUAGES = 0x000a
};

typedef struct _cpinfo {
 UINT MaxCharSize;
 BYTE DefaultChar[2];
 BYTE LeadByte[12];
} CPINFO,*LPCPINFO;
typedef struct _cpinfoexA {
 UINT MaxCharSize;
 BYTE DefaultChar[2];
 BYTE LeadByte[12];
 WCHAR UnicodeDefaultChar;
 UINT CodePage;
 CHAR CodePageName[260];
} CPINFOEXA,*LPCPINFOEXA;
typedef struct _cpinfoexW {
 UINT MaxCharSize;
 BYTE DefaultChar[2];
 BYTE LeadByte[12];
 WCHAR UnicodeDefaultChar;
 UINT CodePage;
 WCHAR CodePageName[260];
} CPINFOEXW,*LPCPINFOEXW;
typedef struct _currencyfmtA {
 UINT NumDigits;
 UINT LeadingZero;
 UINT Grouping;
 LPSTR lpDecimalSep;
 LPSTR lpThousandSep;
 UINT NegativeOrder;
 UINT PositiveOrder;
 LPSTR lpCurrencySymbol;
} CURRENCYFMTA,*LPCURRENCYFMTA;
typedef struct _currencyfmtW {
 UINT NumDigits;
 UINT LeadingZero;
 UINT Grouping;
 LPWSTR lpDecimalSep;
 LPWSTR lpThousandSep;
 UINT NegativeOrder;
 UINT PositiveOrder;
 LPWSTR lpCurrencySymbol;
} CURRENCYFMTW,*LPCURRENCYFMTW;
typedef struct nlsversioninfo {
 DWORD dwNLSVersionInfoSize;
 DWORD dwNLSVersion;
 DWORD dwDefinedVersion;
} NLSVERSIONINFO,*LPNLSVERSIONINFO;
typedef struct _numberfmtA {
 UINT NumDigits;
 UINT LeadingZero;
 UINT Grouping;
 LPSTR lpDecimalSep;
 LPSTR lpThousandSep;
 UINT NegativeOrder;
} NUMBERFMTA,*LPNUMBERFMTA;
typedef struct _numberfmtW {
 UINT NumDigits;
 UINT LeadingZero;
 UINT Grouping;
 LPWSTR lpDecimalSep;
 LPWSTR lpThousandSep;
 UINT NegativeOrder;
} NUMBERFMTW,*LPNUMBERFMTW;

 int __attribute__((__stdcall__)) CompareStringA(LCID,DWORD,LPCSTR,int,LPCSTR,int);
 int __attribute__((__stdcall__)) CompareStringW(LCID,DWORD,LPCWSTR,int,LPCWSTR,int);
 LCID __attribute__((__stdcall__)) ConvertDefaultLocale(LCID);
 BOOL __attribute__((__stdcall__)) EnumCalendarInfoA(CALINFO_ENUMPROCA,LCID,CALID,CALTYPE);
 BOOL __attribute__((__stdcall__)) EnumCalendarInfoW(CALINFO_ENUMPROCW,LCID,CALID,CALTYPE);
 BOOL __attribute__((__stdcall__)) EnumDateFormatsA(DATEFMT_ENUMPROCA,LCID,DWORD);
 BOOL __attribute__((__stdcall__)) EnumDateFormatsW(DATEFMT_ENUMPROCW,LCID,DWORD);
 BOOL __attribute__((__stdcall__)) EnumSystemCodePagesA(CODEPAGE_ENUMPROCA,DWORD);
 BOOL __attribute__((__stdcall__)) EnumSystemCodePagesW(CODEPAGE_ENUMPROCW,DWORD);
 BOOL __attribute__((__stdcall__)) EnumSystemGeoID(GEOCLASS,GEOID,GEO_ENUMPROC);
 BOOL __attribute__((__stdcall__)) EnumSystemLocalesA(LOCALE_ENUMPROCA,DWORD);
 BOOL __attribute__((__stdcall__)) EnumSystemLocalesW(LOCALE_ENUMPROCW,DWORD);
 BOOL __attribute__((__stdcall__)) EnumTimeFormatsA(TIMEFMT_ENUMPROCA,LCID,DWORD);
 BOOL __attribute__((__stdcall__)) EnumTimeFormatsW(TIMEFMT_ENUMPROCW,LCID,DWORD);
 int __attribute__((__stdcall__)) FoldStringA(DWORD,LPCSTR,int,LPSTR,int);
 int __attribute__((__stdcall__)) FoldStringW(DWORD,LPCWSTR,int,LPWSTR,int);
 UINT __attribute__((__stdcall__)) GetACP(void);
 int __attribute__((__stdcall__)) GetCalendarInfoA(LCID,CALID,CALTYPE,LPSTR,int,LPDWORD);
 int __attribute__((__stdcall__)) GetCalendarInfoW(LCID,CALID,CALTYPE,LPWSTR,int,LPDWORD);
 BOOL __attribute__((__stdcall__)) GetCPInfo(UINT,LPCPINFO);
 BOOL __attribute__((__stdcall__)) GetCPInfoExA(UINT,DWORD,LPCPINFOEXA);
 BOOL __attribute__((__stdcall__)) GetCPInfoExW(UINT,DWORD,LPCPINFOEXW);
 int __attribute__((__stdcall__)) GetCurrencyFormatA(LCID,DWORD,LPCSTR,const CURRENCYFMTA*,LPSTR,int);
 int __attribute__((__stdcall__)) GetCurrencyFormatW(LCID,DWORD,LPCWSTR,const CURRENCYFMTW*,LPWSTR,int);
 int __attribute__((__stdcall__)) GetDateFormatA(LCID,DWORD,const SYSTEMTIME*,LPCSTR,LPSTR,int);
 int __attribute__((__stdcall__)) GetDateFormatW(LCID,DWORD,const SYSTEMTIME*,LPCWSTR,LPWSTR,int);
 int __attribute__((__stdcall__)) GetGeoInfoA(GEOID,GEOTYPE,LPSTR,int,LANGID);
 int __attribute__((__stdcall__)) GetGeoInfoW(GEOID,GEOTYPE,LPWSTR,int,LANGID);
 int __attribute__((__stdcall__)) GetLocaleInfoA(LCID,LCTYPE,LPSTR,int);
 int __attribute__((__stdcall__)) GetLocaleInfoW(LCID,LCTYPE,LPWSTR,int);
 BOOL __attribute__((__stdcall__)) GetNLSVersion(NLS_FUNCTION,LCID,LPNLSVERSIONINFO);
 int __attribute__((__stdcall__)) GetNumberFormatA(LCID,DWORD,LPCSTR,const NUMBERFMTA*,LPSTR,int);
 int __attribute__((__stdcall__)) GetNumberFormatW(LCID,DWORD,LPCWSTR,const NUMBERFMTW*,LPWSTR,int);
 UINT __attribute__((__stdcall__)) GetOEMCP(void);
 BOOL __attribute__((__stdcall__)) GetStringTypeA(LCID,DWORD,LPCSTR,int,LPWORD);
 BOOL __attribute__((__stdcall__)) GetStringTypeW(DWORD,LPCWSTR,int,LPWORD);
 BOOL __attribute__((__stdcall__)) GetStringTypeExA(LCID,DWORD,LPCSTR,int,LPWORD);
 BOOL __attribute__((__stdcall__)) GetStringTypeExW(LCID,DWORD,LPCWSTR,int,LPWORD);
 LANGID __attribute__((__stdcall__)) GetSystemDefaultLangID(void);
 LCID __attribute__((__stdcall__)) GetSystemDefaultLCID(void);
 LCID __attribute__((__stdcall__)) GetThreadLocale(void);
 int __attribute__((__stdcall__)) GetTimeFormatA(LCID,DWORD,const SYSTEMTIME*,LPCSTR,LPSTR,int);
 int __attribute__((__stdcall__)) GetTimeFormatW(LCID,DWORD,const SYSTEMTIME*,LPCWSTR,LPWSTR,int);
 LANGID __attribute__((__stdcall__)) GetUserDefaultLangID(void);
 LCID __attribute__((__stdcall__)) GetUserDefaultLCID(void);
 GEOID __attribute__((__stdcall__)) GetUserGeoID(GEOCLASS);
 BOOL __attribute__((__stdcall__)) IsDBCSLeadByte(BYTE);
 BOOL __attribute__((__stdcall__)) IsDBCSLeadByteEx(UINT,BYTE);
 BOOL __attribute__((__stdcall__)) IsNLSDefinedString(NLS_FUNCTION,DWORD,LPNLSVERSIONINFO,LPCWSTR,int);
 BOOL __attribute__((__stdcall__)) IsValidCodePage(UINT);
 BOOL __attribute__((__stdcall__)) IsValidLocale(LCID,DWORD);
 int __attribute__((__stdcall__)) LCMapStringA(LCID,DWORD,LPCSTR,int,LPSTR,int);
 int __attribute__((__stdcall__)) LCMapStringW(LCID,DWORD,LPCWSTR,int,LPWSTR,int);
 int __attribute__((__stdcall__)) MultiByteToWideChar(UINT,DWORD,LPCSTR,int,LPWSTR,int);
 int __attribute__((__stdcall__)) SetCalendarInfoA(LCID,CALID,CALTYPE,LPCSTR);
 int __attribute__((__stdcall__)) SetCalendarInfoW(LCID,CALID,CALTYPE,LPCWSTR);
 BOOL __attribute__((__stdcall__)) SetLocaleInfoA(LCID,LCTYPE,LPCSTR);
 BOOL __attribute__((__stdcall__)) SetLocaleInfoW(LCID,LCTYPE,LPCWSTR);
 BOOL __attribute__((__stdcall__)) SetThreadLocale(LCID);
 BOOL __attribute__((__stdcall__)) SetUserGeoID(GEOID);
 int __attribute__((__stdcall__)) WideCharToMultiByte(UINT,DWORD,LPCWSTR,int,LPSTR,int,LPCSTR,LPBOOL);

 BOOL __attribute__((__stdcall__)) EnumCalendarInfoExA(CALINFO_ENUMPROCEXA,LCID,CALID,CALTYPE);
 BOOL __attribute__((__stdcall__)) EnumCalendarInfoExW(CALINFO_ENUMPROCEXW,LCID,CALID,CALTYPE);
 BOOL __attribute__((__stdcall__)) EnumDateFormatsExA(DATEFMT_ENUMPROCEXA,LCID,DWORD);
 BOOL __attribute__((__stdcall__)) EnumDateFormatsExW(DATEFMT_ENUMPROCEXW,LCID,DWORD);
 BOOL __attribute__((__stdcall__)) EnumSystemLanguageGroupsA(LANGUAGEGROUP_ENUMPROCA,DWORD,LONG_PTR);
 BOOL __attribute__((__stdcall__)) EnumSystemLanguageGroupsW(LANGUAGEGROUP_ENUMPROCW,DWORD,LONG_PTR);
 BOOL __attribute__((__stdcall__)) EnumLanguageGroupLocalesA(LANGGROUPLOCALE_ENUMPROCA,LGRPID,DWORD,LONG_PTR);
 BOOL __attribute__((__stdcall__)) EnumLanguageGroupLocalesW(LANGGROUPLOCALE_ENUMPROCW,LGRPID,DWORD,LONG_PTR);
 BOOL __attribute__((__stdcall__)) EnumUILanguagesA(UILANGUAGE_ENUMPROCA,DWORD,LONG_PTR);
 BOOL __attribute__((__stdcall__)) EnumUILanguagesW(UILANGUAGE_ENUMPROCW,DWORD,LONG_PTR);
 LANGID __attribute__((__stdcall__)) GetSystemDefaultUILanguage(void);
 LANGID __attribute__((__stdcall__)) GetUserDefaultUILanguage(void);
 BOOL __attribute__((__stdcall__)) IsValidLanguageGroup(LGRPID,DWORD);
# 701 "c:\\mingw\\include\\winnls.h" 3
typedef CPINFOEXA CPINFOEX;
typedef LPCPINFOEXA LPCPINFOEX;
typedef CURRENCYFMTA CURRENCYFMT;
typedef LPCURRENCYFMTA LPCURRENCYFMT;
typedef NUMBERFMTA NUMBERFMT;
typedef LPNUMBERFMTA LPNUMBERFMT;
# 735 "c:\\mingw\\include\\winnls.h" 3
}
# 50 "c:\\mingw\\include\\windows.h" 2 3
# 1 "c:\\mingw\\include\\winver.h" 1 3
# 36 "c:\\mingw\\include\\winver.h" 3
       
# 37 "c:\\mingw\\include\\winver.h" 3
# 120 "c:\\mingw\\include\\winver.h" 3
extern "C" {

typedef
struct tagVS_FIXEDFILEINFO {
  DWORD dwSignature;
  DWORD dwStrucVersion;
  DWORD dwFileVersionMS;
  DWORD dwFileVersionLS;
  DWORD dwProductVersionMS;
  DWORD dwProductVersionLS;
  DWORD dwFileFlagsMask;
  DWORD dwFileFlags;
  DWORD dwFileOS;
  DWORD dwFileType;
  DWORD dwFileSubtype;
  DWORD dwFileDateMS;
  DWORD dwFileDateLS;
} VS_FIXEDFILEINFO;
# 149 "c:\\mingw\\include\\winver.h" 3
DWORD __attribute__((__stdcall__)) VerFindFileA( DWORD, LPSTR, LPSTR, LPSTR, LPSTR, PUINT, LPSTR, PUINT );
DWORD __attribute__((__stdcall__)) VerFindFileW( DWORD, LPWSTR, LPWSTR, LPWSTR, LPWSTR, PUINT, LPWSTR, PUINT );


DWORD __attribute__((__stdcall__)) VerInstallFileA( DWORD, LPSTR, LPSTR, LPSTR, LPSTR, LPSTR, LPSTR, PUINT );
DWORD __attribute__((__stdcall__)) VerInstallFileW( DWORD, LPWSTR, LPWSTR, LPWSTR, LPWSTR, LPWSTR, LPWSTR, PUINT );


DWORD __attribute__((__stdcall__)) GetFileVersionInfoSizeA( LPCSTR, PDWORD );
DWORD __attribute__((__stdcall__)) GetFileVersionInfoSizeW( LPCWSTR, PDWORD );


BOOL __attribute__((__stdcall__)) GetFileVersionInfoA( LPCSTR, DWORD, DWORD, PVOID );
BOOL __attribute__((__stdcall__)) GetFileVersionInfoW( LPCWSTR, DWORD, DWORD, PVOID );
# 198 "c:\\mingw\\include\\winver.h" 3
DWORD __attribute__((__stdcall__)) VerLanguageNameA( DWORD, LPSTR, DWORD );
DWORD __attribute__((__stdcall__)) VerLanguageNameW( DWORD, LPWSTR, DWORD );


BOOL __attribute__((__stdcall__)) VerQueryValueA( LPCVOID, LPCSTR, LPVOID *, PUINT );
BOOL __attribute__((__stdcall__)) VerQueryValueW( LPCVOID, LPCWSTR, LPVOID *, PUINT );

}
# 51 "c:\\mingw\\include\\windows.h" 2 3
# 1 "c:\\mingw\\include\\winnetwk.h" 1 3



       
# 5 "c:\\mingw\\include\\winnetwk.h" 3



extern "C" {
# 160 "c:\\mingw\\include\\winnetwk.h" 3
typedef struct _NETRESOURCEA {
 DWORD dwScope;
 DWORD dwType;
 DWORD dwDisplayType;
 DWORD dwUsage;
 LPSTR lpLocalName;
 LPSTR lpRemoteName;
 LPSTR lpComment ;
 LPSTR lpProvider;
}NETRESOURCEA,*LPNETRESOURCEA;
typedef struct _NETRESOURCEW {
 DWORD dwScope;
 DWORD dwType;
 DWORD dwDisplayType;
 DWORD dwUsage;
 LPWSTR lpLocalName;
 LPWSTR lpRemoteName;
 LPWSTR lpComment ;
 LPWSTR lpProvider;
}NETRESOURCEW,*LPNETRESOURCEW;
typedef struct _CONNECTDLGSTRUCTA{
 DWORD cbStructure;
 HWND hwndOwner;
 LPNETRESOURCEA lpConnRes;
 DWORD dwFlags;
 DWORD dwDevNum;
} CONNECTDLGSTRUCTA,*LPCONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW{
 DWORD cbStructure;
 HWND hwndOwner;
 LPNETRESOURCEW lpConnRes;
 DWORD dwFlags;
 DWORD dwDevNum;
} CONNECTDLGSTRUCTW,*LPCONNECTDLGSTRUCTW;
typedef struct _DISCDLGSTRUCTA{
 DWORD cbStructure;
 HWND hwndOwner;
 LPSTR lpLocalName;
 LPSTR lpRemoteName;
 DWORD dwFlags;
} DISCDLGSTRUCTA,*LPDISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW{
 DWORD cbStructure;
 HWND hwndOwner;
 LPWSTR lpLocalName;
 LPWSTR lpRemoteName;
 DWORD dwFlags;
} DISCDLGSTRUCTW,*LPDISCDLGSTRUCTW;
typedef struct _UNIVERSAL_NAME_INFOA { LPSTR lpUniversalName; }UNIVERSAL_NAME_INFOA,*LPUNIVERSAL_NAME_INFOA;
typedef struct _UNIVERSAL_NAME_INFOW { LPWSTR lpUniversalName; }UNIVERSAL_NAME_INFOW,*LPUNIVERSAL_NAME_INFOW;
typedef struct _REMOTE_NAME_INFOA {
 LPSTR lpUniversalName;
 LPSTR lpConnectionName;
 LPSTR lpRemainingPath;
}REMOTE_NAME_INFOA,*LPREMOTE_NAME_INFOA;
typedef struct _REMOTE_NAME_INFOW {
 LPWSTR lpUniversalName;
 LPWSTR lpConnectionName;
 LPWSTR lpRemainingPath;
}REMOTE_NAME_INFOW,*LPREMOTE_NAME_INFOW;
typedef struct _NETINFOSTRUCT{
 DWORD cbStructure;
 DWORD dwProviderVersion;
 DWORD dwStatus;
 DWORD dwCharacteristics;
 DWORD dwHandle;
 WORD wNetType;
 DWORD dwPrinters;
 DWORD dwDrives;
} NETINFOSTRUCT,*LPNETINFOSTRUCT;
typedef UINT(__attribute__((__stdcall__)) *PFNGETPROFILEPATHA)(LPCSTR,LPSTR,UINT);
typedef UINT(__attribute__((__stdcall__)) *PFNGETPROFILEPATHW)(LPCWSTR,LPWSTR,UINT);
typedef UINT(__attribute__((__stdcall__)) *PFNRECONCILEPROFILEA)(LPCSTR,LPCSTR,DWORD);
typedef UINT(__attribute__((__stdcall__)) *PFNRECONCILEPROFILEW)(LPCWSTR,LPCWSTR,DWORD);
typedef BOOL(__attribute__((__stdcall__)) *PFNPROCESSPOLICIESA)(HWND,LPCSTR,LPCSTR,LPCSTR,DWORD);
typedef BOOL(__attribute__((__stdcall__)) *PFNPROCESSPOLICIESW)(HWND,LPCWSTR,LPCWSTR,LPCWSTR,DWORD);
typedef struct _NETCONNECTINFOSTRUCT{
 DWORD cbStructure;
 DWORD dwFlags;
 DWORD dwSpeed;
 DWORD dwDelay;
 DWORD dwOptDataSize;
} NETCONNECTINFOSTRUCT,*LPNETCONNECTINFOSTRUCT;

DWORD __attribute__((__stdcall__)) WNetAddConnectionA(LPCSTR,LPCSTR,LPCSTR);
DWORD __attribute__((__stdcall__)) WNetAddConnectionW(LPCWSTR,LPCWSTR,LPCWSTR);
DWORD __attribute__((__stdcall__)) WNetAddConnection2A(LPNETRESOURCEA,LPCSTR,LPCSTR,DWORD);
DWORD __attribute__((__stdcall__)) WNetAddConnection2W(LPNETRESOURCEW,LPCWSTR,LPCWSTR,DWORD);
DWORD __attribute__((__stdcall__)) WNetAddConnection3A(HWND,LPNETRESOURCEA,LPCSTR,LPCSTR,DWORD);
DWORD __attribute__((__stdcall__)) WNetAddConnection3W(HWND,LPNETRESOURCEW,LPCWSTR,LPCWSTR,DWORD);
DWORD __attribute__((__stdcall__)) WNetCancelConnectionA(LPCSTR,BOOL);
DWORD __attribute__((__stdcall__)) WNetCancelConnectionW(LPCWSTR,BOOL);
DWORD __attribute__((__stdcall__)) WNetCancelConnection2A(LPCSTR,DWORD,BOOL);
DWORD __attribute__((__stdcall__)) WNetCancelConnection2W(LPCWSTR,DWORD,BOOL);
DWORD __attribute__((__stdcall__)) WNetGetConnectionA(LPCSTR,LPSTR,PDWORD);
DWORD __attribute__((__stdcall__)) WNetGetConnectionW(LPCWSTR,LPWSTR,PDWORD);
DWORD __attribute__((__stdcall__)) WNetUseConnectionA(HWND,LPNETRESOURCEA,LPCSTR,LPCSTR,DWORD,LPSTR,PDWORD,PDWORD);
DWORD __attribute__((__stdcall__)) WNetUseConnectionW(HWND,LPNETRESOURCEW,LPCWSTR,LPCWSTR,DWORD,LPWSTR,PDWORD,PDWORD);
DWORD __attribute__((__stdcall__)) WNetSetConnectionA(LPCSTR,DWORD,PVOID);
DWORD __attribute__((__stdcall__)) WNetSetConnectionW(LPCWSTR,DWORD,PVOID);
DWORD __attribute__((__stdcall__)) WNetConnectionDialog(HWND,DWORD);
DWORD __attribute__((__stdcall__)) WNetDisconnectDialog(HWND,DWORD);
DWORD __attribute__((__stdcall__)) WNetConnectionDialog1A(LPCONNECTDLGSTRUCTA);
DWORD __attribute__((__stdcall__)) WNetConnectionDialog1W(LPCONNECTDLGSTRUCTW);
DWORD __attribute__((__stdcall__)) WNetDisconnectDialog1A(LPDISCDLGSTRUCTA);
DWORD __attribute__((__stdcall__)) WNetDisconnectDialog1W(LPDISCDLGSTRUCTW);
DWORD __attribute__((__stdcall__)) WNetOpenEnumA(DWORD,DWORD,DWORD,LPNETRESOURCEA,LPHANDLE);
DWORD __attribute__((__stdcall__)) WNetOpenEnumW(DWORD,DWORD,DWORD,LPNETRESOURCEW,LPHANDLE);
DWORD __attribute__((__stdcall__)) WNetEnumResourceA(HANDLE,PDWORD,PVOID,PDWORD);
DWORD __attribute__((__stdcall__)) WNetEnumResourceW(HANDLE,PDWORD,PVOID,PDWORD);
DWORD __attribute__((__stdcall__)) WNetCloseEnum(HANDLE);
DWORD __attribute__((__stdcall__)) WNetGetUniversalNameA(LPCSTR,DWORD,PVOID,PDWORD);
DWORD __attribute__((__stdcall__)) WNetGetUniversalNameW(LPCWSTR,DWORD,PVOID,PDWORD);
DWORD __attribute__((__stdcall__)) WNetGetUserA(LPCSTR,LPSTR,PDWORD);
DWORD __attribute__((__stdcall__)) WNetGetUserW(LPCWSTR,LPWSTR,PDWORD);
DWORD __attribute__((__stdcall__)) WNetGetProviderNameA(DWORD,LPSTR,PDWORD);
DWORD __attribute__((__stdcall__)) WNetGetProviderNameW(DWORD,LPWSTR,PDWORD);
DWORD __attribute__((__stdcall__)) WNetGetNetworkInformationA(LPCSTR,LPNETINFOSTRUCT);
DWORD __attribute__((__stdcall__)) WNetGetNetworkInformationW(LPCWSTR,LPNETINFOSTRUCT);
DWORD __attribute__((__stdcall__)) WNetGetResourceInformationA(LPNETRESOURCEA,LPVOID,LPDWORD,LPSTR*);
DWORD __attribute__((__stdcall__)) WNetGetResourceInformationW(LPNETRESOURCEW,LPVOID,LPDWORD,LPWSTR*);
DWORD __attribute__((__stdcall__)) WNetGetResourceParentA(LPNETRESOURCEA,LPVOID,LPDWORD);
DWORD __attribute__((__stdcall__)) WNetGetResourceParentW(LPNETRESOURCEW,LPVOID,LPDWORD);
DWORD __attribute__((__stdcall__)) WNetGetLastErrorA(PDWORD,LPSTR,DWORD,LPSTR,DWORD);
DWORD __attribute__((__stdcall__)) WNetGetLastErrorW(PDWORD,LPWSTR,DWORD,LPWSTR,DWORD);
DWORD __attribute__((__stdcall__)) MultinetGetConnectionPerformanceA(LPNETRESOURCEA,LPNETCONNECTINFOSTRUCT);
DWORD __attribute__((__stdcall__)) MultinetGetConnectionPerformanceW(LPNETRESOURCEW,LPNETCONNECTINFOSTRUCT);
# 320 "c:\\mingw\\include\\winnetwk.h" 3
typedef NETRESOURCEA NETRESOURCE,*LPNETRESOURCE;
typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT,*LPCONNECTDLGSTRUCT;
typedef DISCDLGSTRUCTA DISCDLGSTRUCT,*LPDISCDLGSTRUCT;
typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO,*LPUNIVERSAL_NAME_INFO;
typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO,*LPREMOTE_NAME_INFO;
# 348 "c:\\mingw\\include\\winnetwk.h" 3
}
# 52 "c:\\mingw\\include\\windows.h" 2 3
# 1 "c:\\mingw\\include\\winreg.h" 1 3
# 34 "c:\\mingw\\include\\winreg.h" 3
       
# 35 "c:\\mingw\\include\\winreg.h" 3



# 1 "c:\\mingw\\include\\reason.h" 1 3



       
# 5 "c:\\mingw\\include\\reason.h" 3
# 39 "c:\\mingw\\include\\winreg.h" 2 3





extern "C" {
# 107 "c:\\mingw\\include\\winreg.h" 3
typedef ACCESS_MASK REGSAM;

typedef struct value_entA
{ LPSTR ve_valuename;
  DWORD ve_valuelen;
  DWORD ve_valueptr;
  DWORD ve_type;
} VALENTA, *PVALENTA;

typedef struct value_entW
{ LPWSTR ve_valuename;
  DWORD ve_valuelen;
  DWORD ve_valueptr;
  DWORD ve_type;
} VALENTW, *PVALENTW;

typedef VALENTA VALENT, *PVALENT;


 BOOL __attribute__((__stdcall__)) AbortSystemShutdownA (LPCSTR);
 BOOL __attribute__((__stdcall__)) AbortSystemShutdownW (LPCWSTR);


 BOOL __attribute__((__stdcall__)) InitiateSystemShutdownA (LPSTR, LPSTR, DWORD, BOOL, BOOL);
 BOOL __attribute__((__stdcall__)) InitiateSystemShutdownW (LPWSTR, LPWSTR, DWORD, BOOL, BOOL);

 LONG __attribute__((__stdcall__)) RegCloseKey (HKEY);


 LONG __attribute__((__stdcall__)) RegConnectRegistryA (LPCSTR, HKEY, PHKEY);
 LONG __attribute__((__stdcall__)) RegConnectRegistryW (LPCWSTR, HKEY, PHKEY);


 LONG __attribute__((__stdcall__)) RegCreateKeyA (HKEY, LPCSTR, PHKEY);
 LONG __attribute__((__stdcall__)) RegCreateKeyW (HKEY, LPCWSTR, PHKEY);


 LONG __attribute__((__stdcall__)) RegCreateKeyExA
  ( HKEY, LPCSTR, DWORD, LPSTR, DWORD, REGSAM, LPSECURITY_ATTRIBUTES,
    PHKEY, PDWORD
  );
 LONG __attribute__((__stdcall__)) RegCreateKeyExW
  ( HKEY, LPCWSTR, DWORD, LPWSTR, DWORD, REGSAM, LPSECURITY_ATTRIBUTES,
    PHKEY, PDWORD
  );

 LONG __attribute__((__stdcall__)) RegDeleteKeyA (HKEY, LPCSTR);
 LONG __attribute__((__stdcall__)) RegDeleteKeyW (HKEY, LPCWSTR);


 LONG __attribute__((__stdcall__)) RegDeleteValueA (HKEY, LPCSTR);
 LONG __attribute__((__stdcall__)) RegDeleteValueW (HKEY, LPCWSTR);


 LONG __attribute__((__stdcall__)) RegDisablePredefinedCache (void);


 LONG __attribute__((__stdcall__)) RegEnumKeyA (HKEY, DWORD, LPSTR, DWORD);
 LONG __attribute__((__stdcall__)) RegEnumKeyW (HKEY, DWORD, LPWSTR, DWORD);


 LONG __attribute__((__stdcall__)) RegEnumKeyExA
  ( HKEY, DWORD, LPSTR, PDWORD, PDWORD, LPSTR, PDWORD, PFILETIME
  );
 LONG __attribute__((__stdcall__)) RegEnumKeyExW
  ( HKEY, DWORD, LPWSTR, PDWORD, PDWORD, LPWSTR, PDWORD, PFILETIME
  );

 LONG __attribute__((__stdcall__)) RegEnumValueA
  ( HKEY, DWORD, LPSTR, PDWORD, PDWORD, PDWORD, LPBYTE, PDWORD
  );
 LONG __attribute__((__stdcall__)) RegEnumValueW
  ( HKEY, DWORD, LPWSTR, PDWORD, PDWORD, PDWORD, LPBYTE, PDWORD
  );
 LONG __attribute__((__stdcall__)) RegFlushKey (HKEY);
 LONG __attribute__((__stdcall__)) RegGetKeySecurity
  ( HKEY, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR, PDWORD
  );

 LONG __attribute__((__stdcall__)) RegLoadKeyA (HKEY, LPCSTR, LPCSTR);
 LONG __attribute__((__stdcall__)) RegLoadKeyW (HKEY, LPCWSTR, LPCWSTR);

 LONG __attribute__((__stdcall__)) RegNotifyChangeKeyValue (HKEY, BOOL, DWORD, HANDLE, BOOL);


 LONG __attribute__((__stdcall__)) RegOpenCurrentUser (REGSAM, PHKEY);


 LONG __attribute__((__stdcall__)) RegOpenKeyA (HKEY, LPCSTR, PHKEY);
 LONG __attribute__((__stdcall__)) RegOpenKeyW (HKEY, LPCWSTR, PHKEY);


 LONG __attribute__((__stdcall__)) RegOpenKeyExA (HKEY, LPCSTR, DWORD, REGSAM, PHKEY);
 LONG __attribute__((__stdcall__)) RegOpenKeyExW (HKEY, LPCWSTR, DWORD, REGSAM, PHKEY);


 LONG __attribute__((__stdcall__)) RegOpenUserClassesRoot (HANDLE, DWORD, REGSAM, PHKEY);


 LONG __attribute__((__stdcall__)) RegOverridePredefKey (HKEY, HKEY);


 LONG __attribute__((__stdcall__)) RegQueryInfoKeyA
  ( HKEY, LPSTR, PDWORD, PDWORD, PDWORD, PDWORD, PDWORD, PDWORD, PDWORD,
    PDWORD, PDWORD, PFILETIME
  );
 LONG __attribute__((__stdcall__)) RegQueryInfoKeyW
  ( HKEY, LPWSTR, PDWORD, PDWORD, PDWORD, PDWORD, PDWORD, PDWORD, PDWORD,
    PDWORD, PDWORD, PFILETIME
  );

 LONG __attribute__((__stdcall__)) RegQueryMultipleValuesA
  ( HKEY, PVALENTA, DWORD, LPSTR, LPDWORD
  );
 LONG __attribute__((__stdcall__)) RegQueryMultipleValuesW
  ( HKEY, PVALENTW, DWORD, LPWSTR, LPDWORD
  );

 LONG __attribute__((__stdcall__)) RegQueryValueA (HKEY, LPCSTR, LPSTR, PLONG);
 LONG __attribute__((__stdcall__)) RegQueryValueW (HKEY, LPCWSTR, LPWSTR, PLONG);


 LONG __attribute__((__stdcall__)) RegQueryValueExA
  ( HKEY, LPCSTR, LPDWORD, LPDWORD, LPBYTE, LPDWORD
  );
 LONG __attribute__((__stdcall__)) RegQueryValueExW
  ( HKEY, LPCWSTR, LPDWORD, LPDWORD, LPBYTE, LPDWORD
  );

 LONG __attribute__((__stdcall__)) RegReplaceKeyA (HKEY, LPCSTR, LPCSTR, LPCSTR);
 LONG __attribute__((__stdcall__)) RegReplaceKeyW (HKEY, LPCWSTR, LPCWSTR, LPCWSTR);


 LONG __attribute__((__stdcall__)) RegRestoreKeyA (HKEY, LPCSTR, DWORD);
 LONG __attribute__((__stdcall__)) RegRestoreKeyW (HKEY, LPCWSTR, DWORD);


 LONG __attribute__((__stdcall__)) RegSaveKeyA (HKEY, LPCSTR, LPSECURITY_ATTRIBUTES);
 LONG __attribute__((__stdcall__)) RegSaveKeyW (HKEY, LPCWSTR, LPSECURITY_ATTRIBUTES);

 LONG __attribute__((__stdcall__)) RegSetKeySecurity
  ( HKEY, SECURITY_INFORMATION, PSECURITY_DESCRIPTOR
  );

 LONG __attribute__((__stdcall__)) RegSetValueA (HKEY, LPCSTR, DWORD, LPCSTR, DWORD);
 LONG __attribute__((__stdcall__)) RegSetValueW (HKEY, LPCWSTR, DWORD, LPCWSTR, DWORD);


 LONG __attribute__((__stdcall__)) RegSetValueExA
  ( HKEY, LPCSTR, DWORD, DWORD, const BYTE *, DWORD
  );
 LONG __attribute__((__stdcall__)) RegSetValueExW
  ( HKEY, LPCWSTR, DWORD, DWORD, const BYTE *, DWORD
  );

 LONG __attribute__((__stdcall__)) RegUnLoadKeyA (HKEY, LPCSTR);
 LONG __attribute__((__stdcall__)) RegUnLoadKeyW (HKEY, LPCWSTR);
# 360 "c:\\mingw\\include\\winreg.h" 3
}
# 53 "c:\\mingw\\include\\windows.h" 2 3
# 1 "c:\\mingw\\include\\winsvc.h" 1 3



       
# 5 "c:\\mingw\\include\\winsvc.h" 3







extern "C" {
# 74 "c:\\mingw\\include\\winsvc.h" 3
typedef struct _SERVICE_STATUS {
 DWORD dwServiceType;
 DWORD dwCurrentState;
 DWORD dwControlsAccepted;
 DWORD dwWin32ExitCode;
 DWORD dwServiceSpecificExitCode;
 DWORD dwCheckPoint;
 DWORD dwWaitHint;
} SERVICE_STATUS,*LPSERVICE_STATUS;
typedef struct _SERVICE_STATUS_PROCESS {
 DWORD dwServiceType;
 DWORD dwCurrentState;
 DWORD dwControlsAccepted;
 DWORD dwWin32ExitCode;
 DWORD dwServiceSpecificExitCode;
 DWORD dwCheckPoint;
 DWORD dwWaitHint;
 DWORD dwProcessId;
 DWORD dwServiceFlags;
} SERVICE_STATUS_PROCESS, *LPSERVICE_STATUS_PROCESS;
typedef enum _SC_STATUS_TYPE {
 SC_STATUS_PROCESS_INFO = 0
} SC_STATUS_TYPE;
typedef enum _SC_ENUM_TYPE {
        SC_ENUM_PROCESS_INFO = 0
} SC_ENUM_TYPE;
typedef struct _ENUM_SERVICE_STATUSA {
 LPSTR lpServiceName;
 LPSTR lpDisplayName;
 SERVICE_STATUS ServiceStatus;
} ENUM_SERVICE_STATUSA,*LPENUM_SERVICE_STATUSA;
typedef struct _ENUM_SERVICE_STATUSW {
 LPWSTR lpServiceName;
 LPWSTR lpDisplayName;
 SERVICE_STATUS ServiceStatus;
} ENUM_SERVICE_STATUSW,*LPENUM_SERVICE_STATUSW;
typedef struct _ENUM_SERVICE_STATUS_PROCESSA {
 LPSTR lpServiceName;
 LPSTR lpDisplayName;
 SERVICE_STATUS_PROCESS ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSA,*LPENUM_SERVICE_STATUS_PROCESSA;
typedef struct _ENUM_SERVICE_STATUS_PROCESSW {
 LPWSTR lpServiceName;
 LPWSTR lpDisplayName;
 SERVICE_STATUS_PROCESS ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSW,*LPENUM_SERVICE_STATUS_PROCESSW;
typedef struct _QUERY_SERVICE_CONFIGA {
 DWORD dwServiceType;
 DWORD dwStartType;
 DWORD dwErrorControl;
 LPSTR lpBinaryPathName;
 LPSTR lpLoadOrderGroup;
 DWORD dwTagId;
 LPSTR lpDependencies;
 LPSTR lpServiceStartName;
 LPSTR lpDisplayName;
} QUERY_SERVICE_CONFIGA,*LPQUERY_SERVICE_CONFIGA;
typedef struct _QUERY_SERVICE_CONFIGW {
 DWORD dwServiceType;
 DWORD dwStartType;
 DWORD dwErrorControl;
 LPWSTR lpBinaryPathName;
 LPWSTR lpLoadOrderGroup;
 DWORD dwTagId;
 LPWSTR lpDependencies;
 LPWSTR lpServiceStartName;
 LPWSTR lpDisplayName;
} QUERY_SERVICE_CONFIGW,*LPQUERY_SERVICE_CONFIGW;
typedef struct _QUERY_SERVICE_LOCK_STATUSA {
 DWORD fIsLocked;
 LPSTR lpLockOwner;
 DWORD dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSA,*LPQUERY_SERVICE_LOCK_STATUSA;
typedef struct _QUERY_SERVICE_LOCK_STATUSW {
 DWORD fIsLocked;
 LPWSTR lpLockOwner;
 DWORD dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSW,*LPQUERY_SERVICE_LOCK_STATUSW;
typedef void (__attribute__((__stdcall__)) *LPSERVICE_MAIN_FUNCTIONA)(DWORD,LPSTR*);
typedef void (__attribute__((__stdcall__)) *LPSERVICE_MAIN_FUNCTIONW)(DWORD,LPWSTR*);
typedef struct _SERVICE_TABLE_ENTRYA {
 LPSTR lpServiceName;
 LPSERVICE_MAIN_FUNCTIONA lpServiceProc;
} SERVICE_TABLE_ENTRYA,*LPSERVICE_TABLE_ENTRYA;
typedef struct _SERVICE_TABLE_ENTRYW {
 LPWSTR lpServiceName;
 LPSERVICE_MAIN_FUNCTIONW lpServiceProc;
} SERVICE_TABLE_ENTRYW,*LPSERVICE_TABLE_ENTRYW;
typedef struct SC_HANDLE__{int i;}*SC_HANDLE;
typedef SC_HANDLE *LPSC_HANDLE;
typedef PVOID SC_LOCK;
typedef DWORD SERVICE_STATUS_HANDLE;
typedef void(__attribute__((__stdcall__)) *LPHANDLER_FUNCTION)(DWORD);
typedef DWORD (__attribute__((__stdcall__)) *LPHANDLER_FUNCTION_EX)(DWORD,DWORD,LPVOID,LPVOID);
typedef struct _SERVICE_DESCRIPTIONA {
 LPSTR lpDescription;
} SERVICE_DESCRIPTIONA,*LPSERVICE_DESCRIPTIONA;
typedef struct _SERVICE_DESCRIPTIONW {
 LPWSTR lpDescription;
} SERVICE_DESCRIPTIONW,*LPSERVICE_DESCRIPTIONW;
typedef enum _SC_ACTION_TYPE {
        SC_ACTION_NONE = 0,
        SC_ACTION_RESTART = 1,
        SC_ACTION_REBOOT = 2,
        SC_ACTION_RUN_COMMAND = 3
} SC_ACTION_TYPE;
typedef struct _SC_ACTION {
 SC_ACTION_TYPE Type;
 DWORD Delay;
} SC_ACTION,*LPSC_ACTION;
typedef struct _SERVICE_FAILURE_ACTIONSA {
 DWORD dwResetPeriod;
 LPSTR lpRebootMsg;
 LPSTR lpCommand;
 DWORD cActions;
 SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSA,*LPSERVICE_FAILURE_ACTIONSA;
typedef struct _SERVICE_FAILURE_ACTIONSW {
 DWORD dwResetPeriod;
 LPWSTR lpRebootMsg;
 LPWSTR lpCommand;
 DWORD cActions;
 SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSW,*LPSERVICE_FAILURE_ACTIONSW;

 BOOL __attribute__((__stdcall__)) ChangeServiceConfigA(SC_HANDLE,DWORD,DWORD,DWORD,LPCSTR,LPCSTR,LPDWORD,LPCSTR,LPCSTR,LPCSTR,LPCSTR);
 BOOL __attribute__((__stdcall__)) ChangeServiceConfigW(SC_HANDLE,DWORD,DWORD,DWORD,LPCWSTR,LPCWSTR,LPDWORD,LPCWSTR,LPCWSTR,LPCWSTR,LPCWSTR);
 BOOL __attribute__((__stdcall__)) ChangeServiceConfig2A(SC_HANDLE,DWORD,LPVOID);
 BOOL __attribute__((__stdcall__)) ChangeServiceConfig2W(SC_HANDLE,DWORD,LPVOID);
 BOOL __attribute__((__stdcall__)) CloseServiceHandle(SC_HANDLE);
 BOOL __attribute__((__stdcall__)) ControlService(SC_HANDLE,DWORD,LPSERVICE_STATUS);
 SC_HANDLE __attribute__((__stdcall__)) CreateServiceA(SC_HANDLE,LPCSTR,LPCSTR,DWORD,DWORD,DWORD,DWORD,LPCSTR,LPCSTR,PDWORD,LPCSTR,LPCSTR,LPCSTR);
 SC_HANDLE __attribute__((__stdcall__)) CreateServiceW(SC_HANDLE,LPCWSTR,LPCWSTR,DWORD,DWORD,DWORD,DWORD,LPCWSTR,LPCWSTR,PDWORD,LPCWSTR,LPCWSTR,LPCWSTR);
 BOOL __attribute__((__stdcall__)) DeleteService(SC_HANDLE);
 BOOL __attribute__((__stdcall__)) EnumDependentServicesA(SC_HANDLE,DWORD,LPENUM_SERVICE_STATUSA,DWORD,PDWORD,PDWORD);
 BOOL __attribute__((__stdcall__)) EnumDependentServicesW(SC_HANDLE,DWORD,LPENUM_SERVICE_STATUSW,DWORD,PDWORD,PDWORD);
 BOOL __attribute__((__stdcall__)) EnumServicesStatusA(SC_HANDLE,DWORD,DWORD,LPENUM_SERVICE_STATUSA,DWORD,PDWORD,PDWORD,PDWORD);
 BOOL __attribute__((__stdcall__)) EnumServicesStatusW(SC_HANDLE,DWORD,DWORD,LPENUM_SERVICE_STATUSW,DWORD,PDWORD,PDWORD,PDWORD);
 BOOL __attribute__((__stdcall__)) EnumServicesStatusExA(SC_HANDLE,SC_ENUM_TYPE,DWORD,DWORD,LPBYTE,DWORD,LPDWORD,LPDWORD,LPDWORD,LPCSTR);
 BOOL __attribute__((__stdcall__)) EnumServicesStatusExW(SC_HANDLE,SC_ENUM_TYPE,DWORD,DWORD,LPBYTE,DWORD,LPDWORD,LPDWORD,LPDWORD,LPCWSTR);
 BOOL __attribute__((__stdcall__)) GetServiceDisplayNameA(SC_HANDLE,LPCSTR,LPSTR,PDWORD);
 BOOL __attribute__((__stdcall__)) GetServiceDisplayNameW(SC_HANDLE,LPCWSTR,LPWSTR,PDWORD);
 BOOL __attribute__((__stdcall__)) GetServiceKeyNameA(SC_HANDLE,LPCSTR,LPSTR,PDWORD);
 BOOL __attribute__((__stdcall__)) GetServiceKeyNameW(SC_HANDLE,LPCWSTR,LPWSTR,PDWORD);
 SC_LOCK __attribute__((__stdcall__)) LockServiceDatabase(SC_HANDLE);
 BOOL __attribute__((__stdcall__)) NotifyBootConfigStatus(BOOL);
 SC_HANDLE __attribute__((__stdcall__)) OpenSCManagerA(LPCSTR,LPCSTR,DWORD);
 SC_HANDLE __attribute__((__stdcall__)) OpenSCManagerW(LPCWSTR,LPCWSTR,DWORD);
 SC_HANDLE __attribute__((__stdcall__)) OpenServiceA(SC_HANDLE,LPCSTR,DWORD);
 SC_HANDLE __attribute__((__stdcall__)) OpenServiceW(SC_HANDLE,LPCWSTR,DWORD);
 BOOL __attribute__((__stdcall__)) QueryServiceConfigA(SC_HANDLE,LPQUERY_SERVICE_CONFIGA,DWORD,PDWORD);
 BOOL __attribute__((__stdcall__)) QueryServiceConfigW(SC_HANDLE,LPQUERY_SERVICE_CONFIGW,DWORD,PDWORD);
 BOOL __attribute__((__stdcall__)) QueryServiceConfig2A(SC_HANDLE,DWORD,LPBYTE,DWORD,LPDWORD);
 BOOL __attribute__((__stdcall__)) QueryServiceConfig2W(SC_HANDLE,DWORD,LPBYTE,DWORD,LPDWORD);
 BOOL __attribute__((__stdcall__)) QueryServiceLockStatusA(SC_HANDLE,LPQUERY_SERVICE_LOCK_STATUSA,DWORD,PDWORD);
 BOOL __attribute__((__stdcall__)) QueryServiceLockStatusW(SC_HANDLE,LPQUERY_SERVICE_LOCK_STATUSW,DWORD,PDWORD);
 BOOL __attribute__((__stdcall__)) QueryServiceObjectSecurity(SC_HANDLE,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR,DWORD,LPDWORD);
 BOOL __attribute__((__stdcall__)) QueryServiceStatus(SC_HANDLE,LPSERVICE_STATUS);
 BOOL __attribute__((__stdcall__)) QueryServiceStatusEx(SC_HANDLE,SC_STATUS_TYPE,LPBYTE,DWORD,LPDWORD);
 SERVICE_STATUS_HANDLE __attribute__((__stdcall__)) RegisterServiceCtrlHandlerA(LPCSTR,LPHANDLER_FUNCTION);
 SERVICE_STATUS_HANDLE __attribute__((__stdcall__)) RegisterServiceCtrlHandlerW(LPCWSTR,LPHANDLER_FUNCTION);
 SERVICE_STATUS_HANDLE __attribute__((__stdcall__)) RegisterServiceCtrlHandlerExA(LPCSTR,LPHANDLER_FUNCTION_EX,LPVOID);
 SERVICE_STATUS_HANDLE __attribute__((__stdcall__)) RegisterServiceCtrlHandlerExW(LPCWSTR,LPHANDLER_FUNCTION_EX,LPVOID);
 BOOL __attribute__((__stdcall__)) SetServiceObjectSecurity(SC_HANDLE,SECURITY_INFORMATION,PSECURITY_DESCRIPTOR);
 BOOL __attribute__((__stdcall__)) SetServiceStatus(SERVICE_STATUS_HANDLE,LPSERVICE_STATUS);
 BOOL __attribute__((__stdcall__)) StartServiceA(SC_HANDLE,DWORD,LPCSTR*);
 BOOL __attribute__((__stdcall__)) StartServiceCtrlDispatcherA(LPSERVICE_TABLE_ENTRYA);
 BOOL __attribute__((__stdcall__)) StartServiceCtrlDispatcherW(LPSERVICE_TABLE_ENTRYW);
 BOOL __attribute__((__stdcall__)) StartServiceW(SC_HANDLE,DWORD,LPCWSTR*);
 BOOL __attribute__((__stdcall__)) UnlockServiceDatabase(SC_LOCK);
# 278 "c:\\mingw\\include\\winsvc.h" 3
typedef ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS,*LPENUM_SERVICE_STATUS;
typedef ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESS;
typedef LPENUM_SERVICE_STATUS_PROCESSA LPENUM_SERVICE_STATUS_PROCESS;
typedef QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG,*LPQUERY_SERVICE_CONFIG;
typedef QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS,*LPQUERY_SERVICE_LOCK_STATUS;
typedef SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY,*LPSERVICE_TABLE_ENTRY;
typedef LPSERVICE_MAIN_FUNCTIONA LPSERVICE_MAIN_FUNCTION;
typedef SERVICE_DESCRIPTIONA SERVICE_DESCRIPTION;
typedef LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION;
typedef SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONS;
typedef LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS;
# 311 "c:\\mingw\\include\\winsvc.h" 3
}
# 54 "c:\\mingw\\include\\windows.h" 2 3
# 35 "../../include/glad/glad.h" 2
# 45 "../../include/glad/glad.h"

# 45 "../../include/glad/glad.h"
extern "C" {


struct gladGLversionStruct {
    int major;
    int minor;
};

typedef void* (* GLADloadproc)(const char *name);
# 81 "../../include/glad/glad.h"
extern struct gladGLversionStruct GLVersion;
extern int gladLoadGLLoader(GLADloadproc);

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 1 3 4
# 149 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 3 4

# 149 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 3 4
typedef int ptrdiff_t;
# 426 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));






  __float128 __max_align_f128 __attribute__((__aligned__(__alignof(__float128))));

} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 85 "../../include/glad/glad.h" 2
# 112 "../../include/glad/glad.h"
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stdint.h" 1 3 4
# 9 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stdint.h" 3 4
# 1 "c:\\mingw\\include\\stdint.h" 1 3 4
# 34 "c:\\mingw\\include\\stdint.h" 3 4
       
# 35 "c:\\mingw\\include\\stdint.h" 3
# 54 "c:\\mingw\\include\\stdint.h" 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 1 3 4
# 357 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 3 4
typedef short unsigned int wint_t;
# 55 "c:\\mingw\\include\\stdint.h" 2 3



typedef signed char int8_t;
typedef unsigned char uint8_t;
typedef short int16_t;
typedef unsigned short uint16_t;
typedef int int32_t;
typedef unsigned uint32_t;
typedef long long int64_t;
typedef unsigned long long uint64_t;



typedef signed char int_least8_t;
typedef unsigned char uint_least8_t;
typedef short int_least16_t;
typedef unsigned short uint_least16_t;
typedef int int_least32_t;
typedef unsigned uint_least32_t;
typedef long long int_least64_t;
typedef unsigned long long uint_least64_t;





typedef signed char int_fast8_t;
typedef unsigned char uint_fast8_t;
typedef short int_fast16_t;
typedef unsigned short uint_fast16_t;
typedef int int_fast32_t;
typedef unsigned int uint_fast32_t;
typedef long long int_fast64_t;
typedef unsigned long long uint_fast64_t;
# 106 "c:\\mingw\\include\\stdint.h" 3
 typedef int __intptr_t;

typedef __intptr_t intptr_t;
# 118 "c:\\mingw\\include\\stdint.h" 3
 typedef unsigned int __uintptr_t;

typedef __uintptr_t uintptr_t;







typedef long long intmax_t;
typedef unsigned long long uintmax_t;
# 10 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stdint.h" 2 3 4
# 113 "../../include/glad/glad.h" 2
# 122 "../../include/glad/glad.h"

# 122 "../../include/glad/glad.h"
typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef signed char GLbyte;
typedef short GLshort;
typedef int GLint;
typedef int GLclampx;
typedef unsigned char GLubyte;
typedef unsigned short GLushort;
typedef unsigned int GLuint;
typedef int GLsizei;
typedef float GLfloat;
typedef float GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void *GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;



typedef unsigned int GLhandleARB;

typedef unsigned short GLhalfARB;
typedef unsigned short GLhalf;
typedef GLint GLfixed;



typedef ptrdiff_t GLintptr;




typedef ptrdiff_t GLsizeiptr;

typedef int64_t GLint64;
typedef uint64_t GLuint64;



typedef ptrdiff_t GLintptrARB;




typedef ptrdiff_t GLsizeiptrARB;

typedef int64_t GLint64EXT;
typedef uint64_t GLuint64EXT;
typedef struct __GLsync *GLsync;
struct _cl_context;
struct _cl_event;
typedef void (__attribute__((__stdcall__)) *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (__attribute__((__stdcall__)) *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (__attribute__((__stdcall__)) *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (__attribute__((__stdcall__)) *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef unsigned short GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;
# 1113 "../../include/glad/glad.h"
extern int GLAD_GL_VERSION_1_0;
typedef void (__attribute__((__stdcall__)) * PFNGLCULLFACEPROC)(GLenum mode);
extern PFNGLCULLFACEPROC glad_glCullFace;

typedef void (__attribute__((__stdcall__)) * PFNGLFRONTFACEPROC)(GLenum mode);
extern PFNGLFRONTFACEPROC glad_glFrontFace;

typedef void (__attribute__((__stdcall__)) * PFNGLHINTPROC)(GLenum target, GLenum mode);
extern PFNGLHINTPROC glad_glHint;

typedef void (__attribute__((__stdcall__)) * PFNGLLINEWIDTHPROC)(GLfloat width);
extern PFNGLLINEWIDTHPROC glad_glLineWidth;

typedef void (__attribute__((__stdcall__)) * PFNGLPOINTSIZEPROC)(GLfloat size);
extern PFNGLPOINTSIZEPROC glad_glPointSize;

typedef void (__attribute__((__stdcall__)) * PFNGLPOLYGONMODEPROC)(GLenum face, GLenum mode);
extern PFNGLPOLYGONMODEPROC glad_glPolygonMode;

typedef void (__attribute__((__stdcall__)) * PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLSCISSORPROC glad_glScissor;

typedef void (__attribute__((__stdcall__)) * PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname, GLfloat param);
extern PFNGLTEXPARAMETERFPROC glad_glTexParameterf;

typedef void (__attribute__((__stdcall__)) * PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname, const GLfloat *params);
extern PFNGLTEXPARAMETERFVPROC glad_glTexParameterfv;

typedef void (__attribute__((__stdcall__)) * PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname, GLint param);
extern PFNGLTEXPARAMETERIPROC glad_glTexParameteri;

typedef void (__attribute__((__stdcall__)) * PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname, const GLint *params);
extern PFNGLTEXPARAMETERIVPROC glad_glTexParameteriv;

typedef void (__attribute__((__stdcall__)) * PFNGLTEXIMAGE1DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
extern PFNGLTEXIMAGE1DPROC glad_glTexImage1D;

typedef void (__attribute__((__stdcall__)) * PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
extern PFNGLTEXIMAGE2DPROC glad_glTexImage2D;

typedef void (__attribute__((__stdcall__)) * PFNGLDRAWBUFFERPROC)(GLenum buf);
extern PFNGLDRAWBUFFERPROC glad_glDrawBuffer;

typedef void (__attribute__((__stdcall__)) * PFNGLCLEARPROC)(GLbitfield mask);
extern PFNGLCLEARPROC glad_glClear;

typedef void (__attribute__((__stdcall__)) * PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern PFNGLCLEARCOLORPROC glad_glClearColor;

typedef void (__attribute__((__stdcall__)) * PFNGLCLEARSTENCILPROC)(GLint s);
extern PFNGLCLEARSTENCILPROC glad_glClearStencil;

typedef void (__attribute__((__stdcall__)) * PFNGLCLEARDEPTHPROC)(GLdouble depth);
extern PFNGLCLEARDEPTHPROC glad_glClearDepth;

typedef void (__attribute__((__stdcall__)) * PFNGLSTENCILMASKPROC)(GLuint mask);
extern PFNGLSTENCILMASKPROC glad_glStencilMask;

typedef void (__attribute__((__stdcall__)) * PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
extern PFNGLCOLORMASKPROC glad_glColorMask;

typedef void (__attribute__((__stdcall__)) * PFNGLDEPTHMASKPROC)(GLboolean flag);
extern PFNGLDEPTHMASKPROC glad_glDepthMask;

typedef void (__attribute__((__stdcall__)) * PFNGLDISABLEPROC)(GLenum cap);
extern PFNGLDISABLEPROC glad_glDisable;

typedef void (__attribute__((__stdcall__)) * PFNGLENABLEPROC)(GLenum cap);
extern PFNGLENABLEPROC glad_glEnable;

typedef void (__attribute__((__stdcall__)) * PFNGLFINISHPROC)();
extern PFNGLFINISHPROC glad_glFinish;

typedef void (__attribute__((__stdcall__)) * PFNGLFLUSHPROC)();
extern PFNGLFLUSHPROC glad_glFlush;

typedef void (__attribute__((__stdcall__)) * PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
extern PFNGLBLENDFUNCPROC glad_glBlendFunc;

typedef void (__attribute__((__stdcall__)) * PFNGLLOGICOPPROC)(GLenum opcode);
extern PFNGLLOGICOPPROC glad_glLogicOp;

typedef void (__attribute__((__stdcall__)) * PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref, GLuint mask);
extern PFNGLSTENCILFUNCPROC glad_glStencilFunc;

typedef void (__attribute__((__stdcall__)) * PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail, GLenum zpass);
extern PFNGLSTENCILOPPROC glad_glStencilOp;

typedef void (__attribute__((__stdcall__)) * PFNGLDEPTHFUNCPROC)(GLenum func);
extern PFNGLDEPTHFUNCPROC glad_glDepthFunc;

typedef void (__attribute__((__stdcall__)) * PFNGLPIXELSTOREFPROC)(GLenum pname, GLfloat param);
extern PFNGLPIXELSTOREFPROC glad_glPixelStoref;

typedef void (__attribute__((__stdcall__)) * PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);
extern PFNGLPIXELSTOREIPROC glad_glPixelStorei;

typedef void (__attribute__((__stdcall__)) * PFNGLREADBUFFERPROC)(GLenum src);
extern PFNGLREADBUFFERPROC glad_glReadBuffer;

typedef void (__attribute__((__stdcall__)) * PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
extern PFNGLREADPIXELSPROC glad_glReadPixels;

typedef void (__attribute__((__stdcall__)) * PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean *data);
extern PFNGLGETBOOLEANVPROC glad_glGetBooleanv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETDOUBLEVPROC)(GLenum pname, GLdouble *data);
extern PFNGLGETDOUBLEVPROC glad_glGetDoublev;

typedef GLenum (__attribute__((__stdcall__)) * PFNGLGETERRORPROC)();
extern PFNGLGETERRORPROC glad_glGetError;

typedef void (__attribute__((__stdcall__)) * PFNGLGETFLOATVPROC)(GLenum pname, GLfloat *data);
extern PFNGLGETFLOATVPROC glad_glGetFloatv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETINTEGERVPROC)(GLenum pname, GLint *data);
extern PFNGLGETINTEGERVPROC glad_glGetIntegerv;

typedef const GLubyte * (__attribute__((__stdcall__)) * PFNGLGETSTRINGPROC)(GLenum name);
extern PFNGLGETSTRINGPROC glad_glGetString;

typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXIMAGEPROC)(GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
extern PFNGLGETTEXIMAGEPROC glad_glGetTexImage;

typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXPARAMETERFVPROC)(GLenum target, GLenum pname, GLfloat *params);
extern PFNGLGETTEXPARAMETERFVPROC glad_glGetTexParameterfv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
extern PFNGLGETTEXPARAMETERIVPROC glad_glGetTexParameteriv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXLEVELPARAMETERFVPROC)(GLenum target, GLint level, GLenum pname, GLfloat *params);
extern PFNGLGETTEXLEVELPARAMETERFVPROC glad_glGetTexLevelParameterfv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXLEVELPARAMETERIVPROC)(GLenum target, GLint level, GLenum pname, GLint *params);
extern PFNGLGETTEXLEVELPARAMETERIVPROC glad_glGetTexLevelParameteriv;

typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISENABLEDPROC)(GLenum cap);
extern PFNGLISENABLEDPROC glad_glIsEnabled;

typedef void (__attribute__((__stdcall__)) * PFNGLDEPTHRANGEPROC)(GLdouble , GLdouble );
extern PFNGLDEPTHRANGEPROC glad_glDepthRange;

typedef void (__attribute__((__stdcall__)) * PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLVIEWPORTPROC glad_glViewport;




extern int GLAD_GL_VERSION_1_1;
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first, GLsizei count);
extern PFNGLDRAWARRAYSPROC glad_glDrawArrays;

typedef void (__attribute__((__stdcall__)) * PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices);
extern PFNGLDRAWELEMENTSPROC glad_glDrawElements;

typedef void (__attribute__((__stdcall__)) * PFNGLPOLYGONOFFSETPROC)(GLfloat factor, GLfloat units);
extern PFNGLPOLYGONOFFSETPROC glad_glPolygonOffset;

typedef void (__attribute__((__stdcall__)) * PFNGLCOPYTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
extern PFNGLCOPYTEXIMAGE1DPROC glad_glCopyTexImage1D;

typedef void (__attribute__((__stdcall__)) * PFNGLCOPYTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
extern PFNGLCOPYTEXIMAGE2DPROC glad_glCopyTexImage2D;

typedef void (__attribute__((__stdcall__)) * PFNGLCOPYTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
extern PFNGLCOPYTEXSUBIMAGE1DPROC glad_glCopyTexSubImage1D;

typedef void (__attribute__((__stdcall__)) * PFNGLCOPYTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLCOPYTEXSUBIMAGE2DPROC glad_glCopyTexSubImage2D;

typedef void (__attribute__((__stdcall__)) * PFNGLTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
extern PFNGLTEXSUBIMAGE1DPROC glad_glTexSubImage1D;

typedef void (__attribute__((__stdcall__)) * PFNGLTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
extern PFNGLTEXSUBIMAGE2DPROC glad_glTexSubImage2D;

typedef void (__attribute__((__stdcall__)) * PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);
extern PFNGLBINDTEXTUREPROC glad_glBindTexture;

typedef void (__attribute__((__stdcall__)) * PFNGLDELETETEXTURESPROC)(GLsizei n, const GLuint *textures);
extern PFNGLDELETETEXTURESPROC glad_glDeleteTextures;

typedef void (__attribute__((__stdcall__)) * PFNGLGENTEXTURESPROC)(GLsizei n, GLuint *textures);
extern PFNGLGENTEXTURESPROC glad_glGenTextures;

typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISTEXTUREPROC)(GLuint texture);
extern PFNGLISTEXTUREPROC glad_glIsTexture;




extern int GLAD_GL_VERSION_1_2;
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWRANGEELEMENTSPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
extern PFNGLDRAWRANGEELEMENTSPROC glad_glDrawRangeElements;

typedef void (__attribute__((__stdcall__)) * PFNGLTEXIMAGE3DPROC)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
extern PFNGLTEXIMAGE3DPROC glad_glTexImage3D;

typedef void (__attribute__((__stdcall__)) * PFNGLTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
extern PFNGLTEXSUBIMAGE3DPROC glad_glTexSubImage3D;

typedef void (__attribute__((__stdcall__)) * PFNGLCOPYTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern PFNGLCOPYTEXSUBIMAGE3DPROC glad_glCopyTexSubImage3D;




extern int GLAD_GL_VERSION_1_3;
typedef void (__attribute__((__stdcall__)) * PFNGLACTIVETEXTUREPROC)(GLenum texture);
extern PFNGLACTIVETEXTUREPROC glad_glActiveTexture;

typedef void (__attribute__((__stdcall__)) * PFNGLSAMPLECOVERAGEPROC)(GLfloat value, GLboolean invert);
extern PFNGLSAMPLECOVERAGEPROC glad_glSampleCoverage;

typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXIMAGE3DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
extern PFNGLCOMPRESSEDTEXIMAGE3DPROC glad_glCompressedTexImage3D;

typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXIMAGE2DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
extern PFNGLCOMPRESSEDTEXIMAGE2DPROC glad_glCompressedTexImage2D;

typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXIMAGE1DPROC)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
extern PFNGLCOMPRESSEDTEXIMAGE1DPROC glad_glCompressedTexImage1D;

typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
extern PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glad_glCompressedTexSubImage3D;

typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
extern PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glad_glCompressedTexSubImage2D;

typedef void (__attribute__((__stdcall__)) * PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
extern PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glad_glCompressedTexSubImage1D;

typedef void (__attribute__((__stdcall__)) * PFNGLGETCOMPRESSEDTEXIMAGEPROC)(GLenum target, GLint level, void *img);
extern PFNGLGETCOMPRESSEDTEXIMAGEPROC glad_glGetCompressedTexImage;




extern int GLAD_GL_VERSION_1_4;
typedef void (__attribute__((__stdcall__)) * PFNGLBLENDFUNCSEPARATEPROC)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
extern PFNGLBLENDFUNCSEPARATEPROC glad_glBlendFuncSeparate;

typedef void (__attribute__((__stdcall__)) * PFNGLMULTIDRAWARRAYSPROC)(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
extern PFNGLMULTIDRAWARRAYSPROC glad_glMultiDrawArrays;

typedef void (__attribute__((__stdcall__)) * PFNGLMULTIDRAWELEMENTSPROC)(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);
extern PFNGLMULTIDRAWELEMENTSPROC glad_glMultiDrawElements;

typedef void (__attribute__((__stdcall__)) * PFNGLPOINTPARAMETERFPROC)(GLenum pname, GLfloat param);
extern PFNGLPOINTPARAMETERFPROC glad_glPointParameterf;

typedef void (__attribute__((__stdcall__)) * PFNGLPOINTPARAMETERFVPROC)(GLenum pname, const GLfloat *params);
extern PFNGLPOINTPARAMETERFVPROC glad_glPointParameterfv;

typedef void (__attribute__((__stdcall__)) * PFNGLPOINTPARAMETERIPROC)(GLenum pname, GLint param);
extern PFNGLPOINTPARAMETERIPROC glad_glPointParameteri;

typedef void (__attribute__((__stdcall__)) * PFNGLPOINTPARAMETERIVPROC)(GLenum pname, const GLint *params);
extern PFNGLPOINTPARAMETERIVPROC glad_glPointParameteriv;

typedef void (__attribute__((__stdcall__)) * PFNGLBLENDCOLORPROC)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
extern PFNGLBLENDCOLORPROC glad_glBlendColor;

typedef void (__attribute__((__stdcall__)) * PFNGLBLENDEQUATIONPROC)(GLenum mode);
extern PFNGLBLENDEQUATIONPROC glad_glBlendEquation;




extern int GLAD_GL_VERSION_1_5;
typedef void (__attribute__((__stdcall__)) * PFNGLGENQUERIESPROC)(GLsizei n, GLuint *ids);
extern PFNGLGENQUERIESPROC glad_glGenQueries;

typedef void (__attribute__((__stdcall__)) * PFNGLDELETEQUERIESPROC)(GLsizei n, const GLuint *ids);
extern PFNGLDELETEQUERIESPROC glad_glDeleteQueries;

typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISQUERYPROC)(GLuint id);
extern PFNGLISQUERYPROC glad_glIsQuery;

typedef void (__attribute__((__stdcall__)) * PFNGLBEGINQUERYPROC)(GLenum target, GLuint id);
extern PFNGLBEGINQUERYPROC glad_glBeginQuery;

typedef void (__attribute__((__stdcall__)) * PFNGLENDQUERYPROC)(GLenum target);
extern PFNGLENDQUERYPROC glad_glEndQuery;

typedef void (__attribute__((__stdcall__)) * PFNGLGETQUERYIVPROC)(GLenum target, GLenum pname, GLint *params);
extern PFNGLGETQUERYIVPROC glad_glGetQueryiv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETQUERYOBJECTIVPROC)(GLuint id, GLenum pname, GLint *params);
extern PFNGLGETQUERYOBJECTIVPROC glad_glGetQueryObjectiv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETQUERYOBJECTUIVPROC)(GLuint id, GLenum pname, GLuint *params);
extern PFNGLGETQUERYOBJECTUIVPROC glad_glGetQueryObjectuiv;

typedef void (__attribute__((__stdcall__)) * PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);
extern PFNGLBINDBUFFERPROC glad_glBindBuffer;

typedef void (__attribute__((__stdcall__)) * PFNGLDELETEBUFFERSPROC)(GLsizei n, const GLuint *buffers);
extern PFNGLDELETEBUFFERSPROC glad_glDeleteBuffers;

typedef void (__attribute__((__stdcall__)) * PFNGLGENBUFFERSPROC)(GLsizei n, GLuint *buffers);
extern PFNGLGENBUFFERSPROC glad_glGenBuffers;

typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISBUFFERPROC)(GLuint buffer);
extern PFNGLISBUFFERPROC glad_glIsBuffer;

typedef void (__attribute__((__stdcall__)) * PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size, const void *data, GLenum usage);
extern PFNGLBUFFERDATAPROC glad_glBufferData;

typedef void (__attribute__((__stdcall__)) * PFNGLBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
extern PFNGLBUFFERSUBDATAPROC glad_glBufferSubData;

typedef void (__attribute__((__stdcall__)) * PFNGLGETBUFFERSUBDATAPROC)(GLenum target, GLintptr offset, GLsizeiptr size, void *data);
extern PFNGLGETBUFFERSUBDATAPROC glad_glGetBufferSubData;

typedef void * (__attribute__((__stdcall__)) * PFNGLMAPBUFFERPROC)(GLenum target, GLenum access);
extern PFNGLMAPBUFFERPROC glad_glMapBuffer;

typedef GLboolean (__attribute__((__stdcall__)) * PFNGLUNMAPBUFFERPROC)(GLenum target);
extern PFNGLUNMAPBUFFERPROC glad_glUnmapBuffer;

typedef void (__attribute__((__stdcall__)) * PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
extern PFNGLGETBUFFERPARAMETERIVPROC glad_glGetBufferParameteriv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETBUFFERPOINTERVPROC)(GLenum target, GLenum pname, void **params);
extern PFNGLGETBUFFERPOINTERVPROC glad_glGetBufferPointerv;




extern int GLAD_GL_VERSION_2_0;
typedef void (__attribute__((__stdcall__)) * PFNGLBLENDEQUATIONSEPARATEPROC)(GLenum modeRGB, GLenum modeAlpha);
extern PFNGLBLENDEQUATIONSEPARATEPROC glad_glBlendEquationSeparate;

typedef void (__attribute__((__stdcall__)) * PFNGLDRAWBUFFERSPROC)(GLsizei n, const GLenum *bufs);
extern PFNGLDRAWBUFFERSPROC glad_glDrawBuffers;

typedef void (__attribute__((__stdcall__)) * PFNGLSTENCILOPSEPARATEPROC)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
extern PFNGLSTENCILOPSEPARATEPROC glad_glStencilOpSeparate;

typedef void (__attribute__((__stdcall__)) * PFNGLSTENCILFUNCSEPARATEPROC)(GLenum face, GLenum func, GLint ref, GLuint mask);
extern PFNGLSTENCILFUNCSEPARATEPROC glad_glStencilFuncSeparate;

typedef void (__attribute__((__stdcall__)) * PFNGLSTENCILMASKSEPARATEPROC)(GLenum face, GLuint mask);
extern PFNGLSTENCILMASKSEPARATEPROC glad_glStencilMaskSeparate;

typedef void (__attribute__((__stdcall__)) * PFNGLATTACHSHADERPROC)(GLuint program, GLuint shader);
extern PFNGLATTACHSHADERPROC glad_glAttachShader;

typedef void (__attribute__((__stdcall__)) * PFNGLBINDATTRIBLOCATIONPROC)(GLuint program, GLuint index, const GLchar *name);
extern PFNGLBINDATTRIBLOCATIONPROC glad_glBindAttribLocation;

typedef void (__attribute__((__stdcall__)) * PFNGLCOMPILESHADERPROC)(GLuint shader);
extern PFNGLCOMPILESHADERPROC glad_glCompileShader;

typedef GLuint (__attribute__((__stdcall__)) * PFNGLCREATEPROGRAMPROC)();
extern PFNGLCREATEPROGRAMPROC glad_glCreateProgram;

typedef GLuint (__attribute__((__stdcall__)) * PFNGLCREATESHADERPROC)(GLenum type);
extern PFNGLCREATESHADERPROC glad_glCreateShader;

typedef void (__attribute__((__stdcall__)) * PFNGLDELETEPROGRAMPROC)(GLuint program);
extern PFNGLDELETEPROGRAMPROC glad_glDeleteProgram;

typedef void (__attribute__((__stdcall__)) * PFNGLDELETESHADERPROC)(GLuint shader);
extern PFNGLDELETESHADERPROC glad_glDeleteShader;

typedef void (__attribute__((__stdcall__)) * PFNGLDETACHSHADERPROC)(GLuint program, GLuint shader);
extern PFNGLDETACHSHADERPROC glad_glDetachShader;

typedef void (__attribute__((__stdcall__)) * PFNGLDISABLEVERTEXATTRIBARRAYPROC)(GLuint index);
extern PFNGLDISABLEVERTEXATTRIBARRAYPROC glad_glDisableVertexAttribArray;

typedef void (__attribute__((__stdcall__)) * PFNGLENABLEVERTEXATTRIBARRAYPROC)(GLuint index);
extern PFNGLENABLEVERTEXATTRIBARRAYPROC glad_glEnableVertexAttribArray;

typedef void (__attribute__((__stdcall__)) * PFNGLGETACTIVEATTRIBPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
extern PFNGLGETACTIVEATTRIBPROC glad_glGetActiveAttrib;

typedef void (__attribute__((__stdcall__)) * PFNGLGETACTIVEUNIFORMPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
extern PFNGLGETACTIVEUNIFORMPROC glad_glGetActiveUniform;

typedef void (__attribute__((__stdcall__)) * PFNGLGETATTACHEDSHADERSPROC)(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
extern PFNGLGETATTACHEDSHADERSPROC glad_glGetAttachedShaders;

typedef GLint (__attribute__((__stdcall__)) * PFNGLGETATTRIBLOCATIONPROC)(GLuint program, const GLchar *name);
extern PFNGLGETATTRIBLOCATIONPROC glad_glGetAttribLocation;

typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMIVPROC)(GLuint program, GLenum pname, GLint *params);
extern PFNGLGETPROGRAMIVPROC glad_glGetProgramiv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMINFOLOGPROC)(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
extern PFNGLGETPROGRAMINFOLOGPROC glad_glGetProgramInfoLog;

typedef void (__attribute__((__stdcall__)) * PFNGLGETSHADERIVPROC)(GLuint shader, GLenum pname, GLint *params);
extern PFNGLGETSHADERIVPROC glad_glGetShaderiv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETSHADERINFOLOGPROC)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
extern PFNGLGETSHADERINFOLOGPROC glad_glGetShaderInfoLog;

typedef void (__attribute__((__stdcall__)) * PFNGLGETSHADERSOURCEPROC)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
extern PFNGLGETSHADERSOURCEPROC glad_glGetShaderSource;

typedef GLint (__attribute__((__stdcall__)) * PFNGLGETUNIFORMLOCATIONPROC)(GLuint program, const GLchar *name);
extern PFNGLGETUNIFORMLOCATIONPROC glad_glGetUniformLocation;

typedef void (__attribute__((__stdcall__)) * PFNGLGETUNIFORMFVPROC)(GLuint program, GLint location, GLfloat *params);
extern PFNGLGETUNIFORMFVPROC glad_glGetUniformfv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETUNIFORMIVPROC)(GLuint program, GLint location, GLint *params);
extern PFNGLGETUNIFORMIVPROC glad_glGetUniformiv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBDVPROC)(GLuint index, GLenum pname, GLdouble *params);
extern PFNGLGETVERTEXATTRIBDVPROC glad_glGetVertexAttribdv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBFVPROC)(GLuint index, GLenum pname, GLfloat *params);
extern PFNGLGETVERTEXATTRIBFVPROC glad_glGetVertexAttribfv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBIVPROC)(GLuint index, GLenum pname, GLint *params);
extern PFNGLGETVERTEXATTRIBIVPROC glad_glGetVertexAttribiv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBPOINTERVPROC)(GLuint index, GLenum pname, void **pointer);
extern PFNGLGETVERTEXATTRIBPOINTERVPROC glad_glGetVertexAttribPointerv;

typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISPROGRAMPROC)(GLuint program);
extern PFNGLISPROGRAMPROC glad_glIsProgram;

typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISSHADERPROC)(GLuint shader);
extern PFNGLISSHADERPROC glad_glIsShader;

typedef void (__attribute__((__stdcall__)) * PFNGLLINKPROGRAMPROC)(GLuint program);
extern PFNGLLINKPROGRAMPROC glad_glLinkProgram;

typedef void (__attribute__((__stdcall__)) * PFNGLSHADERSOURCEPROC)(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
extern PFNGLSHADERSOURCEPROC glad_glShaderSource;

typedef void (__attribute__((__stdcall__)) * PFNGLUSEPROGRAMPROC)(GLuint program);
extern PFNGLUSEPROGRAMPROC glad_glUseProgram;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1FPROC)(GLint location, GLfloat v0);
extern PFNGLUNIFORM1FPROC glad_glUniform1f;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2FPROC)(GLint location, GLfloat v0, GLfloat v1);
extern PFNGLUNIFORM2FPROC glad_glUniform2f;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
extern PFNGLUNIFORM3FPROC glad_glUniform3f;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4FPROC)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
extern PFNGLUNIFORM4FPROC glad_glUniform4f;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1IPROC)(GLint location, GLint v0);
extern PFNGLUNIFORM1IPROC glad_glUniform1i;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2IPROC)(GLint location, GLint v0, GLint v1);
extern PFNGLUNIFORM2IPROC glad_glUniform2i;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3IPROC)(GLint location, GLint v0, GLint v1, GLint v2);
extern PFNGLUNIFORM3IPROC glad_glUniform3i;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4IPROC)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
extern PFNGLUNIFORM4IPROC glad_glUniform4i;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1FVPROC)(GLint location, GLsizei count, const GLfloat *value);
extern PFNGLUNIFORM1FVPROC glad_glUniform1fv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2FVPROC)(GLint location, GLsizei count, const GLfloat *value);
extern PFNGLUNIFORM2FVPROC glad_glUniform2fv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3FVPROC)(GLint location, GLsizei count, const GLfloat *value);
extern PFNGLUNIFORM3FVPROC glad_glUniform3fv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4FVPROC)(GLint location, GLsizei count, const GLfloat *value);
extern PFNGLUNIFORM4FVPROC glad_glUniform4fv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1IVPROC)(GLint location, GLsizei count, const GLint *value);
extern PFNGLUNIFORM1IVPROC glad_glUniform1iv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2IVPROC)(GLint location, GLsizei count, const GLint *value);
extern PFNGLUNIFORM2IVPROC glad_glUniform2iv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3IVPROC)(GLint location, GLsizei count, const GLint *value);
extern PFNGLUNIFORM3IVPROC glad_glUniform3iv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4IVPROC)(GLint location, GLsizei count, const GLint *value);
extern PFNGLUNIFORM4IVPROC glad_glUniform4iv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX2FVPROC glad_glUniformMatrix2fv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX3FVPROC glad_glUniformMatrix3fv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX4FVPROC glad_glUniformMatrix4fv;

typedef void (__attribute__((__stdcall__)) * PFNGLVALIDATEPROGRAMPROC)(GLuint program);
extern PFNGLVALIDATEPROGRAMPROC glad_glValidateProgram;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB1DPROC)(GLuint index, GLdouble x);
extern PFNGLVERTEXATTRIB1DPROC glad_glVertexAttrib1d;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB1DVPROC)(GLuint index, const GLdouble *v);
extern PFNGLVERTEXATTRIB1DVPROC glad_glVertexAttrib1dv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB1FPROC)(GLuint index, GLfloat x);
extern PFNGLVERTEXATTRIB1FPROC glad_glVertexAttrib1f;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB1FVPROC)(GLuint index, const GLfloat *v);
extern PFNGLVERTEXATTRIB1FVPROC glad_glVertexAttrib1fv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB1SPROC)(GLuint index, GLshort x);
extern PFNGLVERTEXATTRIB1SPROC glad_glVertexAttrib1s;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB1SVPROC)(GLuint index, const GLshort *v);
extern PFNGLVERTEXATTRIB1SVPROC glad_glVertexAttrib1sv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB2DPROC)(GLuint index, GLdouble x, GLdouble y);
extern PFNGLVERTEXATTRIB2DPROC glad_glVertexAttrib2d;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB2DVPROC)(GLuint index, const GLdouble *v);
extern PFNGLVERTEXATTRIB2DVPROC glad_glVertexAttrib2dv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB2FPROC)(GLuint index, GLfloat x, GLfloat y);
extern PFNGLVERTEXATTRIB2FPROC glad_glVertexAttrib2f;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB2FVPROC)(GLuint index, const GLfloat *v);
extern PFNGLVERTEXATTRIB2FVPROC glad_glVertexAttrib2fv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB2SPROC)(GLuint index, GLshort x, GLshort y);
extern PFNGLVERTEXATTRIB2SPROC glad_glVertexAttrib2s;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB2SVPROC)(GLuint index, const GLshort *v);
extern PFNGLVERTEXATTRIB2SVPROC glad_glVertexAttrib2sv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
extern PFNGLVERTEXATTRIB3DPROC glad_glVertexAttrib3d;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB3DVPROC)(GLuint index, const GLdouble *v);
extern PFNGLVERTEXATTRIB3DVPROC glad_glVertexAttrib3dv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB3FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
extern PFNGLVERTEXATTRIB3FPROC glad_glVertexAttrib3f;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB3FVPROC)(GLuint index, const GLfloat *v);
extern PFNGLVERTEXATTRIB3FVPROC glad_glVertexAttrib3fv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB3SPROC)(GLuint index, GLshort x, GLshort y, GLshort z);
extern PFNGLVERTEXATTRIB3SPROC glad_glVertexAttrib3s;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB3SVPROC)(GLuint index, const GLshort *v);
extern PFNGLVERTEXATTRIB3SVPROC glad_glVertexAttrib3sv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4NBVPROC)(GLuint index, const GLbyte *v);
extern PFNGLVERTEXATTRIB4NBVPROC glad_glVertexAttrib4Nbv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4NIVPROC)(GLuint index, const GLint *v);
extern PFNGLVERTEXATTRIB4NIVPROC glad_glVertexAttrib4Niv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4NSVPROC)(GLuint index, const GLshort *v);
extern PFNGLVERTEXATTRIB4NSVPROC glad_glVertexAttrib4Nsv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4NUBPROC)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
extern PFNGLVERTEXATTRIB4NUBPROC glad_glVertexAttrib4Nub;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4NUBVPROC)(GLuint index, const GLubyte *v);
extern PFNGLVERTEXATTRIB4NUBVPROC glad_glVertexAttrib4Nubv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4NUIVPROC)(GLuint index, const GLuint *v);
extern PFNGLVERTEXATTRIB4NUIVPROC glad_glVertexAttrib4Nuiv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4NUSVPROC)(GLuint index, const GLushort *v);
extern PFNGLVERTEXATTRIB4NUSVPROC glad_glVertexAttrib4Nusv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4BVPROC)(GLuint index, const GLbyte *v);
extern PFNGLVERTEXATTRIB4BVPROC glad_glVertexAttrib4bv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern PFNGLVERTEXATTRIB4DPROC glad_glVertexAttrib4d;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4DVPROC)(GLuint index, const GLdouble *v);
extern PFNGLVERTEXATTRIB4DVPROC glad_glVertexAttrib4dv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4FPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
extern PFNGLVERTEXATTRIB4FPROC glad_glVertexAttrib4f;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4FVPROC)(GLuint index, const GLfloat *v);
extern PFNGLVERTEXATTRIB4FVPROC glad_glVertexAttrib4fv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4IVPROC)(GLuint index, const GLint *v);
extern PFNGLVERTEXATTRIB4IVPROC glad_glVertexAttrib4iv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4SPROC)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
extern PFNGLVERTEXATTRIB4SPROC glad_glVertexAttrib4s;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4SVPROC)(GLuint index, const GLshort *v);
extern PFNGLVERTEXATTRIB4SVPROC glad_glVertexAttrib4sv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4UBVPROC)(GLuint index, const GLubyte *v);
extern PFNGLVERTEXATTRIB4UBVPROC glad_glVertexAttrib4ubv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4UIVPROC)(GLuint index, const GLuint *v);
extern PFNGLVERTEXATTRIB4UIVPROC glad_glVertexAttrib4uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIB4USVPROC)(GLuint index, const GLushort *v);
extern PFNGLVERTEXATTRIB4USVPROC glad_glVertexAttrib4usv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBPOINTERPROC)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
extern PFNGLVERTEXATTRIBPOINTERPROC glad_glVertexAttribPointer;




extern int GLAD_GL_VERSION_2_1;
typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX2X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX2X3FVPROC glad_glUniformMatrix2x3fv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX3X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX3X2FVPROC glad_glUniformMatrix3x2fv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX2X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX2X4FVPROC glad_glUniformMatrix2x4fv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX4X2FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX4X2FVPROC glad_glUniformMatrix4x2fv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX3X4FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX3X4FVPROC glad_glUniformMatrix3x4fv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX4X3FVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLUNIFORMMATRIX4X3FVPROC glad_glUniformMatrix4x3fv;




extern int GLAD_GL_VERSION_3_0;
typedef void (__attribute__((__stdcall__)) * PFNGLCOLORMASKIPROC)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
extern PFNGLCOLORMASKIPROC glad_glColorMaski;

typedef void (__attribute__((__stdcall__)) * PFNGLGETBOOLEANI_VPROC)(GLenum target, GLuint index, GLboolean *data);
extern PFNGLGETBOOLEANI_VPROC glad_glGetBooleani_v;

typedef void (__attribute__((__stdcall__)) * PFNGLGETINTEGERI_VPROC)(GLenum target, GLuint index, GLint *data);
extern PFNGLGETINTEGERI_VPROC glad_glGetIntegeri_v;

typedef void (__attribute__((__stdcall__)) * PFNGLENABLEIPROC)(GLenum target, GLuint index);
extern PFNGLENABLEIPROC glad_glEnablei;

typedef void (__attribute__((__stdcall__)) * PFNGLDISABLEIPROC)(GLenum target, GLuint index);
extern PFNGLDISABLEIPROC glad_glDisablei;

typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISENABLEDIPROC)(GLenum target, GLuint index);
extern PFNGLISENABLEDIPROC glad_glIsEnabledi;

typedef void (__attribute__((__stdcall__)) * PFNGLBEGINTRANSFORMFEEDBACKPROC)(GLenum primitiveMode);
extern PFNGLBEGINTRANSFORMFEEDBACKPROC glad_glBeginTransformFeedback;

typedef void (__attribute__((__stdcall__)) * PFNGLENDTRANSFORMFEEDBACKPROC)();
extern PFNGLENDTRANSFORMFEEDBACKPROC glad_glEndTransformFeedback;

typedef void (__attribute__((__stdcall__)) * PFNGLBINDBUFFERRANGEPROC)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
extern PFNGLBINDBUFFERRANGEPROC glad_glBindBufferRange;

typedef void (__attribute__((__stdcall__)) * PFNGLBINDBUFFERBASEPROC)(GLenum target, GLuint index, GLuint buffer);
extern PFNGLBINDBUFFERBASEPROC glad_glBindBufferBase;

typedef void (__attribute__((__stdcall__)) * PFNGLTRANSFORMFEEDBACKVARYINGSPROC)(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
extern PFNGLTRANSFORMFEEDBACKVARYINGSPROC glad_glTransformFeedbackVaryings;

typedef void (__attribute__((__stdcall__)) * PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
extern PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glad_glGetTransformFeedbackVarying;

typedef void (__attribute__((__stdcall__)) * PFNGLCLAMPCOLORPROC)(GLenum target, GLenum clamp);
extern PFNGLCLAMPCOLORPROC glad_glClampColor;

typedef void (__attribute__((__stdcall__)) * PFNGLBEGINCONDITIONALRENDERPROC)(GLuint id, GLenum mode);
extern PFNGLBEGINCONDITIONALRENDERPROC glad_glBeginConditionalRender;

typedef void (__attribute__((__stdcall__)) * PFNGLENDCONDITIONALRENDERPROC)();
extern PFNGLENDCONDITIONALRENDERPROC glad_glEndConditionalRender;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBIPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
extern PFNGLVERTEXATTRIBIPOINTERPROC glad_glVertexAttribIPointer;

typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBIIVPROC)(GLuint index, GLenum pname, GLint *params);
extern PFNGLGETVERTEXATTRIBIIVPROC glad_glGetVertexAttribIiv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBIUIVPROC)(GLuint index, GLenum pname, GLuint *params);
extern PFNGLGETVERTEXATTRIBIUIVPROC glad_glGetVertexAttribIuiv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI1IPROC)(GLuint index, GLint x);
extern PFNGLVERTEXATTRIBI1IPROC glad_glVertexAttribI1i;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI2IPROC)(GLuint index, GLint x, GLint y);
extern PFNGLVERTEXATTRIBI2IPROC glad_glVertexAttribI2i;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI3IPROC)(GLuint index, GLint x, GLint y, GLint z);
extern PFNGLVERTEXATTRIBI3IPROC glad_glVertexAttribI3i;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI4IPROC)(GLuint index, GLint x, GLint y, GLint z, GLint w);
extern PFNGLVERTEXATTRIBI4IPROC glad_glVertexAttribI4i;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI1UIPROC)(GLuint index, GLuint x);
extern PFNGLVERTEXATTRIBI1UIPROC glad_glVertexAttribI1ui;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI2UIPROC)(GLuint index, GLuint x, GLuint y);
extern PFNGLVERTEXATTRIBI2UIPROC glad_glVertexAttribI2ui;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI3UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z);
extern PFNGLVERTEXATTRIBI3UIPROC glad_glVertexAttribI3ui;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI4UIPROC)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
extern PFNGLVERTEXATTRIBI4UIPROC glad_glVertexAttribI4ui;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI1IVPROC)(GLuint index, const GLint *v);
extern PFNGLVERTEXATTRIBI1IVPROC glad_glVertexAttribI1iv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI2IVPROC)(GLuint index, const GLint *v);
extern PFNGLVERTEXATTRIBI2IVPROC glad_glVertexAttribI2iv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI3IVPROC)(GLuint index, const GLint *v);
extern PFNGLVERTEXATTRIBI3IVPROC glad_glVertexAttribI3iv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI4IVPROC)(GLuint index, const GLint *v);
extern PFNGLVERTEXATTRIBI4IVPROC glad_glVertexAttribI4iv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI1UIVPROC)(GLuint index, const GLuint *v);
extern PFNGLVERTEXATTRIBI1UIVPROC glad_glVertexAttribI1uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI2UIVPROC)(GLuint index, const GLuint *v);
extern PFNGLVERTEXATTRIBI2UIVPROC glad_glVertexAttribI2uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI3UIVPROC)(GLuint index, const GLuint *v);
extern PFNGLVERTEXATTRIBI3UIVPROC glad_glVertexAttribI3uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI4UIVPROC)(GLuint index, const GLuint *v);
extern PFNGLVERTEXATTRIBI4UIVPROC glad_glVertexAttribI4uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI4BVPROC)(GLuint index, const GLbyte *v);
extern PFNGLVERTEXATTRIBI4BVPROC glad_glVertexAttribI4bv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI4SVPROC)(GLuint index, const GLshort *v);
extern PFNGLVERTEXATTRIBI4SVPROC glad_glVertexAttribI4sv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI4UBVPROC)(GLuint index, const GLubyte *v);
extern PFNGLVERTEXATTRIBI4UBVPROC glad_glVertexAttribI4ubv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBI4USVPROC)(GLuint index, const GLushort *v);
extern PFNGLVERTEXATTRIBI4USVPROC glad_glVertexAttribI4usv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETUNIFORMUIVPROC)(GLuint program, GLint location, GLuint *params);
extern PFNGLGETUNIFORMUIVPROC glad_glGetUniformuiv;

typedef void (__attribute__((__stdcall__)) * PFNGLBINDFRAGDATALOCATIONPROC)(GLuint program, GLuint color, const GLchar *name);
extern PFNGLBINDFRAGDATALOCATIONPROC glad_glBindFragDataLocation;

typedef GLint (__attribute__((__stdcall__)) * PFNGLGETFRAGDATALOCATIONPROC)(GLuint program, const GLchar *name);
extern PFNGLGETFRAGDATALOCATIONPROC glad_glGetFragDataLocation;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1UIPROC)(GLint location, GLuint v0);
extern PFNGLUNIFORM1UIPROC glad_glUniform1ui;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2UIPROC)(GLint location, GLuint v0, GLuint v1);
extern PFNGLUNIFORM2UIPROC glad_glUniform2ui;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2);
extern PFNGLUNIFORM3UIPROC glad_glUniform3ui;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4UIPROC)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
extern PFNGLUNIFORM4UIPROC glad_glUniform4ui;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1UIVPROC)(GLint location, GLsizei count, const GLuint *value);
extern PFNGLUNIFORM1UIVPROC glad_glUniform1uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2UIVPROC)(GLint location, GLsizei count, const GLuint *value);
extern PFNGLUNIFORM2UIVPROC glad_glUniform2uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3UIVPROC)(GLint location, GLsizei count, const GLuint *value);
extern PFNGLUNIFORM3UIVPROC glad_glUniform3uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4UIVPROC)(GLint location, GLsizei count, const GLuint *value);
extern PFNGLUNIFORM4UIVPROC glad_glUniform4uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, const GLint *params);
extern PFNGLTEXPARAMETERIIVPROC glad_glTexParameterIiv;

typedef void (__attribute__((__stdcall__)) * PFNGLTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, const GLuint *params);
extern PFNGLTEXPARAMETERIUIVPROC glad_glTexParameterIuiv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXPARAMETERIIVPROC)(GLenum target, GLenum pname, GLint *params);
extern PFNGLGETTEXPARAMETERIIVPROC glad_glGetTexParameterIiv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETTEXPARAMETERIUIVPROC)(GLenum target, GLenum pname, GLuint *params);
extern PFNGLGETTEXPARAMETERIUIVPROC glad_glGetTexParameterIuiv;

typedef void (__attribute__((__stdcall__)) * PFNGLCLEARBUFFERIVPROC)(GLenum buffer, GLint drawbuffer, const GLint *value);
extern PFNGLCLEARBUFFERIVPROC glad_glClearBufferiv;

typedef void (__attribute__((__stdcall__)) * PFNGLCLEARBUFFERUIVPROC)(GLenum buffer, GLint drawbuffer, const GLuint *value);
extern PFNGLCLEARBUFFERUIVPROC glad_glClearBufferuiv;

typedef void (__attribute__((__stdcall__)) * PFNGLCLEARBUFFERFVPROC)(GLenum buffer, GLint drawbuffer, const GLfloat *value);
extern PFNGLCLEARBUFFERFVPROC glad_glClearBufferfv;

typedef void (__attribute__((__stdcall__)) * PFNGLCLEARBUFFERFIPROC)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
extern PFNGLCLEARBUFFERFIPROC glad_glClearBufferfi;

typedef const GLubyte * (__attribute__((__stdcall__)) * PFNGLGETSTRINGIPROC)(GLenum name, GLuint index);
extern PFNGLGETSTRINGIPROC glad_glGetStringi;

typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISRENDERBUFFERPROC)(GLuint renderbuffer);
extern PFNGLISRENDERBUFFERPROC glad_glIsRenderbuffer;

typedef void (__attribute__((__stdcall__)) * PFNGLBINDRENDERBUFFERPROC)(GLenum target, GLuint renderbuffer);
extern PFNGLBINDRENDERBUFFERPROC glad_glBindRenderbuffer;

typedef void (__attribute__((__stdcall__)) * PFNGLDELETERENDERBUFFERSPROC)(GLsizei n, const GLuint *renderbuffers);
extern PFNGLDELETERENDERBUFFERSPROC glad_glDeleteRenderbuffers;

typedef void (__attribute__((__stdcall__)) * PFNGLGENRENDERBUFFERSPROC)(GLsizei n, GLuint *renderbuffers);
extern PFNGLGENRENDERBUFFERSPROC glad_glGenRenderbuffers;

typedef void (__attribute__((__stdcall__)) * PFNGLRENDERBUFFERSTORAGEPROC)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
extern PFNGLRENDERBUFFERSTORAGEPROC glad_glRenderbufferStorage;

typedef void (__attribute__((__stdcall__)) * PFNGLGETRENDERBUFFERPARAMETERIVPROC)(GLenum target, GLenum pname, GLint *params);
extern PFNGLGETRENDERBUFFERPARAMETERIVPROC glad_glGetRenderbufferParameteriv;

typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISFRAMEBUFFERPROC)(GLuint framebuffer);
extern PFNGLISFRAMEBUFFERPROC glad_glIsFramebuffer;

typedef void (__attribute__((__stdcall__)) * PFNGLBINDFRAMEBUFFERPROC)(GLenum target, GLuint framebuffer);
extern PFNGLBINDFRAMEBUFFERPROC glad_glBindFramebuffer;

typedef void (__attribute__((__stdcall__)) * PFNGLDELETEFRAMEBUFFERSPROC)(GLsizei n, const GLuint *framebuffers);
extern PFNGLDELETEFRAMEBUFFERSPROC glad_glDeleteFramebuffers;

typedef void (__attribute__((__stdcall__)) * PFNGLGENFRAMEBUFFERSPROC)(GLsizei n, GLuint *framebuffers);
extern PFNGLGENFRAMEBUFFERSPROC glad_glGenFramebuffers;

typedef GLenum (__attribute__((__stdcall__)) * PFNGLCHECKFRAMEBUFFERSTATUSPROC)(GLenum target);
extern PFNGLCHECKFRAMEBUFFERSTATUSPROC glad_glCheckFramebufferStatus;

typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERTEXTURE1DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
extern PFNGLFRAMEBUFFERTEXTURE1DPROC glad_glFramebufferTexture1D;

typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERTEXTURE2DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
extern PFNGLFRAMEBUFFERTEXTURE2DPROC glad_glFramebufferTexture2D;

typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERTEXTURE3DPROC)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
extern PFNGLFRAMEBUFFERTEXTURE3DPROC glad_glFramebufferTexture3D;

typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERRENDERBUFFERPROC)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
extern PFNGLFRAMEBUFFERRENDERBUFFERPROC glad_glFramebufferRenderbuffer;

typedef void (__attribute__((__stdcall__)) * PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)(GLenum target, GLenum attachment, GLenum pname, GLint *params);
extern PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glad_glGetFramebufferAttachmentParameteriv;

typedef void (__attribute__((__stdcall__)) * PFNGLGENERATEMIPMAPPROC)(GLenum target);
extern PFNGLGENERATEMIPMAPPROC glad_glGenerateMipmap;

typedef void (__attribute__((__stdcall__)) * PFNGLBLITFRAMEBUFFERPROC)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
extern PFNGLBLITFRAMEBUFFERPROC glad_glBlitFramebuffer;

typedef void (__attribute__((__stdcall__)) * PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
extern PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glad_glRenderbufferStorageMultisample;

typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERTEXTURELAYERPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
extern PFNGLFRAMEBUFFERTEXTURELAYERPROC glad_glFramebufferTextureLayer;

typedef void * (__attribute__((__stdcall__)) * PFNGLMAPBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
extern PFNGLMAPBUFFERRANGEPROC glad_glMapBufferRange;

typedef void (__attribute__((__stdcall__)) * PFNGLFLUSHMAPPEDBUFFERRANGEPROC)(GLenum target, GLintptr offset, GLsizeiptr length);
extern PFNGLFLUSHMAPPEDBUFFERRANGEPROC glad_glFlushMappedBufferRange;

typedef void (__attribute__((__stdcall__)) * PFNGLBINDVERTEXARRAYPROC)(GLuint array);
extern PFNGLBINDVERTEXARRAYPROC glad_glBindVertexArray;

typedef void (__attribute__((__stdcall__)) * PFNGLDELETEVERTEXARRAYSPROC)(GLsizei n, const GLuint *arrays);
extern PFNGLDELETEVERTEXARRAYSPROC glad_glDeleteVertexArrays;

typedef void (__attribute__((__stdcall__)) * PFNGLGENVERTEXARRAYSPROC)(GLsizei n, GLuint *arrays);
extern PFNGLGENVERTEXARRAYSPROC glad_glGenVertexArrays;

typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISVERTEXARRAYPROC)(GLuint array);
extern PFNGLISVERTEXARRAYPROC glad_glIsVertexArray;




extern int GLAD_GL_VERSION_3_1;
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWARRAYSINSTANCEDPROC)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
extern PFNGLDRAWARRAYSINSTANCEDPROC glad_glDrawArraysInstanced;

typedef void (__attribute__((__stdcall__)) * PFNGLDRAWELEMENTSINSTANCEDPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
extern PFNGLDRAWELEMENTSINSTANCEDPROC glad_glDrawElementsInstanced;

typedef void (__attribute__((__stdcall__)) * PFNGLTEXBUFFERPROC)(GLenum target, GLenum internalformat, GLuint buffer);
extern PFNGLTEXBUFFERPROC glad_glTexBuffer;

typedef void (__attribute__((__stdcall__)) * PFNGLPRIMITIVERESTARTINDEXPROC)(GLuint index);
extern PFNGLPRIMITIVERESTARTINDEXPROC glad_glPrimitiveRestartIndex;

typedef void (__attribute__((__stdcall__)) * PFNGLCOPYBUFFERSUBDATAPROC)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
extern PFNGLCOPYBUFFERSUBDATAPROC glad_glCopyBufferSubData;

typedef void (__attribute__((__stdcall__)) * PFNGLGETUNIFORMINDICESPROC)(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
extern PFNGLGETUNIFORMINDICESPROC glad_glGetUniformIndices;

typedef void (__attribute__((__stdcall__)) * PFNGLGETACTIVEUNIFORMSIVPROC)(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
extern PFNGLGETACTIVEUNIFORMSIVPROC glad_glGetActiveUniformsiv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETACTIVEUNIFORMNAMEPROC)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
extern PFNGLGETACTIVEUNIFORMNAMEPROC glad_glGetActiveUniformName;

typedef GLuint (__attribute__((__stdcall__)) * PFNGLGETUNIFORMBLOCKINDEXPROC)(GLuint program, const GLchar *uniformBlockName);
extern PFNGLGETUNIFORMBLOCKINDEXPROC glad_glGetUniformBlockIndex;

typedef void (__attribute__((__stdcall__)) * PFNGLGETACTIVEUNIFORMBLOCKIVPROC)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
extern PFNGLGETACTIVEUNIFORMBLOCKIVPROC glad_glGetActiveUniformBlockiv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
extern PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glad_glGetActiveUniformBlockName;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMBLOCKBINDINGPROC)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
extern PFNGLUNIFORMBLOCKBINDINGPROC glad_glUniformBlockBinding;




extern int GLAD_GL_VERSION_3_2;
typedef void (__attribute__((__stdcall__)) * PFNGLDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
extern PFNGLDRAWELEMENTSBASEVERTEXPROC glad_glDrawElementsBaseVertex;

typedef void (__attribute__((__stdcall__)) * PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
extern PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glad_glDrawRangeElementsBaseVertex;

typedef void (__attribute__((__stdcall__)) * PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
extern PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glad_glDrawElementsInstancedBaseVertex;

typedef void (__attribute__((__stdcall__)) * PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
extern PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glad_glMultiDrawElementsBaseVertex;

typedef void (__attribute__((__stdcall__)) * PFNGLPROVOKINGVERTEXPROC)(GLenum mode);
extern PFNGLPROVOKINGVERTEXPROC glad_glProvokingVertex;

typedef GLsync (__attribute__((__stdcall__)) * PFNGLFENCESYNCPROC)(GLenum condition, GLbitfield flags);
extern PFNGLFENCESYNCPROC glad_glFenceSync;

typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISSYNCPROC)(GLsync sync);
extern PFNGLISSYNCPROC glad_glIsSync;

typedef void (__attribute__((__stdcall__)) * PFNGLDELETESYNCPROC)(GLsync sync);
extern PFNGLDELETESYNCPROC glad_glDeleteSync;

typedef GLenum (__attribute__((__stdcall__)) * PFNGLCLIENTWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
extern PFNGLCLIENTWAITSYNCPROC glad_glClientWaitSync;

typedef void (__attribute__((__stdcall__)) * PFNGLWAITSYNCPROC)(GLsync sync, GLbitfield flags, GLuint64 timeout);
extern PFNGLWAITSYNCPROC glad_glWaitSync;

typedef void (__attribute__((__stdcall__)) * PFNGLGETINTEGER64VPROC)(GLenum pname, GLint64 *data);
extern PFNGLGETINTEGER64VPROC glad_glGetInteger64v;

typedef void (__attribute__((__stdcall__)) * PFNGLGETSYNCIVPROC)(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
extern PFNGLGETSYNCIVPROC glad_glGetSynciv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETINTEGER64I_VPROC)(GLenum target, GLuint index, GLint64 *data);
extern PFNGLGETINTEGER64I_VPROC glad_glGetInteger64i_v;

typedef void (__attribute__((__stdcall__)) * PFNGLGETBUFFERPARAMETERI64VPROC)(GLenum target, GLenum pname, GLint64 *params);
extern PFNGLGETBUFFERPARAMETERI64VPROC glad_glGetBufferParameteri64v;

typedef void (__attribute__((__stdcall__)) * PFNGLFRAMEBUFFERTEXTUREPROC)(GLenum target, GLenum attachment, GLuint texture, GLint level);
extern PFNGLFRAMEBUFFERTEXTUREPROC glad_glFramebufferTexture;

typedef void (__attribute__((__stdcall__)) * PFNGLTEXIMAGE2DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
extern PFNGLTEXIMAGE2DMULTISAMPLEPROC glad_glTexImage2DMultisample;

typedef void (__attribute__((__stdcall__)) * PFNGLTEXIMAGE3DMULTISAMPLEPROC)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
extern PFNGLTEXIMAGE3DMULTISAMPLEPROC glad_glTexImage3DMultisample;

typedef void (__attribute__((__stdcall__)) * PFNGLGETMULTISAMPLEFVPROC)(GLenum pname, GLuint index, GLfloat *val);
extern PFNGLGETMULTISAMPLEFVPROC glad_glGetMultisamplefv;

typedef void (__attribute__((__stdcall__)) * PFNGLSAMPLEMASKIPROC)(GLuint maskNumber, GLbitfield mask);
extern PFNGLSAMPLEMASKIPROC glad_glSampleMaski;




extern int GLAD_GL_VERSION_3_3;
typedef void (__attribute__((__stdcall__)) * PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
extern PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glad_glBindFragDataLocationIndexed;

typedef GLint (__attribute__((__stdcall__)) * PFNGLGETFRAGDATAINDEXPROC)(GLuint program, const GLchar *name);
extern PFNGLGETFRAGDATAINDEXPROC glad_glGetFragDataIndex;

typedef void (__attribute__((__stdcall__)) * PFNGLGENSAMPLERSPROC)(GLsizei count, GLuint *samplers);
extern PFNGLGENSAMPLERSPROC glad_glGenSamplers;

typedef void (__attribute__((__stdcall__)) * PFNGLDELETESAMPLERSPROC)(GLsizei count, const GLuint *samplers);
extern PFNGLDELETESAMPLERSPROC glad_glDeleteSamplers;

typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISSAMPLERPROC)(GLuint sampler);
extern PFNGLISSAMPLERPROC glad_glIsSampler;

typedef void (__attribute__((__stdcall__)) * PFNGLBINDSAMPLERPROC)(GLuint unit, GLuint sampler);
extern PFNGLBINDSAMPLERPROC glad_glBindSampler;

typedef void (__attribute__((__stdcall__)) * PFNGLSAMPLERPARAMETERIPROC)(GLuint sampler, GLenum pname, GLint param);
extern PFNGLSAMPLERPARAMETERIPROC glad_glSamplerParameteri;

typedef void (__attribute__((__stdcall__)) * PFNGLSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, const GLint *param);
extern PFNGLSAMPLERPARAMETERIVPROC glad_glSamplerParameteriv;

typedef void (__attribute__((__stdcall__)) * PFNGLSAMPLERPARAMETERFPROC)(GLuint sampler, GLenum pname, GLfloat param);
extern PFNGLSAMPLERPARAMETERFPROC glad_glSamplerParameterf;

typedef void (__attribute__((__stdcall__)) * PFNGLSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, const GLfloat *param);
extern PFNGLSAMPLERPARAMETERFVPROC glad_glSamplerParameterfv;

typedef void (__attribute__((__stdcall__)) * PFNGLSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, const GLint *param);
extern PFNGLSAMPLERPARAMETERIIVPROC glad_glSamplerParameterIiv;

typedef void (__attribute__((__stdcall__)) * PFNGLSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, const GLuint *param);
extern PFNGLSAMPLERPARAMETERIUIVPROC glad_glSamplerParameterIuiv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETSAMPLERPARAMETERIVPROC)(GLuint sampler, GLenum pname, GLint *params);
extern PFNGLGETSAMPLERPARAMETERIVPROC glad_glGetSamplerParameteriv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETSAMPLERPARAMETERIIVPROC)(GLuint sampler, GLenum pname, GLint *params);
extern PFNGLGETSAMPLERPARAMETERIIVPROC glad_glGetSamplerParameterIiv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETSAMPLERPARAMETERFVPROC)(GLuint sampler, GLenum pname, GLfloat *params);
extern PFNGLGETSAMPLERPARAMETERFVPROC glad_glGetSamplerParameterfv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETSAMPLERPARAMETERIUIVPROC)(GLuint sampler, GLenum pname, GLuint *params);
extern PFNGLGETSAMPLERPARAMETERIUIVPROC glad_glGetSamplerParameterIuiv;

typedef void (__attribute__((__stdcall__)) * PFNGLQUERYCOUNTERPROC)(GLuint id, GLenum target);
extern PFNGLQUERYCOUNTERPROC glad_glQueryCounter;

typedef void (__attribute__((__stdcall__)) * PFNGLGETQUERYOBJECTI64VPROC)(GLuint id, GLenum pname, GLint64 *params);
extern PFNGLGETQUERYOBJECTI64VPROC glad_glGetQueryObjecti64v;

typedef void (__attribute__((__stdcall__)) * PFNGLGETQUERYOBJECTUI64VPROC)(GLuint id, GLenum pname, GLuint64 *params);
extern PFNGLGETQUERYOBJECTUI64VPROC glad_glGetQueryObjectui64v;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBDIVISORPROC)(GLuint index, GLuint divisor);
extern PFNGLVERTEXATTRIBDIVISORPROC glad_glVertexAttribDivisor;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBP1UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
extern PFNGLVERTEXATTRIBP1UIPROC glad_glVertexAttribP1ui;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBP1UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
extern PFNGLVERTEXATTRIBP1UIVPROC glad_glVertexAttribP1uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBP2UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
extern PFNGLVERTEXATTRIBP2UIPROC glad_glVertexAttribP2ui;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBP2UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
extern PFNGLVERTEXATTRIBP2UIVPROC glad_glVertexAttribP2uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBP3UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
extern PFNGLVERTEXATTRIBP3UIPROC glad_glVertexAttribP3ui;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBP3UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
extern PFNGLVERTEXATTRIBP3UIVPROC glad_glVertexAttribP3uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBP4UIPROC)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
extern PFNGLVERTEXATTRIBP4UIPROC glad_glVertexAttribP4ui;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBP4UIVPROC)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
extern PFNGLVERTEXATTRIBP4UIVPROC glad_glVertexAttribP4uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXP2UIPROC)(GLenum type, GLuint value);
extern PFNGLVERTEXP2UIPROC glad_glVertexP2ui;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXP2UIVPROC)(GLenum type, const GLuint *value);
extern PFNGLVERTEXP2UIVPROC glad_glVertexP2uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXP3UIPROC)(GLenum type, GLuint value);
extern PFNGLVERTEXP3UIPROC glad_glVertexP3ui;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXP3UIVPROC)(GLenum type, const GLuint *value);
extern PFNGLVERTEXP3UIVPROC glad_glVertexP3uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXP4UIPROC)(GLenum type, GLuint value);
extern PFNGLVERTEXP4UIPROC glad_glVertexP4ui;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXP4UIVPROC)(GLenum type, const GLuint *value);
extern PFNGLVERTEXP4UIVPROC glad_glVertexP4uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORDP1UIPROC)(GLenum type, GLuint coords);
extern PFNGLTEXCOORDP1UIPROC glad_glTexCoordP1ui;

typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORDP1UIVPROC)(GLenum type, const GLuint *coords);
extern PFNGLTEXCOORDP1UIVPROC glad_glTexCoordP1uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORDP2UIPROC)(GLenum type, GLuint coords);
extern PFNGLTEXCOORDP2UIPROC glad_glTexCoordP2ui;

typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORDP2UIVPROC)(GLenum type, const GLuint *coords);
extern PFNGLTEXCOORDP2UIVPROC glad_glTexCoordP2uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORDP3UIPROC)(GLenum type, GLuint coords);
extern PFNGLTEXCOORDP3UIPROC glad_glTexCoordP3ui;

typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORDP3UIVPROC)(GLenum type, const GLuint *coords);
extern PFNGLTEXCOORDP3UIVPROC glad_glTexCoordP3uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORDP4UIPROC)(GLenum type, GLuint coords);
extern PFNGLTEXCOORDP4UIPROC glad_glTexCoordP4ui;

typedef void (__attribute__((__stdcall__)) * PFNGLTEXCOORDP4UIVPROC)(GLenum type, const GLuint *coords);
extern PFNGLTEXCOORDP4UIVPROC glad_glTexCoordP4uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORDP1UIPROC)(GLenum texture, GLenum type, GLuint coords);
extern PFNGLMULTITEXCOORDP1UIPROC glad_glMultiTexCoordP1ui;

typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORDP1UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
extern PFNGLMULTITEXCOORDP1UIVPROC glad_glMultiTexCoordP1uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORDP2UIPROC)(GLenum texture, GLenum type, GLuint coords);
extern PFNGLMULTITEXCOORDP2UIPROC glad_glMultiTexCoordP2ui;

typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORDP2UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
extern PFNGLMULTITEXCOORDP2UIVPROC glad_glMultiTexCoordP2uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORDP3UIPROC)(GLenum texture, GLenum type, GLuint coords);
extern PFNGLMULTITEXCOORDP3UIPROC glad_glMultiTexCoordP3ui;

typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORDP3UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
extern PFNGLMULTITEXCOORDP3UIVPROC glad_glMultiTexCoordP3uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORDP4UIPROC)(GLenum texture, GLenum type, GLuint coords);
extern PFNGLMULTITEXCOORDP4UIPROC glad_glMultiTexCoordP4ui;

typedef void (__attribute__((__stdcall__)) * PFNGLMULTITEXCOORDP4UIVPROC)(GLenum texture, GLenum type, const GLuint *coords);
extern PFNGLMULTITEXCOORDP4UIVPROC glad_glMultiTexCoordP4uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLNORMALP3UIPROC)(GLenum type, GLuint coords);
extern PFNGLNORMALP3UIPROC glad_glNormalP3ui;

typedef void (__attribute__((__stdcall__)) * PFNGLNORMALP3UIVPROC)(GLenum type, const GLuint *coords);
extern PFNGLNORMALP3UIVPROC glad_glNormalP3uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLCOLORP3UIPROC)(GLenum type, GLuint color);
extern PFNGLCOLORP3UIPROC glad_glColorP3ui;

typedef void (__attribute__((__stdcall__)) * PFNGLCOLORP3UIVPROC)(GLenum type, const GLuint *color);
extern PFNGLCOLORP3UIVPROC glad_glColorP3uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLCOLORP4UIPROC)(GLenum type, GLuint color);
extern PFNGLCOLORP4UIPROC glad_glColorP4ui;

typedef void (__attribute__((__stdcall__)) * PFNGLCOLORP4UIVPROC)(GLenum type, const GLuint *color);
extern PFNGLCOLORP4UIVPROC glad_glColorP4uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLORP3UIPROC)(GLenum type, GLuint color);
extern PFNGLSECONDARYCOLORP3UIPROC glad_glSecondaryColorP3ui;

typedef void (__attribute__((__stdcall__)) * PFNGLSECONDARYCOLORP3UIVPROC)(GLenum type, const GLuint *color);
extern PFNGLSECONDARYCOLORP3UIVPROC glad_glSecondaryColorP3uiv;




extern int GLAD_GL_VERSION_4_0;
typedef void (__attribute__((__stdcall__)) * PFNGLMINSAMPLESHADINGPROC)(GLfloat value);
extern PFNGLMINSAMPLESHADINGPROC glad_glMinSampleShading;

typedef void (__attribute__((__stdcall__)) * PFNGLBLENDEQUATIONIPROC)(GLuint buf, GLenum mode);
extern PFNGLBLENDEQUATIONIPROC glad_glBlendEquationi;

typedef void (__attribute__((__stdcall__)) * PFNGLBLENDEQUATIONSEPARATEIPROC)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
extern PFNGLBLENDEQUATIONSEPARATEIPROC glad_glBlendEquationSeparatei;

typedef void (__attribute__((__stdcall__)) * PFNGLBLENDFUNCIPROC)(GLuint buf, GLenum src, GLenum dst);
extern PFNGLBLENDFUNCIPROC glad_glBlendFunci;

typedef void (__attribute__((__stdcall__)) * PFNGLBLENDFUNCSEPARATEIPROC)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
extern PFNGLBLENDFUNCSEPARATEIPROC glad_glBlendFuncSeparatei;

typedef void (__attribute__((__stdcall__)) * PFNGLDRAWARRAYSINDIRECTPROC)(GLenum mode, const void *indirect);
extern PFNGLDRAWARRAYSINDIRECTPROC glad_glDrawArraysIndirect;

typedef void (__attribute__((__stdcall__)) * PFNGLDRAWELEMENTSINDIRECTPROC)(GLenum mode, GLenum type, const void *indirect);
extern PFNGLDRAWELEMENTSINDIRECTPROC glad_glDrawElementsIndirect;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1DPROC)(GLint location, GLdouble x);
extern PFNGLUNIFORM1DPROC glad_glUniform1d;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2DPROC)(GLint location, GLdouble x, GLdouble y);
extern PFNGLUNIFORM2DPROC glad_glUniform2d;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z);
extern PFNGLUNIFORM3DPROC glad_glUniform3d;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4DPROC)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern PFNGLUNIFORM4DPROC glad_glUniform4d;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM1DVPROC)(GLint location, GLsizei count, const GLdouble *value);
extern PFNGLUNIFORM1DVPROC glad_glUniform1dv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM2DVPROC)(GLint location, GLsizei count, const GLdouble *value);
extern PFNGLUNIFORM2DVPROC glad_glUniform2dv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM3DVPROC)(GLint location, GLsizei count, const GLdouble *value);
extern PFNGLUNIFORM3DVPROC glad_glUniform3dv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORM4DVPROC)(GLint location, GLsizei count, const GLdouble *value);
extern PFNGLUNIFORM4DVPROC glad_glUniform4dv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX2DVPROC glad_glUniformMatrix2dv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX3DVPROC glad_glUniformMatrix3dv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX4DVPROC glad_glUniformMatrix4dv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX2X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX2X3DVPROC glad_glUniformMatrix2x3dv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX2X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX2X4DVPROC glad_glUniformMatrix2x4dv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX3X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX3X2DVPROC glad_glUniformMatrix3x2dv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX3X4DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX3X4DVPROC glad_glUniformMatrix3x4dv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX4X2DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX4X2DVPROC glad_glUniformMatrix4x2dv;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMMATRIX4X3DVPROC)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLUNIFORMMATRIX4X3DVPROC glad_glUniformMatrix4x3dv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETUNIFORMDVPROC)(GLuint program, GLint location, GLdouble *params);
extern PFNGLGETUNIFORMDVPROC glad_glGetUniformdv;

typedef GLint (__attribute__((__stdcall__)) * PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)(GLuint program, GLenum shadertype, const GLchar *name);
extern PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glad_glGetSubroutineUniformLocation;

typedef GLuint (__attribute__((__stdcall__)) * PFNGLGETSUBROUTINEINDEXPROC)(GLuint program, GLenum shadertype, const GLchar *name);
extern PFNGLGETSUBROUTINEINDEXPROC glad_glGetSubroutineIndex;

typedef void (__attribute__((__stdcall__)) * PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
extern PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glad_glGetActiveSubroutineUniformiv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
extern PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glad_glGetActiveSubroutineUniformName;

typedef void (__attribute__((__stdcall__)) * PFNGLGETACTIVESUBROUTINENAMEPROC)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
extern PFNGLGETACTIVESUBROUTINENAMEPROC glad_glGetActiveSubroutineName;

typedef void (__attribute__((__stdcall__)) * PFNGLUNIFORMSUBROUTINESUIVPROC)(GLenum shadertype, GLsizei count, const GLuint *indices);
extern PFNGLUNIFORMSUBROUTINESUIVPROC glad_glUniformSubroutinesuiv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETUNIFORMSUBROUTINEUIVPROC)(GLenum shadertype, GLint location, GLuint *params);
extern PFNGLGETUNIFORMSUBROUTINEUIVPROC glad_glGetUniformSubroutineuiv;

typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMSTAGEIVPROC)(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
extern PFNGLGETPROGRAMSTAGEIVPROC glad_glGetProgramStageiv;

typedef void (__attribute__((__stdcall__)) * PFNGLPATCHPARAMETERIPROC)(GLenum pname, GLint value);
extern PFNGLPATCHPARAMETERIPROC glad_glPatchParameteri;

typedef void (__attribute__((__stdcall__)) * PFNGLPATCHPARAMETERFVPROC)(GLenum pname, const GLfloat *values);
extern PFNGLPATCHPARAMETERFVPROC glad_glPatchParameterfv;

typedef void (__attribute__((__stdcall__)) * PFNGLBINDTRANSFORMFEEDBACKPROC)(GLenum target, GLuint id);
extern PFNGLBINDTRANSFORMFEEDBACKPROC glad_glBindTransformFeedback;

typedef void (__attribute__((__stdcall__)) * PFNGLDELETETRANSFORMFEEDBACKSPROC)(GLsizei n, const GLuint *ids);
extern PFNGLDELETETRANSFORMFEEDBACKSPROC glad_glDeleteTransformFeedbacks;

typedef void (__attribute__((__stdcall__)) * PFNGLGENTRANSFORMFEEDBACKSPROC)(GLsizei n, GLuint *ids);
extern PFNGLGENTRANSFORMFEEDBACKSPROC glad_glGenTransformFeedbacks;

typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISTRANSFORMFEEDBACKPROC)(GLuint id);
extern PFNGLISTRANSFORMFEEDBACKPROC glad_glIsTransformFeedback;

typedef void (__attribute__((__stdcall__)) * PFNGLPAUSETRANSFORMFEEDBACKPROC)();
extern PFNGLPAUSETRANSFORMFEEDBACKPROC glad_glPauseTransformFeedback;

typedef void (__attribute__((__stdcall__)) * PFNGLRESUMETRANSFORMFEEDBACKPROC)();
extern PFNGLRESUMETRANSFORMFEEDBACKPROC glad_glResumeTransformFeedback;

typedef void (__attribute__((__stdcall__)) * PFNGLDRAWTRANSFORMFEEDBACKPROC)(GLenum mode, GLuint id);
extern PFNGLDRAWTRANSFORMFEEDBACKPROC glad_glDrawTransformFeedback;

typedef void (__attribute__((__stdcall__)) * PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)(GLenum mode, GLuint id, GLuint stream);
extern PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glad_glDrawTransformFeedbackStream;

typedef void (__attribute__((__stdcall__)) * PFNGLBEGINQUERYINDEXEDPROC)(GLenum target, GLuint index, GLuint id);
extern PFNGLBEGINQUERYINDEXEDPROC glad_glBeginQueryIndexed;

typedef void (__attribute__((__stdcall__)) * PFNGLENDQUERYINDEXEDPROC)(GLenum target, GLuint index);
extern PFNGLENDQUERYINDEXEDPROC glad_glEndQueryIndexed;

typedef void (__attribute__((__stdcall__)) * PFNGLGETQUERYINDEXEDIVPROC)(GLenum target, GLuint index, GLenum pname, GLint *params);
extern PFNGLGETQUERYINDEXEDIVPROC glad_glGetQueryIndexediv;




extern int GLAD_GL_VERSION_4_1;
typedef void (__attribute__((__stdcall__)) * PFNGLRELEASESHADERCOMPILERPROC)();
extern PFNGLRELEASESHADERCOMPILERPROC glad_glReleaseShaderCompiler;

typedef void (__attribute__((__stdcall__)) * PFNGLSHADERBINARYPROC)(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);
extern PFNGLSHADERBINARYPROC glad_glShaderBinary;

typedef void (__attribute__((__stdcall__)) * PFNGLGETSHADERPRECISIONFORMATPROC)(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
extern PFNGLGETSHADERPRECISIONFORMATPROC glad_glGetShaderPrecisionFormat;

typedef void (__attribute__((__stdcall__)) * PFNGLDEPTHRANGEFPROC)(GLfloat n, GLfloat f);
extern PFNGLDEPTHRANGEFPROC glad_glDepthRangef;

typedef void (__attribute__((__stdcall__)) * PFNGLCLEARDEPTHFPROC)(GLfloat d);
extern PFNGLCLEARDEPTHFPROC glad_glClearDepthf;

typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMBINARYPROC)(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
extern PFNGLGETPROGRAMBINARYPROC glad_glGetProgramBinary;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMBINARYPROC)(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
extern PFNGLPROGRAMBINARYPROC glad_glProgramBinary;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMPARAMETERIPROC)(GLuint program, GLenum pname, GLint value);
extern PFNGLPROGRAMPARAMETERIPROC glad_glProgramParameteri;

typedef void (__attribute__((__stdcall__)) * PFNGLUSEPROGRAMSTAGESPROC)(GLuint pipeline, GLbitfield stages, GLuint program);
extern PFNGLUSEPROGRAMSTAGESPROC glad_glUseProgramStages;

typedef void (__attribute__((__stdcall__)) * PFNGLACTIVESHADERPROGRAMPROC)(GLuint pipeline, GLuint program);
extern PFNGLACTIVESHADERPROGRAMPROC glad_glActiveShaderProgram;

typedef GLuint (__attribute__((__stdcall__)) * PFNGLCREATESHADERPROGRAMVPROC)(GLenum type, GLsizei count, const GLchar *const*strings);
extern PFNGLCREATESHADERPROGRAMVPROC glad_glCreateShaderProgramv;

typedef void (__attribute__((__stdcall__)) * PFNGLBINDPROGRAMPIPELINEPROC)(GLuint pipeline);
extern PFNGLBINDPROGRAMPIPELINEPROC glad_glBindProgramPipeline;

typedef void (__attribute__((__stdcall__)) * PFNGLDELETEPROGRAMPIPELINESPROC)(GLsizei n, const GLuint *pipelines);
extern PFNGLDELETEPROGRAMPIPELINESPROC glad_glDeleteProgramPipelines;

typedef void (__attribute__((__stdcall__)) * PFNGLGENPROGRAMPIPELINESPROC)(GLsizei n, GLuint *pipelines);
extern PFNGLGENPROGRAMPIPELINESPROC glad_glGenProgramPipelines;

typedef GLboolean (__attribute__((__stdcall__)) * PFNGLISPROGRAMPIPELINEPROC)(GLuint pipeline);
extern PFNGLISPROGRAMPIPELINEPROC glad_glIsProgramPipeline;

typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMPIPELINEIVPROC)(GLuint pipeline, GLenum pname, GLint *params);
extern PFNGLGETPROGRAMPIPELINEIVPROC glad_glGetProgramPipelineiv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1IPROC)(GLuint program, GLint location, GLint v0);
extern PFNGLPROGRAMUNIFORM1IPROC glad_glProgramUniform1i;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
extern PFNGLPROGRAMUNIFORM1IVPROC glad_glProgramUniform1iv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1FPROC)(GLuint program, GLint location, GLfloat v0);
extern PFNGLPROGRAMUNIFORM1FPROC glad_glProgramUniform1f;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
extern PFNGLPROGRAMUNIFORM1FVPROC glad_glProgramUniform1fv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1DPROC)(GLuint program, GLint location, GLdouble v0);
extern PFNGLPROGRAMUNIFORM1DPROC glad_glProgramUniform1d;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
extern PFNGLPROGRAMUNIFORM1DVPROC glad_glProgramUniform1dv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1UIPROC)(GLuint program, GLint location, GLuint v0);
extern PFNGLPROGRAMUNIFORM1UIPROC glad_glProgramUniform1ui;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM1UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
extern PFNGLPROGRAMUNIFORM1UIVPROC glad_glProgramUniform1uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2IPROC)(GLuint program, GLint location, GLint v0, GLint v1);
extern PFNGLPROGRAMUNIFORM2IPROC glad_glProgramUniform2i;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
extern PFNGLPROGRAMUNIFORM2IVPROC glad_glProgramUniform2iv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
extern PFNGLPROGRAMUNIFORM2FPROC glad_glProgramUniform2f;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
extern PFNGLPROGRAMUNIFORM2FVPROC glad_glProgramUniform2fv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
extern PFNGLPROGRAMUNIFORM2DPROC glad_glProgramUniform2d;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
extern PFNGLPROGRAMUNIFORM2DVPROC glad_glProgramUniform2dv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1);
extern PFNGLPROGRAMUNIFORM2UIPROC glad_glProgramUniform2ui;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM2UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
extern PFNGLPROGRAMUNIFORM2UIVPROC glad_glProgramUniform2uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
extern PFNGLPROGRAMUNIFORM3IPROC glad_glProgramUniform3i;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
extern PFNGLPROGRAMUNIFORM3IVPROC glad_glProgramUniform3iv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
extern PFNGLPROGRAMUNIFORM3FPROC glad_glProgramUniform3f;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
extern PFNGLPROGRAMUNIFORM3FVPROC glad_glProgramUniform3fv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
extern PFNGLPROGRAMUNIFORM3DPROC glad_glProgramUniform3d;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
extern PFNGLPROGRAMUNIFORM3DVPROC glad_glProgramUniform3dv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
extern PFNGLPROGRAMUNIFORM3UIPROC glad_glProgramUniform3ui;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM3UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
extern PFNGLPROGRAMUNIFORM3UIVPROC glad_glProgramUniform3uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4IPROC)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
extern PFNGLPROGRAMUNIFORM4IPROC glad_glProgramUniform4i;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4IVPROC)(GLuint program, GLint location, GLsizei count, const GLint *value);
extern PFNGLPROGRAMUNIFORM4IVPROC glad_glProgramUniform4iv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4FPROC)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
extern PFNGLPROGRAMUNIFORM4FPROC glad_glProgramUniform4f;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4FVPROC)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
extern PFNGLPROGRAMUNIFORM4FVPROC glad_glProgramUniform4fv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4DPROC)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
extern PFNGLPROGRAMUNIFORM4DPROC glad_glProgramUniform4d;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4DVPROC)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
extern PFNGLPROGRAMUNIFORM4DVPROC glad_glProgramUniform4dv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4UIPROC)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
extern PFNGLPROGRAMUNIFORM4UIPROC glad_glProgramUniform4ui;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORM4UIVPROC)(GLuint program, GLint location, GLsizei count, const GLuint *value);
extern PFNGLPROGRAMUNIFORM4UIVPROC glad_glProgramUniform4uiv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX2FVPROC glad_glProgramUniformMatrix2fv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX3FVPROC glad_glProgramUniformMatrix3fv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX4FVPROC glad_glProgramUniformMatrix4fv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX2DVPROC glad_glProgramUniformMatrix2dv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX3DVPROC glad_glProgramUniformMatrix3dv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX4DVPROC glad_glProgramUniformMatrix4dv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glad_glProgramUniformMatrix2x3fv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glad_glProgramUniformMatrix3x2fv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glad_glProgramUniformMatrix2x4fv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glad_glProgramUniformMatrix4x2fv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glad_glProgramUniformMatrix3x4fv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
extern PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glad_glProgramUniformMatrix4x3fv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glad_glProgramUniformMatrix2x3dv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glad_glProgramUniformMatrix3x2dv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glad_glProgramUniformMatrix2x4dv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glad_glProgramUniformMatrix4x2dv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glad_glProgramUniformMatrix3x4dv;

typedef void (__attribute__((__stdcall__)) * PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
extern PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glad_glProgramUniformMatrix4x3dv;

typedef void (__attribute__((__stdcall__)) * PFNGLVALIDATEPROGRAMPIPELINEPROC)(GLuint pipeline);
extern PFNGLVALIDATEPROGRAMPIPELINEPROC glad_glValidateProgramPipeline;

typedef void (__attribute__((__stdcall__)) * PFNGLGETPROGRAMPIPELINEINFOLOGPROC)(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
extern PFNGLGETPROGRAMPIPELINEINFOLOGPROC glad_glGetProgramPipelineInfoLog;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL1DPROC)(GLuint index, GLdouble x);
extern PFNGLVERTEXATTRIBL1DPROC glad_glVertexAttribL1d;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL2DPROC)(GLuint index, GLdouble x, GLdouble y);
extern PFNGLVERTEXATTRIBL2DPROC glad_glVertexAttribL2d;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL3DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
extern PFNGLVERTEXATTRIBL3DPROC glad_glVertexAttribL3d;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL4DPROC)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern PFNGLVERTEXATTRIBL4DPROC glad_glVertexAttribL4d;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL1DVPROC)(GLuint index, const GLdouble *v);
extern PFNGLVERTEXATTRIBL1DVPROC glad_glVertexAttribL1dv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL2DVPROC)(GLuint index, const GLdouble *v);
extern PFNGLVERTEXATTRIBL2DVPROC glad_glVertexAttribL2dv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL3DVPROC)(GLuint index, const GLdouble *v);
extern PFNGLVERTEXATTRIBL3DVPROC glad_glVertexAttribL3dv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBL4DVPROC)(GLuint index, const GLdouble *v);
extern PFNGLVERTEXATTRIBL4DVPROC glad_glVertexAttribL4dv;

typedef void (__attribute__((__stdcall__)) * PFNGLVERTEXATTRIBLPOINTERPROC)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
extern PFNGLVERTEXATTRIBLPOINTERPROC glad_glVertexAttribLPointer;

typedef void (__attribute__((__stdcall__)) * PFNGLGETVERTEXATTRIBLDVPROC)(GLuint index, GLenum pname, GLdouble *params);
extern PFNGLGETVERTEXATTRIBLDVPROC glad_glGetVertexAttribLdv;

typedef void (__attribute__((__stdcall__)) * PFNGLVIEWPORTARRAYVPROC)(GLuint first, GLsizei count, const GLfloat *v);
extern PFNGLVIEWPORTARRAYVPROC glad_glViewportArrayv;

typedef void (__attribute__((__stdcall__)) * PFNGLVIEWPORTINDEXEDFPROC)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
extern PFNGLVIEWPORTINDEXEDFPROC glad_glViewportIndexedf;

typedef void (__attribute__((__stdcall__)) * PFNGLVIEWPORTINDEXEDFVPROC)(GLuint index, const GLfloat *v);
extern PFNGLVIEWPORTINDEXEDFVPROC glad_glViewportIndexedfv;

typedef void (__attribute__((__stdcall__)) * PFNGLSCISSORARRAYVPROC)(GLuint first, GLsizei count, const GLint *v);
extern PFNGLSCISSORARRAYVPROC glad_glScissorArrayv;

typedef void (__attribute__((__stdcall__)) * PFNGLSCISSORINDEXEDPROC)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
extern PFNGLSCISSORINDEXEDPROC glad_glScissorIndexed;

typedef void (__attribute__((__stdcall__)) * PFNGLSCISSORINDEXEDVPROC)(GLuint index, const GLint *v);
extern PFNGLSCISSORINDEXEDVPROC glad_glScissorIndexedv;

typedef void (__attribute__((__stdcall__)) * PFNGLDEPTHRANGEARRAYVPROC)(GLuint first, GLsizei count, const GLdouble *v);
extern PFNGLDEPTHRANGEARRAYVPROC glad_glDepthRangeArrayv;

typedef void (__attribute__((__stdcall__)) * PFNGLDEPTHRANGEINDEXEDPROC)(GLuint index, GLdouble n, GLdouble f);
extern PFNGLDEPTHRANGEINDEXEDPROC glad_glDepthRangeIndexed;

typedef void (__attribute__((__stdcall__)) * PFNGLGETFLOATI_VPROC)(GLenum target, GLuint index, GLfloat *data);
extern PFNGLGETFLOATI_VPROC glad_glGetFloati_v;

typedef void (__attribute__((__stdcall__)) * PFNGLGETDOUBLEI_VPROC)(GLenum target, GLuint index, GLdouble *data);
extern PFNGLGETDOUBLEI_VPROC glad_glGetDoublei_v;




}
# 2 "main.cpp" 2
# 1 "../../include/GLFW/glfw3.h" 1
# 33 "../../include/GLFW/glfw3.h"
extern "C" {
# 122 "../../include/GLFW/glfw3.h"
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 1 3 4
# 123 "../../include/GLFW/glfw3.h" 2
# 171 "../../include/GLFW/glfw3.h"
# 1 "c:\\mingw\\include\\gl\\gl.h" 1 3
# 172 "../../include/GLFW/glfw3.h" 2
# 751 "../../include/GLFW/glfw3.h"
typedef void (*GLFWglproc)(void);
# 765 "../../include/GLFW/glfw3.h"
typedef void (*GLFWvkproc)(void);
# 777 "../../include/GLFW/glfw3.h"
typedef struct GLFWmonitor GLFWmonitor;
# 789 "../../include/GLFW/glfw3.h"
typedef struct GLFWwindow GLFWwindow;
# 801 "../../include/GLFW/glfw3.h"
typedef struct GLFWcursor GLFWcursor;
# 817 "../../include/GLFW/glfw3.h"
typedef void (* GLFWerrorfun)(int,const char*);
# 836 "../../include/GLFW/glfw3.h"
typedef void (* GLFWwindowposfun)(GLFWwindow*,int,int);
# 854 "../../include/GLFW/glfw3.h"
typedef void (* GLFWwindowsizefun)(GLFWwindow*,int,int);
# 870 "../../include/GLFW/glfw3.h"
typedef void (* GLFWwindowclosefun)(GLFWwindow*);
# 886 "../../include/GLFW/glfw3.h"
typedef void (* GLFWwindowrefreshfun)(GLFWwindow*);
# 903 "../../include/GLFW/glfw3.h"
typedef void (* GLFWwindowfocusfun)(GLFWwindow*,int);
# 921 "../../include/GLFW/glfw3.h"
typedef void (* GLFWwindowiconifyfun)(GLFWwindow*,int);
# 939 "../../include/GLFW/glfw3.h"
typedef void (* GLFWframebuffersizefun)(GLFWwindow*,int,int);
# 960 "../../include/GLFW/glfw3.h"
typedef void (* GLFWmousebuttonfun)(GLFWwindow*,int,int,int);
# 979 "../../include/GLFW/glfw3.h"
typedef void (* GLFWcursorposfun)(GLFWwindow*,double,double);
# 996 "../../include/GLFW/glfw3.h"
typedef void (* GLFWcursorenterfun)(GLFWwindow*,int);
# 1013 "../../include/GLFW/glfw3.h"
typedef void (* GLFWscrollfun)(GLFWwindow*,double,double);
# 1034 "../../include/GLFW/glfw3.h"
typedef void (* GLFWkeyfun)(GLFWwindow*,int,int,int,int);
# 1051 "../../include/GLFW/glfw3.h"
typedef void (* GLFWcharfun)(GLFWwindow*,unsigned int);
# 1072 "../../include/GLFW/glfw3.h"
typedef void (* GLFWcharmodsfun)(GLFWwindow*,unsigned int,int);
# 1089 "../../include/GLFW/glfw3.h"
typedef void (* GLFWdropfun)(GLFWwindow*,int,const char**);
# 1105 "../../include/GLFW/glfw3.h"
typedef void (* GLFWmonitorfun)(GLFWmonitor*,int);
# 1122 "../../include/GLFW/glfw3.h"
typedef void (* GLFWjoystickfun)(int,int);
# 1136 "../../include/GLFW/glfw3.h"
typedef struct GLFWvidmode
{


    int width;


    int height;


    int redBits;


    int greenBits;


    int blueBits;


    int refreshRate;
} GLFWvidmode;
# 1169 "../../include/GLFW/glfw3.h"
typedef struct GLFWgammaramp
{


    unsigned short* red;


    unsigned short* green;


    unsigned short* blue;


    unsigned int size;
} GLFWgammaramp;
# 1193 "../../include/GLFW/glfw3.h"
typedef struct GLFWimage
{


    int width;


    int height;


    unsigned char* pixels;
} GLFWimage;
# 1243 "../../include/GLFW/glfw3.h"
 int glfwInit(void);
# 1275 "../../include/GLFW/glfw3.h"
 void glfwTerminate(void);
# 1302 "../../include/GLFW/glfw3.h"
 void glfwGetVersion(int* major, int* minor, int* rev);
# 1333 "../../include/GLFW/glfw3.h"
 const char* glfwGetVersionString(void);
# 1367 "../../include/GLFW/glfw3.h"
 GLFWerrorfun glfwSetErrorCallback(GLFWerrorfun cbfun);
# 1396 "../../include/GLFW/glfw3.h"
 GLFWmonitor** glfwGetMonitors(int* count);
# 1420 "../../include/GLFW/glfw3.h"
 GLFWmonitor* glfwGetPrimaryMonitor(void);
# 1445 "../../include/GLFW/glfw3.h"
 void glfwGetMonitorPos(GLFWmonitor* monitor, int* xpos, int* ypos);
# 1479 "../../include/GLFW/glfw3.h"
 void glfwGetMonitorPhysicalSize(GLFWmonitor* monitor, int* widthMM, int* heightMM);
# 1505 "../../include/GLFW/glfw3.h"
 const char* glfwGetMonitorName(GLFWmonitor* monitor);
# 1528 "../../include/GLFW/glfw3.h"
 GLFWmonitorfun glfwSetMonitorCallback(GLFWmonitorfun cbfun);
# 1561 "../../include/GLFW/glfw3.h"
 const GLFWvidmode* glfwGetVideoModes(GLFWmonitor* monitor, int* count);
# 1589 "../../include/GLFW/glfw3.h"
 const GLFWvidmode* glfwGetVideoMode(GLFWmonitor* monitor);
# 1611 "../../include/GLFW/glfw3.h"
 void glfwSetGamma(GLFWmonitor* monitor, float gamma);
# 1637 "../../include/GLFW/glfw3.h"
 const GLFWgammaramp* glfwGetGammaRamp(GLFWmonitor* monitor);
# 1667 "../../include/GLFW/glfw3.h"
 void glfwSetGammaRamp(GLFWmonitor* monitor, const GLFWgammaramp* ramp);
# 1685 "../../include/GLFW/glfw3.h"
 void glfwDefaultWindowHints(void);
# 1713 "../../include/GLFW/glfw3.h"
 void glfwWindowHint(int hint, int value);
# 1834 "../../include/GLFW/glfw3.h"
 GLFWwindow* glfwCreateWindow(int width, int height, const char* title, GLFWmonitor* monitor, GLFWwindow* share);
# 1863 "../../include/GLFW/glfw3.h"
 void glfwDestroyWindow(GLFWwindow* window);
# 1883 "../../include/GLFW/glfw3.h"
 int glfwWindowShouldClose(GLFWwindow* window);
# 1905 "../../include/GLFW/glfw3.h"
 void glfwSetWindowShouldClose(GLFWwindow* window, int value);
# 1930 "../../include/GLFW/glfw3.h"
 void glfwSetWindowTitle(GLFWwindow* window, const char* title);
# 1969 "../../include/GLFW/glfw3.h"
 void glfwSetWindowIcon(GLFWwindow* window, int count, const GLFWimage* images);
# 1997 "../../include/GLFW/glfw3.h"
 void glfwGetWindowPos(GLFWwindow* window, int* xpos, int* ypos);
# 2028 "../../include/GLFW/glfw3.h"
 void glfwSetWindowPos(GLFWwindow* window, int xpos, int ypos);
# 2058 "../../include/GLFW/glfw3.h"
 void glfwGetWindowSize(GLFWwindow* window, int* width, int* height);
# 2098 "../../include/GLFW/glfw3.h"
 void glfwSetWindowSizeLimits(GLFWwindow* window, int minwidth, int minheight, int maxwidth, int maxheight);
# 2138 "../../include/GLFW/glfw3.h"
 void glfwSetWindowAspectRatio(GLFWwindow* window, int numer, int denom);
# 2176 "../../include/GLFW/glfw3.h"
 void glfwSetWindowSize(GLFWwindow* window, int width, int height);
# 2205 "../../include/GLFW/glfw3.h"
 void glfwGetFramebufferSize(GLFWwindow* window, int* width, int* height);
# 2242 "../../include/GLFW/glfw3.h"
 void glfwGetWindowFrameSize(GLFWwindow* window, int* left, int* top, int* right, int* bottom);
# 2269 "../../include/GLFW/glfw3.h"
 void glfwIconifyWindow(GLFWwindow* window);
# 2296 "../../include/GLFW/glfw3.h"
 void glfwRestoreWindow(GLFWwindow* window);
# 2321 "../../include/GLFW/glfw3.h"
 void glfwMaximizeWindow(GLFWwindow* window);
# 2343 "../../include/GLFW/glfw3.h"
 void glfwShowWindow(GLFWwindow* window);
# 2365 "../../include/GLFW/glfw3.h"
 void glfwHideWindow(GLFWwindow* window);
# 2393 "../../include/GLFW/glfw3.h"
 void glfwFocusWindow(GLFWwindow* window);
# 2415 "../../include/GLFW/glfw3.h"
 GLFWmonitor* glfwGetWindowMonitor(GLFWwindow* window);
# 2464 "../../include/GLFW/glfw3.h"
 void glfwSetWindowMonitor(GLFWwindow* window, GLFWmonitor* monitor, int xpos, int ypos, int width, int height, int refreshRate);
# 2497 "../../include/GLFW/glfw3.h"
 int glfwGetWindowAttrib(GLFWwindow* window, int attrib);
# 2520 "../../include/GLFW/glfw3.h"
 void glfwSetWindowUserPointer(GLFWwindow* window, void* pointer);
# 2541 "../../include/GLFW/glfw3.h"
 void* glfwGetWindowUserPointer(GLFWwindow* window);
# 2565 "../../include/GLFW/glfw3.h"
 GLFWwindowposfun glfwSetWindowPosCallback(GLFWwindow* window, GLFWwindowposfun cbfun);
# 2590 "../../include/GLFW/glfw3.h"
 GLFWwindowsizefun glfwSetWindowSizeCallback(GLFWwindow* window, GLFWwindowsizefun cbfun);
# 2623 "../../include/GLFW/glfw3.h"
 GLFWwindowclosefun glfwSetWindowCloseCallback(GLFWwindow* window, GLFWwindowclosefun cbfun);
# 2652 "../../include/GLFW/glfw3.h"
 GLFWwindowrefreshfun glfwSetWindowRefreshCallback(GLFWwindow* window, GLFWwindowrefreshfun cbfun);
# 2680 "../../include/GLFW/glfw3.h"
 GLFWwindowfocusfun glfwSetWindowFocusCallback(GLFWwindow* window, GLFWwindowfocusfun cbfun);
# 2703 "../../include/GLFW/glfw3.h"
 GLFWwindowiconifyfun glfwSetWindowIconifyCallback(GLFWwindow* window, GLFWwindowiconifyfun cbfun);
# 2726 "../../include/GLFW/glfw3.h"
 GLFWframebuffersizefun glfwSetFramebufferSizeCallback(GLFWwindow* window, GLFWframebuffersizefun cbfun);
# 2761 "../../include/GLFW/glfw3.h"
 void glfwPollEvents(void);
# 2806 "../../include/GLFW/glfw3.h"
 void glfwWaitEvents(void);
# 2852 "../../include/GLFW/glfw3.h"
 void glfwWaitEventsTimeout(double timeout);
# 2876 "../../include/GLFW/glfw3.h"
 void glfwPostEmptyEvent(void);
# 2899 "../../include/GLFW/glfw3.h"
 int glfwGetInputMode(GLFWwindow* window, int mode);
# 2947 "../../include/GLFW/glfw3.h"
 void glfwSetInputMode(GLFWwindow* window, int mode, int value);
# 3004 "../../include/GLFW/glfw3.h"
 const char* glfwGetKeyName(int key, int scancode);
# 3044 "../../include/GLFW/glfw3.h"
 int glfwGetKey(GLFWwindow* window, int key);
# 3073 "../../include/GLFW/glfw3.h"
 int glfwGetMouseButton(GLFWwindow* window, int button);
# 3111 "../../include/GLFW/glfw3.h"
 void glfwGetCursorPos(GLFWwindow* window, double* xpos, double* ypos);
# 3148 "../../include/GLFW/glfw3.h"
 void glfwSetCursorPos(GLFWwindow* window, double xpos, double ypos);
# 3188 "../../include/GLFW/glfw3.h"
 GLFWcursor* glfwCreateCursor(const GLFWimage* image, int xhot, int yhot);
# 3213 "../../include/GLFW/glfw3.h"
 GLFWcursor* glfwCreateStandardCursor(int shape);
# 3237 "../../include/GLFW/glfw3.h"
 void glfwDestroyCursor(GLFWcursor* cursor);
# 3264 "../../include/GLFW/glfw3.h"
 void glfwSetCursor(GLFWwindow* window, GLFWcursor* cursor);
# 3307 "../../include/GLFW/glfw3.h"
 GLFWkeyfun glfwSetKeyCallback(GLFWwindow* window, GLFWkeyfun cbfun);
# 3345 "../../include/GLFW/glfw3.h"
 GLFWcharfun glfwSetCharCallback(GLFWwindow* window, GLFWcharfun cbfun);
# 3378 "../../include/GLFW/glfw3.h"
 GLFWcharmodsfun glfwSetCharModsCallback(GLFWwindow* window, GLFWcharmodsfun cbfun);
# 3408 "../../include/GLFW/glfw3.h"
 GLFWmousebuttonfun glfwSetMouseButtonCallback(GLFWwindow* window, GLFWmousebuttonfun cbfun);
# 3433 "../../include/GLFW/glfw3.h"
 GLFWcursorposfun glfwSetCursorPosCallback(GLFWwindow* window, GLFWcursorposfun cbfun);
# 3457 "../../include/GLFW/glfw3.h"
 GLFWcursorenterfun glfwSetCursorEnterCallback(GLFWwindow* window, GLFWcursorenterfun cbfun);
# 3484 "../../include/GLFW/glfw3.h"
 GLFWscrollfun glfwSetScrollCallback(GLFWwindow* window, GLFWscrollfun cbfun);
# 3512 "../../include/GLFW/glfw3.h"
 GLFWdropfun glfwSetDropCallback(GLFWwindow* window, GLFWdropfun cbfun);
# 3532 "../../include/GLFW/glfw3.h"
 int glfwJoystickPresent(int joy);
# 3566 "../../include/GLFW/glfw3.h"
 const float* glfwGetJoystickAxes(int joy, int* count);
# 3601 "../../include/GLFW/glfw3.h"
 const unsigned char* glfwGetJoystickButtons(int joy, int* count);
# 3633 "../../include/GLFW/glfw3.h"
 const char* glfwGetJoystickName(int joy);
# 3656 "../../include/GLFW/glfw3.h"
 GLFWjoystickfun glfwSetJoystickCallback(GLFWjoystickfun cbfun);
# 3681 "../../include/GLFW/glfw3.h"
 void glfwSetClipboardString(GLFWwindow* window, const char* string);
# 3711 "../../include/GLFW/glfw3.h"
 const char* glfwGetClipboardString(GLFWwindow* window);
# 3738 "../../include/GLFW/glfw3.h"
 double glfwGetTime(void);
# 3765 "../../include/GLFW/glfw3.h"
 void glfwSetTime(double time);
# 3787 "../../include/GLFW/glfw3.h"
 uint64_t glfwGetTimerValue(void);
# 3807 "../../include/GLFW/glfw3.h"
 uint64_t glfwGetTimerFrequency(void);
# 3841 "../../include/GLFW/glfw3.h"
 void glfwMakeContextCurrent(GLFWwindow* window);
# 3862 "../../include/GLFW/glfw3.h"
 GLFWwindow* glfwGetCurrentContext(void);
# 3896 "../../include/GLFW/glfw3.h"
 void glfwSwapBuffers(GLFWwindow* window);
# 3943 "../../include/GLFW/glfw3.h"
 void glfwSwapInterval(int interval);
# 3981 "../../include/GLFW/glfw3.h"
 int glfwExtensionSupported(const char* extension);
# 4023 "../../include/GLFW/glfw3.h"
 GLFWglproc glfwGetProcAddress(const char* procname);
# 4049 "../../include/GLFW/glfw3.h"
 int glfwVulkanSupported(void);
# 4093 "../../include/GLFW/glfw3.h"
 const char** glfwGetRequiredInstanceExtensions(uint32_t* count);
# 4244 "../../include/GLFW/glfw3.h"
}
# 3 "main.cpp" 2
# 1 "../../include/utils/shader.h" 1




# 1 "../../include/glm/glm.hpp" 1
# 52 "../../include/glm/glm.hpp"
# 1 "../../include/glm/detail/_fixes.hpp" 1



# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 3

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\c++config.h" 1 3
# 236 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\c++config.h" 3

# 236 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\c++config.h" 3
namespace std
{
  typedef unsigned int size_t;
  typedef int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 258 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 508 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\c++config.h" 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\os_defines.h" 1 3
# 509 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\c++config.h" 2 3


# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\cpu_defines.h" 1 3
# 512 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\c++config.h" 2 3
# 42 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\cpp_type_traits.h" 1 3
# 35 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\cpp_type_traits.h" 3
       
# 36 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\cpp_type_traits.h" 3
# 67 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\cpp_type_traits.h" 3
extern "C++" {

namespace std
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 278 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 408 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };



  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
    { return __it; }


}
}
# 43 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\type_traits.h" 1 3
# 32 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\type_traits.h" 3
       
# 33 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\type_traits.h" 3




extern "C++" {

namespace __gnu_cxx
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
}
# 44 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 2 3

# 1 "c:\\mingw\\include\\math.h" 1 3
# 35 "c:\\mingw\\include\\math.h" 3
       
# 36 "c:\\mingw\\include\\math.h" 3
# 111 "c:\\mingw\\include\\math.h" 3
extern "C" {
# 151 "c:\\mingw\\include\\math.h" 3
struct _exception
{
  int type;
  char *name;
  double arg1;
  double arg2;
  double retval;
};

 double __attribute__((__cdecl__)) sin (double);
 double __attribute__((__cdecl__)) cos (double);
 double __attribute__((__cdecl__)) tan (double);
 double __attribute__((__cdecl__)) sinh (double);
 double __attribute__((__cdecl__)) cosh (double);
 double __attribute__((__cdecl__)) tanh (double);
 double __attribute__((__cdecl__)) asin (double);
 double __attribute__((__cdecl__)) acos (double);
 double __attribute__((__cdecl__)) atan (double);
 double __attribute__((__cdecl__)) atan2 (double, double);
 double __attribute__((__cdecl__)) exp (double);
 double __attribute__((__cdecl__)) log (double);
 double __attribute__((__cdecl__)) log10 (double);
 double __attribute__((__cdecl__)) pow (double, double);
 double __attribute__((__cdecl__)) sqrt (double);
 double __attribute__((__cdecl__)) ceil (double);
 double __attribute__((__cdecl__)) floor (double);
 double __attribute__((__cdecl__)) fabs (double);
 double __attribute__((__cdecl__)) ldexp (double, int);
 double __attribute__((__cdecl__)) frexp (double, int*);
 double __attribute__((__cdecl__)) modf (double, double*);
 double __attribute__((__cdecl__)) fmod (double, double);
# 355 "c:\\mingw\\include\\math.h" 3
  typedef long double float_t;
  typedef long double double_t;
# 391 "c:\\mingw\\include\\math.h" 3
extern int __attribute__((__cdecl__)) __fpclassifyf (float);
extern int __attribute__((__cdecl__)) __fpclassify (double);
extern int __attribute__((__cdecl__)) __fpclassifyl (long double);
# 417 "c:\\mingw\\include\\math.h" 3
extern int __attribute__((__cdecl__)) __isnan (double);
extern int __attribute__((__cdecl__)) __isnanf (float);
extern int __attribute__((__cdecl__)) __isnanl (long double);
# 457 "c:\\mingw\\include\\math.h" 3
extern int __attribute__((__cdecl__)) __signbit (double);
extern int __attribute__((__cdecl__)) __signbitf (float);
extern int __attribute__((__cdecl__)) __signbitl (long double);
# 486 "c:\\mingw\\include\\math.h" 3
extern float __attribute__((__cdecl__)) sinf (float);
extern long double __attribute__((__cdecl__)) sinl (long double);

extern float __attribute__((__cdecl__)) cosf (float);
extern long double __attribute__((__cdecl__)) cosl (long double);

extern float __attribute__((__cdecl__)) tanf (float);
extern long double __attribute__((__cdecl__)) tanl (long double);

extern float __attribute__((__cdecl__)) asinf (float);
extern long double __attribute__((__cdecl__)) asinl (long double);

extern float __attribute__((__cdecl__)) acosf (float);
extern long double __attribute__((__cdecl__)) acosl (long double);

extern float __attribute__((__cdecl__)) atanf (float);
extern long double __attribute__((__cdecl__)) atanl (long double);

extern float __attribute__((__cdecl__)) atan2f (float, float);
extern long double __attribute__((__cdecl__)) atan2l (long double, long double);



extern float __attribute__((__cdecl__)) sinhf (float);




extern long double __attribute__((__cdecl__)) sinhl (long double);

extern float __attribute__((__cdecl__)) coshf (float);




extern long double __attribute__((__cdecl__)) coshl (long double);

extern float __attribute__((__cdecl__)) tanhf (float);




extern long double __attribute__((__cdecl__)) tanhl (long double);



extern double __attribute__((__cdecl__)) acosh (double);
extern float __attribute__((__cdecl__)) acoshf (float);
extern long double __attribute__((__cdecl__)) acoshl (long double);


extern double __attribute__((__cdecl__)) asinh (double);
extern float __attribute__((__cdecl__)) asinhf (float);
extern long double __attribute__((__cdecl__)) asinhl (long double);


extern double __attribute__((__cdecl__)) atanh (double);
extern float __attribute__((__cdecl__)) atanhf (float);
extern long double __attribute__((__cdecl__)) atanhl (long double);



extern float __attribute__((__cdecl__)) expf (float);




extern long double __attribute__((__cdecl__)) expl (long double);


extern double __attribute__((__cdecl__)) exp2(double);
extern float __attribute__((__cdecl__)) exp2f(float);
extern long double __attribute__((__cdecl__)) exp2l(long double);



extern double __attribute__((__cdecl__)) expm1(double);
extern float __attribute__((__cdecl__)) expm1f(float);
extern long double __attribute__((__cdecl__)) expm1l(long double);


extern float __attribute__((__cdecl__)) frexpf (float, int*);




extern long double __attribute__((__cdecl__)) frexpl (long double, int*);




extern int __attribute__((__cdecl__)) ilogb (double);
extern int __attribute__((__cdecl__)) ilogbf (float);
extern int __attribute__((__cdecl__)) ilogbl (long double);


extern float __attribute__((__cdecl__)) ldexpf (float, int);




extern long double __attribute__((__cdecl__)) ldexpl (long double, int);


extern float __attribute__((__cdecl__)) logf (float);
extern long double __attribute__((__cdecl__)) logl (long double);


extern float __attribute__((__cdecl__)) log10f (float);
extern long double __attribute__((__cdecl__)) log10l (long double);


extern double __attribute__((__cdecl__)) log1p(double);
extern float __attribute__((__cdecl__)) log1pf(float);
extern long double __attribute__((__cdecl__)) log1pl(long double);


extern double __attribute__((__cdecl__)) log2 (double);
extern float __attribute__((__cdecl__)) log2f (float);
extern long double __attribute__((__cdecl__)) log2l (long double);


extern double __attribute__((__cdecl__)) logb (double);
extern float __attribute__((__cdecl__)) logbf (float);
extern long double __attribute__((__cdecl__)) logbl (long double);
# 644 "c:\\mingw\\include\\math.h" 3
extern float __attribute__((__cdecl__)) modff (float, float*);
extern long double __attribute__((__cdecl__)) modfl (long double, long double*);


extern double __attribute__((__cdecl__)) scalbn (double, int);
extern float __attribute__((__cdecl__)) scalbnf (float, int);
extern long double __attribute__((__cdecl__)) scalbnl (long double, int);

extern double __attribute__((__cdecl__)) scalbln (double, long);
extern float __attribute__((__cdecl__)) scalblnf (float, long);
extern long double __attribute__((__cdecl__)) scalblnl (long double, long);



extern double __attribute__((__cdecl__)) cbrt (double);
extern float __attribute__((__cdecl__)) cbrtf (float);
extern long double __attribute__((__cdecl__)) cbrtl (long double);


extern float __attribute__((__cdecl__)) fabsf (float x);
extern long double __attribute__((__cdecl__)) fabsl (long double x);


extern double __attribute__((__cdecl__)) hypot (double, double);
extern float __attribute__((__cdecl__)) hypotf (float, float);
extern long double __attribute__((__cdecl__)) hypotl (long double, long double);


extern float __attribute__((__cdecl__)) powf (float, float);
extern long double __attribute__((__cdecl__)) powl (long double, long double);


extern float __attribute__((__cdecl__)) sqrtf (float);
extern long double __attribute__((__cdecl__)) sqrtl (long double);


extern double __attribute__((__cdecl__)) erf (double);
extern float __attribute__((__cdecl__)) erff (float);
extern long double __attribute__((__cdecl__)) erfl (long double);


extern double __attribute__((__cdecl__)) erfc (double);
extern float __attribute__((__cdecl__)) erfcf (float);
extern long double __attribute__((__cdecl__)) erfcl (long double);


extern double __attribute__((__cdecl__)) lgamma (double);
extern float __attribute__((__cdecl__)) lgammaf (float);
extern long double __attribute__((__cdecl__)) lgammal (long double);


extern double __attribute__((__cdecl__)) tgamma (double);
extern float __attribute__((__cdecl__)) tgammaf (float);
extern long double __attribute__((__cdecl__)) tgammal (long double);


extern float __attribute__((__cdecl__)) ceilf (float);
extern long double __attribute__((__cdecl__)) ceill (long double);


extern float __attribute__((__cdecl__)) floorf (float);
extern long double __attribute__((__cdecl__)) floorl (long double);


extern double __attribute__((__cdecl__)) nearbyint ( double);
extern float __attribute__((__cdecl__)) nearbyintf (float);
extern long double __attribute__((__cdecl__)) nearbyintl (long double);



extern double __attribute__((__cdecl__)) rint (double);
extern float __attribute__((__cdecl__)) rintf (float);
extern long double __attribute__((__cdecl__)) rintl (long double);


extern long __attribute__((__cdecl__)) lrint (double);
extern long __attribute__((__cdecl__)) lrintf (float);
extern long __attribute__((__cdecl__)) lrintl (long double);

extern long long __attribute__((__cdecl__)) llrint (double);
extern long long __attribute__((__cdecl__)) llrintf (float);
extern long long __attribute__((__cdecl__)) llrintl (long double);
# 805 "c:\\mingw\\include\\math.h" 3
extern double __attribute__((__cdecl__)) round (double);
extern float __attribute__((__cdecl__)) roundf (float);
extern long double __attribute__((__cdecl__)) roundl (long double);


extern long __attribute__((__cdecl__)) lround (double);
extern long __attribute__((__cdecl__)) lroundf (float);
extern long __attribute__((__cdecl__)) lroundl (long double);

extern long long __attribute__((__cdecl__)) llround (double);
extern long long __attribute__((__cdecl__)) llroundf (float);
extern long long __attribute__((__cdecl__)) llroundl (long double);



extern double __attribute__((__cdecl__)) trunc (double);
extern float __attribute__((__cdecl__)) truncf (float);
extern long double __attribute__((__cdecl__)) truncl (long double);


extern float __attribute__((__cdecl__)) fmodf (float, float);
extern long double __attribute__((__cdecl__)) fmodl (long double, long double);


extern double __attribute__((__cdecl__)) remainder (double, double);
extern float __attribute__((__cdecl__)) remainderf (float, float);
extern long double __attribute__((__cdecl__)) remainderl (long double, long double);


extern double __attribute__((__cdecl__)) remquo(double, double, int *);
extern float __attribute__((__cdecl__)) remquof(float, float, int *);
extern long double __attribute__((__cdecl__)) remquol(long double, long double, int *);


extern double __attribute__((__cdecl__)) copysign (double, double);
extern float __attribute__((__cdecl__)) copysignf (float, float);
extern long double __attribute__((__cdecl__)) copysignl (long double, long double);


extern double __attribute__((__cdecl__)) nan(const char *tagp);
extern float __attribute__((__cdecl__)) nanf(const char *tagp);
extern long double __attribute__((__cdecl__)) nanl(const char *tagp);
# 855 "c:\\mingw\\include\\math.h" 3
extern double __attribute__((__cdecl__)) nextafter (double, double);
extern float __attribute__((__cdecl__)) nextafterf (float, float);
extern long double __attribute__((__cdecl__)) nextafterl (long double, long double);


extern double __attribute__((__cdecl__)) nexttoward (double, long double);
extern float __attribute__((__cdecl__)) nexttowardf (float, long double);
extern long double __attribute__((__cdecl__)) nexttowardl (long double, long double);



extern double __attribute__((__cdecl__)) fdim (double x, double y);
extern float __attribute__((__cdecl__)) fdimf (float x, float y);
extern long double __attribute__((__cdecl__)) fdiml (long double x, long double y);







extern double __attribute__((__cdecl__)) fmax (double, double);
extern float __attribute__((__cdecl__)) fmaxf (float, float);
extern long double __attribute__((__cdecl__)) fmaxl (long double, long double);


extern double __attribute__((__cdecl__)) fmin (double, double);
extern float __attribute__((__cdecl__)) fminf (float, float);
extern long double __attribute__((__cdecl__)) fminl (long double, long double);



extern double __attribute__((__cdecl__)) fma (double, double, double);
extern float __attribute__((__cdecl__)) fmaf (float, float, float);
extern long double __attribute__((__cdecl__)) fmal (long double, long double, long double);
# 931 "c:\\mingw\\include\\math.h" 3
}
# 46 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 2 3

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\std_abs.h" 1 3
# 33 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\std_abs.h" 3
       
# 34 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\std_abs.h" 3




# 1 "c:\\mingw\\include\\stdlib.h" 1 3
# 34 "c:\\mingw\\include\\stdlib.h" 3
       
# 35 "c:\\mingw\\include\\stdlib.h" 3
# 55 "c:\\mingw\\include\\stdlib.h" 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 1 3 4
# 56 "c:\\mingw\\include\\stdlib.h" 2 3
# 90 "c:\\mingw\\include\\stdlib.h" 3
extern "C" {
# 142 "c:\\mingw\\include\\stdlib.h" 3
   extern __attribute__((__dllimport__)) int __mb_cur_max;
# 166 "c:\\mingw\\include\\stdlib.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int *_errno(void);


 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int *__doserrno(void);
# 335 "c:\\mingw\\include\\stdlib.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int atoi (const char *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) long atol (const char *);

 __attribute__((__cdecl__)) __attribute__((__nothrow__)) double strtod (const char *, char **);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) double atof (const char *);
# 360 "c:\\mingw\\include\\stdlib.h" 3
extern __attribute__((__cdecl__)) __attribute__((__nothrow__))
double __strtod (const char *__restrict__, char **__restrict__);

inline __attribute__((__always_inline__)) __attribute__((__cdecl__)) __attribute__((__nothrow__))
double strtod (const char *__restrict__ __nptr, char **__restrict__ __endptr)
{ return __strtod( __nptr, __endptr ); }

inline __attribute__((__always_inline__)) __attribute__((__cdecl__)) __attribute__((__nothrow__))
double atof (const char *__nptr) { return __strtod( __nptr, __null ); }
# 378 "c:\\mingw\\include\\stdlib.h" 3
__attribute__((__cdecl__)) __attribute__((__nothrow__))
float strtof (const char *__restrict__, char **__restrict__);

__attribute__((__cdecl__)) __attribute__((__nothrow__))
long double strtold (const char *__restrict__, char **__restrict__);


 __attribute__((__cdecl__)) __attribute__((__nothrow__)) long strtol (const char *, char **, int);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) unsigned long strtoul (const char *, char **, int);







 __attribute__((__cdecl__)) __attribute__((__nothrow__))
long wcstol (const wchar_t *, wchar_t **, int);

 __attribute__((__cdecl__)) __attribute__((__nothrow__))
unsigned long wcstoul (const wchar_t *, wchar_t **, int);

 __attribute__((__cdecl__)) __attribute__((__nothrow__)) double wcstod (const wchar_t *, wchar_t **);





__attribute__((__cdecl__)) __attribute__((__nothrow__))
float wcstof (const wchar_t *__restrict__, wchar_t **__restrict__);

__attribute__((__cdecl__)) __attribute__((__nothrow__))
long double wcstold (const wchar_t *__restrict__, wchar_t **__restrict__);
# 451 "c:\\mingw\\include\\stdlib.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wchar_t *_wgetenv (const wchar_t *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int _wputenv (const wchar_t *);

 __attribute__((__cdecl__)) __attribute__((__nothrow__))
void _wsearchenv (const wchar_t *, const wchar_t *, wchar_t *);

 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int _wsystem (const wchar_t *);

 __attribute__((__cdecl__)) __attribute__((__nothrow__))
void _wmakepath (wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *,
    const wchar_t *
  );

 __attribute__((__cdecl__)) __attribute__((__nothrow__))
void _wsplitpath (const wchar_t *, wchar_t *, wchar_t *, wchar_t *, wchar_t *);

 __attribute__((__cdecl__)) __attribute__((__nothrow__))
wchar_t *_wfullpath (wchar_t *, const wchar_t *, size_t);





 __attribute__((__cdecl__)) __attribute__((__nothrow__)) size_t wcstombs (char *, const wchar_t *, size_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int wctomb (char *, wchar_t);

 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int mblen (const char *, size_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) size_t mbstowcs (wchar_t *, const char *, size_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int mbtowc (wchar_t *, const char *, size_t);

 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int rand (void);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void srand (unsigned int);

 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void abort (void) __attribute__((__noreturn__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void exit (int) __attribute__((__noreturn__));



int __attribute__((__cdecl__)) __attribute__((__nothrow__)) atexit (void (*)(void));

 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int system (const char *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char *getenv (const char *);
# 502 "c:\\mingw\\include\\stdlib.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void *calloc (size_t, size_t) __attribute__((__malloc__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void *malloc (size_t) __attribute__((__malloc__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void *realloc (void *, size_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void free (void *);
# 514 "c:\\mingw\\include\\stdlib.h" 3
__attribute__((__cdecl__)) __attribute__((__nothrow__)) void *__mingw_realloc (void *, size_t);
__attribute__((__cdecl__)) __attribute__((__nothrow__)) void __mingw_free (void *);






 __attribute__((__cdecl__)) void *bsearch
(const void *, const void *, size_t, size_t, int (*)(const void *, const void *));

 __attribute__((__cdecl__)) void qsort
(void *, size_t, size_t, int (*)(const void *, const void *));

 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int abs (int) __attribute__((__const__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) long labs (long) __attribute__((__const__));
# 538 "c:\\mingw\\include\\stdlib.h" 3
typedef struct { int quot, rem; } div_t;
typedef struct { long quot, rem; } ldiv_t;

 __attribute__((__cdecl__)) __attribute__((__nothrow__)) div_t div (int, int) __attribute__((__const__));
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) ldiv_t ldiv (long, long) __attribute__((__const__));
# 668 "c:\\mingw\\include\\stdlib.h" 3
__attribute__((__cdecl__)) __attribute__((__nothrow__)) void _Exit(int) __attribute__((__noreturn__));






typedef struct { long long quot, rem; } lldiv_t;
__attribute__((__cdecl__)) __attribute__((__nothrow__)) lldiv_t lldiv (long long, long long) __attribute__((__const__));

__attribute__((__cdecl__)) __attribute__((__nothrow__)) long long llabs (long long);
# 689 "c:\\mingw\\include\\stdlib.h" 3
__attribute__((__cdecl__)) __attribute__((__nothrow__))
long long strtoll (const char *__restrict__, char **__restrict, int);

__attribute__((__cdecl__)) __attribute__((__nothrow__))
unsigned long long strtoull (const char *__restrict__, char **__restrict__, int);





__attribute__((__cdecl__)) __attribute__((__nothrow__)) long long atoll (const char *);
# 866 "c:\\mingw\\include\\stdlib.h" 3
}
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\std_abs.h" 2 3







extern "C++"
{
namespace std
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }







  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }
# 106 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\std_abs.h" 3

}
}
# 48 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 2 3
# 77 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 3
extern "C++"
{
namespace std
{


  using ::acos;


  inline constexpr float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline constexpr long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline constexpr float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline constexpr long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline constexpr float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline constexpr long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline constexpr float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline constexpr long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline constexpr float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline constexpr long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline constexpr float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline constexpr long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline constexpr float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline constexpr long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline constexpr float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline constexpr long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline constexpr float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline constexpr float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline constexpr long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline constexpr float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline constexpr long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline constexpr float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline constexpr long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline constexpr float
  log(float __x)
  { return __builtin_logf(__x); }

  inline constexpr long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline constexpr float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline constexpr long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline constexpr float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline constexpr long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 412 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 3
  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline constexpr float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline constexpr long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline constexpr float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline constexpr long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline constexpr float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline constexpr long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline constexpr float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline constexpr long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline constexpr float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline constexpr long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }
# 536 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 3
  constexpr int
  fpclassify(float __x)
  { return __builtin_fpclassify(0x0100, (0x0100 | 0x0400), 0x0400,
    (0x0400 | 0x4000), 0x4000, __x); }

  constexpr int
  fpclassify(double __x)
  { return __builtin_fpclassify(0x0100, (0x0100 | 0x0400), 0x0400,
    (0x0400 | 0x4000), 0x4000, __x); }

  constexpr int
  fpclassify(long double __x)
  { return __builtin_fpclassify(0x0100, (0x0100 | 0x0400), 0x0400,
    (0x0400 | 0x4000), 0x4000, __x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 0x0400 : 0x4000; }



  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isfinite(_Tp __x)
    { return true; }



  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }





  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }


  constexpr bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isinf(_Tp __x)
    { return false; }



  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }





  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }


  constexpr bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnan(_Tp __x)
    { return false; }



  constexpr bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }




  constexpr bool
  signbit(float __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(long double __x)
  { return __builtin_signbit(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }



  constexpr bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }



  constexpr bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }



  constexpr bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }



  constexpr bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 1065 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 3
  using ::double_t;
  using ::float_t;


  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;


  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;


  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;



  constexpr float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  constexpr long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    acosh(_Tp __x)
    { return __builtin_acosh(__x); }



  constexpr float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  constexpr long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    asinh(_Tp __x)
    { return __builtin_asinh(__x); }



  constexpr float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  constexpr long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    atanh(_Tp __x)
    { return __builtin_atanh(__x); }



  constexpr float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  constexpr long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    cbrt(_Tp __x)
    { return __builtin_cbrt(__x); }



  constexpr float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  constexpr long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }



  constexpr float
  erf(float __x)
  { return __builtin_erff(__x); }

  constexpr long double
  erf(long double __x)
  { return __builtin_erfl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erf(_Tp __x)
    { return __builtin_erf(__x); }



  constexpr float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  constexpr long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erfc(_Tp __x)
    { return __builtin_erfc(__x); }



  constexpr float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  constexpr long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    exp2(_Tp __x)
    { return __builtin_exp2(__x); }



  constexpr float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  constexpr long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    expm1(_Tp __x)
    { return __builtin_expm1(__x); }



  constexpr float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  constexpr long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }



  constexpr float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  constexpr long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }



  template<typename _Tp, typename _Up, typename _Vp>
    constexpr typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }



  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  constexpr long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }



  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  constexpr long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }



  constexpr float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  constexpr long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }



  constexpr int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  constexpr int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }



  template<typename _Tp>
    constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    int>::__type
    ilogb(_Tp __x)
    { return __builtin_ilogb(__x); }



  constexpr float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  constexpr long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    lgamma(_Tp __x)
    { return __builtin_lgamma(__x); }



  constexpr long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  constexpr long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llrint(_Tp __x)
    { return __builtin_llrint(__x); }



  constexpr long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  constexpr long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llround(_Tp __x)
    { return __builtin_llround(__x); }



  constexpr float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  constexpr long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log1p(_Tp __x)
    { return __builtin_log1p(__x); }




  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }

  constexpr long double
  log2(long double __x)
  { return __builtin_log2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log2(_Tp __x)
    { return __builtin_log2(__x); }



  constexpr float
  logb(float __x)
  { return __builtin_logbf(__x); }

  constexpr long double
  logb(long double __x)
  { return __builtin_logbl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    logb(_Tp __x)
    { return __builtin_logb(__x); }



  constexpr long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  constexpr long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lrint(_Tp __x)
    { return __builtin_lrint(__x); }



  constexpr long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  constexpr long
  lround(long double __x)
  { return __builtin_lroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lround(_Tp __x)
    { return __builtin_lround(__x); }



  constexpr float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  constexpr long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nearbyint(_Tp __x)
    { return __builtin_nearbyint(__x); }



  constexpr float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  constexpr long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }



  constexpr float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  constexpr long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nexttoward(_Tp __x, long double __y)
    { return __builtin_nexttoward(__x, __y); }



  constexpr float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  constexpr long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }



  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }



  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }



  constexpr float
  rint(float __x)
  { return __builtin_rintf(__x); }

  constexpr long double
  rint(long double __x)
  { return __builtin_rintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    rint(_Tp __x)
    { return __builtin_rint(__x); }



  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }

  constexpr long double
  round(long double __x)
  { return __builtin_roundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    round(_Tp __x)
    { return __builtin_round(__x); }



  constexpr float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  constexpr long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbln(_Tp __x, long __ex)
    { return __builtin_scalbln(__x, __ex); }



  constexpr float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  constexpr long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbn(_Tp __x, int __ex)
    { return __builtin_scalbn(__x, __ex); }



  constexpr float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  constexpr long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    tgamma(_Tp __x)
    { return __builtin_tgamma(__x); }



  constexpr float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  constexpr long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    trunc(_Tp __x)
    { return __builtin_trunc(__x); }
# 1888 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 3

}





}
# 5 "../../include/glm/detail/_fixes.hpp" 2
# 53 "../../include/glm/glm.hpp" 2

       

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 3
# 57 "../../include/glm/glm.hpp" 2
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\climits" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\climits" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\climits" 3


# 1 "c:\\mingw\\include\\limits.h" 1 3
# 34 "c:\\mingw\\include\\limits.h" 3
       
# 35 "c:\\mingw\\include\\limits.h" 3
# 43 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\climits" 2 3
# 58 "../../include/glm/glm.hpp" 2
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cfloat" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cfloat" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cfloat" 3


# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\float.h" 1 3 4
# 513 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\float.h" 3 4
# 1 "c:\\mingw\\include\\float.h" 1 3 4
# 34 "c:\\mingw\\include\\float.h" 3 4
        
# 35 "c:\\mingw\\include\\float.h" 3
# 514 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\float.h" 2 3 4
# 43 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cfloat" 2 3
# 59 "../../include/glm/glm.hpp" 2
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\limits" 1 3
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\limits" 3
       
# 41 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\limits" 3
# 158 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\limits" 3
namespace std
{







  enum float_round_style
  {
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3
  };







  enum float_denorm_style
  {

    denorm_indeterminate = -1,

    denorm_absent = 0,

    denorm_present = 1
  };
# 202 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\limits" 3
  struct __numeric_limits_base
  {


    static constexpr bool is_specialized = false;




    static constexpr int digits = 0;


    static constexpr int digits10 = 0;




    static constexpr int max_digits10 = 0;



    static constexpr bool is_signed = false;


    static constexpr bool is_integer = false;




    static constexpr bool is_exact = false;



    static constexpr int radix = 0;



    static constexpr int min_exponent = 0;



    static constexpr int min_exponent10 = 0;




    static constexpr int max_exponent = 0;



    static constexpr int max_exponent10 = 0;


    static constexpr bool has_infinity = false;



    static constexpr bool has_quiet_NaN = false;



    static constexpr bool has_signaling_NaN = false;


    static constexpr float_denorm_style has_denorm = denorm_absent;



    static constexpr bool has_denorm_loss = false;



    static constexpr bool is_iec559 = false;




    static constexpr bool is_bounded = false;
# 288 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\limits" 3
    static constexpr bool is_modulo = false;


    static constexpr bool traps = false;


    static constexpr bool tinyness_before = false;




    static constexpr float_round_style round_style =
          round_toward_zero;
  };
# 311 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\limits" 3
  template<typename _Tp>
    struct numeric_limits : public __numeric_limits_base
    {


      static constexpr _Tp
      min() noexcept { return _Tp(); }


      static constexpr _Tp
      max() noexcept { return _Tp(); }




      static constexpr _Tp
      lowest() noexcept { return _Tp(); }




      static constexpr _Tp
      epsilon() noexcept { return _Tp(); }


      static constexpr _Tp
      round_error() noexcept { return _Tp(); }


      static constexpr _Tp
      infinity() noexcept { return _Tp(); }



      static constexpr _Tp
      quiet_NaN() noexcept { return _Tp(); }



      static constexpr _Tp
      signaling_NaN() noexcept { return _Tp(); }




      static constexpr _Tp
      denorm_min() noexcept { return _Tp(); }
    };




  template<typename _Tp>
    struct numeric_limits<const _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<volatile _Tp>
    : public numeric_limits<_Tp> { };

  template<typename _Tp>
    struct numeric_limits<const volatile _Tp>
    : public numeric_limits<_Tp> { };
# 382 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\limits" 3
  template<>
    struct numeric_limits<bool>
    {
      static constexpr bool is_specialized = true;

      static constexpr bool
      min() noexcept { return false; }

      static constexpr bool
      max() noexcept { return true; }


      static constexpr bool
      lowest() noexcept { return min(); }

      static constexpr int digits = 1;
      static constexpr int digits10 = 0;

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr bool
      epsilon() noexcept { return false; }

      static constexpr bool
      round_error() noexcept { return false; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr bool
      infinity() noexcept { return false; }

      static constexpr bool
      quiet_NaN() noexcept { return false; }

      static constexpr bool
      signaling_NaN() noexcept { return false; }

      static constexpr bool
      denorm_min() noexcept { return false; }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;




      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<char>
    {
      static constexpr bool is_specialized = true;

      static constexpr char
      min() noexcept { return (((char)(-1) < 0) ? -(((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0) - 1 : (char)0); }

      static constexpr char
      max() noexcept { return (((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char)0); }


      static constexpr char
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(char) * 8 - ((char)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char) * 8 - ((char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((char)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char
      epsilon() noexcept { return 0; }

      static constexpr char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr
      char infinity() noexcept { return char(); }

      static constexpr char
      quiet_NaN() noexcept { return char(); }

      static constexpr char
      signaling_NaN() noexcept { return char(); }

      static constexpr char
      denorm_min() noexcept { return static_cast<char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<signed char>
    {
      static constexpr bool is_specialized = true;

      static constexpr signed char
      min() noexcept { return -0x7f - 1; }

      static constexpr signed char
      max() noexcept { return 0x7f; }


      static constexpr signed char
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(signed char) * 8 - ((signed char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(signed char) * 8 - ((signed char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr signed char
      epsilon() noexcept { return 0; }

      static constexpr signed char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr signed char
      infinity() noexcept { return static_cast<signed char>(0); }

      static constexpr signed char
      quiet_NaN() noexcept { return static_cast<signed char>(0); }

      static constexpr signed char
      signaling_NaN() noexcept
      { return static_cast<signed char>(0); }

      static constexpr signed char
      denorm_min() noexcept
      { return static_cast<signed char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned char>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned char
      min() noexcept { return 0; }

      static constexpr unsigned char
      max() noexcept { return 0x7f * 2U + 1; }


      static constexpr unsigned char
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned char
      epsilon() noexcept { return 0; }

      static constexpr unsigned char
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned char
      infinity() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      quiet_NaN() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      signaling_NaN() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr unsigned char
      denorm_min() noexcept
      { return static_cast<unsigned char>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<wchar_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr wchar_t
      min() noexcept { return (((wchar_t)(-1) < 0) ? -(((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0) - 1 : (wchar_t)0); }

      static constexpr wchar_t
      max() noexcept { return (((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(wchar_t)0); }


      static constexpr wchar_t
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = ((wchar_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr wchar_t
      epsilon() noexcept { return 0; }

      static constexpr wchar_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr wchar_t
      infinity() noexcept { return wchar_t(); }

      static constexpr wchar_t
      quiet_NaN() noexcept { return wchar_t(); }

      static constexpr wchar_t
      signaling_NaN() noexcept { return wchar_t(); }

      static constexpr wchar_t
      denorm_min() noexcept { return wchar_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };



  template<>
    struct numeric_limits<char16_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char16_t
      min() noexcept { return (((char16_t)(-1) < 0) ? -(((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0) - 1 : (char16_t)0); }

      static constexpr char16_t
      max() noexcept { return (((char16_t)(-1) < 0) ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char16_t)0); }

      static constexpr char16_t
      lowest() noexcept { return min(); }

      static constexpr int digits = (sizeof(char16_t) * 8 - ((char16_t)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) * 643L / 2136);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = ((char16_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char16_t
      epsilon() noexcept { return 0; }

      static constexpr char16_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char16_t
      infinity() noexcept { return char16_t(); }

      static constexpr char16_t
      quiet_NaN() noexcept { return char16_t(); }

      static constexpr char16_t
      signaling_NaN() noexcept { return char16_t(); }

      static constexpr char16_t
      denorm_min() noexcept { return char16_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };


  template<>
    struct numeric_limits<char32_t>
    {
      static constexpr bool is_specialized = true;

      static constexpr char32_t
      min() noexcept { return (((char32_t)(-1) < 0) ? -(((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0) - 1 : (char32_t)0); }

      static constexpr char32_t
      max() noexcept { return (((char32_t)(-1) < 0) ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(char32_t)0); }

      static constexpr char32_t
      lowest() noexcept { return min(); }

      static constexpr int digits = (sizeof(char32_t) * 8 - ((char32_t)(-1) < 0));
      static constexpr int digits10 = ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) * 643L / 2136);
      static constexpr int max_digits10 = 0;
      static constexpr bool is_signed = ((char32_t)(-1) < 0);
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr char32_t
      epsilon() noexcept { return 0; }

      static constexpr char32_t
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr char32_t
      infinity() noexcept { return char32_t(); }

      static constexpr char32_t
      quiet_NaN() noexcept { return char32_t(); }

      static constexpr char32_t
      signaling_NaN() noexcept { return char32_t(); }

      static constexpr char32_t
      denorm_min() noexcept { return char32_t(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = !is_signed;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style = round_toward_zero;
    };



  template<>
    struct numeric_limits<short>
    {
      static constexpr bool is_specialized = true;

      static constexpr short
      min() noexcept { return -0x7fff - 1; }

      static constexpr short
      max() noexcept { return 0x7fff; }


      static constexpr short
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(short) * 8 - ((short)(-1) < 0));
      static constexpr int digits10 = ((sizeof(short) * 8 - ((short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr short
      epsilon() noexcept { return 0; }

      static constexpr short
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr short
      infinity() noexcept { return short(); }

      static constexpr short
      quiet_NaN() noexcept { return short(); }

      static constexpr short
      signaling_NaN() noexcept { return short(); }

      static constexpr short
      denorm_min() noexcept { return short(); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned short>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned short
      min() noexcept { return 0; }

      static constexpr unsigned short
      max() noexcept { return 0x7fff * 2U + 1; }


      static constexpr unsigned short
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned short
      epsilon() noexcept { return 0; }

      static constexpr unsigned short
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned short
      infinity() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      quiet_NaN() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      signaling_NaN() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr unsigned short
      denorm_min() noexcept
      { return static_cast<unsigned short>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<int>
    {
      static constexpr bool is_specialized = true;

      static constexpr int
      min() noexcept { return -0x7fffffff - 1; }

      static constexpr int
      max() noexcept { return 0x7fffffff; }


      static constexpr int
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(int) * 8 - ((int)(-1) < 0));
      static constexpr int digits10 = ((sizeof(int) * 8 - ((int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr int
      epsilon() noexcept { return 0; }

      static constexpr int
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr int
      infinity() noexcept { return static_cast<int>(0); }

      static constexpr int
      quiet_NaN() noexcept { return static_cast<int>(0); }

      static constexpr int
      signaling_NaN() noexcept { return static_cast<int>(0); }

      static constexpr int
      denorm_min() noexcept { return static_cast<int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned int>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned int
      min() noexcept { return 0; }

      static constexpr unsigned int
      max() noexcept { return 0x7fffffff * 2U + 1; }


      static constexpr unsigned int
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned int
      epsilon() noexcept { return 0; }

      static constexpr unsigned int
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned int
      infinity() noexcept { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      quiet_NaN() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      signaling_NaN() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr unsigned int
      denorm_min() noexcept
      { return static_cast<unsigned int>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long
      min() noexcept { return -0x7fffffffL - 1; }

      static constexpr long
      max() noexcept { return 0x7fffffffL; }


      static constexpr long
      lowest() noexcept { return min(); }


      static constexpr int digits = (sizeof(long) * 8 - ((long)(-1) < 0));
      static constexpr int digits10 = ((sizeof(long) * 8 - ((long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long
      epsilon() noexcept { return 0; }

      static constexpr long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long
      infinity() noexcept { return static_cast<long>(0); }

      static constexpr long
      quiet_NaN() noexcept { return static_cast<long>(0); }

      static constexpr long
      signaling_NaN() noexcept { return static_cast<long>(0); }

      static constexpr long
      denorm_min() noexcept { return static_cast<long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long
      min() noexcept { return 0; }

      static constexpr unsigned long
      max() noexcept { return 0x7fffffffL * 2UL + 1; }


      static constexpr unsigned long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long
      epsilon() noexcept { return 0; }

      static constexpr unsigned long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long
      infinity() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      quiet_NaN() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      signaling_NaN() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr unsigned long
      denorm_min() noexcept
      { return static_cast<unsigned long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr long long
      min() noexcept { return -0x7fffffffffffffffLL - 1; }

      static constexpr long long
      max() noexcept { return 0x7fffffffffffffffLL; }


      static constexpr long long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(long long) * 8 - ((long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(long long) * 8 - ((long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr long long
      epsilon() noexcept { return 0; }

      static constexpr long long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr long long
      infinity() noexcept { return static_cast<long long>(0); }

      static constexpr long long
      quiet_NaN() noexcept { return static_cast<long long>(0); }

      static constexpr long long
      signaling_NaN() noexcept
      { return static_cast<long long>(0); }

      static constexpr long long
      denorm_min() noexcept { return static_cast<long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };


  template<>
    struct numeric_limits<unsigned long long>
    {
      static constexpr bool is_specialized = true;

      static constexpr unsigned long long
      min() noexcept { return 0; }

      static constexpr unsigned long long
      max() noexcept { return 0x7fffffffffffffffLL * 2ULL + 1; }


      static constexpr unsigned long long
      lowest() noexcept { return min(); }


      static constexpr int digits
       = (sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0));
      static constexpr int digits10
       = ((sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0)) * 643L / 2136);

      static constexpr int max_digits10 = 0;

      static constexpr bool is_signed = false;
      static constexpr bool is_integer = true;
      static constexpr bool is_exact = true;
      static constexpr int radix = 2;

      static constexpr unsigned long long
      epsilon() noexcept { return 0; }

      static constexpr unsigned long long
      round_error() noexcept { return 0; }

      static constexpr int min_exponent = 0;
      static constexpr int min_exponent10 = 0;
      static constexpr int max_exponent = 0;
      static constexpr int max_exponent10 = 0;

      static constexpr bool has_infinity = false;
      static constexpr bool has_quiet_NaN = false;
      static constexpr bool has_signaling_NaN = false;
      static constexpr float_denorm_style has_denorm
       = denorm_absent;
      static constexpr bool has_denorm_loss = false;

      static constexpr unsigned long long
      infinity() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      quiet_NaN() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      signaling_NaN() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr unsigned long long
      denorm_min() noexcept
      { return static_cast<unsigned long long>(0); }

      static constexpr bool is_iec559 = false;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = true;

      static constexpr bool traps = true;
      static constexpr bool tinyness_before = false;
      static constexpr float_round_style round_style
       = round_toward_zero;
    };
# 1593 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\limits" 3
  template<>
    struct numeric_limits<float>
    {
      static constexpr bool is_specialized = true;

      static constexpr float
      min() noexcept { return 1.17549435082228750796873653722224568e-38F; }

      static constexpr float
      max() noexcept { return 3.40282346638528859811704183484516925e+38F; }


      static constexpr float
      lowest() noexcept { return -3.40282346638528859811704183484516925e+38F; }


      static constexpr int digits = 24;
      static constexpr int digits10 = 6;

      static constexpr int max_digits10
  = (2 + (24) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr float
      epsilon() noexcept { return 1.19209289550781250000000000000000000e-7F; }

      static constexpr float
      round_error() noexcept { return 0.5F; }

      static constexpr int min_exponent = (-125);
      static constexpr int min_exponent10 = (-37);
      static constexpr int max_exponent = 128;
      static constexpr int max_exponent10 = 38;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
       = false;

      static constexpr float
      infinity() noexcept { return __builtin_huge_valf(); }

      static constexpr float
      quiet_NaN() noexcept { return __builtin_nanf(""); }

      static constexpr float
      signaling_NaN() noexcept { return __builtin_nansf(""); }

      static constexpr float
      denorm_min() noexcept { return 1.40129846432481707092372958328991613e-45F; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<double>
    {
      static constexpr bool is_specialized = true;

      static constexpr double
      min() noexcept { return double(2.22507385850720138309023271733240406e-308L); }

      static constexpr double
      max() noexcept { return double(1.79769313486231570814527423731704357e+308L); }


      static constexpr double
      lowest() noexcept { return -double(1.79769313486231570814527423731704357e+308L); }


      static constexpr int digits = 53;
      static constexpr int digits10 = 15;

      static constexpr int max_digits10
  = (2 + (53) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr double
      epsilon() noexcept { return double(2.22044604925031308084726333618164062e-16L); }

      static constexpr double
      round_error() noexcept { return 0.5; }

      static constexpr int min_exponent = (-1021);
      static constexpr int min_exponent10 = (-307);
      static constexpr int max_exponent = 1024;
      static constexpr int max_exponent10 = 308;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
        = false;

      static constexpr double
      infinity() noexcept { return __builtin_huge_val(); }

      static constexpr double
      quiet_NaN() noexcept { return __builtin_nan(""); }

      static constexpr double
      signaling_NaN() noexcept { return __builtin_nans(""); }

      static constexpr double
      denorm_min() noexcept { return double(4.94065645841246544176568792868221372e-324L); }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before
       = false;
      static constexpr float_round_style round_style
       = round_to_nearest;
    };






  template<>
    struct numeric_limits<long double>
    {
      static constexpr bool is_specialized = true;

      static constexpr long double
      min() noexcept { return 3.36210314311209350626267781732175260e-4932L; }

      static constexpr long double
      max() noexcept { return 1.18973149535723176502126385303097021e+4932L; }


      static constexpr long double
      lowest() noexcept { return -1.18973149535723176502126385303097021e+4932L; }


      static constexpr int digits = 64;
      static constexpr int digits10 = 18;

      static constexpr int max_digits10
  = (2 + (64) * 643L / 2136);

      static constexpr bool is_signed = true;
      static constexpr bool is_integer = false;
      static constexpr bool is_exact = false;
      static constexpr int radix = 2;

      static constexpr long double
      epsilon() noexcept { return 1.08420217248550443400745280086994171e-19L; }

      static constexpr long double
      round_error() noexcept { return 0.5L; }

      static constexpr int min_exponent = (-16381);
      static constexpr int min_exponent10 = (-4931);
      static constexpr int max_exponent = 16384;
      static constexpr int max_exponent10 = 4932;

      static constexpr bool has_infinity = 1;
      static constexpr bool has_quiet_NaN = 1;
      static constexpr bool has_signaling_NaN = has_quiet_NaN;
      static constexpr float_denorm_style has_denorm
 = bool(1) ? denorm_present : denorm_absent;
      static constexpr bool has_denorm_loss
 = false;

      static constexpr long double
      infinity() noexcept { return __builtin_huge_vall(); }

      static constexpr long double
      quiet_NaN() noexcept { return __builtin_nanl(""); }

      static constexpr long double
      signaling_NaN() noexcept { return __builtin_nansl(""); }

      static constexpr long double
      denorm_min() noexcept { return 3.64519953188247460252840593361941982e-4951L; }

      static constexpr bool is_iec559
 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
      static constexpr bool is_bounded = true;
      static constexpr bool is_modulo = false;

      static constexpr bool traps = false;
      static constexpr bool tinyness_before =
      false;
      static constexpr float_round_style round_style =
            round_to_nearest;
    };






}
# 60 "../../include/glm/glm.hpp" 2
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cassert" 1 3
# 41 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cassert" 3
       
# 42 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cassert" 3


# 1 "c:\\mingw\\include\\assert.h" 1 3
# 23 "c:\\mingw\\include\\assert.h" 3
extern "C" {
# 38 "c:\\mingw\\include\\assert.h" 3
 void __attribute__((__cdecl__)) __attribute__((__nothrow__)) _assert (const char*, const char*, int) __attribute__((__noreturn__));
# 48 "c:\\mingw\\include\\assert.h" 3
}
# 44 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cassert" 2 3
# 61 "../../include/glm/glm.hpp" 2
# 1 "../../include/glm/fwd.hpp" 1



       

# 1 "../../include/glm/detail/type_int.hpp" 1



       

# 1 "../../include/glm/detail/setup.hpp" 1



       
# 28 "../../include/glm/detail/setup.hpp"
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cassert" 1 3
# 41 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cassert" 3
       
# 42 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cassert" 3


# 1 "c:\\mingw\\include\\assert.h" 1 3
# 23 "c:\\mingw\\include\\assert.h" 3
extern "C" {
# 38 "c:\\mingw\\include\\assert.h" 3
 void __attribute__((__cdecl__)) __attribute__((__nothrow__)) _assert (const char*, const char*, int) __attribute__((__noreturn__));
# 48 "c:\\mingw\\include\\assert.h" 3
}
# 44 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cassert" 2 3
# 29 "../../include/glm/detail/setup.hpp" 2
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstddef" 1 3
# 42 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstddef" 3
       
# 43 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstddef" 3







# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 1 3 4
# 51 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstddef" 2 3


namespace std
{

  using ::max_align_t;
}
# 30 "../../include/glm/detail/setup.hpp" 2
# 1 "../../include/glm/detail/../simd/platform.h" 1



       
# 31 "../../include/glm/detail/setup.hpp" 2
# 780 "../../include/glm/detail/setup.hpp"

# 780 "../../include/glm/detail/setup.hpp"
namespace glm
{
 using std::size_t;



  typedef int length_t;

}
# 807 "../../include/glm/detail/setup.hpp"
 namespace glm
 {
  template <typename T, std::size_t N>
  constexpr std::size_t countof(T const (&)[N])
  {
   return N;
  }
 }
# 825 "../../include/glm/detail/setup.hpp"
namespace glm
{
 enum ctor{uninitialize};
}
# 7 "../../include/glm/detail/type_int.hpp" 2

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\type_traits" 1 3
# 32 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\type_traits" 3
       
# 33 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\type_traits" 3








# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\type_traits" 3
namespace std
{

# 56 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\type_traits" 3
  template<typename _Tp, _Tp __v>
    struct integral_constant
    {
      static constexpr _Tp value = __v;
      typedef _Tp value_type;
      typedef integral_constant<_Tp, __v> type;
      constexpr operator value_type() const noexcept { return value; }






    };

  template<typename _Tp, _Tp __v>
    constexpr _Tp integral_constant<_Tp, __v>::value;


  typedef integral_constant<bool, true> true_type;


  typedef integral_constant<bool, false> false_type;

  template<bool __v>
    using __bool_constant = integral_constant<bool, __v>;
# 91 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\type_traits" 3
  template<bool, typename, typename>
    struct conditional;

  template<typename...>
    struct __or_;

  template<>
    struct __or_<>
    : public false_type
    { };

  template<typename _B1>
    struct __or_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __or_<_B1, _B2>
    : public conditional<_B1::value, _B1, _B2>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __or_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, _B1, __or_<_B2, _B3, _Bn...>>::type
    { };

  template<typename...>
    struct __and_;

  template<>
    struct __and_<>
    : public true_type
    { };

  template<typename _B1>
    struct __and_<_B1>
    : public _B1
    { };

  template<typename _B1, typename _B2>
    struct __and_<_B1, _B2>
    : public conditional<_B1::value, _B2, _B1>::type
    { };

  template<typename _B1, typename _B2, typename _B3, typename... _Bn>
    struct __and_<_B1, _B2, _B3, _Bn...>
    : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type
    { };

  template<typename _Pp>
    struct __not_
    : public __bool_constant<!bool(_Pp::value)>
    { };
# 180 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\type_traits" 3
  template<typename _Tp>
    struct __success_type
    { typedef _Tp type; };

  struct __failure_type
  { };



  template<typename>
    struct remove_cv;

  template<typename>
    struct __is_void_helper
    : public false_type { };

  template<>
    struct __is_void_helper<void>
    : public true_type { };


  template<typename _Tp>
    struct is_void
    : public __is_void_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_integral_helper
    : public false_type { };

  template<>
    struct __is_integral_helper<bool>
    : public true_type { };

  template<>
    struct __is_integral_helper<char>
    : public true_type { };

  template<>
    struct __is_integral_helper<signed char>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned char>
    : public true_type { };


  template<>
    struct __is_integral_helper<wchar_t>
    : public true_type { };


  template<>
    struct __is_integral_helper<char16_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<char32_t>
    : public true_type { };

  template<>
    struct __is_integral_helper<short>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned short>
    : public true_type { };

  template<>
    struct __is_integral_helper<int>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned int>
    : public true_type { };

  template<>
    struct __is_integral_helper<long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long>
    : public true_type { };

  template<>
    struct __is_integral_helper<long long>
    : public true_type { };

  template<>
    struct __is_integral_helper<unsigned long long>
    : public true_type { };
# 312 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\type_traits" 3
  template<typename _Tp>
    struct is_integral
    : public __is_integral_helper<typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_floating_point_helper
    : public false_type { };

  template<>
    struct __is_floating_point_helper<float>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<double>
    : public true_type { };

  template<>
    struct __is_floating_point_helper<long double>
    : public true_type { };
# 340 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\type_traits" 3
  template<typename _Tp>
    struct is_floating_point
    : public __is_floating_point_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_array
    : public false_type { };

  template<typename _Tp, std::size_t _Size>
    struct is_array<_Tp[_Size]>
    : public true_type { };

  template<typename _Tp>
    struct is_array<_Tp[]>
    : public true_type { };

  template<typename>
    struct __is_pointer_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_pointer_helper<_Tp*>
    : public true_type { };


  template<typename _Tp>
    struct is_pointer
    : public __is_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename>
    struct is_lvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_lvalue_reference<_Tp&>
    : public true_type { };


  template<typename>
    struct is_rvalue_reference
    : public false_type { };

  template<typename _Tp>
    struct is_rvalue_reference<_Tp&&>
    : public true_type { };

  template<typename>
    struct is_function;

  template<typename>
    struct __is_member_object_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_object_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, !is_function<_Tp>::value> { };


  template<typename _Tp>
    struct is_member_object_pointer
    : public __is_member_object_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };

  template<typename>
    struct __is_member_function_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_function_pointer_helper<_Tp _Cp::*>
    : public integral_constant<bool, is_function<_Tp>::value> { };


  template<typename _Tp>
    struct is_member_function_pointer
    : public __is_member_function_pointer_helper<
    typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct is_enum
    : public integral_constant<bool, __is_enum(_Tp)>
    { };


  template<typename _Tp>
    struct is_union
    : public integral_constant<bool, __is_union(_Tp)>
    { };


  template<typename _Tp>
    struct is_class
    : public integral_constant<bool, __is_class(_Tp)>
    { };


  template<typename>
    struct is_function
    : public false_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes...) const volatile && >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile & >
    : public true_type { };

  template<typename _Res, typename... _ArgTypes >
    struct is_function<_Res(_ArgTypes......) const volatile && >
    : public true_type { };



  template<typename>
    struct __is_null_pointer_helper
    : public false_type { };

  template<>
    struct __is_null_pointer_helper<std::nullptr_t>
    : public true_type { };


  template<typename _Tp>
    struct is_null_pointer
    : public __is_null_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };


  template<typename _Tp>
    struct __is_nullptr_t
    : public is_null_pointer<_Tp>
    { };




  template<typename _Tp>
    struct is_reference
    : public __or_<is_lvalue_reference<_Tp>,
                   is_rvalue_reference<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_arithmetic
    : public __or_<is_integral<_Tp>, is_floating_point<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_fundamental
    : public __or_<is_arithmetic<_Tp>, is_void<_Tp>,
     is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_object
    : public __not_<__or_<is_function<_Tp>, is_reference<_Tp>,
                          is_void<_Tp>>>::type
    { };

  template<typename>
    struct is_member_pointer;


  template<typename _Tp>
    struct is_scalar
    : public __or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>,
                   is_member_pointer<_Tp>, is_null_pointer<_Tp>>::type
    { };


  template<typename _Tp>
    struct is_compound
    : public integral_constant<bool, !is_fundamental<_Tp>::value> { };

  template<typename _Tp>
    struct __is_member_pointer_helper
    : public false_type { };

  template<typename _Tp, typename _Cp>
    struct __is_member_pointer_helper<_Tp _Cp::*>
    : public true_type { };


  template<typename _Tp>
    struct is_member_pointer
    : public __is_member_pointer_helper<typename remove_cv<_Tp>::type>::type
    { };



  template<typename _Tp>
    struct __is_referenceable
    : public __or_<is_object<_Tp>, is_reference<_Tp>>::type
    { };

  template<typename _Res, typename... _Args >
    struct __is_referenceable<_Res(_Args...) >
    : public true_type
    { };

  template<typename _Res, typename... _Args >
    struct __is_referenceable<_Res(_Args......) >
    : public true_type
    { };




  template<typename>
    struct is_const
    : public false_type { };

  template<typename _Tp>
    struct is_const<_Tp const>
    : public true_type { };


  template<typename>
    struct is_volatile
    : public false_type { };

  template<typename _Tp>
    struct is_volatile<_Tp volatile>
    : public true_type { };


  template<typename _Tp>
    struct is_trivial
    : public integral_constant<bool, __is_trivial(_Tp)>
    { };


  template<typename _Tp>
    struct is_trivially_copyable
    : public integral_constant<bool, __is_trivially_copyable(_Tp)>
    { };


  template<typename _Tp>
    struct is_standard_layout
    : public integral_constant<bool, __is_standard_layout(_Tp)>
    { };



  template<typename _Tp>
    struct is_pod
    : public integral_constant<bool, __is_pod(_Tp)>
    { };


  template<typename _Tp>
    struct is_literal_type
    : public integral_constant<bool, __is_literal_type(_Tp)>
    { };


  template<typename _Tp>
    struct is_empty
    : public integral_constant<bool, __is_empty(_Tp)>
    { };


  template<typename _Tp>
    struct is_polymorphic
    : public integral_constant<bool, __is_polymorphic(_Tp)>
    { };
# 712 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\type_traits" 3
  template<typename _Tp>
    struct is_abstract
    : public integral_constant<bool, __is_abstract(_Tp)>
    { };

  template<typename _Tp,
    bool = is_arithmetic<_Tp>::value>
    struct __is_signed_helper
    : public false_type { };

  template<typename _Tp>
    struct __is_signed_helper<_Tp, true>
    : public integral_constant<bool, _Tp(-1) < _Tp(0)>
    { };


  template<typename _Tp>
    struct is_signed
    : public __is_signed_helper<_Tp>::type
    { };


  template<typename _Tp>
    struct is_unsigned
    : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>
    { };
# 747 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\type_traits" 3
  template<typename _Tp, typename _Up = _Tp&&>
    _Up
    __declval(int);

  template<typename _Tp>
    _Tp
    __declval(long);

  template<typename _Tp>
    auto declval() noexcept -> decltype(__declval<_Tp>(0));

  template<typename, unsigned = 0>
    struct extent;

  template<typename>
    struct remove_all_extents;

  template<typename _Tp>
    struct __is_array_known_bounds
    : public integral_constant<bool, (extent<_Tp>::value > 0)>
    { };

  template<typename _Tp>
    struct __is_array_unknown_bounds
    : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>
    { };






  struct __do_is_destructible_impl
  {
    template<typename _Tp, typename = decltype(declval<_Tp&>().~_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_destructible_impl
    : public __do_is_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_destructible_safe;

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, false>
    : public __is_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_destructible
    : public __is_destructible_safe<_Tp>::type
    { };





  struct __do_is_nt_destructible_impl
  {
    template<typename _Tp>
      static integral_constant<bool, noexcept(declval<_Tp&>().~_Tp())>
        __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_nt_destructible_impl
    : public __do_is_nt_destructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp,
           bool = __or_<is_void<_Tp>,
                        __is_array_unknown_bounds<_Tp>,
                        is_function<_Tp>>::value,
           bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
    struct __is_nt_destructible_safe;

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, false>
    : public __is_nt_destructible_impl<typename
               remove_all_extents<_Tp>::type>::type
    { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, true, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_destructible_safe<_Tp, false, true>
    : public true_type { };


  template<typename _Tp>
    struct is_nothrow_destructible
    : public __is_nt_destructible_safe<_Tp>::type
    { };

  struct __do_is_default_constructible_impl
  {
    template<typename _Tp, typename = decltype(_Tp())>
      static true_type __test(int);

    template<typename>
      static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_default_constructible_impl
    : public __do_is_default_constructible_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_default_constructible_atom
    : public __and_<__not_<is_void<_Tp>>,
                    __is_default_constructible_impl<_Tp>>
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_default_constructible_safe;






  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>
    { };

  template<typename _Tp>
    struct __is_default_constructible_safe<_Tp, false>
    : public __is_default_constructible_atom<_Tp>::type
    { };


  template<typename _Tp>
    struct is_default_constructible
    : public __is_default_constructible_safe<_Tp>::type
    { };


  template<typename _Tp, typename... _Args>
    struct is_constructible
      : public __bool_constant<__is_constructible(_Tp, _Args...)>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_constructible_impl;

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_constructible
    : public __is_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_constructible_impl;

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_constructible_impl<_Tp, true>
    : public is_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_constructible
    : public __is_move_constructible_impl<_Tp>
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_atom
    : public integral_constant<bool, noexcept(_Tp())>
    { };

  template<typename _Tp, bool = is_array<_Tp>::value>
    struct __is_nt_default_constructible_impl;

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, true>
    : public __and_<__is_array_known_bounds<_Tp>,
      __is_nt_default_constructible_atom<typename
                      remove_all_extents<_Tp>::type>>
    { };

  template<typename _Tp>
    struct __is_nt_default_constructible_impl<_Tp, false>
    : public __is_nt_default_constructible_atom<_Tp>
    { };


  template<typename _Tp>
    struct is_nothrow_default_constructible
    : public __and_<is_default_constructible<_Tp>,
                    __is_nt_default_constructible_impl<_Tp>>
    { };

  template<typename _Tp, typename... _Args>
    struct __is_nt_constructible_impl
    : public integral_constant<bool, noexcept(_Tp(declval<_Args>()...))>
    { };

  template<typename _Tp, typename _Arg>
    struct __is_nt_constructible_impl<_Tp, _Arg>
    : public integral_constant<bool,
                               noexcept(static_cast<_Tp>(declval<_Arg>()))>
    { };

  template<typename _Tp>
    struct __is_nt_constructible_impl<_Tp>
    : public is_nothrow_default_constructible<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_nothrow_constructible
    : public __and_<is_constructible<_Tp, _Args...>,
      __is_nt_constructible_impl<_Tp, _Args...>>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_copy_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_copy_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_constructible
    : public __is_nothrow_copy_constructible_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nothrow_move_constructible_impl;

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nothrow_move_constructible_impl<_Tp, true>
    : public is_nothrow_constructible<_Tp, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_constructible
    : public __is_nothrow_move_constructible_impl<_Tp>
    { };


  template<typename _Tp, typename _Up>
    struct is_assignable
      : public __bool_constant<__is_assignable(_Tp, _Up)>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_copy_assignable_impl;

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_copy_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_copy_assignable
    : public __is_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_move_assignable_impl;

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_move_assignable_impl<_Tp, true>
    : public is_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_move_assignable
    : public __is_move_assignable_impl<_Tp>
    { };

  template<typename _Tp, typename _Up>
    struct __is_nt_assignable_impl
    : public integral_constant<bool, noexcept(declval<_Tp>() = declval<_Up>())>
    { };


  template<typename _Tp, typename _Up>
    struct is_nothrow_assignable
    : public __and_<is_assignable<_Tp, _Up>,
      __is_nt_assignable_impl<_Tp, _Up>>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_copy_assignable_impl;

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_copy_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, const _Tp&>
    { };


  template<typename _Tp>
    struct is_nothrow_copy_assignable
    : public __is_nt_copy_assignable_impl<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_nt_move_assignable_impl;

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_nt_move_assignable_impl<_Tp, true>
    : public is_nothrow_assignable<_Tp&, _Tp&&>
    { };


  template<typename _Tp>
    struct is_nothrow_move_assignable
    : public __is_nt_move_assignable_impl<_Tp>
    { };


  template<typename _Tp, typename... _Args>
    struct is_trivially_constructible
    : public __and_<is_constructible<_Tp, _Args...>, __bool_constant<
        __is_trivially_constructible(_Tp, _Args...)>>::type
    { };


  template<typename _Tp>
    struct is_trivially_default_constructible
    : public is_trivially_constructible<_Tp>::type
    { };

  struct __do_is_implicitly_default_constructible_impl
  {
    template <typename _Tp>
    static void __helper(const _Tp&);

    template <typename _Tp>
    static true_type __test(const _Tp&,
                            decltype(__helper<const _Tp&>({}))* = 0);

    static false_type __test(...);
  };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_impl
    : public __do_is_implicitly_default_constructible_impl
    {
      typedef decltype(__test(declval<_Tp>())) type;
    };

  template<typename _Tp>
    struct __is_implicitly_default_constructible_safe
    : public __is_implicitly_default_constructible_impl<_Tp>::type
    { };

  template <typename _Tp>
    struct __is_implicitly_default_constructible
    : public __and_<is_default_constructible<_Tp>,
      __is_implicitly_default_constructible_safe<_Tp>>
    { };



  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_copy_constructible_impl;

  template<typename _Tp>
    struct __is_trivially_copy_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_copy_constructible_impl<_Tp, true>
    : public __and_<is_copy_constructible<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, const _Tp&)>>
    { };

  template<typename _Tp>
    struct is_trivially_copy_constructible
    : public __is_trivially_copy_constructible_impl<_Tp>
    { };



  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_move_constructible_impl;

  template<typename _Tp>
    struct __is_trivially_move_constructible_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_move_constructible_impl<_Tp, true>
    : public __and_<is_move_constructible<_Tp>,
      integral_constant<bool,
   __is_trivially_constructible(_Tp, _Tp&&)>>
    { };

  template<typename _Tp>
    struct is_trivially_move_constructible
    : public __is_trivially_move_constructible_impl<_Tp>
    { };


  template<typename _Tp, typename _Up>
    struct is_trivially_assignable
    : public __bool_constant<__is_trivially_assignable(_Tp, _Up)>
    { };



  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_copy_assignable_impl;

  template<typename _Tp>
    struct __is_trivially_copy_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_copy_assignable_impl<_Tp, true>
    : public __and_<is_copy_assignable<_Tp>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp&, const _Tp&)>>
    { };

  template<typename _Tp>
    struct is_trivially_copy_assignable
    : public __is_trivially_copy_assignable_impl<_Tp>
    { };



  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __is_trivially_move_assignable_impl;

  template<typename _Tp>
    struct __is_trivially_move_assignable_impl<_Tp, false>
    : public false_type { };

  template<typename _Tp>
    struct __is_trivially_move_assignable_impl<_Tp, true>
    : public __and_<is_move_assignable<_Tp>,
      integral_constant<bool,
   __is_trivially_assignable(_Tp&, _Tp&&)>>
    { };

  template<typename _Tp>
    struct is_trivially_move_assignable
    : public __is_trivially_move_assignable_impl<_Tp>
    { };


  template<typename _Tp>
    struct is_trivially_destructible
    : public __and_<is_destructible<_Tp>, integral_constant<bool,
         __has_trivial_destructor(_Tp)>>
    { };



  template<typename _Tp>
    struct has_virtual_destructor
    : public integral_constant<bool, __has_virtual_destructor(_Tp)>
    { };





  template<typename _Tp>
    struct alignment_of
    : public integral_constant<std::size_t, __alignof__(_Tp)> { };


  template<typename>
    struct rank
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, std::size_t _Size>
    struct rank<_Tp[_Size]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };

  template<typename _Tp>
    struct rank<_Tp[]>
    : public integral_constant<std::size_t, 1 + rank<_Tp>::value> { };


  template<typename, unsigned _Uint>
    struct extent
    : public integral_constant<std::size_t, 0> { };

  template<typename _Tp, unsigned _Uint, std::size_t _Size>
    struct extent<_Tp[_Size], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? _Size : extent<_Tp,
          _Uint - 1>::value>
    { };

  template<typename _Tp, unsigned _Uint>
    struct extent<_Tp[], _Uint>
    : public integral_constant<std::size_t,
          _Uint == 0 ? 0 : extent<_Tp,
             _Uint - 1>::value>
    { };





  template<typename, typename>
    struct is_same
    : public false_type { };

  template<typename _Tp>
    struct is_same<_Tp, _Tp>
    : public true_type { };


  template<typename _Base, typename _Derived>
    struct is_base_of
    : public integral_constant<bool, __is_base_of(_Base, _Derived)>
    { };

  template<typename _From, typename _To,
           bool = __or_<is_void<_From>, is_function<_To>,
                        is_array<_To>>::value>
    struct __is_convertible_helper
    { typedef typename is_void<_To>::type type; };

  template<typename _From, typename _To>
    class __is_convertible_helper<_From, _To, false>
    {
       template<typename _To1>
 static void __test_aux(_To1);

      template<typename _From1, typename _To1,
        typename = decltype(__test_aux<_To1>(std::declval<_From1>()))>
 static true_type
 __test(int);

      template<typename, typename>
 static false_type
 __test(...);

    public:
      typedef decltype(__test<_From, _To>(0)) type;
    };



  template<typename _From, typename _To>
    struct is_convertible
    : public __is_convertible_helper<_From, _To>::type
    { };





  template<typename _Tp>
    struct remove_const
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_const<_Tp const>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_volatile
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_volatile<_Tp volatile>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_cv
    {
      typedef typename
      remove_const<typename remove_volatile<_Tp>::type>::type type;
    };


  template<typename _Tp>
    struct add_const
    { typedef _Tp const type; };


  template<typename _Tp>
    struct add_volatile
    { typedef _Tp volatile type; };


  template<typename _Tp>
    struct add_cv
    {
      typedef typename
      add_const<typename add_volatile<_Tp>::type>::type type;
    };
# 1452 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\type_traits" 3
  template<typename _Tp>
    struct remove_reference
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_reference<_Tp&&>
    { typedef _Tp type; };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_lvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_lvalue_reference_helper<_Tp, true>
    { typedef _Tp& type; };


  template<typename _Tp>
    struct add_lvalue_reference
    : public __add_lvalue_reference_helper<_Tp>
    { };

  template<typename _Tp, bool = __is_referenceable<_Tp>::value>
    struct __add_rvalue_reference_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_rvalue_reference_helper<_Tp, true>
    { typedef _Tp&& type; };


  template<typename _Tp>
    struct add_rvalue_reference
    : public __add_rvalue_reference_helper<_Tp>
    { };
# 1509 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\type_traits" 3
  template<typename _Unqualified, bool _IsConst, bool _IsVol>
    struct __cv_selector;

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, false>
    { typedef _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, false, true>
    { typedef volatile _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, false>
    { typedef const _Unqualified __type; };

  template<typename _Unqualified>
    struct __cv_selector<_Unqualified, true, true>
    { typedef const volatile _Unqualified __type; };

  template<typename _Qualified, typename _Unqualified,
    bool _IsConst = is_const<_Qualified>::value,
    bool _IsVol = is_volatile<_Qualified>::value>
    class __match_cv_qualifiers
    {
      typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;

    public:
      typedef typename __match::__type __type;
    };


  template<typename _Tp>
    struct __make_unsigned
    { typedef _Tp __type; };

  template<>
    struct __make_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __make_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __make_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __make_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __make_unsigned<long long>
    { typedef unsigned long long __type; };
# 1590 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_unsigned_selector;

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, true, false>
    {
      typedef __make_unsigned<typename remove_cv<_Tp>::type> __unsignedt;
      typedef typename __unsignedt::__type __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };

  template<typename _Tp>
    class __make_unsigned_selector<_Tp, false, true>
    {

      typedef unsigned char __smallest;
      static const bool __b0 = sizeof(_Tp) <= sizeof(__smallest);
      static const bool __b1 = sizeof(_Tp) <= sizeof(unsigned short);
      static const bool __b2 = sizeof(_Tp) <= sizeof(unsigned int);
      static const bool __b3 = sizeof(_Tp) <= sizeof(unsigned long);
      typedef conditional<__b3, unsigned long, unsigned long long> __cond3;
      typedef typename __cond3::type __cond3_type;
      typedef conditional<__b2, unsigned int, __cond3_type> __cond2;
      typedef typename __cond2::type __cond2_type;
      typedef conditional<__b1, unsigned short, __cond2_type> __cond1;
      typedef typename __cond1::type __cond1_type;

      typedef typename conditional<__b0, __smallest, __cond1_type>::type
 __unsigned_type;
      typedef __match_cv_qualifiers<_Tp, __unsigned_type> __cv_unsigned;

    public:
      typedef typename __cv_unsigned::__type __type;
    };





  template<typename _Tp>
    struct make_unsigned
    { typedef typename __make_unsigned_selector<_Tp>::__type type; };


  template<>
    struct make_unsigned<bool>;



  template<typename _Tp>
    struct __make_signed
    { typedef _Tp __type; };

  template<>
    struct __make_signed<char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __make_signed<unsigned short>
    { typedef signed short __type; };

  template<>
    struct __make_signed<unsigned int>
    { typedef signed int __type; };

  template<>
    struct __make_signed<unsigned long>
    { typedef signed long __type; };

  template<>
    struct __make_signed<unsigned long long>
    { typedef signed long long __type; };
# 1694 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\type_traits" 3
  template<typename _Tp,
    bool _IsInt = is_integral<_Tp>::value,
    bool _IsEnum = is_enum<_Tp>::value>
    class __make_signed_selector;

  template<typename _Tp>
    class __make_signed_selector<_Tp, true, false>
    {
      typedef __make_signed<typename remove_cv<_Tp>::type> __signedt;
      typedef typename __signedt::__type __signed_type;
      typedef __match_cv_qualifiers<_Tp, __signed_type> __cv_signed;

    public:
      typedef typename __cv_signed::__type __type;
    };

  template<typename _Tp>
    class __make_signed_selector<_Tp, false, true>
    {
      typedef typename __make_unsigned_selector<_Tp>::__type __unsigned_type;

    public:
      typedef typename __make_signed_selector<__unsigned_type>::__type __type;
    };





  template<typename _Tp>
    struct make_signed
    { typedef typename __make_signed_selector<_Tp>::__type type; };


  template<>
    struct make_signed<bool>;
# 1744 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\type_traits" 3
  template<typename _Tp>
    struct remove_extent
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_extent<_Tp[_Size]>
    { typedef _Tp type; };

  template<typename _Tp>
    struct remove_extent<_Tp[]>
    { typedef _Tp type; };


  template<typename _Tp>
    struct remove_all_extents
    { typedef _Tp type; };

  template<typename _Tp, std::size_t _Size>
    struct remove_all_extents<_Tp[_Size]>
    { typedef typename remove_all_extents<_Tp>::type type; };

  template<typename _Tp>
    struct remove_all_extents<_Tp[]>
    { typedef typename remove_all_extents<_Tp>::type type; };
# 1781 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\type_traits" 3
  template<typename _Tp, typename>
    struct __remove_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp, typename _Up>
    struct __remove_pointer_helper<_Tp, _Up*>
    { typedef _Up type; };


  template<typename _Tp>
    struct remove_pointer
    : public __remove_pointer_helper<_Tp, typename remove_cv<_Tp>::type>
    { };


  template<typename _Tp, bool = __or_<__is_referenceable<_Tp>,
          is_void<_Tp>>::value>
    struct __add_pointer_helper
    { typedef _Tp type; };

  template<typename _Tp>
    struct __add_pointer_helper<_Tp, true>
    { typedef typename remove_reference<_Tp>::type* type; };

  template<typename _Tp>
    struct add_pointer
    : public __add_pointer_helper<_Tp>
    { };
# 1820 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\type_traits" 3
  template<std::size_t _Len>
    struct __aligned_storage_msa
    {
      union __type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__)) { } __align;
      };
    };
# 1840 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\type_traits" 3
  template<std::size_t _Len, std::size_t _Align =
    __alignof__(typename __aligned_storage_msa<_Len>::__type)>
    struct aligned_storage
    {
      union type
      {
 unsigned char __data[_Len];
 struct __attribute__((__aligned__((_Align)))) { } __align;
      };
    };

  template <typename... _Types>
    struct __strictest_alignment
    {
      static const size_t _S_alignment = 0;
      static const size_t _S_size = 0;
    };

  template <typename _Tp, typename... _Types>
    struct __strictest_alignment<_Tp, _Types...>
    {
      static const size_t _S_alignment =
        alignof(_Tp) > __strictest_alignment<_Types...>::_S_alignment
 ? alignof(_Tp) : __strictest_alignment<_Types...>::_S_alignment;
      static const size_t _S_size =
        sizeof(_Tp) > __strictest_alignment<_Types...>::_S_size
 ? sizeof(_Tp) : __strictest_alignment<_Types...>::_S_size;
    };
# 1879 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\type_traits" 3
  template <size_t _Len, typename... _Types>
    struct aligned_union
    {
    private:
      static_assert(sizeof...(_Types) != 0, "At least one type is required");

      using __strictest = __strictest_alignment<_Types...>;
      static const size_t _S_len = _Len > __strictest::_S_size
 ? _Len : __strictest::_S_size;
    public:

      static const size_t alignment_value = __strictest::_S_alignment;

      typedef typename aligned_storage<_S_len, alignment_value>::type type;
    };

  template <size_t _Len, typename... _Types>
    const size_t aligned_union<_Len, _Types...>::alignment_value;



  template<typename _Up,
    bool _IsArray = is_array<_Up>::value,
    bool _IsFunction = is_function<_Up>::value>
    struct __decay_selector;


  template<typename _Up>
    struct __decay_selector<_Up, false, false>
    { typedef typename remove_cv<_Up>::type __type; };

  template<typename _Up>
    struct __decay_selector<_Up, true, false>
    { typedef typename remove_extent<_Up>::type* __type; };

  template<typename _Up>
    struct __decay_selector<_Up, false, true>
    { typedef typename add_pointer<_Up>::type __type; };


  template<typename _Tp>
    class decay
    {
      typedef typename remove_reference<_Tp>::type __remove_type;

    public:
      typedef typename __decay_selector<__remove_type>::__type type;
    };

  template<typename _Tp>
    class reference_wrapper;


  template<typename _Tp>
    struct __strip_reference_wrapper
    {
      typedef _Tp __type;
    };

  template<typename _Tp>
    struct __strip_reference_wrapper<reference_wrapper<_Tp> >
    {
      typedef _Tp& __type;
    };

  template<typename _Tp>
    struct __decay_and_strip
    {
      typedef typename __strip_reference_wrapper<
 typename decay<_Tp>::type>::__type __type;
    };




  template<bool, typename _Tp = void>
    struct enable_if
    { };


  template<typename _Tp>
    struct enable_if<true, _Tp>
    { typedef _Tp type; };

  template<typename... _Cond>
    using _Require = typename enable_if<__and_<_Cond...>::value>::type;



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct conditional
    { typedef _Iftrue type; };


  template<typename _Iftrue, typename _Iffalse>
    struct conditional<false, _Iftrue, _Iffalse>
    { typedef _Iffalse type; };


  template<typename... _Tp>
    struct common_type;



  struct __do_common_type_impl
  {
    template<typename _Tp, typename _Up>
      static __success_type<typename decay<decltype
       (true ? std::declval<_Tp>()
        : std::declval<_Up>())>::type> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp, typename _Up>
    struct __common_type_impl
    : private __do_common_type_impl
    {
      typedef decltype(_S_test<_Tp, _Up>(0)) type;
    };

  struct __do_member_type_wrapper
  {
    template<typename _Tp>
      static __success_type<typename _Tp::type> _S_test(int);

    template<typename>
      static __failure_type _S_test(...);
  };

  template<typename _Tp>
    struct __member_type_wrapper
    : private __do_member_type_wrapper
    {
      typedef decltype(_S_test<_Tp>(0)) type;
    };

  template<typename _CTp, typename... _Args>
    struct __expanded_common_type_wrapper
    {
      typedef common_type<typename _CTp::type, _Args...> type;
    };

  template<typename... _Args>
    struct __expanded_common_type_wrapper<__failure_type, _Args...>
    { typedef __failure_type type; };

  template<typename _Tp>
    struct common_type<_Tp>
    { typedef typename decay<_Tp>::type type; };

  template<typename _Tp, typename _Up>
    struct common_type<_Tp, _Up>
    : public __common_type_impl<_Tp, _Up>::type
    { };

  template<typename _Tp, typename _Up, typename... _Vp>
    struct common_type<_Tp, _Up, _Vp...>
    : public __expanded_common_type_wrapper<typename __member_type_wrapper<
               common_type<_Tp, _Up>>::type, _Vp...>::type
    { };


  template<typename _Tp>
    struct underlying_type
    {
      typedef __underlying_type(_Tp) type;
    };

  template<typename _Tp>
    struct __declval_protector
    {
      static const bool __stop = false;
    };

  template<typename _Tp>
    auto declval() noexcept -> decltype(__declval<_Tp>(0))
    {
      static_assert(__declval_protector<_Tp>::__stop,
      "declval() must not be used!");
      return __declval<_Tp>(0);
    }
# 2072 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\type_traits" 3
  template<>
    struct __make_unsigned<wchar_t>
    {
      using __type
 = typename __make_unsigned_selector<wchar_t, false, true>::__type;
    };

  template<>
    struct __make_signed<wchar_t>
    {
      using __type
 = typename __make_signed_selector<wchar_t, false, true>::__type;
    };


  template<>
    struct __make_unsigned<char16_t>
    {
      using __type
 = typename __make_unsigned_selector<char16_t, false, true>::__type;
    };

  template<>
    struct __make_signed<char16_t>
    {
      using __type
 = typename __make_signed_selector<char16_t, false, true>::__type;
    };

  template<>
    struct __make_unsigned<char32_t>
    {
      using __type
 = typename __make_unsigned_selector<char32_t, false, true>::__type;
    };

  template<>
    struct __make_signed<char32_t>
    {
      using __type
 = typename __make_signed_selector<char32_t, false, true>::__type;
    };



  template<typename _Signature>
    class result_of;





  struct __invoke_memfun_ref { };
  struct __invoke_memfun_deref { };
  struct __invoke_memobj_ref { };
  struct __invoke_memobj_deref { };
  struct __invoke_other { };


  template<typename _Tp, typename _Tag>
    struct __result_of_success : __success_type<_Tp>
    { using __invoke_type = _Tag; };


  struct __result_of_memfun_ref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      (std::declval<_Tp1>().*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_ref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_ref
    : private __result_of_memfun_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memfun_deref_impl
  {
    template<typename _Fp, typename _Tp1, typename... _Args>
      static __result_of_success<decltype(
      ((*std::declval<_Tp1>()).*std::declval<_Fp>())(std::declval<_Args>()...)
      ), __invoke_memfun_deref> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun_deref
    : private __result_of_memfun_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
    };


  struct __result_of_memobj_ref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      std::declval<_Tp1>().*std::declval<_Fp>()
      ), __invoke_memobj_ref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_ref
    : private __result_of_memobj_ref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };


  struct __result_of_memobj_deref_impl
  {
    template<typename _Fp, typename _Tp1>
      static __result_of_success<decltype(
      (*std::declval<_Tp1>()).*std::declval<_Fp>()
      ), __invoke_memobj_deref> _S_test(int);

    template<typename, typename>
      static __failure_type _S_test(...);
  };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj_deref
    : private __result_of_memobj_deref_impl
    {
      typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_memobj;

  template<typename _Res, typename _Class, typename _Arg>
    struct __result_of_memobj<_Res _Class::*, _Arg>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memobj_ref<_MemPtr, _Arg>,
        __result_of_memobj_deref<_MemPtr, _Arg>
      >::type::type type;
    };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_memfun;

  template<typename _Res, typename _Class, typename _Arg, typename... _Args>
    struct __result_of_memfun<_Res _Class::*, _Arg, _Args...>
    {
      typedef typename remove_cv<typename remove_reference<
        _Arg>::type>::type _Argval;
      typedef _Res _Class::* _MemPtr;
      typedef typename conditional<__or_<is_same<_Argval, _Class>,
        is_base_of<_Class, _Argval>>::value,
        __result_of_memfun_ref<_MemPtr, _Arg, _Args...>,
        __result_of_memfun_deref<_MemPtr, _Arg, _Args...>
      >::type::type type;
    };






  template<typename _Tp, typename _Up = typename decay<_Tp>::type>
    struct __inv_unwrap
    {
      using type = _Tp;
    };

  template<typename _Tp, typename _Up>
    struct __inv_unwrap<_Tp, reference_wrapper<_Up>>
    {
      using type = _Up&;
    };

  template<bool, bool, typename _Functor, typename... _ArgTypes>
    struct __result_of_impl
    {
      typedef __failure_type type;
    };

  template<typename _MemPtr, typename _Arg>
    struct __result_of_impl<true, false, _MemPtr, _Arg>
    : public __result_of_memobj<typename decay<_MemPtr>::type,
    typename __inv_unwrap<_Arg>::type>
    { };

  template<typename _MemPtr, typename _Arg, typename... _Args>
    struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>
    : public __result_of_memfun<typename decay<_MemPtr>::type,
    typename __inv_unwrap<_Arg>::type, _Args...>
    { };


  struct __result_of_other_impl
  {
    template<typename _Fn, typename... _Args>
      static __result_of_success<decltype(
      std::declval<_Fn>()(std::declval<_Args>()...)
      ), __invoke_other> _S_test(int);

    template<typename...>
      static __failure_type _S_test(...);
  };

  template<typename _Functor, typename... _ArgTypes>
    struct __result_of_impl<false, false, _Functor, _ArgTypes...>
    : private __result_of_other_impl
    {
      typedef decltype(_S_test<_Functor, _ArgTypes...>(0)) type;
    };


  template<typename _Functor, typename... _ArgTypes>
    struct __invoke_result
    : public __result_of_impl<
        is_member_object_pointer<
          typename remove_reference<_Functor>::type
        >::value,
        is_member_function_pointer<
          typename remove_reference<_Functor>::type
        >::value,
 _Functor, _ArgTypes...
      >::type
    { };

  template<typename _Functor, typename... _ArgTypes>
    struct result_of<_Functor(_ArgTypes...)>
    : public __invoke_result<_Functor, _ArgTypes...>
    { };
# 2350 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\type_traits" 3
  template<typename...> using __void_t = void;
# 2359 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\type_traits" 3
  template<typename _Default, typename _AlwaysVoid,
    template<typename...> class _Op, typename... _Args>
    struct __detector
    {
      using value_t = false_type;
      using type = _Default;
    };


  template<typename _Default, template<typename...> class _Op,
     typename... _Args>
    struct __detector<_Default, __void_t<_Op<_Args...>>, _Op, _Args...>
    {
      using value_t = true_type;
      using type = _Op<_Args...>;
    };


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or = __detector<_Default, void, _Op, _Args...>;


  template<typename _Default, template<typename...> class _Op,
    typename... _Args>
    using __detected_or_t
      = typename __detected_or<_Default, _Op, _Args...>::type;
# 2403 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\type_traits" 3
  template <typename _Tp>
    struct __is_swappable;

  template <typename _Tp>
    struct __is_nothrow_swappable;

  template<typename... _Elements>
    class tuple;

  template<typename>
    struct __is_tuple_like_impl : false_type
    { };

  template<typename... _Tps>
    struct __is_tuple_like_impl<tuple<_Tps...>> : true_type
    { };


  template<typename _Tp>
    struct __is_tuple_like
    : public __is_tuple_like_impl<typename remove_cv<
      typename remove_reference<_Tp>::type>::type>::type
    { };

  template<typename _Tp>
    inline
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type
    swap(_Tp&, _Tp&)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value);

  template<typename _Tp, size_t _Nm>
    inline
    typename enable_if<__is_swappable<_Tp>::value>::type
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value);

  namespace __swappable_details {
    using std::swap;

    struct __do_is_swappable_impl
    {
      template<typename _Tp, typename
               = decltype(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))>
        static true_type __test(int);

      template<typename>
        static false_type __test(...);
    };

    struct __do_is_nothrow_swappable_impl
    {
      template<typename _Tp>
        static __bool_constant<
          noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))
        > __test(int);

      template<typename>
        static false_type __test(...);
    };

  }

  template<typename _Tp>
    struct __is_swappable_impl
    : public __swappable_details::__do_is_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_nothrow_swappable_impl
    : public __swappable_details::__do_is_nothrow_swappable_impl
    {
      typedef decltype(__test<_Tp>(0)) type;
    };

  template<typename _Tp>
    struct __is_swappable
    : public __is_swappable_impl<_Tp>::type
    { };

  template<typename _Tp>
    struct __is_nothrow_swappable
    : public __is_nothrow_swappable_impl<_Tp>::type
    { };
# 2608 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\type_traits" 3
  template<typename _Result, typename _Ret, typename = void>
    struct __is_invocable_impl : false_type { };

  template<typename _Result, typename _Ret>
    struct __is_invocable_impl<_Result, _Ret, __void_t<typename _Result::type>>
    : __or_<is_void<_Ret>, is_convertible<typename _Result::type, _Ret>>::type
    { };

  template<typename _Fn, typename... _ArgTypes>
    struct __is_invocable
    : __is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>::type
    { };

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept((std::declval<_Up>().*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp, typename... _Args>
    constexpr bool __call_is_nt(__invoke_memfun_deref)
    {
      return noexcept(((*std::declval<_Tp>()).*std::declval<_Fn>())(
     std::declval<_Args>()...));
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_ref)
    {
      using _Up = typename __inv_unwrap<_Tp>::type;
      return noexcept(std::declval<_Up>().*std::declval<_Fn>());
    }

  template<typename _Fn, typename _Tp>
    constexpr bool __call_is_nt(__invoke_memobj_deref)
    {
      return noexcept((*std::declval<_Tp>()).*std::declval<_Fn>());
    }

  template<typename _Fn, typename... _Args>
    constexpr bool __call_is_nt(__invoke_other)
    {
      return noexcept(std::declval<_Fn>()(std::declval<_Args>()...));
    }

  template<typename _Result, typename _Fn, typename... _Args>
    struct __call_is_nothrow
    : __bool_constant<
 std::__call_is_nt<_Fn, _Args...>(typename _Result::__invoke_type{})
      >
    { };

  template<typename _Fn, typename... _Args>
    using __call_is_nothrow_
      = __call_is_nothrow<__invoke_result<_Fn, _Args...>, _Fn, _Args...>;


  template<typename _Fn, typename... _Args>
    struct __is_nothrow_invocable
    : __and_<__is_invocable<_Fn, _Args...>,
             __call_is_nothrow_<_Fn, _Args...>>::type
    { };

  struct __nonesuch {
    __nonesuch() = delete;
    ~__nonesuch() = delete;
    __nonesuch(__nonesuch const&) = delete;
    void operator=(__nonesuch const&) = delete;
  };
# 2968 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\type_traits" 3

}
# 9 "../../include/glm/detail/type_int.hpp" 2



# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstdint" 1 3
# 32 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstdint" 3
       
# 33 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstdint" 3
# 46 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstdint" 3
namespace std
{
  using ::int8_t;
  using ::int16_t;
  using ::int32_t;
  using ::int64_t;

  using ::int_fast8_t;
  using ::int_fast16_t;
  using ::int_fast32_t;
  using ::int_fast64_t;

  using ::int_least8_t;
  using ::int_least16_t;
  using ::int_least32_t;
  using ::int_least64_t;

  using ::intmax_t;
  using ::intptr_t;

  using ::uint8_t;
  using ::uint16_t;
  using ::uint32_t;
  using ::uint64_t;

  using ::uint_fast8_t;
  using ::uint_fast16_t;
  using ::uint_fast32_t;
  using ::uint_fast64_t;

  using ::uint_least8_t;
  using ::uint_least16_t;
  using ::uint_least32_t;
  using ::uint_least64_t;

  using ::uintmax_t;
  using ::uintptr_t;
}
# 13 "../../include/glm/detail/type_int.hpp" 2



# 15 "../../include/glm/detail/type_int.hpp"
namespace glm{
namespace detail
{

  typedef std::int8_t int8;
  typedef std::int16_t int16;
  typedef std::int32_t int32;
  typedef std::int64_t int64;

  typedef std::uint8_t uint8;
  typedef std::uint16_t uint16;
  typedef std::uint32_t uint32;
  typedef std::uint64_t uint64;
# 63 "../../include/glm/detail/type_int.hpp"
 typedef signed int lowp_int_t;
 typedef signed int mediump_int_t;
 typedef signed int highp_int_t;

 typedef unsigned int lowp_uint_t;
 typedef unsigned int mediump_uint_t;
 typedef unsigned int highp_uint_t;


  using std::make_signed;
  using std::make_unsigned;
# 204 "../../include/glm/detail/type_int.hpp"
}

 typedef detail::int8 int8;
 typedef detail::int16 int16;
 typedef detail::int32 int32;
 typedef detail::int64 int64;

 typedef detail::uint8 uint8;
 typedef detail::uint16 uint16;
 typedef detail::uint32 uint32;
 typedef detail::uint64 uint64;
# 224 "../../include/glm/detail/type_int.hpp"
 typedef detail::lowp_int_t lowp_int;






 typedef detail::mediump_int_t mediump_int;






 typedef detail::highp_int_t highp_int;






 typedef detail::lowp_uint_t lowp_uint;






 typedef detail::mediump_uint_t mediump_uint;






 typedef detail::highp_uint_t highp_uint;


 typedef mediump_int int_t;
# 274 "../../include/glm/detail/type_int.hpp"
 typedef mediump_uint uint_t;
# 288 "../../include/glm/detail/type_int.hpp"
 typedef unsigned int uint;






 static_assert(sizeof(glm::int8) == 1, "int8 size isn't 1 byte on this platform");
 static_assert(sizeof(glm::int16) == 2, "int16 size isn't 2 bytes on this platform");
 static_assert(sizeof(glm::int32) == 4, "int32 size isn't 4 bytes on this platform");
 static_assert(sizeof(glm::int64) == 8, "int64 size isn't 8 bytes on this platform");

 static_assert(sizeof(glm::uint8) == 1, "uint8 size isn't 1 byte on this platform");
 static_assert(sizeof(glm::uint16) == 2, "uint16 size isn't 2 bytes on this platform");
 static_assert(sizeof(glm::uint32) == 4, "uint32 size isn't 4 bytes on this platform");
 static_assert(sizeof(glm::uint64) == 8, "uint64 size isn't 8 bytes on this platform");


}
# 7 "../../include/glm/fwd.hpp" 2
# 1 "../../include/glm/detail/type_float.hpp" 1



       



namespace glm{
namespace detail
{
 typedef float float32;
 typedef double float64;
}

 typedef float lowp_float_t;
 typedef float mediump_float_t;
 typedef double highp_float_t;
# 27 "../../include/glm/detail/type_float.hpp"
 typedef lowp_float_t lowp_float;






 typedef mediump_float_t mediump_float;






 typedef highp_float_t highp_float;


 typedef mediump_float float_t;
# 55 "../../include/glm/detail/type_float.hpp"
 typedef float float32;
 typedef double float64;




 static_assert(sizeof(glm::float32) == 4, "float32 size isn't 4 bytes on this platform");
 static_assert(sizeof(glm::float64) == 8, "float64 size isn't 8 bytes on this platform");




}
# 8 "../../include/glm/fwd.hpp" 2
# 1 "../../include/glm/detail/type_vec.hpp" 1



       

# 1 "../../include/glm/detail/precision.hpp" 1



       



namespace glm
{
 enum precision
 {
  packed_highp,
  packed_mediump,
  packed_lowp,


   aligned_highp,
   aligned_mediump,
   aligned_lowp,
   aligned = aligned_highp,


  highp = packed_highp,
  mediump = packed_mediump,
  lowp = packed_lowp,
  packed = packed_highp,




   defaultp = highp

 };

namespace detail
{
 template <glm::precision P>
 struct is_aligned
 {
  static const bool value = false;
 };


  template<>
  struct is_aligned<glm::aligned_lowp>
  {
   static const bool value = true;
  };

  template<>
  struct is_aligned<glm::aligned_mediump>
  {
   static const bool value = true;
  };

  template<>
  struct is_aligned<glm::aligned_highp>
  {
   static const bool value = true;
  };

}
}
# 7 "../../include/glm/detail/type_vec.hpp" 2


namespace glm{
namespace detail
{
 template <typename T, std::size_t size, bool aligned>
 struct storage
 {
  typedef struct type {
   uint8 data[size];
  } type;
 };
# 28 "../../include/glm/detail/type_vec.hpp"
 template <typename T> struct storage<T, 1, true> { struct __attribute__((aligned(1))) type { uint8 data[1]; }; };
 template <typename T> struct storage<T, 2, true> { struct __attribute__((aligned(2))) type { uint8 data[2]; }; };
 template <typename T> struct storage<T, 4, true> { struct __attribute__((aligned(4))) type { uint8 data[4]; }; };
 template <typename T> struct storage<T, 8, true> { struct __attribute__((aligned(8))) type { uint8 data[8]; }; };
 template <typename T> struct storage<T, 16, true> { struct __attribute__((aligned(16))) type { uint8 data[16]; }; };
 template <typename T> struct storage<T, 32, true> { struct __attribute__((aligned(32))) type { uint8 data[32]; }; };
 template <typename T> struct storage<T, 64, true> { struct __attribute__((aligned(64))) type { uint8 data[64]; }; };
# 102 "../../include/glm/detail/type_vec.hpp"
}

 template <typename T, precision P> struct tvec1;
 template <typename T, precision P> struct tvec2;
 template <typename T, precision P> struct tvec3;
 template <typename T, precision P> struct tvec4;

 typedef tvec1<float, highp> highp_vec1_t;
 typedef tvec1<float, mediump> mediump_vec1_t;
 typedef tvec1<float, lowp> lowp_vec1_t;
 typedef tvec1<double, highp> highp_dvec1_t;
 typedef tvec1<double, mediump> mediump_dvec1_t;
 typedef tvec1<double, lowp> lowp_dvec1_t;
 typedef tvec1<int, highp> highp_ivec1_t;
 typedef tvec1<int, mediump> mediump_ivec1_t;
 typedef tvec1<int, lowp> lowp_ivec1_t;
 typedef tvec1<uint, highp> highp_uvec1_t;
 typedef tvec1<uint, mediump> mediump_uvec1_t;
 typedef tvec1<uint, lowp> lowp_uvec1_t;
 typedef tvec1<bool, highp> highp_bvec1_t;
 typedef tvec1<bool, mediump> mediump_bvec1_t;
 typedef tvec1<bool, lowp> lowp_bvec1_t;
# 133 "../../include/glm/detail/type_vec.hpp"
 typedef tvec2<float, highp> highp_vec2;






 typedef tvec2<float, mediump> mediump_vec2;






 typedef tvec2<float, lowp> lowp_vec2;






 typedef tvec2<double, highp> highp_dvec2;






 typedef tvec2<double, mediump> mediump_dvec2;






 typedef tvec2<double, lowp> lowp_dvec2;






 typedef tvec2<int, highp> highp_ivec2;






 typedef tvec2<int, mediump> mediump_ivec2;






 typedef tvec2<int, lowp> lowp_ivec2;






 typedef tvec2<uint, highp> highp_uvec2;






 typedef tvec2<uint, mediump> mediump_uvec2;






 typedef tvec2<uint, lowp> lowp_uvec2;






 typedef tvec2<bool, highp> highp_bvec2;






 typedef tvec2<bool, mediump> mediump_bvec2;






 typedef tvec2<bool, lowp> lowp_bvec2;
# 243 "../../include/glm/detail/type_vec.hpp"
 typedef tvec3<float, highp> highp_vec3;






 typedef tvec3<float, mediump> mediump_vec3;






 typedef tvec3<float, lowp> lowp_vec3;






 typedef tvec3<double, highp> highp_dvec3;






 typedef tvec3<double, mediump> mediump_dvec3;






 typedef tvec3<double, lowp> lowp_dvec3;






 typedef tvec3<int, highp> highp_ivec3;






 typedef tvec3<int, mediump> mediump_ivec3;






 typedef tvec3<int, lowp> lowp_ivec3;






 typedef tvec3<uint, highp> highp_uvec3;






 typedef tvec3<uint, mediump> mediump_uvec3;






 typedef tvec3<uint, lowp> lowp_uvec3;





 typedef tvec3<bool, highp> highp_bvec3;





 typedef tvec3<bool, mediump> mediump_bvec3;





 typedef tvec3<bool, lowp> lowp_bvec3;
# 349 "../../include/glm/detail/type_vec.hpp"
 typedef tvec4<float, highp> highp_vec4;





 typedef tvec4<float, mediump> mediump_vec4;





 typedef tvec4<float, lowp> lowp_vec4;





 typedef tvec4<double, highp> highp_dvec4;





 typedef tvec4<double, mediump> mediump_dvec4;





 typedef tvec4<double, lowp> lowp_dvec4;





 typedef tvec4<int, highp> highp_ivec4;





 typedef tvec4<int, mediump> mediump_ivec4;





 typedef tvec4<int, lowp> lowp_ivec4;





 typedef tvec4<uint, highp> highp_uvec4;





 typedef tvec4<uint, mediump> mediump_uvec4;





 typedef tvec4<uint, lowp> lowp_uvec4;





 typedef tvec4<bool, highp> highp_bvec4;





 typedef tvec4<bool, mediump> mediump_bvec4;





 typedef tvec4<bool, lowp> lowp_bvec4;
# 454 "../../include/glm/detail/type_vec.hpp"
 typedef highp_vec2 vec2;




 typedef highp_vec3 vec3;




 typedef highp_vec4 vec4;
# 481 "../../include/glm/detail/type_vec.hpp"
 typedef highp_dvec2 dvec2;




 typedef highp_dvec3 dvec3;




 typedef highp_dvec4 dvec4;
# 508 "../../include/glm/detail/type_vec.hpp"
 typedef highp_ivec2 ivec2;




 typedef highp_ivec3 ivec3;




 typedef highp_ivec4 ivec4;
# 535 "../../include/glm/detail/type_vec.hpp"
 typedef highp_uvec2 uvec2;




 typedef highp_uvec3 uvec3;




 typedef highp_uvec4 uvec4;
# 562 "../../include/glm/detail/type_vec.hpp"
 typedef highp_bvec2 bvec2;




 typedef highp_bvec3 bvec3;




 typedef highp_bvec4 bvec4;



}
# 9 "../../include/glm/fwd.hpp" 2
# 1 "../../include/glm/detail/type_mat.hpp" 1



       



namespace glm{
namespace detail
{
 template <typename T, precision P, template <class, precision> class colType, template <class, precision> class rowType>
 struct outerProduct_trait{};
}

 template <typename T, precision P> struct tvec2;
 template <typename T, precision P> struct tvec3;
 template <typename T, precision P> struct tvec4;
 template <typename T, precision P> struct tmat2x2;
 template <typename T, precision P> struct tmat2x3;
 template <typename T, precision P> struct tmat2x4;
 template <typename T, precision P> struct tmat3x2;
 template <typename T, precision P> struct tmat3x3;
 template <typename T, precision P> struct tmat3x4;
 template <typename T, precision P> struct tmat4x2;
 template <typename T, precision P> struct tmat4x3;
 template <typename T, precision P> struct tmat4x4;

 template <typename T, precision P, template <typename, precision> class matType>
 matType<T, P> inverse(matType<T, P> const & m);
# 39 "../../include/glm/detail/type_mat.hpp"
 typedef tmat2x2<float, lowp> lowp_mat2;






 typedef tmat2x2<float, mediump> mediump_mat2;






 typedef tmat2x2<float, highp> highp_mat2;






 typedef tmat2x2<float, lowp> lowp_mat2x2;






 typedef tmat2x2<float, mediump> mediump_mat2x2;






 typedef tmat2x2<float, highp> highp_mat2x2;
# 86 "../../include/glm/detail/type_mat.hpp"
 typedef tmat2x3<float, lowp> lowp_mat2x3;






 typedef tmat2x3<float, mediump> mediump_mat2x3;






 typedef tmat2x3<float, highp> highp_mat2x3;
# 112 "../../include/glm/detail/type_mat.hpp"
 typedef tmat2x4<float, lowp> lowp_mat2x4;






 typedef tmat2x4<float, mediump> mediump_mat2x4;






 typedef tmat2x4<float, highp> highp_mat2x4;
# 138 "../../include/glm/detail/type_mat.hpp"
 typedef tmat3x2<float, lowp> lowp_mat3x2;






 typedef tmat3x2<float, mediump> mediump_mat3x2;






 typedef tmat3x2<float, highp> highp_mat3x2;
# 164 "../../include/glm/detail/type_mat.hpp"
 typedef tmat3x3<float, lowp> lowp_mat3;






 typedef tmat3x3<float, mediump> mediump_mat3;






 typedef tmat3x3<float, highp> highp_mat3;






 typedef tmat3x3<float, lowp> lowp_mat3x3;






 typedef tmat3x3<float, mediump> mediump_mat3x3;






 typedef tmat3x3<float, highp> highp_mat3x3;
# 211 "../../include/glm/detail/type_mat.hpp"
 typedef tmat3x4<float, lowp> lowp_mat3x4;






 typedef tmat3x4<float, mediump> mediump_mat3x4;






 typedef tmat3x4<float, highp> highp_mat3x4;
# 237 "../../include/glm/detail/type_mat.hpp"
 typedef tmat4x2<float, lowp> lowp_mat4x2;






 typedef tmat4x2<float, mediump> mediump_mat4x2;






 typedef tmat4x2<float, highp> highp_mat4x2;
# 263 "../../include/glm/detail/type_mat.hpp"
 typedef tmat4x3<float, lowp> lowp_mat4x3;






 typedef tmat4x3<float, mediump> mediump_mat4x3;






 typedef tmat4x3<float, highp> highp_mat4x3;
# 290 "../../include/glm/detail/type_mat.hpp"
 typedef tmat4x4<float, lowp> lowp_mat4;






 typedef tmat4x4<float, mediump> mediump_mat4;






 typedef tmat4x4<float, highp> highp_mat4;






 typedef tmat4x4<float, lowp> lowp_mat4x4;






 typedef tmat4x4<float, mediump> mediump_mat4x4;






 typedef tmat4x4<float, highp> highp_mat4x4;
# 359 "../../include/glm/detail/type_mat.hpp"
 typedef highp_mat2x2 mat2x2;




 typedef highp_mat2x3 mat2x3;




 typedef highp_mat2x4 mat2x4;




 typedef highp_mat3x2 mat3x2;




 typedef highp_mat3x3 mat3x3;




 typedef highp_mat3x4 mat3x4;




 typedef highp_mat4x2 mat4x2;




 typedef highp_mat4x3 mat4x3;




 typedef highp_mat4x4 mat4x4;






 typedef mat2x2 mat2;




 typedef mat3x3 mat3;




 typedef mat4x4 mat4;
# 428 "../../include/glm/detail/type_mat.hpp"
 typedef tmat2x2<double, lowp> lowp_dmat2;





 typedef tmat2x2<double, mediump> mediump_dmat2;





 typedef tmat2x2<double, highp> highp_dmat2;





 typedef tmat2x2<double, lowp> lowp_dmat2x2;





 typedef tmat2x2<double, mediump> mediump_dmat2x2;





 typedef tmat2x2<double, highp> highp_dmat2x2;
# 469 "../../include/glm/detail/type_mat.hpp"
 typedef tmat2x3<double, lowp> lowp_dmat2x3;





 typedef tmat2x3<double, mediump> mediump_dmat2x3;





 typedef tmat2x3<double, highp> highp_dmat2x3;
# 492 "../../include/glm/detail/type_mat.hpp"
 typedef tmat2x4<double, lowp> lowp_dmat2x4;





 typedef tmat2x4<double, mediump> mediump_dmat2x4;





 typedef tmat2x4<double, highp> highp_dmat2x4;
# 515 "../../include/glm/detail/type_mat.hpp"
 typedef tmat3x2<double, lowp> lowp_dmat3x2;





 typedef tmat3x2<double, mediump> mediump_dmat3x2;





 typedef tmat3x2<double, highp> highp_dmat3x2;
# 538 "../../include/glm/detail/type_mat.hpp"
 typedef tmat3x3<float, lowp> lowp_dmat3;





 typedef tmat3x3<double, mediump> mediump_dmat3;





 typedef tmat3x3<double, highp> highp_dmat3;





 typedef tmat3x3<double, lowp> lowp_dmat3x3;





 typedef tmat3x3<double, mediump> mediump_dmat3x3;





 typedef tmat3x3<double, highp> highp_dmat3x3;
# 579 "../../include/glm/detail/type_mat.hpp"
 typedef tmat3x4<double, lowp> lowp_dmat3x4;





 typedef tmat3x4<double, mediump> mediump_dmat3x4;





 typedef tmat3x4<double, highp> highp_dmat3x4;
# 602 "../../include/glm/detail/type_mat.hpp"
 typedef tmat4x2<double, lowp> lowp_dmat4x2;





 typedef tmat4x2<double, mediump> mediump_dmat4x2;





 typedef tmat4x2<double, highp> highp_dmat4x2;
# 625 "../../include/glm/detail/type_mat.hpp"
 typedef tmat4x3<double, lowp> lowp_dmat4x3;





 typedef tmat4x3<double, mediump> mediump_dmat4x3;





 typedef tmat4x3<double, highp> highp_dmat4x3;
# 648 "../../include/glm/detail/type_mat.hpp"
 typedef tmat4x4<double, lowp> lowp_dmat4;





 typedef tmat4x4<double, mediump> mediump_dmat4;





 typedef tmat4x4<double, highp> highp_dmat4;





 typedef tmat4x4<double, lowp> lowp_dmat4x4;





 typedef tmat4x4<double, mediump> mediump_dmat4x4;





 typedef tmat4x4<double, highp> highp_dmat4x4;
# 707 "../../include/glm/detail/type_mat.hpp"
 typedef highp_dmat2x2 dmat2;




 typedef highp_dmat3x3 dmat3;




 typedef highp_dmat4x4 dmat4;




 typedef highp_dmat2x2 dmat2x2;




 typedef highp_dmat2x3 dmat2x3;




 typedef highp_dmat2x4 dmat2x4;




 typedef highp_dmat3x2 dmat3x2;




 typedef highp_dmat3x3 dmat3x3;




 typedef highp_dmat3x4 dmat3x4;




 typedef highp_dmat4x2 dmat4x2;




 typedef highp_dmat4x3 dmat4x3;




 typedef highp_dmat4x4 dmat4x4;




}
# 10 "../../include/glm/fwd.hpp" 2



namespace glm
{
 template <typename T, precision P> struct tquat;




 typedef tquat<float, lowp> lowp_quat;




 typedef tquat<float, mediump> mediump_quat;




 typedef tquat<float, highp> highp_quat;
# 40 "../../include/glm/fwd.hpp"
 typedef highp_quat quat;





 typedef lowp_quat lowp_fquat;




 typedef mediump_quat mediump_fquat;




 typedef highp_quat highp_fquat;




 typedef quat fquat;





 typedef tquat<double, lowp> lowp_dquat;




 typedef tquat<double, mediump> mediump_dquat;




 typedef tquat<double, highp> highp_dquat;
# 89 "../../include/glm/fwd.hpp"
 typedef highp_dquat dquat;


}



namespace glm
{


 typedef detail::int8 lowp_int8;



 typedef detail::int16 lowp_int16;



 typedef detail::int32 lowp_int32;



 typedef detail::int64 lowp_int64;



 typedef detail::int8 lowp_int8_t;



 typedef detail::int16 lowp_int16_t;



 typedef detail::int32 lowp_int32_t;



 typedef detail::int64 lowp_int64_t;



 typedef detail::int8 lowp_i8;



 typedef detail::int16 lowp_i16;



 typedef detail::int32 lowp_i32;



 typedef detail::int64 lowp_i64;



 typedef detail::int8 mediump_int8;



 typedef detail::int16 mediump_int16;



 typedef detail::int32 mediump_int32;



 typedef detail::int64 mediump_int64;



 typedef detail::int8 mediump_int8_t;



 typedef detail::int16 mediump_int16_t;



 typedef detail::int32 mediump_int32_t;



 typedef detail::int64 mediump_int64_t;



 typedef detail::int8 mediump_i8;



 typedef detail::int16 mediump_i16;



 typedef detail::int32 mediump_i32;



 typedef detail::int64 mediump_i64;



 typedef detail::int8 highp_int8;



 typedef detail::int16 highp_int16;



 typedef detail::int32 highp_int32;



 typedef detail::int64 highp_int64;



 typedef detail::int8 highp_int8_t;



 typedef detail::int16 highp_int16_t;



 typedef detail::int32 highp_int32_t;



 typedef detail::int64 highp_int64_t;



 typedef detail::int8 highp_i8;



 typedef detail::int16 highp_i16;



 typedef detail::int32 highp_i32;



 typedef detail::int64 highp_i64;




 typedef detail::int8 int8;



 typedef detail::int16 int16;



 typedef detail::int32 int32;



 typedef detail::int64 int64;



 using std::int8_t;
 using std::int16_t;
 using std::int32_t;
 using std::int64_t;
# 285 "../../include/glm/fwd.hpp"
 typedef detail::int8 i8;



 typedef detail::int16 i16;



 typedef detail::int32 i32;



 typedef detail::int64 i64;





 typedef tvec1<i8, lowp> lowp_i8vec1;



 typedef tvec2<i8, lowp> lowp_i8vec2;



 typedef tvec3<i8, lowp> lowp_i8vec3;



 typedef tvec4<i8, lowp> lowp_i8vec4;




 typedef tvec1<i8, mediump> mediump_i8vec1;



 typedef tvec2<i8, mediump> mediump_i8vec2;



 typedef tvec3<i8, mediump> mediump_i8vec3;



 typedef tvec4<i8, mediump> mediump_i8vec4;




 typedef tvec1<i8, highp> highp_i8vec1;



 typedef tvec2<i8, highp> highp_i8vec2;



 typedef tvec3<i8, highp> highp_i8vec3;



 typedef tvec4<i8, highp> highp_i8vec4;
# 364 "../../include/glm/fwd.hpp"
 typedef highp_i8vec1 i8vec1;



 typedef highp_i8vec2 i8vec2;



 typedef highp_i8vec3 i8vec3;



 typedef highp_i8vec4 i8vec4;





 typedef tvec1<i16, lowp> lowp_i16vec1;



 typedef tvec2<i16, lowp> lowp_i16vec2;



 typedef tvec3<i16, lowp> lowp_i16vec3;



 typedef tvec4<i16, lowp> lowp_i16vec4;




 typedef tvec1<i16, mediump> mediump_i16vec1;



 typedef tvec2<i16, mediump> mediump_i16vec2;



 typedef tvec3<i16, mediump> mediump_i16vec3;



 typedef tvec4<i16, mediump> mediump_i16vec4;




 typedef tvec1<i16, highp> highp_i16vec1;



 typedef tvec2<i16, highp> highp_i16vec2;



 typedef tvec3<i16, highp> highp_i16vec3;



 typedef tvec4<i16, highp> highp_i16vec4;
# 444 "../../include/glm/fwd.hpp"
 typedef highp_i16vec1 i16vec1;



 typedef highp_i16vec2 i16vec2;



 typedef highp_i16vec3 i16vec3;



 typedef highp_i16vec4 i16vec4;





 typedef tvec1<i32, lowp> lowp_i32vec1;



 typedef tvec2<i32, lowp> lowp_i32vec2;



 typedef tvec3<i32, lowp> lowp_i32vec3;



 typedef tvec4<i32, lowp> lowp_i32vec4;




 typedef tvec1<i32, mediump> mediump_i32vec1;



 typedef tvec2<i32, mediump> mediump_i32vec2;



 typedef tvec3<i32, mediump> mediump_i32vec3;



 typedef tvec4<i32, mediump> mediump_i32vec4;




 typedef tvec1<i32, highp> highp_i32vec1;



 typedef tvec2<i32, highp> highp_i32vec2;



 typedef tvec3<i32, highp> highp_i32vec3;



 typedef tvec4<i32, highp> highp_i32vec4;
# 523 "../../include/glm/fwd.hpp"
 typedef highp_i32vec1 i32vec1;



 typedef highp_i32vec2 i32vec2;



 typedef highp_i32vec3 i32vec3;



 typedef highp_i32vec4 i32vec4;





 typedef tvec1<i32, lowp> lowp_i32vec1;



 typedef tvec2<i32, lowp> lowp_i32vec2;



 typedef tvec3<i32, lowp> lowp_i32vec3;



 typedef tvec4<i32, lowp> lowp_i32vec4;




 typedef tvec1<i32, mediump> mediump_i32vec1;



 typedef tvec2<i32, mediump> mediump_i32vec2;



 typedef tvec3<i32, mediump> mediump_i32vec3;



 typedef tvec4<i32, mediump> mediump_i32vec4;




 typedef tvec1<i32, highp> highp_i32vec1;



 typedef tvec2<i32, highp> highp_i32vec2;



 typedef tvec3<i32, highp> highp_i32vec3;



 typedef tvec4<i32, highp> highp_i32vec4;
# 602 "../../include/glm/fwd.hpp"
 typedef highp_i32vec1 i32vec1;



 typedef highp_i32vec2 i32vec2;



 typedef highp_i32vec3 i32vec3;



 typedef highp_i32vec4 i32vec4;






 typedef tvec1<i64, lowp> lowp_i64vec1;



 typedef tvec2<i64, lowp> lowp_i64vec2;



 typedef tvec3<i64, lowp> lowp_i64vec3;



 typedef tvec4<i64, lowp> lowp_i64vec4;




 typedef tvec1<i64, mediump> mediump_i64vec1;



 typedef tvec2<i64, mediump> mediump_i64vec2;



 typedef tvec3<i64, mediump> mediump_i64vec3;



 typedef tvec4<i64, mediump> mediump_i64vec4;




 typedef tvec1<i64, highp> highp_i64vec1;



 typedef tvec2<i64, highp> highp_i64vec2;



 typedef tvec3<i64, highp> highp_i64vec3;



 typedef tvec4<i64, highp> highp_i64vec4;
# 682 "../../include/glm/fwd.hpp"
 typedef highp_i64vec1 i64vec1;



 typedef highp_i64vec2 i64vec2;



 typedef highp_i64vec3 i64vec3;



 typedef highp_i64vec4 i64vec4;
# 703 "../../include/glm/fwd.hpp"
 typedef detail::uint8 lowp_uint8;



 typedef detail::uint16 lowp_uint16;



 typedef detail::uint32 lowp_uint32;



 typedef detail::uint64 lowp_uint64;




 typedef detail::uint8 lowp_uint8_t;



 typedef detail::uint16 lowp_uint16_t;



 typedef detail::uint32 lowp_uint32_t;



 typedef detail::uint64 lowp_uint64_t;




 typedef detail::uint8 lowp_u8;



 typedef detail::uint16 lowp_u16;



 typedef detail::uint32 lowp_u32;



 typedef detail::uint64 lowp_u64;





 typedef detail::uint8 mediump_uint8;



 typedef detail::uint16 mediump_uint16;



 typedef detail::uint32 mediump_uint32;



 typedef detail::uint64 mediump_uint64;



 typedef detail::uint8 mediump_uint8_t;



 typedef detail::uint16 mediump_uint16_t;



 typedef detail::uint32 mediump_uint32_t;



 typedef detail::uint64 mediump_uint64_t;



 typedef detail::uint8 mediump_u8;



 typedef detail::uint16 mediump_u16;



 typedef detail::uint32 mediump_u32;



 typedef detail::uint64 mediump_u64;





 typedef detail::uint8 highp_uint8;



 typedef detail::uint16 highp_uint16;



 typedef detail::uint32 highp_uint32;



 typedef detail::uint64 highp_uint64;



 typedef detail::uint8 highp_uint8_t;



 typedef detail::uint16 highp_uint16_t;



 typedef detail::uint32 highp_uint32_t;



 typedef detail::uint64 highp_uint64_t;



 typedef detail::uint8 highp_u8;



 typedef detail::uint16 highp_u16;



 typedef detail::uint32 highp_u32;



 typedef detail::uint64 highp_u64;





 typedef detail::uint8 uint8;



 typedef detail::uint16 uint16;



 typedef detail::uint32 uint32;



 typedef detail::uint64 uint64;


 using std::uint8_t;
 using std::uint16_t;
 using std::uint32_t;
 using std::uint64_t;
# 894 "../../include/glm/fwd.hpp"
 typedef detail::uint8 u8;



 typedef detail::uint16 u16;



 typedef detail::uint32 u32;



 typedef detail::uint64 u64;





 typedef tvec1<u8, lowp> lowp_u8vec1;



 typedef tvec2<u8, lowp> lowp_u8vec2;



 typedef tvec3<u8, lowp> lowp_u8vec3;



 typedef tvec4<u8, lowp> lowp_u8vec4;




 typedef tvec1<u8, mediump> mediump_u8vec1;



 typedef tvec2<u8, mediump> mediump_u8vec2;



 typedef tvec3<u8, mediump> mediump_u8vec3;



 typedef tvec4<u8, mediump> mediump_u8vec4;




 typedef tvec1<u8, highp> highp_u8vec1;



 typedef tvec2<u8, highp> highp_u8vec2;



 typedef tvec3<u8, highp> highp_u8vec3;



 typedef tvec4<u8, highp> highp_u8vec4;
# 973 "../../include/glm/fwd.hpp"
 typedef highp_u8vec1 u8vec1;



 typedef highp_u8vec2 u8vec2;



 typedef highp_u8vec3 u8vec3;



 typedef highp_u8vec4 u8vec4;





 typedef tvec1<u16, lowp> lowp_u16vec1;



 typedef tvec2<u16, lowp> lowp_u16vec2;



 typedef tvec3<u16, lowp> lowp_u16vec3;



 typedef tvec4<u16, lowp> lowp_u16vec4;




 typedef tvec1<u16, mediump> mediump_u16vec1;



 typedef tvec2<u16, mediump> mediump_u16vec2;



 typedef tvec3<u16, mediump> mediump_u16vec3;



 typedef tvec4<u16, mediump> mediump_u16vec4;




 typedef tvec1<u16, highp> highp_u16vec1;



 typedef tvec2<u16, highp> highp_u16vec2;



 typedef tvec3<u16, highp> highp_u16vec3;



 typedef tvec4<u16, highp> highp_u16vec4;
# 1053 "../../include/glm/fwd.hpp"
 typedef highp_u16vec1 u16vec1;



 typedef highp_u16vec2 u16vec2;



 typedef highp_u16vec3 u16vec3;



 typedef highp_u16vec4 u16vec4;





 typedef tvec1<u32, lowp> lowp_u32vec1;



 typedef tvec2<u32, lowp> lowp_u32vec2;



 typedef tvec3<u32, lowp> lowp_u32vec3;



 typedef tvec4<u32, lowp> lowp_u32vec4;




 typedef tvec1<u32, mediump> mediump_u32vec1;



 typedef tvec2<u32, mediump> mediump_u32vec2;



 typedef tvec3<u32, mediump> mediump_u32vec3;



 typedef tvec4<u32, mediump> mediump_u32vec4;




 typedef tvec1<u32, highp> highp_u32vec1;



 typedef tvec2<u32, highp> highp_u32vec2;



 typedef tvec3<u32, highp> highp_u32vec3;



 typedef tvec4<u32, highp> highp_u32vec4;
# 1132 "../../include/glm/fwd.hpp"
 typedef highp_u32vec1 u32vec1;



 typedef highp_u32vec2 u32vec2;



 typedef highp_u32vec3 u32vec3;



 typedef highp_u32vec4 u32vec4;





 typedef tvec1<u32, lowp> lowp_u32vec1;



 typedef tvec2<u32, lowp> lowp_u32vec2;



 typedef tvec3<u32, lowp> lowp_u32vec3;



 typedef tvec4<u32, lowp> lowp_u32vec4;




 typedef tvec1<u32, mediump> mediump_u32vec1;



 typedef tvec2<u32, mediump> mediump_u32vec2;



 typedef tvec3<u32, mediump> mediump_u32vec3;



 typedef tvec4<u32, mediump> mediump_u32vec4;




 typedef tvec1<u32, highp> highp_u32vec1;



 typedef tvec2<u32, highp> highp_u32vec2;



 typedef tvec3<u32, highp> highp_u32vec3;



 typedef tvec4<u32, highp> highp_u32vec4;
# 1211 "../../include/glm/fwd.hpp"
 typedef highp_u32vec1 u32vec1;



 typedef highp_u32vec2 u32vec2;



 typedef highp_u32vec3 u32vec3;



 typedef highp_u32vec4 u32vec4;






 typedef tvec1<u64, lowp> lowp_u64vec1;



 typedef tvec2<u64, lowp> lowp_u64vec2;



 typedef tvec3<u64, lowp> lowp_u64vec3;



 typedef tvec4<u64, lowp> lowp_u64vec4;




 typedef tvec1<u64, mediump> mediump_u64vec1;



 typedef tvec2<u64, mediump> mediump_u64vec2;



 typedef tvec3<u64, mediump> mediump_u64vec3;



 typedef tvec4<u64, mediump> mediump_u64vec4;




 typedef tvec1<u64, highp> highp_u64vec1;



 typedef tvec2<u64, highp> highp_u64vec2;



 typedef tvec3<u64, highp> highp_u64vec3;



 typedef tvec4<u64, highp> highp_u64vec4;
# 1291 "../../include/glm/fwd.hpp"
 typedef highp_u64vec1 u64vec1;



 typedef highp_u64vec2 u64vec2;



 typedef highp_u64vec3 u64vec3;



 typedef highp_u64vec4 u64vec4;
# 1312 "../../include/glm/fwd.hpp"
 typedef detail::float32 lowp_float32;



 typedef detail::float64 lowp_float64;



 typedef detail::float32 lowp_float32_t;



 typedef detail::float64 lowp_float64_t;



 typedef float32 lowp_f32;



 typedef float64 lowp_f64;



 typedef detail::float32 lowp_float32;



 typedef detail::float64 lowp_float64;



 typedef detail::float32 lowp_float32_t;



 typedef detail::float64 lowp_float64_t;



 typedef float32 lowp_f32;



 typedef float64 lowp_f64;




 typedef detail::float32 lowp_float32;



 typedef detail::float64 lowp_float64;



 typedef detail::float32 lowp_float32_t;



 typedef detail::float64 lowp_float64_t;



 typedef float32 lowp_f32;



 typedef float64 lowp_f64;




 typedef detail::float32 mediump_float32;



 typedef detail::float64 mediump_float64;



 typedef detail::float32 mediump_float32_t;



 typedef detail::float64 mediump_float64_t;



 typedef float32 mediump_f32;



 typedef float64 mediump_f64;




 typedef detail::float32 highp_float32;



 typedef detail::float64 highp_float64;



 typedef detail::float32 highp_float32_t;



 typedef detail::float64 highp_float64_t;



 typedef float32 highp_f32;



 typedef float64 highp_f64;
# 1489 "../../include/glm/fwd.hpp"
 typedef highp_float32 float32;



 typedef highp_float64 float64;



 typedef highp_float32_t float32_t;



 typedef highp_float64_t float64_t;



 typedef highp_float32_t f32;



 typedef highp_float64_t f64;





 typedef tvec1<float, lowp> lowp_vec1;



 typedef tvec2<float, lowp> lowp_vec2;



 typedef tvec3<float, lowp> lowp_vec3;



 typedef tvec4<float, lowp> lowp_vec4;



 typedef tvec1<float, lowp> lowp_fvec1;



 typedef tvec2<float, lowp> lowp_fvec2;



 typedef tvec3<float, lowp> lowp_fvec3;



 typedef tvec4<float, lowp> lowp_fvec4;




 typedef tvec1<float, mediump> mediump_vec1;



 typedef tvec2<float, mediump> mediump_vec2;



 typedef tvec3<float, mediump> mediump_vec3;



 typedef tvec4<float, mediump> mediump_vec4;



 typedef tvec1<float, mediump> mediump_fvec1;



 typedef tvec2<float, mediump> mediump_fvec2;



 typedef tvec3<float, mediump> mediump_fvec3;



 typedef tvec4<float, mediump> mediump_fvec4;




 typedef tvec1<float, highp> highp_vec1;



 typedef tvec2<float, highp> highp_vec2;



 typedef tvec3<float, highp> highp_vec3;



 typedef tvec4<float, highp> highp_vec4;



 typedef tvec1<float, highp> highp_fvec1;



 typedef tvec2<float, highp> highp_fvec2;



 typedef tvec3<float, highp> highp_fvec3;



 typedef tvec4<float, highp> highp_fvec4;




 typedef tvec1<f32, lowp> lowp_f32vec1;



 typedef tvec2<f32, lowp> lowp_f32vec2;



 typedef tvec3<f32, lowp> lowp_f32vec3;



 typedef tvec4<f32, lowp> lowp_f32vec4;



 typedef tvec1<f32, mediump> mediump_f32vec1;



 typedef tvec2<f32, mediump> mediump_f32vec2;



 typedef tvec3<f32, mediump> mediump_f32vec3;



 typedef tvec4<f32, mediump> mediump_f32vec4;



 typedef tvec1<f32, highp> highp_f32vec1;



 typedef tvec2<f32, highp> highp_f32vec2;



 typedef tvec3<f32, highp> highp_f32vec3;



 typedef tvec4<f32, highp> highp_f32vec4;




 typedef tvec1<f64, lowp> lowp_f64vec1;



 typedef tvec2<f64, lowp> lowp_f64vec2;



 typedef tvec3<f64, lowp> lowp_f64vec3;



 typedef tvec4<f64, lowp> lowp_f64vec4;



 typedef tvec1<f64, mediump> mediump_f64vec1;



 typedef tvec2<f64, mediump> mediump_f64vec2;



 typedef tvec3<f64, mediump> mediump_f64vec3;



 typedef tvec4<f64, mediump> mediump_f64vec4;



 typedef tvec1<f64, highp> highp_f64vec1;



 typedef tvec2<f64, highp> highp_f64vec2;



 typedef tvec3<f64, highp> highp_f64vec3;



 typedef tvec4<f64, highp> highp_f64vec4;
# 1719 "../../include/glm/fwd.hpp"
 typedef tmat2x2<f32, lowp> lowp_fmat2x2;



 typedef tmat2x3<f32, lowp> lowp_fmat2x3;



 typedef tmat2x4<f32, lowp> lowp_fmat2x4;



 typedef tmat3x2<f32, lowp> lowp_fmat3x2;



 typedef tmat3x3<f32, lowp> lowp_fmat3x3;



 typedef tmat3x4<f32, lowp> lowp_fmat3x4;



 typedef tmat4x2<f32, lowp> lowp_fmat4x2;



 typedef tmat4x3<f32, lowp> lowp_fmat4x3;



 typedef tmat4x4<f32, lowp> lowp_fmat4x4;







 typedef lowp_fmat2x2 lowp_fmat2;



 typedef lowp_fmat3x3 lowp_fmat3;



 typedef lowp_fmat4x4 lowp_fmat4;
# 1776 "../../include/glm/fwd.hpp"
 typedef tmat2x2<f32, mediump> mediump_fmat2x2;



 typedef tmat2x3<f32, mediump> mediump_fmat2x3;



 typedef tmat2x4<f32, mediump> mediump_fmat2x4;



 typedef tmat3x2<f32, mediump> mediump_fmat3x2;



 typedef tmat3x3<f32, mediump> mediump_fmat3x3;



 typedef tmat3x4<f32, mediump> mediump_fmat3x4;



 typedef tmat4x2<f32, mediump> mediump_fmat4x2;



 typedef tmat4x3<f32, mediump> mediump_fmat4x3;



 typedef tmat4x4<f32, mediump> mediump_fmat4x4;







 typedef mediump_fmat2x2 mediump_fmat2;



 typedef mediump_fmat3x3 mediump_fmat3;



 typedef mediump_fmat4x4 mediump_fmat4;
# 1833 "../../include/glm/fwd.hpp"
 typedef tmat2x2<f32, highp> highp_fmat2x2;



 typedef tmat2x3<f32, highp> highp_fmat2x3;



 typedef tmat2x4<f32, highp> highp_fmat2x4;



 typedef tmat3x2<f32, highp> highp_fmat3x2;



 typedef tmat3x3<f32, highp> highp_fmat3x3;



 typedef tmat3x4<f32, highp> highp_fmat3x4;



 typedef tmat4x2<f32, highp> highp_fmat4x2;



 typedef tmat4x3<f32, highp> highp_fmat4x3;



 typedef tmat4x4<f32, highp> highp_fmat4x4;







 typedef highp_fmat2x2 highp_fmat2;



 typedef highp_fmat3x3 highp_fmat3;



 typedef highp_fmat4x4 highp_fmat4;
# 1890 "../../include/glm/fwd.hpp"
 typedef tmat2x2<f32, lowp> lowp_f32mat2x2;



 typedef tmat2x3<f32, lowp> lowp_f32mat2x3;



 typedef tmat2x4<f32, lowp> lowp_f32mat2x4;



 typedef tmat3x2<f32, lowp> lowp_f32mat3x2;



 typedef tmat3x3<f32, lowp> lowp_f32mat3x3;



 typedef tmat3x4<f32, lowp> lowp_f32mat3x4;



 typedef tmat4x2<f32, lowp> lowp_f32mat4x2;



 typedef tmat4x3<f32, lowp> lowp_f32mat4x3;



 typedef tmat4x4<f32, lowp> lowp_f32mat4x4;







 typedef lowp_f32mat2x2 lowp_f32mat2;



 typedef lowp_f32mat3x3 lowp_f32mat3;



 typedef lowp_f32mat4x4 lowp_f32mat4;
# 1947 "../../include/glm/fwd.hpp"
 typedef tmat2x2<f32, mediump> mediump_f32mat2x2;



 typedef tmat2x3<f32, mediump> mediump_f32mat2x3;



 typedef tmat2x4<f32, mediump> mediump_f32mat2x4;



 typedef tmat3x2<f32, mediump> mediump_f32mat3x2;



 typedef tmat3x3<f32, mediump> mediump_f32mat3x3;



 typedef tmat3x4<f32, mediump> mediump_f32mat3x4;



 typedef tmat4x2<f32, mediump> mediump_f32mat4x2;



 typedef tmat4x3<f32, mediump> mediump_f32mat4x3;



 typedef tmat4x4<f32, mediump> mediump_f32mat4x4;







 typedef mediump_f32mat2x2 mediump_f32mat2;



 typedef mediump_f32mat3x3 mediump_f32mat3;



 typedef mediump_f32mat4x4 mediump_f32mat4;
# 2004 "../../include/glm/fwd.hpp"
 typedef tmat2x2<f32, highp> highp_f32mat2x2;



 typedef tmat2x3<f32, highp> highp_f32mat2x3;



 typedef tmat2x4<f32, highp> highp_f32mat2x4;



 typedef tmat3x2<f32, highp> highp_f32mat3x2;



 typedef tmat3x3<f32, highp> highp_f32mat3x3;



 typedef tmat3x4<f32, highp> highp_f32mat3x4;



 typedef tmat4x2<f32, highp> highp_f32mat4x2;



 typedef tmat4x3<f32, highp> highp_f32mat4x3;



 typedef tmat4x4<f32, highp> highp_f32mat4x4;







 typedef highp_f32mat2x2 highp_f32mat2;



 typedef highp_f32mat3x3 highp_f32mat3;



 typedef highp_f32mat4x4 highp_f32mat4;
# 2061 "../../include/glm/fwd.hpp"
 typedef tmat2x2<f64, lowp> lowp_f64mat2x2;



 typedef tmat2x3<f64, lowp> lowp_f64mat2x3;



 typedef tmat2x4<f64, lowp> lowp_f64mat2x4;



 typedef tmat3x2<f64, lowp> lowp_f64mat3x2;



 typedef tmat3x3<f64, lowp> lowp_f64mat3x3;



 typedef tmat3x4<f64, lowp> lowp_f64mat3x4;



 typedef tmat4x2<f64, lowp> lowp_f64mat4x2;



 typedef tmat4x3<f64, lowp> lowp_f64mat4x3;



 typedef tmat4x4<f64, lowp> lowp_f64mat4x4;







 typedef lowp_f64mat2x2 lowp_f64mat2;



 typedef lowp_f64mat3x3 lowp_f64mat3;



 typedef lowp_f64mat4x4 lowp_f64mat4;
# 2118 "../../include/glm/fwd.hpp"
 typedef tmat2x2<f64, mediump> mediump_f64mat2x2;



 typedef tmat2x3<f64, mediump> mediump_f64mat2x3;



 typedef tmat2x4<f64, mediump> mediump_f64mat2x4;



 typedef tmat3x2<f64, mediump> mediump_f64mat3x2;



 typedef tmat3x3<f64, mediump> mediump_f64mat3x3;



 typedef tmat3x4<f64, mediump> mediump_f64mat3x4;



 typedef tmat4x2<f64, mediump> mediump_f64mat4x2;



 typedef tmat4x3<f64, mediump> mediump_f64mat4x3;



 typedef tmat4x4<f64, mediump> mediump_f64mat4x4;







 typedef mediump_f64mat2x2 mediump_f64mat2;



 typedef mediump_f64mat3x3 mediump_f64mat3;



 typedef mediump_f64mat4x4 mediump_f64mat4;







 typedef tmat2x2<f64, highp> highp_f64mat2x2;



 typedef tmat2x3<f64, highp> highp_f64mat2x3;



 typedef tmat2x4<f64, highp> highp_f64mat2x4;



 typedef tmat3x2<f64, highp> highp_f64mat3x2;



 typedef tmat3x3<f64, highp> highp_f64mat3x3;



 typedef tmat3x4<f64, highp> highp_f64mat3x4;



 typedef tmat4x2<f64, highp> highp_f64mat4x2;



 typedef tmat4x3<f64, highp> highp_f64mat4x3;



 typedef tmat4x4<f64, highp> highp_f64mat4x4;







 typedef highp_f64mat2x2 highp_f64mat2;



 typedef highp_f64mat3x3 highp_f64mat3;



 typedef highp_f64mat4x4 highp_f64mat4;






 typedef tquat<f32, lowp> lowp_f32quat;



 typedef tquat<f64, lowp> lowp_f64quat;



 typedef tquat<f32, mediump> mediump_f32quat;



 typedef tquat<f64, mediump> mediump_f64quat;



 typedef tquat<f32, highp> highp_f32quat;



 typedef tquat<f64, highp> highp_f64quat;
# 2327 "../../include/glm/fwd.hpp"
 typedef highp_f32vec1 fvec1;



 typedef highp_f32vec2 fvec2;



 typedef highp_f32vec3 fvec3;



 typedef highp_f32vec4 fvec4;



 typedef highp_f32mat2x2 fmat2x2;



 typedef highp_f32mat2x3 fmat2x3;



 typedef highp_f32mat2x4 fmat2x4;



 typedef highp_f32mat3x2 fmat3x2;



 typedef highp_f32mat3x3 fmat3x3;



 typedef highp_f32mat3x4 fmat3x4;



 typedef highp_f32mat4x2 fmat4x2;



 typedef highp_f32mat4x3 fmat4x3;



 typedef highp_f32mat4x4 fmat4x4;



 typedef fmat2x2 fmat2;



 typedef fmat3x3 fmat3;



 typedef fmat4x4 fmat4;



 typedef highp_fquat fquat;





 typedef highp_f32vec1 f32vec1;



 typedef highp_f32vec2 f32vec2;



 typedef highp_f32vec3 f32vec3;



 typedef highp_f32vec4 f32vec4;



 typedef highp_f32mat2x2 f32mat2x2;



 typedef highp_f32mat2x3 f32mat2x3;



 typedef highp_f32mat2x4 f32mat2x4;



 typedef highp_f32mat3x2 f32mat3x2;



 typedef highp_f32mat3x3 f32mat3x3;



 typedef highp_f32mat3x4 f32mat3x4;



 typedef highp_f32mat4x2 f32mat4x2;



 typedef highp_f32mat4x3 f32mat4x3;



 typedef highp_f32mat4x4 f32mat4x4;



 typedef f32mat2x2 f32mat2;



 typedef f32mat3x3 f32mat3;



 typedef f32mat4x4 f32mat4;



 typedef highp_f32quat f32quat;
# 2503 "../../include/glm/fwd.hpp"
 typedef highp_f64vec1 f64vec1;



 typedef highp_f64vec2 f64vec2;



 typedef highp_f64vec3 f64vec3;



 typedef highp_f64vec4 f64vec4;



 typedef highp_f64mat2x2 f64mat2x2;



 typedef highp_f64mat2x3 f64mat2x3;



 typedef highp_f64mat2x4 f64mat2x4;



 typedef highp_f64mat3x2 f64mat3x2;



 typedef highp_f64mat3x3 f64mat3x3;



 typedef highp_f64mat3x4 f64mat3x4;



 typedef highp_f64mat4x2 f64mat4x2;



 typedef highp_f64mat4x3 f64mat4x3;



 typedef highp_f64mat4x4 f64mat4x4;



 typedef f64mat2x2 f64mat2;



 typedef f64mat3x3 f64mat3;



 typedef f64mat4x4 f64mat4;



 typedef highp_f64quat f64quat;


}
# 62 "../../include/glm/glm.hpp" 2






# 1 "../../include/glm/vec2.hpp" 1



       

# 1 "../../include/glm/detail/type_vec2.hpp" 1



       
# 16 "../../include/glm/detail/type_vec2.hpp"
namespace glm
{
 template <typename T, precision P = defaultp>
 struct tvec2
 {


  typedef T value_type;
  typedef tvec2<T, P> type;
  typedef tvec2<bool, P> bool_type;
# 34 "../../include/glm/detail/type_vec2.hpp"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"







   union
   {
    struct{ T x, y; };
    struct{ T r, g; };
    struct{ T s, t; };
# 61 "../../include/glm/detail/type_vec2.hpp"
   };





#pragma GCC diagnostic pop
# 81 "../../include/glm/detail/type_vec2.hpp"
  typedef length_t length_type;
  static length_type length(){return 2;}

  T & operator[](length_type i);
  T const & operator[](length_type i) const;



  constexpr tvec2() ;
  constexpr tvec2(tvec2<T, P> const& v) = default;
  template <precision Q>
  constexpr tvec2(tvec2<T, Q> const& v);



  constexpr explicit tvec2(ctor);
  constexpr explicit tvec2(T scalar);
  constexpr tvec2(T s1, T s2);




  template <typename A, typename B>
  constexpr tvec2(A x, B y);
  template <typename A, typename B>
  constexpr tvec2(tvec1<A, P> const & v1, tvec1<B, P> const & v2);




  template <typename U, precision Q>
  constexpr tvec2(tvec3<U, Q> const & v);

  template <typename U, precision Q>
  constexpr tvec2(tvec4<U, Q> const & v);


  template <typename U, precision Q>
  constexpr tvec2(tvec2<U, Q> const & v);
# 132 "../../include/glm/detail/type_vec2.hpp"
  tvec2<T, P>& operator=(tvec2<T, P> const & v) = default;

  template <typename U>
  tvec2<T, P>& operator=(tvec2<U, P> const & v);
  template <typename U>
  tvec2<T, P>& operator+=(U scalar);
  template <typename U>
  tvec2<T, P>& operator+=(tvec1<U, P> const & v);
  template <typename U>
  tvec2<T, P>& operator+=(tvec2<U, P> const & v);
  template <typename U>
  tvec2<T, P>& operator-=(U scalar);
  template <typename U>
  tvec2<T, P>& operator-=(tvec1<U, P> const & v);
  template <typename U>
  tvec2<T, P>& operator-=(tvec2<U, P> const & v);
  template <typename U>
  tvec2<T, P>& operator*=(U scalar);
  template <typename U>
  tvec2<T, P>& operator*=(tvec1<U, P> const & v);
  template <typename U>
  tvec2<T, P>& operator*=(tvec2<U, P> const & v);
  template <typename U>
  tvec2<T, P>& operator/=(U scalar);
  template <typename U>
  tvec2<T, P>& operator/=(tvec1<U, P> const & v);
  template <typename U>
  tvec2<T, P>& operator/=(tvec2<U, P> const & v);



  tvec2<T, P> & operator++();
  tvec2<T, P> & operator--();
  tvec2<T, P> operator++(int);
  tvec2<T, P> operator--(int);



  template <typename U>
  tvec2<T, P> & operator%=(U scalar);
  template <typename U>
  tvec2<T, P> & operator%=(tvec1<U, P> const & v);
  template <typename U>
  tvec2<T, P> & operator%=(tvec2<U, P> const & v);
  template <typename U>
  tvec2<T, P> & operator&=(U scalar);
  template <typename U>
  tvec2<T, P> & operator&=(tvec1<U, P> const & v);
  template <typename U>
  tvec2<T, P> & operator&=(tvec2<U, P> const & v);
  template <typename U>
  tvec2<T, P> & operator|=(U scalar);
  template <typename U>
  tvec2<T, P> & operator|=(tvec1<U, P> const & v);
  template <typename U>
  tvec2<T, P> & operator|=(tvec2<U, P> const & v);
  template <typename U>
  tvec2<T, P> & operator^=(U scalar);
  template <typename U>
  tvec2<T, P> & operator^=(tvec1<U, P> const & v);
  template <typename U>
  tvec2<T, P> & operator^=(tvec2<U, P> const & v);
  template <typename U>
  tvec2<T, P> & operator<<=(U scalar);
  template <typename U>
  tvec2<T, P> & operator<<=(tvec1<U, P> const & v);
  template <typename U>
  tvec2<T, P> & operator<<=(tvec2<U, P> const & v);
  template <typename U>
  tvec2<T, P> & operator>>=(U scalar);
  template <typename U>
  tvec2<T, P> & operator>>=(tvec1<U, P> const & v);
  template <typename U>
  tvec2<T, P> & operator>>=(tvec2<U, P> const & v);
 };



 template <typename T, precision P>
 tvec2<T, P> operator+(tvec2<T, P> const & v);

 template <typename T, precision P>
 tvec2<T, P> operator-(tvec2<T, P> const & v);



 template <typename T, precision P>
 tvec2<T, P> operator+(tvec2<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec2<T, P> operator+(tvec2<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator+(T scalar, tvec2<T, P> const & v);

 template <typename T, precision P>
 tvec2<T, P> operator+(tvec1<T, P> const & v1, tvec2<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator+(tvec2<T, P> const & v1, tvec2<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator-(tvec2<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec2<T, P> operator-(tvec2<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator-(T scalar, tvec2<T, P> const & v);

 template <typename T, precision P>
 tvec2<T, P> operator-(tvec1<T, P> const & v1, tvec2<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator-(tvec2<T, P> const & v1, tvec2<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator*(tvec2<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec2<T, P> operator*(tvec2<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator*(T scalar, tvec2<T, P> const & v);

 template <typename T, precision P>
 tvec2<T, P> operator*(tvec1<T, P> const & v1, tvec2<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator*(tvec2<T, P> const & v1, tvec2<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator/(tvec2<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec2<T, P> operator/(tvec2<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator/(T scalar, tvec2<T, P> const & v);

 template <typename T, precision P>
 tvec2<T, P> operator/(tvec1<T, P> const & v1, tvec2<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator/(tvec2<T, P> const & v1, tvec2<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator%(tvec2<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec2<T, P> operator%(tvec2<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator%(T scalar, tvec2<T, P> const & v);

 template <typename T, precision P>
 tvec2<T, P> operator%(tvec1<T, P> const & v1, tvec2<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator%(tvec2<T, P> const & v1, tvec2<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator&(tvec2<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec2<T, P> operator&(tvec2<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator&(T scalar, tvec2<T, P> const & v);

 template <typename T, precision P>
 tvec2<T, P> operator&(tvec1<T, P> const & v1, tvec2<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator&(tvec2<T, P> const & v1, tvec2<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator|(tvec2<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec2<T, P> operator|(tvec2<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator|(T scalar, tvec2<T, P> const & v);

 template <typename T, precision P>
 tvec2<T, P> operator|(tvec1<T, P> const & v1, tvec2<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator|(tvec2<T, P> const & v1, tvec2<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator^(tvec2<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec2<T, P> operator^(tvec2<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator^(T scalar, tvec2<T, P> const & v);

 template <typename T, precision P>
 tvec2<T, P> operator^(tvec1<T, P> const & v1, tvec2<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator^(tvec2<T, P> const & v1, tvec2<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator<<(tvec2<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec2<T, P> operator<<(tvec2<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator<<(T scalar, tvec2<T, P> const & v);

 template <typename T, precision P>
 tvec2<T, P> operator<<(tvec1<T, P> const & v1, tvec2<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator<<(tvec2<T, P> const & v1, tvec2<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator>>(tvec2<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec2<T, P> operator>>(tvec2<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator>>(T scalar, tvec2<T, P> const & v);

 template <typename T, precision P>
 tvec2<T, P> operator>>(tvec1<T, P> const & v1, tvec2<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator>>(tvec2<T, P> const & v1, tvec2<T, P> const & v2);

 template <typename T, precision P>
 tvec2<T, P> operator~(tvec2<T, P> const & v);



 template <typename T, precision P>
 bool operator==(tvec2<T, P> const & v1, tvec2<T, P> const & v2);

 template <typename T, precision P>
 bool operator!=(tvec2<T, P> const & v1, tvec2<T, P> const & v2);

 template <precision P>
 tvec2<bool, P> operator&&(tvec2<bool, P> const & v1, tvec2<bool, P> const & v2);

 template <precision P>
 tvec2<bool, P> operator||(tvec2<bool, P> const & v1, tvec2<bool, P> const & v2);
}


# 1 "../../include/glm/detail/type_vec2.inl" 1



namespace glm
{
# 22 "../../include/glm/detail/type_vec2.inl"
  template <typename T, precision P>
  inline constexpr tvec2<T, P>::tvec2()

    : x(0), y(0)

  {}
# 37 "../../include/glm/detail/type_vec2.inl"
 template <typename T, precision P>
 template <precision Q>
 inline constexpr tvec2<T, P>::tvec2(tvec2<T, Q> const & v)
  : x(v.x), y(v.y)
 {}



 template <typename T, precision P>
 inline constexpr tvec2<T, P>::tvec2(ctor)
 {}

 template <typename T, precision P>
 inline constexpr tvec2<T, P>::tvec2(T scalar)
  : x(scalar), y(scalar)
 {}

 template <typename T, precision P>
 inline constexpr tvec2<T, P>::tvec2(T s1, T s2)
  : x(s1), y(s2)
 {}



 template <typename T, precision P>
 template <typename A, typename B>
 inline constexpr tvec2<T, P>::tvec2(A a, B b)
  : x(static_cast<T>(a))
  , y(static_cast<T>(b))
 {}

 template <typename T, precision P>
 template <typename A, typename B>
 inline constexpr tvec2<T, P>::tvec2(tvec1<A, P> const & a, tvec1<B, P> const & b)
  : x(static_cast<T>(a.x))
  , y(static_cast<T>(b.x))
 {}



 template <typename T, precision P>
 template <typename U, precision Q>
 inline constexpr tvec2<T, P>::tvec2(tvec2<U, Q> const & v)
  : x(static_cast<T>(v.x))
  , y(static_cast<T>(v.y))
 {}

 template <typename T, precision P>
 template <typename U, precision Q>
 inline constexpr tvec2<T, P>::tvec2(tvec3<U, Q> const & v)
  : x(static_cast<T>(v.x))
  , y(static_cast<T>(v.y))
 {}

 template <typename T, precision P>
 template <typename U, precision Q>
 inline constexpr tvec2<T, P>::tvec2(tvec4<U, Q> const & v)
  : x(static_cast<T>(v.x))
  , y(static_cast<T>(v.y))
 {}



 template <typename T, precision P>
 inline T & tvec2<T, P>::operator[](typename tvec2<T, P>::length_type i)
 {
  
# 103 "../../include/glm/detail/type_vec2.inl" 3
 ((
# 103 "../../include/glm/detail/type_vec2.inl"
 i >= 0 && i < this->length()
# 103 "../../include/glm/detail/type_vec2.inl" 3
 ) ? (void)0 : _assert(
# 103 "../../include/glm/detail/type_vec2.inl"
 "i >= 0 && i < this->length()"
# 103 "../../include/glm/detail/type_vec2.inl" 3
 , "../../include/glm/detail/type_vec2.inl", 103))
# 103 "../../include/glm/detail/type_vec2.inl"
                                     ;
  return (&x)[i];
 }

 template <typename T, precision P>
 inline T const & tvec2<T, P>::operator[](typename tvec2<T, P>::length_type i) const
 {
  
# 110 "../../include/glm/detail/type_vec2.inl" 3
 ((
# 110 "../../include/glm/detail/type_vec2.inl"
 i >= 0 && i < this->length()
# 110 "../../include/glm/detail/type_vec2.inl" 3
 ) ? (void)0 : _assert(
# 110 "../../include/glm/detail/type_vec2.inl"
 "i >= 0 && i < this->length()"
# 110 "../../include/glm/detail/type_vec2.inl" 3
 , "../../include/glm/detail/type_vec2.inl", 110))
# 110 "../../include/glm/detail/type_vec2.inl"
                                     ;
  return (&x)[i];
 }
# 126 "../../include/glm/detail/type_vec2.inl"
 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator=(tvec2<U, P> const & v)
 {
  this->x = static_cast<T>(v.x);
  this->y = static_cast<T>(v.y);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator+=(U scalar)
 {
  this->x += static_cast<T>(scalar);
  this->y += static_cast<T>(scalar);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator+=(tvec1<U, P> const & v)
 {
  this->x += static_cast<T>(v.x);
  this->y += static_cast<T>(v.x);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator+=(tvec2<U, P> const & v)
 {
  this->x += static_cast<T>(v.x);
  this->y += static_cast<T>(v.y);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator-=(U scalar)
 {
  this->x -= static_cast<T>(scalar);
  this->y -= static_cast<T>(scalar);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator-=(tvec1<U, P> const & v)
 {
  this->x -= static_cast<T>(v.x);
  this->y -= static_cast<T>(v.x);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator-=(tvec2<U, P> const & v)
 {
  this->x -= static_cast<T>(v.x);
  this->y -= static_cast<T>(v.y);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator*=(U scalar)
 {
  this->x *= static_cast<T>(scalar);
  this->y *= static_cast<T>(scalar);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator*=(tvec1<U, P> const & v)
 {
  this->x *= static_cast<T>(v.x);
  this->y *= static_cast<T>(v.x);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator*=(tvec2<U, P> const & v)
 {
  this->x *= static_cast<T>(v.x);
  this->y *= static_cast<T>(v.y);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator/=(U scalar)
 {
  this->x /= static_cast<T>(scalar);
  this->y /= static_cast<T>(scalar);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator/=(tvec1<U, P> const & v)
 {
  this->x /= static_cast<T>(v.x);
  this->y /= static_cast<T>(v.x);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator/=(tvec2<U, P> const & v)
 {
  this->x /= static_cast<T>(v.x);
  this->y /= static_cast<T>(v.y);
  return *this;
 }



 template <typename T, precision P>
 inline tvec2<T, P> & tvec2<T, P>::operator++()
 {
  ++this->x;
  ++this->y;
  return *this;
 }

 template <typename T, precision P>
 inline tvec2<T, P> & tvec2<T, P>::operator--()
 {
  --this->x;
  --this->y;
  return *this;
 }

 template <typename T, precision P>
 inline tvec2<T, P> tvec2<T, P>::operator++(int)
 {
  tvec2<T, P> Result(*this);
  ++*this;
  return Result;
 }

 template <typename T, precision P>
 inline tvec2<T, P> tvec2<T, P>::operator--(int)
 {
  tvec2<T, P> Result(*this);
  --*this;
  return Result;
 }



 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator%=(U scalar)
 {
  this->x %= static_cast<T>(scalar);
  this->y %= static_cast<T>(scalar);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator%=(tvec1<U, P> const & v)
 {
  this->x %= static_cast<T>(v.x);
  this->y %= static_cast<T>(v.x);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator%=(tvec2<U, P> const & v)
 {
  this->x %= static_cast<T>(v.x);
  this->y %= static_cast<T>(v.y);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator&=(U scalar)
 {
  this->x &= static_cast<T>(scalar);
  this->y &= static_cast<T>(scalar);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator&=(tvec1<U, P> const & v)
 {
  this->x &= static_cast<T>(v.x);
  this->y &= static_cast<T>(v.x);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator&=(tvec2<U, P> const & v)
 {
  this->x &= static_cast<T>(v.x);
  this->y &= static_cast<T>(v.y);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator|=(U scalar)
 {
  this->x |= static_cast<T>(scalar);
  this->y |= static_cast<T>(scalar);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator|=(tvec1<U, P> const & v)
 {
  this->x |= static_cast<T>(v.x);
  this->y |= static_cast<T>(v.x);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator|=(tvec2<U, P> const & v)
 {
  this->x |= static_cast<T>(v.x);
  this->y |= static_cast<T>(v.y);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator^=(U scalar)
 {
  this->x ^= static_cast<T>(scalar);
  this->y ^= static_cast<T>(scalar);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator^=(tvec1<U, P> const & v)
 {
  this->x ^= static_cast<T>(v.x);
  this->y ^= static_cast<T>(v.x);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator^=(tvec2<U, P> const & v)
 {
  this->x ^= static_cast<T>(v.x);
  this->y ^= static_cast<T>(v.y);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator<<=(U scalar)
 {
  this->x <<= static_cast<T>(scalar);
  this->y <<= static_cast<T>(scalar);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator<<=(tvec1<U, P> const & v)
 {
  this->x <<= static_cast<T>(v.x);
  this->y <<= static_cast<T>(v.x);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator<<=(tvec2<U, P> const & v)
 {
  this->x <<= static_cast<T>(v.x);
  this->y <<= static_cast<T>(v.y);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator>>=(U scalar)
 {
  this->x >>= static_cast<T>(scalar);
  this->y >>= static_cast<T>(scalar);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator>>=(tvec1<U, P> const & v)
 {
  this->x >>= static_cast<T>(v.x);
  this->y >>= static_cast<T>(v.x);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec2<T, P> & tvec2<T, P>::operator>>=(tvec2<U, P> const & v)
 {
  this->x >>= static_cast<T>(v.x);
  this->y >>= static_cast<T>(v.y);
  return *this;
 }



 template <typename T, precision P>
 inline tvec2<T, P> operator+(tvec2<T, P> const & v)
 {
  return v;
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator-(tvec2<T, P> const & v)
 {
  return tvec2<T, P>(
   -v.x,
   -v.y);
 }



 template <typename T, precision P>
 inline tvec2<T, P> operator+(tvec2<T, P> const & v, T scalar)
 {
  return tvec2<T, P>(
   v.x + scalar,
   v.y + scalar);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator+(tvec2<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x + v2.x,
   v1.y + v2.x);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator+(T scalar, tvec2<T, P> const & v)
 {
  return tvec2<T, P>(
   scalar + v.x,
   scalar + v.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator+(tvec1<T, P> const & v1, tvec2<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x + v2.x,
   v1.x + v2.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator+(tvec2<T, P> const & v1, tvec2<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x + v2.x,
   v1.y + v2.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator-(tvec2<T, P> const & v, T scalar)
 {
  return tvec2<T, P>(
   v.x - scalar,
   v.y - scalar);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator-(tvec2<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x - v2.x,
   v1.y - v2.x);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator-(T scalar, tvec2<T, P> const & v)
 {
  return tvec2<T, P>(
   scalar - v.x,
   scalar - v.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator-(tvec1<T, P> const & v1, tvec2<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x - v2.x,
   v1.x - v2.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator-(tvec2<T, P> const & v1, tvec2<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x - v2.x,
   v1.y - v2.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator*(tvec2<T, P> const & v, T scalar)
 {
  return tvec2<T, P>(
   v.x * scalar,
   v.y * scalar);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator*(tvec2<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x * v2.x,
   v1.y * v2.x);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator*(T scalar, tvec2<T, P> const & v)
 {
  return tvec2<T, P>(
   scalar * v.x,
   scalar * v.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator*(tvec1<T, P> const & v1, tvec2<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x * v2.x,
   v1.x * v2.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator*(tvec2<T, P> const & v1, tvec2<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x * v2.x,
   v1.y * v2.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator/(tvec2<T, P> const & v, T scalar)
 {
  return tvec2<T, P>(
   v.x / scalar,
   v.y / scalar);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator/(tvec2<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x / v2.x,
   v1.y / v2.x);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator/(T scalar, tvec2<T, P> const & v)
 {
  return tvec2<T, P>(
   scalar / v.x,
   scalar / v.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator/(tvec1<T, P> const & v1, tvec2<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x / v2.x,
   v1.x / v2.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator/(tvec2<T, P> const & v1, tvec2<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x / v2.x,
   v1.y / v2.y);
 }



 template <typename T, precision P>
 inline tvec2<T, P> operator%(tvec2<T, P> const & v, T scalar)
 {
  return tvec2<T, P>(
   v.x % scalar,
   v.y % scalar);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator%(tvec2<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x % v2.x,
   v1.y % v2.x);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator%(T scalar, tvec2<T, P> const & v)
 {
  return tvec2<T, P>(
   scalar % v.x,
   scalar % v.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator%(tvec1<T, P> const & v1, tvec2<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x % v2.x,
   v1.x % v2.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator%(tvec2<T, P> const & v1, tvec2<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x % v2.x,
   v1.y % v2.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator&(tvec2<T, P> const & v, T scalar)
 {
  return tvec2<T, P>(
   v.x & scalar,
   v.y & scalar);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator&(tvec2<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x & v2.x,
   v1.y & v2.x);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator&(T scalar, tvec2<T, P> const & v)
 {
  return tvec2<T, P>(
   scalar & v.x,
   scalar & v.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator&(tvec1<T, P> const & v1, tvec2<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x & v2.x,
   v1.x & v2.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator&(tvec2<T, P> const & v1, tvec2<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x & v2.x,
   v1.y & v2.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator|(tvec2<T, P> const & v, T scalar)
 {
  return tvec2<T, P>(
   v.x | scalar,
   v.y | scalar);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator|(tvec2<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x | v2.x,
   v1.y | v2.x);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator|(T scalar, tvec2<T, P> const & v)
 {
  return tvec2<T, P>(
   scalar | v.x,
   scalar | v.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator|(tvec1<T, P> const & v1, tvec2<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x | v2.x,
   v1.x | v2.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator|(tvec2<T, P> const & v1, tvec2<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x | v2.x,
   v1.y | v2.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator^(tvec2<T, P> const & v, T scalar)
 {
  return tvec2<T, P>(
   v.x ^ scalar,
   v.y ^ scalar);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator^(tvec2<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x ^ v2.x,
   v1.y ^ v2.x);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator^(T scalar, tvec2<T, P> const & v)
 {
  return tvec2<T, P>(
   scalar ^ v.x,
   scalar ^ v.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator^(tvec1<T, P> const & v1, tvec2<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x ^ v2.x,
   v1.x ^ v2.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator^(tvec2<T, P> const & v1, tvec2<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x ^ v2.x,
   v1.y ^ v2.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator<<(tvec2<T, P> const & v, T scalar)
 {
  return tvec2<T, P>(
   v.x << scalar,
   v.y << scalar);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator<<(tvec2<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x << v2.x,
   v1.y << v2.x);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator<<(T scalar, tvec2<T, P> const & v)
 {
  return tvec2<T, P>(
   scalar << v.x,
   scalar << v.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator<<(tvec1<T, P> const & v1, tvec2<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x << v2.x,
   v1.x << v2.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator<<(tvec2<T, P> const & v1, tvec2<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x << v2.x,
   v1.y << v2.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator>>(tvec2<T, P> const & v, T scalar)
 {
  return tvec2<T, P>(
   v.x >> scalar,
   v.y >> scalar);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator>>(tvec2<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x >> v2.x,
   v1.y >> v2.x);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator>>(T scalar, tvec2<T, P> const & v)
 {
  return tvec2<T, P>(
   scalar >> v.x,
   scalar >> v.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator>>(tvec1<T, P> const & v1, tvec2<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x >> v2.x,
   v1.x >> v2.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator>>(tvec2<T, P> const & v1, tvec2<T, P> const & v2)
 {
  return tvec2<T, P>(
   v1.x >> v2.x,
   v1.y >> v2.y);
 }

 template <typename T, precision P>
 inline tvec2<T, P> operator~(tvec2<T, P> const & v)
 {
  return tvec2<T, P>(
   ~v.x,
   ~v.y);
 }



 template <typename T, precision P>
 inline bool operator==(tvec2<T, P> const & v1, tvec2<T, P> const & v2)
 {
  return (v1.x == v2.x) && (v1.y == v2.y);
 }

 template <typename T, precision P>
 inline bool operator!=(tvec2<T, P> const & v1, tvec2<T, P> const & v2)
 {
  return (v1.x != v2.x) || (v1.y != v2.y);
 }

 template <precision P>
 inline tvec2<bool, P> operator&&(tvec2<bool, P> const & v1, tvec2<bool, P> const & v2)
 {
  return tvec2<bool, P>(v1.x && v2.x, v1.y && v2.y);
 }

 template <precision P>
 inline tvec2<bool, P> operator||(tvec2<bool, P> const & v1, tvec2<bool, P> const & v2)
 {
  return tvec2<bool, P>(v1.x || v2.x, v1.y || v2.y);
 }
}
# 388 "../../include/glm/detail/type_vec2.hpp" 2
# 7 "../../include/glm/vec2.hpp" 2
# 69 "../../include/glm/glm.hpp" 2
# 1 "../../include/glm/vec3.hpp" 1



       

# 1 "../../include/glm/detail/type_vec3.hpp" 1



       
# 16 "../../include/glm/detail/type_vec3.hpp"
namespace glm
{
 template <typename T, precision P = defaultp>
 struct tvec3
 {


  typedef T value_type;
  typedef tvec3<T, P> type;
  typedef tvec3<bool, P> bool_type;
# 34 "../../include/glm/detail/type_vec3.hpp"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"







   union
   {
    struct{ T x, y, z; };
    struct{ T r, g, b; };
    struct{ T s, t, p; };
# 60 "../../include/glm/detail/type_vec3.hpp"
   };





#pragma GCC diagnostic pop
# 81 "../../include/glm/detail/type_vec3.hpp"
  typedef length_t length_type;
  static length_type length(){return 3;}

  T & operator[](length_type i);
  T const & operator[](length_type i) const;



  constexpr tvec3() ;
  constexpr tvec3(tvec3<T, P> const & v) = default;
  template <precision Q>
  constexpr tvec3(tvec3<T, Q> const & v);



  constexpr explicit tvec3(ctor);
  constexpr explicit tvec3(T scalar);
  constexpr tvec3(T a, T b, T c);




  template <typename A, typename B, typename C>
  constexpr tvec3(A a, B b, C c);
  template <typename A, typename B, typename C>
  constexpr tvec3(tvec1<A, P> const & a, tvec1<B, P> const & b, tvec1<C, P> const & c);




  template <typename A, typename B, precision Q>
  constexpr tvec3(tvec2<A, Q> const & a, B b);

  template <typename A, typename B, precision Q>
  constexpr tvec3(tvec2<A, Q> const & a, tvec1<B, Q> const & b);

  template <typename A, typename B, precision Q>
  constexpr tvec3(A a, tvec2<B, Q> const & b);

  template <typename A, typename B, precision Q>
  constexpr tvec3(tvec1<A, Q> const & a, tvec2<B, Q> const & b);

  template <typename U, precision Q>
  constexpr tvec3(tvec4<U, Q> const & v);


  template <typename U, precision Q>
  constexpr tvec3(tvec3<U, Q> const & v);
# 153 "../../include/glm/detail/type_vec3.hpp"
  tvec3<T, P> & operator=(tvec3<T, P> const & v) = default;

  template <typename U>
  tvec3<T, P> & operator=(tvec3<U, P> const & v);
  template <typename U>
  tvec3<T, P> & operator+=(U scalar);
  template <typename U>
  tvec3<T, P> & operator+=(tvec1<U, P> const & v);
  template <typename U>
  tvec3<T, P> & operator+=(tvec3<U, P> const & v);
  template <typename U>
  tvec3<T, P> & operator-=(U scalar);
  template <typename U>
  tvec3<T, P> & operator-=(tvec1<U, P> const & v);
  template <typename U>
  tvec3<T, P> & operator-=(tvec3<U, P> const & v);
  template <typename U>
  tvec3<T, P> & operator*=(U scalar);
  template <typename U>
  tvec3<T, P> & operator*=(tvec1<U, P> const & v);
  template <typename U>
  tvec3<T, P> & operator*=(tvec3<U, P> const & v);
  template <typename U>
  tvec3<T, P> & operator/=(U scalar);
  template <typename U>
  tvec3<T, P> & operator/=(tvec1<U, P> const & v);
  template <typename U>
  tvec3<T, P> & operator/=(tvec3<U, P> const & v);



  tvec3<T, P> & operator++();
  tvec3<T, P> & operator--();
  tvec3<T, P> operator++(int);
  tvec3<T, P> operator--(int);



  template <typename U>
  tvec3<T, P> & operator%=(U scalar);
  template <typename U>
  tvec3<T, P> & operator%=(tvec1<U, P> const & v);
  template <typename U>
  tvec3<T, P> & operator%=(tvec3<U, P> const & v);
  template <typename U>
  tvec3<T, P> & operator&=(U scalar);
  template <typename U>
  tvec3<T, P> & operator&=(tvec1<U, P> const & v);
  template <typename U>
  tvec3<T, P> & operator&=(tvec3<U, P> const & v);
  template <typename U>
  tvec3<T, P> & operator|=(U scalar);
  template <typename U>
  tvec3<T, P> & operator|=(tvec1<U, P> const & v);
  template <typename U>
  tvec3<T, P> & operator|=(tvec3<U, P> const & v);
  template <typename U>
  tvec3<T, P> & operator^=(U scalar);
  template <typename U>
  tvec3<T, P> & operator^=(tvec1<U, P> const & v);
  template <typename U>
  tvec3<T, P> & operator^=(tvec3<U, P> const & v);
  template <typename U>
  tvec3<T, P> & operator<<=(U scalar);
  template <typename U>
  tvec3<T, P> & operator<<=(tvec1<U, P> const & v);
  template <typename U>
  tvec3<T, P> & operator<<=(tvec3<U, P> const & v);
  template <typename U>
  tvec3<T, P> & operator>>=(U scalar);
  template <typename U>
  tvec3<T, P> & operator>>=(tvec1<U, P> const & v);
  template <typename U>
  tvec3<T, P> & operator>>=(tvec3<U, P> const & v);
 };



 template <typename T, precision P>
 tvec3<T, P> operator+(tvec3<T, P> const & v);

 template <typename T, precision P>
 tvec3<T, P> operator-(tvec3<T, P> const & v);



 template <typename T, precision P>
 tvec3<T, P> operator+(tvec3<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec3<T, P> operator+(tvec3<T, P> const & v, tvec1<T, P> const & scalar);

 template <typename T, precision P>
 tvec3<T, P> operator+(T scalar, tvec3<T, P> const & v);

 template <typename T, precision P>
 tvec3<T, P> operator+(tvec1<T, P> const & v1, tvec3<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator+(tvec3<T, P> const & v1, tvec3<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator-(tvec3<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec3<T, P> operator-(tvec3<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator-(T scalar, tvec3<T, P> const & v);

 template <typename T, precision P>
 tvec3<T, P> operator-(tvec1<T, P> const & v1, tvec3<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator-(tvec3<T, P> const & v1, tvec3<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator*(tvec3<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec3<T, P> operator*(tvec3<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator*(T scalar, tvec3<T, P> const & v);

 template <typename T, precision P>
 tvec3<T, P> operator*(tvec1<T, P> const & v1, tvec3<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator*(tvec3<T, P> const & v1, tvec3<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator/(tvec3<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec3<T, P> operator/(tvec3<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator/(T scalar, tvec3<T, P> const & v);

 template <typename T, precision P>
 tvec3<T, P> operator/(tvec1<T, P> const & v1, tvec3<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator/(tvec3<T, P> const & v1, tvec3<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator%(tvec3<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec3<T, P> operator%(tvec3<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator%(T const & scalar, tvec3<T, P> const & v);

 template <typename T, precision P>
 tvec3<T, P> operator%(tvec1<T, P> const & v1, tvec3<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator%(tvec3<T, P> const & v1, tvec3<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator&(tvec3<T, P> const & v1, T scalar);

 template <typename T, precision P>
 tvec3<T, P> operator&(tvec3<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator&(T scalar, tvec3<T, P> const & v);

 template <typename T, precision P>
 tvec3<T, P> operator&(tvec1<T, P> const & v1, tvec3<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator&(tvec3<T, P> const & v1, tvec3<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator|(tvec3<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec3<T, P> operator|(tvec3<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator|(T scalar, tvec3<T, P> const & v);

 template <typename T, precision P>
 tvec3<T, P> operator|(tvec1<T, P> const & v1, tvec3<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator|(tvec3<T, P> const & v1, tvec3<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator^(tvec3<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec3<T, P> operator^(tvec3<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator^(T scalar, tvec3<T, P> const & v);

 template <typename T, precision P>
 tvec3<T, P> operator^(tvec1<T, P> const & v1, tvec3<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator^(tvec3<T, P> const & v1, tvec3<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator<<(tvec3<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec3<T, P> operator<<(tvec3<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator<<(T scalar, tvec3<T, P> const & v);

 template <typename T, precision P>
 tvec3<T, P> operator<<(tvec1<T, P> const & v1, tvec3<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator<<(tvec3<T, P> const & v1, tvec3<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator>>(tvec3<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec3<T, P> operator>>(tvec3<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator>>(T scalar, tvec3<T, P> const & v);

 template <typename T, precision P>
 tvec3<T, P> operator>>(tvec1<T, P> const & v1, tvec3<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator>>(tvec3<T, P> const & v1, tvec3<T, P> const & v2);

 template <typename T, precision P>
 tvec3<T, P> operator~(tvec3<T, P> const & v);



 template <typename T, precision P>
 bool operator==(tvec3<T, P> const & v1, tvec3<T, P> const & v2);

 template <typename T, precision P>
 bool operator!=(tvec3<T, P> const & v1, tvec3<T, P> const & v2);

 template <precision P>
 tvec3<bool, P> operator&&(tvec3<bool, P> const & v1, tvec3<bool, P> const & v2);

 template <precision P>
 tvec3<bool, P> operator||(tvec3<bool, P> const & v1, tvec3<bool, P> const & v2);
}


# 1 "../../include/glm/detail/type_vec3.inl" 1



namespace glm
{
# 35 "../../include/glm/detail/type_vec3.inl"
  template <typename T, precision P>
  inline constexpr tvec3<T, P>::tvec3()

    : x(0), y(0), z(0)

  {}
# 50 "../../include/glm/detail/type_vec3.inl"
 template <typename T, precision P>
 template <precision Q>
 inline constexpr tvec3<T, P>::tvec3(tvec3<T, Q> const & v)
  : x(v.x), y(v.y), z(v.z)
 {}



 template <typename T, precision P>
 inline constexpr tvec3<T, P>::tvec3(ctor)
 {}

 template <typename T, precision P>
 inline constexpr tvec3<T, P>::tvec3(T scalar)
  : x(scalar), y(scalar), z(scalar)
 {}

 template <typename T, precision P>
 inline constexpr tvec3<T, P>::tvec3(T a, T b, T c)
  : x(a), y(b), z(c)
 {}



 template <typename T, precision P>
 template <typename A, typename B, typename C>
 inline constexpr tvec3<T, P>::tvec3(A a, B b, C c) :
  x(static_cast<T>(a)),
  y(static_cast<T>(b)),
  z(static_cast<T>(c))
 {}

 template <typename T, precision P>
 template <typename A, typename B, typename C>
 inline constexpr tvec3<T, P>::tvec3(tvec1<A, P> const & a, tvec1<B, P> const & b, tvec1<C, P> const & c) :
  x(static_cast<T>(a)),
  y(static_cast<T>(b)),
  z(static_cast<T>(c))
 {}



 template <typename T, precision P>
 template <typename A, typename B, precision Q>
 inline constexpr tvec3<T, P>::tvec3(tvec2<A, Q> const & a, B b) :
  x(static_cast<T>(a.x)),
  y(static_cast<T>(a.y)),
  z(static_cast<T>(b))
 {}

 template <typename T, precision P>
 template <typename A, typename B, precision Q>
 inline constexpr tvec3<T, P>::tvec3(tvec2<A, Q> const & a, tvec1<B, Q> const & b) :
  x(static_cast<T>(a.x)),
  y(static_cast<T>(a.y)),
  z(static_cast<T>(b.x))
 {}

 template <typename T, precision P>
 template <typename A, typename B, precision Q>
 inline constexpr tvec3<T, P>::tvec3(A a, tvec2<B, Q> const & b) :
  x(static_cast<T>(a)),
  y(static_cast<T>(b.x)),
  z(static_cast<T>(b.y))
 {}

 template <typename T, precision P>
 template <typename A, typename B, precision Q>
 inline constexpr tvec3<T, P>::tvec3(tvec1<A, Q> const & a, tvec2<B, Q> const & b) :
  x(static_cast<T>(a.x)),
  y(static_cast<T>(b.x)),
  z(static_cast<T>(b.y))
 {}

 template <typename T, precision P>
 template <typename U, precision Q>
 inline constexpr tvec3<T, P>::tvec3(tvec3<U, Q> const & v) :
  x(static_cast<T>(v.x)),
  y(static_cast<T>(v.y)),
  z(static_cast<T>(v.z))
 {}

 template <typename T, precision P>
 template <typename U, precision Q>
 inline constexpr tvec3<T, P>::tvec3(tvec4<U, Q> const & v) :
  x(static_cast<T>(v.x)),
  y(static_cast<T>(v.y)),
  z(static_cast<T>(v.z))
 {}



 template <typename T, precision P>
 inline T & tvec3<T, P>::operator[](typename tvec3<T, P>::length_type i)
 {
  
# 145 "../../include/glm/detail/type_vec3.inl" 3
 ((
# 145 "../../include/glm/detail/type_vec3.inl"
 i >= 0 && i < this->length()
# 145 "../../include/glm/detail/type_vec3.inl" 3
 ) ? (void)0 : _assert(
# 145 "../../include/glm/detail/type_vec3.inl"
 "i >= 0 && i < this->length()"
# 145 "../../include/glm/detail/type_vec3.inl" 3
 , "../../include/glm/detail/type_vec3.inl", 145))
# 145 "../../include/glm/detail/type_vec3.inl"
                                     ;
  return (&x)[i];
 }

 template <typename T, precision P>
 inline T const & tvec3<T, P>::operator[](typename tvec3<T, P>::length_type i) const
 {
  
# 152 "../../include/glm/detail/type_vec3.inl" 3
 ((
# 152 "../../include/glm/detail/type_vec3.inl"
 i >= 0 && i < this->length()
# 152 "../../include/glm/detail/type_vec3.inl" 3
 ) ? (void)0 : _assert(
# 152 "../../include/glm/detail/type_vec3.inl"
 "i >= 0 && i < this->length()"
# 152 "../../include/glm/detail/type_vec3.inl" 3
 , "../../include/glm/detail/type_vec3.inl", 152))
# 152 "../../include/glm/detail/type_vec3.inl"
                                     ;
  return (&x)[i];
 }
# 169 "../../include/glm/detail/type_vec3.inl"
 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P>& tvec3<T, P>::operator=(tvec3<U, P> const & v)
 {
  this->x = static_cast<T>(v.x);
  this->y = static_cast<T>(v.y);
  this->z = static_cast<T>(v.z);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator+=(U scalar)
 {
  this->x += static_cast<T>(scalar);
  this->y += static_cast<T>(scalar);
  this->z += static_cast<T>(scalar);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator+=(tvec1<U, P> const & v)
 {
  this->x += static_cast<T>(v.x);
  this->y += static_cast<T>(v.x);
  this->z += static_cast<T>(v.x);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator+=(tvec3<U, P> const & v)
 {
  this->x += static_cast<T>(v.x);
  this->y += static_cast<T>(v.y);
  this->z += static_cast<T>(v.z);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator-=(U scalar)
 {
  this->x -= static_cast<T>(scalar);
  this->y -= static_cast<T>(scalar);
  this->z -= static_cast<T>(scalar);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator-=(tvec1<U, P> const & v)
 {
  this->x -= static_cast<T>(v.x);
  this->y -= static_cast<T>(v.x);
  this->z -= static_cast<T>(v.x);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator-=(tvec3<U, P> const & v)
 {
  this->x -= static_cast<T>(v.x);
  this->y -= static_cast<T>(v.y);
  this->z -= static_cast<T>(v.z);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator*=(U scalar)
 {
  this->x *= static_cast<T>(scalar);
  this->y *= static_cast<T>(scalar);
  this->z *= static_cast<T>(scalar);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator*=(tvec1<U, P> const & v)
 {
  this->x *= static_cast<T>(v.x);
  this->y *= static_cast<T>(v.x);
  this->z *= static_cast<T>(v.x);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator*=(tvec3<U, P> const & v)
 {
  this->x *= static_cast<T>(v.x);
  this->y *= static_cast<T>(v.y);
  this->z *= static_cast<T>(v.z);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator/=(U v)
 {
  this->x /= static_cast<T>(v);
  this->y /= static_cast<T>(v);
  this->z /= static_cast<T>(v);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator/=(tvec1<U, P> const & v)
 {
  this->x /= static_cast<T>(v.x);
  this->y /= static_cast<T>(v.x);
  this->z /= static_cast<T>(v.x);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator/=(tvec3<U, P> const & v)
 {
  this->x /= static_cast<T>(v.x);
  this->y /= static_cast<T>(v.y);
  this->z /= static_cast<T>(v.z);
  return *this;
 }



 template <typename T, precision P>
 inline tvec3<T, P> & tvec3<T, P>::operator++()
 {
  ++this->x;
  ++this->y;
  ++this->z;
  return *this;
 }

 template <typename T, precision P>
 inline tvec3<T, P> & tvec3<T, P>::operator--()
 {
  --this->x;
  --this->y;
  --this->z;
  return *this;
 }

 template <typename T, precision P>
 inline tvec3<T, P> tvec3<T, P>::operator++(int)
 {
  tvec3<T, P> Result(*this);
  ++*this;
  return Result;
 }

 template <typename T, precision P>
 inline tvec3<T, P> tvec3<T, P>::operator--(int)
 {
  tvec3<T, P> Result(*this);
  --*this;
  return Result;
 }



 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator%=(U scalar)
 {
  this->x %= scalar;
  this->y %= scalar;
  this->z %= scalar;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator%=(tvec1<U, P> const & v)
 {
  this->x %= v.x;
  this->y %= v.x;
  this->z %= v.x;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator%=(tvec3<U, P> const & v)
 {
  this->x %= v.x;
  this->y %= v.y;
  this->z %= v.z;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator&=(U scalar)
 {
  this->x &= scalar;
  this->y &= scalar;
  this->z &= scalar;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator&=(tvec1<U, P> const & v)
 {
  this->x &= v.x;
  this->y &= v.x;
  this->z &= v.x;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator&=(tvec3<U, P> const & v)
 {
  this->x &= v.x;
  this->y &= v.y;
  this->z &= v.z;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator|=(U scalar)
 {
  this->x |= scalar;
  this->y |= scalar;
  this->z |= scalar;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator|=(tvec1<U, P> const & v)
 {
  this->x |= v.x;
  this->y |= v.x;
  this->z |= v.x;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator|=(tvec3<U, P> const & v)
 {
  this->x |= v.x;
  this->y |= v.y;
  this->z |= v.z;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator^=(U scalar)
 {
  this->x ^= scalar;
  this->y ^= scalar;
  this->z ^= scalar;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator^=(tvec1<U, P> const & v)
 {
  this->x ^= v.x;
  this->y ^= v.x;
  this->z ^= v.x;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator^=(tvec3<U, P> const & v)
 {
  this->x ^= v.x;
  this->y ^= v.y;
  this->z ^= v.z;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator<<=(U scalar)
 {
  this->x <<= scalar;
  this->y <<= scalar;
  this->z <<= scalar;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator<<=(tvec1<U, P> const & v)
 {
  this->x <<= static_cast<T>(v.x);
  this->y <<= static_cast<T>(v.x);
  this->z <<= static_cast<T>(v.x);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator<<=(tvec3<U, P> const & v)
 {
  this->x <<= static_cast<T>(v.x);
  this->y <<= static_cast<T>(v.y);
  this->z <<= static_cast<T>(v.z);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator>>=(U scalar)
 {
  this->x >>= static_cast<T>(scalar);
  this->y >>= static_cast<T>(scalar);
  this->z >>= static_cast<T>(scalar);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator>>=(tvec1<U, P> const & v)
 {
  this->x >>= static_cast<T>(v.x);
  this->y >>= static_cast<T>(v.x);
  this->z >>= static_cast<T>(v.x);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec3<T, P> & tvec3<T, P>::operator>>=(tvec3<U, P> const & v)
 {
  this->x >>= static_cast<T>(v.x);
  this->y >>= static_cast<T>(v.y);
  this->z >>= static_cast<T>(v.z);
  return *this;
 }



 template <typename T, precision P>
 inline tvec3<T, P> operator+(tvec3<T, P> const & v)
 {
  return v;
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator-(tvec3<T, P> const & v)
 {
  return tvec3<T, P>(
   -v.x,
   -v.y,
   -v.z);
 }



 template <typename T, precision P>
 inline tvec3<T, P> operator+(tvec3<T, P> const & v, T scalar)
 {
  return tvec3<T, P>(
   v.x + scalar,
   v.y + scalar,
   v.z + scalar);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator+(tvec3<T, P> const & v, tvec1<T, P> const & scalar)
 {
  return tvec3<T, P>(
   v.x + scalar.x,
   v.y + scalar.x,
   v.z + scalar.x);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator+(T scalar, tvec3<T, P> const & v)
 {
  return tvec3<T, P>(
   scalar + v.x,
   scalar + v.y,
   scalar + v.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator+(tvec1<T, P> const & scalar, tvec3<T, P> const & v)
 {
  return tvec3<T, P>(
   scalar.x + v.x,
   scalar.x + v.y,
   scalar.x + v.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator+(tvec3<T, P> const & v1, tvec3<T, P> const & v2)
 {
  return tvec3<T, P>(
   v1.x + v2.x,
   v1.y + v2.y,
   v1.z + v2.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator-(tvec3<T, P> const & v, T scalar)
 {
  return tvec3<T, P>(
   v.x - scalar,
   v.y - scalar,
   v.z - scalar);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator-(tvec3<T, P> const & v, tvec1<T, P> const & scalar)
 {
  return tvec3<T, P>(
   v.x - scalar.x,
   v.y - scalar.x,
   v.z - scalar.x);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator-(T scalar, tvec3<T, P> const & v)
 {
  return tvec3<T, P>(
   scalar - v.x,
   scalar - v.y,
   scalar - v.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator-(tvec1<T, P> const & scalar, tvec3<T, P> const & v)
 {
  return tvec3<T, P>(
   scalar.x - v.x,
   scalar.x - v.y,
   scalar.x - v.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator-(tvec3<T, P> const & v1, tvec3<T, P> const & v2)
 {
  return tvec3<T, P>(
   v1.x - v2.x,
   v1.y - v2.y,
   v1.z - v2.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator*(tvec3<T, P> const & v, T scalar)
 {
  return tvec3<T, P>(
   v.x * scalar,
   v.y * scalar,
   v.z * scalar);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator*(tvec3<T, P> const & v, tvec1<T, P> const & scalar)
 {
  return tvec3<T, P>(
   v.x * scalar.x,
   v.y * scalar.x,
   v.z * scalar.x);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator*(T scalar, tvec3<T, P> const & v)
 {
  return tvec3<T, P>(
   scalar * v.x,
   scalar * v.y,
   scalar * v.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator*(tvec1<T, P> const & scalar, tvec3<T, P> const & v)
 {
  return tvec3<T, P>(
   scalar.x * v.x,
   scalar.x * v.y,
   scalar.x * v.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator*(tvec3<T, P> const & v1, tvec3<T, P> const & v2)
 {
  return tvec3<T, P>(
   v1.x * v2.x,
   v1.y * v2.y,
   v1.z * v2.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator/(tvec3<T, P> const & v, T scalar)
 {
  return tvec3<T, P>(
   v.x / scalar,
   v.y / scalar,
   v.z / scalar);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator/(tvec3<T, P> const & v, tvec1<T, P> const & scalar)
 {
  return tvec3<T, P>(
   v.x / scalar.x,
   v.y / scalar.x,
   v.z / scalar.x);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator/(T scalar, tvec3<T, P> const & v)
 {
  return tvec3<T, P>(
   scalar / v.x,
   scalar / v.y,
   scalar / v.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator/(tvec1<T, P> const & scalar, tvec3<T, P> const & v)
 {
  return tvec3<T, P>(
   scalar.x / v.x,
   scalar.x / v.y,
   scalar.x / v.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator/(tvec3<T, P> const & v1, tvec3<T, P> const & v2)
 {
  return tvec3<T, P>(
   v1.x / v2.x,
   v1.y / v2.y,
   v1.z / v2.z);
 }



 template <typename T, precision P>
 inline tvec3<T, P> operator%(tvec3<T, P> const & v, T scalar)
 {
  return tvec3<T, P>(
   v.x % scalar,
   v.y % scalar,
   v.z % scalar);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator%(tvec3<T, P> const & v, tvec1<T, P> const & scalar)
 {
  return tvec3<T, P>(
   v.x % scalar.x,
   v.y % scalar.x,
   v.z % scalar.x);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator%(T scalar, tvec3<T, P> const & v)
 {
  return tvec3<T, P>(
   scalar % v.x,
   scalar % v.y,
   scalar % v.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator%(tvec1<T, P> const & scalar, tvec3<T, P> const & v)
 {
  return tvec3<T, P>(
   scalar.x % v.x,
   scalar.x % v.y,
   scalar.x % v.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator%(tvec3<T, P> const & v1, tvec3<T, P> const & v2)
 {
  return tvec3<T, P>(
   v1.x % v2.x,
   v1.y % v2.y,
   v1.z % v2.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator&(tvec3<T, P> const & v, T scalar)
 {
  return tvec3<T, P>(
   v.x & scalar,
   v.y & scalar,
   v.z & scalar);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator&(tvec3<T, P> const & v, tvec1<T, P> const & scalar)
 {
  return tvec3<T, P>(
   v.x & scalar.x,
   v.y & scalar.x,
   v.z & scalar.x);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator&(T scalar, tvec3<T, P> const & v)
 {
  return tvec3<T, P>(
   scalar & v.x,
   scalar & v.y,
   scalar & v.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator&(tvec1<T, P> const & scalar, tvec3<T, P> const & v)
 {
  return tvec3<T, P>(
   scalar.x & v.x,
   scalar.x & v.y,
   scalar.x & v.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator&(tvec3<T, P> const & v1, tvec3<T, P> const & v2)
 {
  return tvec3<T, P>(
   v1.x & v2.x,
   v1.y & v2.y,
   v1.z & v2.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator|(tvec3<T, P> const & v, T scalar)
 {
  return tvec3<T, P>(
   v.x | scalar,
   v.y | scalar,
   v.z | scalar);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator|(tvec3<T, P> const & v, tvec1<T, P> const & scalar)
 {
  return tvec3<T, P>(
   v.x | scalar.x,
   v.y | scalar.x,
   v.z | scalar.x);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator|(T scalar, tvec3<T, P> const & v)
 {
  return tvec3<T, P>(
   scalar | v.x,
   scalar | v.y,
   scalar | v.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator|(tvec1<T, P> const & scalar, tvec3<T, P> const & v)
 {
  return tvec3<T, P>(
   scalar.x | v.x,
   scalar.x | v.y,
   scalar.x | v.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator|(tvec3<T, P> const & v1, tvec3<T, P> const & v2)
 {
  return tvec3<T, P>(
   v1.x | v2.x,
   v1.y | v2.y,
   v1.z | v2.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator^(tvec3<T, P> const & v, T scalar)
 {
  return tvec3<T, P>(
   v.x ^ scalar,
   v.y ^ scalar,
   v.z ^ scalar);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator^(tvec3<T, P> const & v, tvec1<T, P> const & scalar)
 {
  return tvec3<T, P>(
   v.x ^ scalar.x,
   v.y ^ scalar.x,
   v.z ^ scalar.x);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator^(T scalar, tvec3<T, P> const & v)
 {
  return tvec3<T, P>(
   scalar ^ v.x,
   scalar ^ v.y,
   scalar ^ v.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator^(tvec1<T, P> const & scalar, tvec3<T, P> const & v)
 {
  return tvec3<T, P>(
   scalar.x ^ v.x,
   scalar.x ^ v.y,
   scalar.x ^ v.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator^(tvec3<T, P> const & v1, tvec3<T, P> const & v2)
 {
  return tvec3<T, P>(
   v1.x ^ v2.x,
   v1.y ^ v2.y,
   v1.z ^ v2.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator<<(tvec3<T, P> const & v, T scalar)
 {
  return tvec3<T, P>(
   v.x << scalar,
   v.y << scalar,
   v.z << scalar);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator<<(tvec3<T, P> const & v, tvec1<T, P> const & scalar)
 {
  return tvec3<T, P>(
   v.x << scalar.x,
   v.y << scalar.x,
   v.z << scalar.x);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator<<(T scalar, tvec3<T, P> const & v)
 {
  return tvec3<T, P>(
   scalar << v.x,
   scalar << v.y,
   scalar << v.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator<<(tvec1<T, P> const & scalar, tvec3<T, P> const & v)
 {
  return tvec3<T, P>(
   scalar.x << v.x,
   scalar.x << v.y,
   scalar.x << v.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator<<(tvec3<T, P> const & v1, tvec3<T, P> const & v2)
 {
  return tvec3<T, P>(
   v1.x << v2.x,
   v1.y << v2.y,
   v1.z << v2.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator>>(tvec3<T, P> const & v, T scalar)
 {
  return tvec3<T, P>(
   v.x >> scalar,
   v.y >> scalar,
   v.z >> scalar);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator>>(tvec3<T, P> const & v, tvec1<T, P> const & scalar)
 {
  return tvec3<T, P>(
   v.x >> scalar.x,
   v.y >> scalar.x,
   v.z >> scalar.x);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator>>(T scalar, tvec3<T, P> const & v)
 {
  return tvec3<T, P>(
   scalar >> v.x,
   scalar >> v.y,
   scalar >> v.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator>>(tvec1<T, P> const & scalar, tvec3<T, P> const & v)
 {
  return tvec3<T, P>(
   scalar.x >> v.x,
   scalar.x >> v.y,
   scalar.x >> v.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator>>(tvec3<T, P> const & v1, tvec3<T, P> const & v2)
 {
  return tvec3<T, P>(
   v1.x >> v2.x,
   v1.y >> v2.y,
   v1.z >> v2.z);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator~(tvec3<T, P> const & v)
 {
  return tvec3<T, P>(
   ~v.x,
   ~v.y,
   ~v.z);
 }



 template <typename T, precision P>
 inline bool operator==(tvec3<T, P> const & v1, tvec3<T, P> const & v2)
 {
  return (v1.x == v2.x) && (v1.y == v2.y) && (v1.z == v2.z);
 }

 template <typename T, precision P>
 inline bool operator!=(tvec3<T, P> const & v1, tvec3<T, P> const & v2)
 {
  return (v1.x != v2.x) || (v1.y != v2.y) || (v1.z != v2.z);
 }

 template <precision P>
 inline tvec3<bool, P> operator&&(tvec3<bool, P> const & v1, tvec3<bool, P> const & v2)
 {
  return tvec3<bool, P>(v1.x && v2.x, v1.y && v2.y, v1.z && v2.z);
 }

 template <precision P>
 inline tvec3<bool, P> operator||(tvec3<bool, P> const & v1, tvec3<bool, P> const & v2)
 {
  return tvec3<bool, P>(v1.x || v2.x, v1.y || v2.y, v1.z || v2.z);
 }
}
# 409 "../../include/glm/detail/type_vec3.hpp" 2
# 7 "../../include/glm/vec3.hpp" 2
# 70 "../../include/glm/glm.hpp" 2
# 1 "../../include/glm/vec4.hpp" 1



       

# 1 "../../include/glm/detail/type_vec4.hpp" 1



       
# 16 "../../include/glm/detail/type_vec4.hpp"
namespace glm
{
 template <typename T, precision P = defaultp>
 struct tvec4
 {


  typedef T value_type;
  typedef tvec4<T, P> type;
  typedef tvec4<bool, P> bool_type;
# 34 "../../include/glm/detail/type_vec4.hpp"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"







   union
   {
    struct { T x, y, z, w;};
    struct { T r, g, b, a; };
    struct { T s, t, p, q; };

    typename detail::storage<T, sizeof(T) * 4, detail::is_aligned<P>::value>::type data;
# 62 "../../include/glm/detail/type_vec4.hpp"
   };





#pragma GCC diagnostic pop
# 84 "../../include/glm/detail/type_vec4.hpp"
  typedef length_t length_type;
  static length_type length(){return 4;}

  T & operator[](length_type i);
  T const & operator[](length_type i) const;



  tvec4() ;
  tvec4(tvec4<T, P> const& v) = default;
  template <precision Q>
  tvec4(tvec4<T, Q> const& v);



  explicit tvec4(ctor);
  explicit tvec4(T scalar);
  tvec4(T a, T b, T c, T d);




  template <typename A, typename B, typename C, typename D>
  tvec4(A a, B b, C c, D d);
  template <typename A, typename B, typename C, typename D>
  constexpr tvec4(tvec1<A, P> const& a, tvec1<B, P> const& b, tvec1<C, P> const& c, tvec1<D, P> const& d);




  template <typename A, typename B, typename C, precision Q>
  constexpr tvec4(tvec2<A, Q> const & a, B b, C c);

  template <typename A, typename B, typename C, precision Q>
  constexpr tvec4(tvec2<A, Q> const & a, tvec1<B, Q> const & b, tvec1<C, Q> const & c);

  template <typename A, typename B, typename C, precision Q>
  constexpr tvec4(A a, tvec2<B, Q> const & b, C c);

  template <typename A, typename B, typename C, precision Q>
  constexpr tvec4(tvec1<A, Q> const & a, tvec2<B, Q> const & b, tvec1<C, Q> const & c);

  template <typename A, typename B, typename C, precision Q>
  constexpr tvec4(A a, B b, tvec2<C, Q> const & c);

  template <typename A, typename B, typename C, precision Q>
  constexpr tvec4(tvec1<A, Q> const & a, tvec1<B, Q> const & b, tvec2<C, Q> const & c);

  template <typename A, typename B, precision Q>
  constexpr tvec4(tvec3<A, Q> const & a, B b);

  template <typename A, typename B, precision Q>
  constexpr tvec4(tvec3<A, Q> const & a, tvec1<B, Q> const & b);

  template <typename A, typename B, precision Q>
  constexpr tvec4(A a, tvec3<B, Q> const & b);

  template <typename A, typename B, precision Q>
  constexpr tvec4(tvec1<A, Q> const & a, tvec3<B, Q> const & b);

  template <typename A, typename B, precision Q>
  constexpr tvec4(tvec2<A, Q> const & a, tvec2<B, Q> const & b);


  template <typename U, precision Q>
  constexpr tvec4(tvec4<U, Q> const& v);
# 198 "../../include/glm/detail/type_vec4.hpp"
  tvec4<T, P> & operator=(tvec4<T, P> const & v) = default;

  template <typename U>
  tvec4<T, P> & operator=(tvec4<U, P> const & v);
  template <typename U>
  tvec4<T, P> & operator+=(U scalar);
  template <typename U>
  tvec4<T, P> & operator+=(tvec1<U, P> const & v);
  template <typename U>
  tvec4<T, P> & operator+=(tvec4<U, P> const & v);
  template <typename U>
  tvec4<T, P> & operator-=(U scalar);
  template <typename U>
  tvec4<T, P> & operator-=(tvec1<U, P> const & v);
  template <typename U>
  tvec4<T, P> & operator-=(tvec4<U, P> const & v);
  template <typename U>
  tvec4<T, P> & operator*=(U scalar);
  template <typename U>
  tvec4<T, P> & operator*=(tvec1<U, P> const& v);
  template <typename U>
  tvec4<T, P> & operator*=(tvec4<U, P> const& v);
  template <typename U>
  tvec4<T, P> & operator/=(U scalar);
  template <typename U>
  tvec4<T, P> & operator/=(tvec1<U, P> const & v);
  template <typename U>
  tvec4<T, P> & operator/=(tvec4<U, P> const & v);



  tvec4<T, P> & operator++();
  tvec4<T, P> & operator--();
  tvec4<T, P> operator++(int);
  tvec4<T, P> operator--(int);



  template <typename U>
  tvec4<T, P> & operator%=(U scalar);
  template <typename U>
  tvec4<T, P> & operator%=(tvec1<U, P> const & v);
  template <typename U>
  tvec4<T, P> & operator%=(tvec4<U, P> const & v);
  template <typename U>
  tvec4<T, P> & operator&=(U scalar);
  template <typename U>
  tvec4<T, P> & operator&=(tvec1<U, P> const & v);
  template <typename U>
  tvec4<T, P> & operator&=(tvec4<U, P> const & v);
  template <typename U>
  tvec4<T, P> & operator|=(U scalar);
  template <typename U>
  tvec4<T, P> & operator|=(tvec1<U, P> const & v);
  template <typename U>
  tvec4<T, P> & operator|=(tvec4<U, P> const & v);
  template <typename U>
  tvec4<T, P> & operator^=(U scalar);
  template <typename U>
  tvec4<T, P> & operator^=(tvec1<U, P> const & v);
  template <typename U>
  tvec4<T, P> & operator^=(tvec4<U, P> const & v);
  template <typename U>
  tvec4<T, P> & operator<<=(U scalar);
  template <typename U>
  tvec4<T, P> & operator<<=(tvec1<U, P> const & v);
  template <typename U>
  tvec4<T, P> & operator<<=(tvec4<U, P> const & v);
  template <typename U>
  tvec4<T, P> & operator>>=(U scalar);
  template <typename U>
  tvec4<T, P> & operator>>=(tvec1<U, P> const & v);
  template <typename U>
  tvec4<T, P> & operator>>=(tvec4<U, P> const & v);
 };



 template <typename T, precision P>
 tvec4<T, P> operator+(tvec4<T, P> const & v);

 template <typename T, precision P>
 tvec4<T, P> operator-(tvec4<T, P> const & v);



 template <typename T, precision P>
 tvec4<T, P> operator+(tvec4<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec4<T, P> operator+(tvec4<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec4<T, P> operator+(T scalar, tvec4<T, P> const & v);

 template <typename T, precision P>
 tvec4<T, P> operator+(tvec1<T, P> const & v1, tvec4<T, P> const & v2);

 template <typename T, precision P>
 tvec4<T, P> operator+(tvec4<T, P> const & v1, tvec4<T, P> const & v2);

 template <typename T, precision P>
 tvec4<T, P> operator-(tvec4<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec4<T, P> operator-(tvec4<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec4<T, P> operator-(T scalar, tvec4<T, P> const & v);

 template <typename T, precision P>
 tvec4<T, P> operator-(tvec1<T, P> const & v1, tvec4<T, P> const & v2);

 template <typename T, precision P>
 tvec4<T, P> operator-(tvec4<T, P> const & v1, tvec4<T, P> const & v2);

 template <typename T, precision P>
 tvec4<T, P> operator*(tvec4<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec4<T, P> operator*(tvec4<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec4<T, P> operator*(T scalar, tvec4<T, P> const & v);

 template <typename T, precision P>
 tvec4<T, P> operator*(tvec1<T, P> const & v1, tvec4<T, P> const & v2);

 template <typename T, precision P>
 tvec4<T, P> operator*(tvec4<T, P> const & v1, tvec4<T, P> const & v2);

 template <typename T, precision P>
 tvec4<T, P> operator/(tvec4<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec4<T, P> operator/(tvec4<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec4<T, P> operator/(T scalar, tvec4<T, P> const & v);

 template <typename T, precision P>
 tvec4<T, P> operator/(tvec1<T, P> const & v1, tvec4<T, P> const & v2);

 template <typename T, precision P>
 tvec4<T, P> operator/(tvec4<T, P> const & v1, tvec4<T, P> const & v2);

 template <typename T, precision P>
 tvec4<T, P> operator%(tvec4<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec4<T, P> operator%(tvec4<T, P> const & v, tvec1<T, P> const & scalar);

 template <typename T, precision P>
 tvec4<T, P> operator%(T scalar, tvec4<T, P> const & v);

 template <typename T, precision P>
 tvec4<T, P> operator%(tvec1<T, P> const & scalar, tvec4<T, P> const & v);

 template <typename T, precision P>
 tvec4<T, P> operator%(tvec4<T, P> const & v1, tvec4<T, P> const & v2);

 template <typename T, precision P>
 tvec4<T, P> operator&(tvec4<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec4<T, P> operator&(tvec4<T, P> const & v, tvec1<T, P> const & scalar);

 template <typename T, precision P>
 tvec4<T, P> operator&(T scalar, tvec4<T, P> const & v);

 template <typename T, precision P>
 tvec4<T, P> operator&(tvec1<T, P> const & scalar, tvec4<T, P> const & v);

 template <typename T, precision P>
 tvec4<T, P> operator&(tvec4<T, P> const & v1, tvec4<T, P> const & v2);

 template <typename T, precision P>
 tvec4<T, P> operator|(tvec4<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec4<T, P> operator|(tvec4<T, P> const & v, tvec1<T, P> const & scalar);

 template <typename T, precision P>
 tvec4<T, P> operator|(T scalar, tvec4<T, P> const & v);

 template <typename T, precision P>
 tvec4<T, P> operator|(tvec1<T, P> const & scalar, tvec4<T, P> const & v);

 template <typename T, precision P>
 tvec4<T, P> operator|(tvec4<T, P> const & v1, tvec4<T, P> const & v2);

 template <typename T, precision P>
 tvec4<T, P> operator^(tvec4<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec4<T, P> operator^(tvec4<T, P> const & v, tvec1<T, P> const & scalar);

 template <typename T, precision P>
 tvec4<T, P> operator^(T scalar, tvec4<T, P> const & v);

 template <typename T, precision P>
 tvec4<T, P> operator^(tvec1<T, P> const & scalar, tvec4<T, P> const & v);

 template <typename T, precision P>
 tvec4<T, P> operator^(tvec4<T, P> const & v1, tvec4<T, P> const & v2);

 template <typename T, precision P>
 tvec4<T, P> operator<<(tvec4<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec4<T, P> operator<<(tvec4<T, P> const & v, tvec1<T, P> const & scalar);

 template <typename T, precision P>
 tvec4<T, P> operator<<(T scalar, tvec4<T, P> const & v);

 template <typename T, precision P>
 tvec4<T, P> operator<<(tvec1<T, P> const & scalar, tvec4<T, P> const & v);

 template <typename T, precision P>
 tvec4<T, P> operator<<(tvec4<T, P> const & v1, tvec4<T, P> const & v2);

 template <typename T, precision P>
 tvec4<T, P> operator>>(tvec4<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec4<T, P> operator>>(tvec4<T, P> const & v, tvec1<T, P> const & scalar);

 template <typename T, precision P>
 tvec4<T, P> operator>>(T scalar, tvec4<T, P> const & v);

 template <typename T, precision P>
 tvec4<T, P> operator>>(tvec1<T, P> const & scalar, tvec4<T, P> const & v);

 template <typename T, precision P>
 tvec4<T, P> operator>>(tvec4<T, P> const & v1, tvec4<T, P> const & v2);

 template <typename T, precision P>
 tvec4<T, P> operator~(tvec4<T, P> const & v);



 template <typename T, precision P>
 bool operator==(tvec4<T, P> const & v1, tvec4<T, P> const & v2);

 template <typename T, precision P>
 bool operator!=(tvec4<T, P> const & v1, tvec4<T, P> const & v2);

 template <precision P>
 tvec4<bool, P> operator&&(tvec4<bool, P> const & v1, tvec4<bool, P> const & v2);

 template <precision P>
 tvec4<bool, P> operator||(tvec4<bool, P> const & v1, tvec4<bool, P> const & v2);
}


# 1 "../../include/glm/detail/type_vec4.inl" 1



namespace glm{
namespace detail
{
 template <typename T>
 struct is_int
 {
  enum test {value = 0};
 };

 template <>
 struct is_int<uint32>
 {
  enum test {value = ~0};
 };

 template <>
 struct is_int<int32>
 {
  enum test {value = ~0};
 };

 template <>
 struct is_int<uint64>
 {
  enum test {value = ~0};
 };

 template <>
 struct is_int<int64>
 {
  enum test {value = ~0};
 };

 template <typename T, precision P, bool Aligned>
 struct compute_vec4_add
 {
  inline static tvec4<T, P> call(tvec4<T, P> const & a, tvec4<T, P> const & b)
  {
   return tvec4<T, P>(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
  }
 };

 template <typename T, precision P, bool Aligned>
 struct compute_vec4_sub
 {
  inline static tvec4<T, P> call(tvec4<T, P> const & a, tvec4<T, P> const & b)
  {
   return tvec4<T, P>(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
  }
 };

 template <typename T, precision P, bool Aligned>
 struct compute_vec4_mul
 {
  inline static tvec4<T, P> call(tvec4<T, P> const & a, tvec4<T, P> const & b)
  {
   return tvec4<T, P>(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
  }
 };

 template <typename T, precision P, bool Aligned>
 struct compute_vec4_div
 {
  inline static tvec4<T, P> call(tvec4<T, P> const & a, tvec4<T, P> const & b)
  {
   return tvec4<T, P>(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w);
  }
 };

 template <typename T, precision P, bool Aligned>
 struct compute_vec4_mod
 {
  inline static tvec4<T, P> call(tvec4<T, P> const & a, tvec4<T, P> const & b)
  {
   return tvec4<T, P>(a.x % b.x, a.y % b.y, a.z % b.z, a.w % b.w);
  }
 };

 template <typename T, precision P, int IsInt, std::size_t Size, bool Aligned>
 struct compute_vec4_and
 {
  inline static tvec4<T, P> call(tvec4<T, P> const & a, tvec4<T, P> const & b)
  {
   return tvec4<T, P>(a.x & b.x, a.y & b.y, a.z & b.z, a.w & b.w);
  }
 };

 template <typename T, precision P, int IsInt, std::size_t Size, bool Aligned>
 struct compute_vec4_or
 {
  inline static tvec4<T, P> call(tvec4<T, P> const & a, tvec4<T, P> const & b)
  {
   return tvec4<T, P>(a.x | b.x, a.y | b.y, a.z | b.z, a.w | b.w);
  }
 };

 template <typename T, precision P, int IsInt, std::size_t Size, bool Aligned>
 struct compute_vec4_xor
 {
  inline static tvec4<T, P> call(tvec4<T, P> const & a, tvec4<T, P> const & b)
  {
   return tvec4<T, P>(a.x ^ b.x, a.y ^ b.y, a.z ^ b.z, a.w ^ b.w);
  }
 };

 template <typename T, precision P, int IsInt, std::size_t Size, bool Aligned>
 struct compute_vec4_shift_left
 {
  inline static tvec4<T, P> call(tvec4<T, P> const & a, tvec4<T, P> const & b)
  {
   return tvec4<T, P>(a.x << b.x, a.y << b.y, a.z << b.z, a.w << b.w);
  }
 };

 template <typename T, precision P, int IsInt, std::size_t Size, bool Aligned>
 struct compute_vec4_shift_right
 {
  inline static tvec4<T, P> call(tvec4<T, P> const & a, tvec4<T, P> const & b)
  {
   return tvec4<T, P>(a.x >> b.x, a.y >> b.y, a.z >> b.z, a.w >> b.w);
  }
 };

 template <typename T, precision P, int IsInt, std::size_t Size, bool Aligned>
 struct compute_vec4_equal
 {
  inline static bool call(tvec4<T, P> const & v1, tvec4<T, P> const & v2)
  {
   return (v1.x == v2.x) && (v1.y == v2.y) && (v1.z == v2.z) && (v1.w == v2.w);
  }
 };

 template <typename T, precision P, int IsInt, std::size_t Size, bool Aligned>
 struct compute_vec4_nequal
 {
  inline static bool call(tvec4<T, P> const & v1, tvec4<T, P> const & v2)
  {
   return (v1.x != v2.x) || (v1.y != v2.y) || (v1.z != v2.z) || (v1.w != v2.w);
  }
 };

 template <typename T, precision P, int IsInt, std::size_t Size, bool Aligned>
 struct compute_vec4_bitwise_not
 {
  inline static tvec4<T, P> call(tvec4<T, P> const & v)
  {
   return tvec4<T, P>(~v.x, ~v.y, ~v.z, ~v.w);
  }
 };
}




  template <typename T, precision P>
  inline tvec4<T, P>::tvec4()

    : x(0), y(0), z(0), w(0)

  {}
# 173 "../../include/glm/detail/type_vec4.inl"
 template <typename T, precision P>
 template <precision Q>
 inline tvec4<T, P>::tvec4(tvec4<T, Q> const & v)
  : x(v.x), y(v.y), z(v.z), w(v.w)
 {}



 template <typename T, precision P>
 inline tvec4<T, P>::tvec4(ctor)
 {}

 template <typename T, precision P>
 inline tvec4<T, P>::tvec4(T scalar)
  : x(scalar), y(scalar), z(scalar), w(scalar)
 {}

 template <typename T, precision P>
 inline tvec4<T, P>::tvec4(T a, T b, T c, T d)
  : x(a), y(b), z(c), w(d)
 {}



 template <typename T, precision P>
 template <typename A, typename B, typename C, typename D>
 inline tvec4<T, P>::tvec4(A a, B b, C c, D d) :
  x(static_cast<T>(a)),
  y(static_cast<T>(b)),
  z(static_cast<T>(c)),
  w(static_cast<T>(d))
 {}

 template <typename T, precision P>
 template <typename A, typename B, typename C, typename D>
 inline constexpr tvec4<T, P>::tvec4(tvec1<A, P> const & a, tvec1<B, P> const & b, tvec1<C, P> const & c, tvec1<D, P> const & d) :
  x(static_cast<T>(a.x)),
  y(static_cast<T>(b.x)),
  z(static_cast<T>(c.x)),
  w(static_cast<T>(d.x))
 {}



 template <typename T, precision P>
 template <typename A, typename B, typename C, precision Q>
 inline constexpr tvec4<T, P>::tvec4(tvec2<A, Q> const & a, B b, C c) :
  x(static_cast<T>(a.x)),
  y(static_cast<T>(a.y)),
  z(static_cast<T>(b)),
  w(static_cast<T>(c))
 {}

 template <typename T, precision P>
 template <typename A, typename B, typename C, precision Q>
 inline constexpr tvec4<T, P>::tvec4(tvec2<A, Q> const & a, tvec1<B, Q> const & b, tvec1<C, Q> const & c) :
  x(static_cast<T>(a.x)),
  y(static_cast<T>(a.y)),
  z(static_cast<T>(b.x)),
  w(static_cast<T>(c.x))
 {}

 template <typename T, precision P>
 template <typename A, typename B, typename C, precision Q>
 inline constexpr tvec4<T, P>::tvec4(A s1, tvec2<B, Q> const & v, C s2) :
  x(static_cast<T>(s1)),
  y(static_cast<T>(v.x)),
  z(static_cast<T>(v.y)),
  w(static_cast<T>(s2))
 {}

 template <typename T, precision P>
 template <typename A, typename B, typename C, precision Q>
 inline constexpr tvec4<T, P>::tvec4(tvec1<A, Q> const & a, tvec2<B, Q> const & b, tvec1<C, Q> const & c) :
  x(static_cast<T>(a.x)),
  y(static_cast<T>(b.x)),
  z(static_cast<T>(b.y)),
  w(static_cast<T>(c.x))
 {}

 template <typename T, precision P>
 template <typename A, typename B, typename C, precision Q>
 inline constexpr tvec4<T, P>::tvec4(A s1, B s2, tvec2<C, Q> const & v) :
  x(static_cast<T>(s1)),
  y(static_cast<T>(s2)),
  z(static_cast<T>(v.x)),
  w(static_cast<T>(v.y))
 {}

 template <typename T, precision P>
 template <typename A, typename B, typename C, precision Q>
 inline constexpr tvec4<T, P>::tvec4(tvec1<A, Q> const & a, tvec1<B, Q> const & b, tvec2<C, Q> const & c) :
  x(static_cast<T>(a.x)),
  y(static_cast<T>(b.x)),
  z(static_cast<T>(c.x)),
  w(static_cast<T>(c.y))
 {}

 template <typename T, precision P>
 template <typename A, typename B, precision Q>
 inline constexpr tvec4<T, P>::tvec4(tvec3<A, Q> const & a, B b) :
  x(static_cast<T>(a.x)),
  y(static_cast<T>(a.y)),
  z(static_cast<T>(a.z)),
  w(static_cast<T>(b))
 {}

 template <typename T, precision P>
 template <typename A, typename B, precision Q>
 inline constexpr tvec4<T, P>::tvec4(tvec3<A, Q> const & a, tvec1<B, Q> const & b) :
  x(static_cast<T>(a.x)),
  y(static_cast<T>(a.y)),
  z(static_cast<T>(a.z)),
  w(static_cast<T>(b.x))
 {}

 template <typename T, precision P>
 template <typename A, typename B, precision Q>
 inline constexpr tvec4<T, P>::tvec4(A a, tvec3<B, Q> const & b) :
  x(static_cast<T>(a)),
  y(static_cast<T>(b.x)),
  z(static_cast<T>(b.y)),
  w(static_cast<T>(b.z))
 {}

 template <typename T, precision P>
 template <typename A, typename B, precision Q>
 inline constexpr tvec4<T, P>::tvec4(tvec1<A, Q> const & a, tvec3<B, Q> const & b) :
  x(static_cast<T>(a.x)),
  y(static_cast<T>(b.x)),
  z(static_cast<T>(b.y)),
  w(static_cast<T>(b.z))
 {}

 template <typename T, precision P>
 template <typename A, typename B, precision Q>
 inline constexpr tvec4<T, P>::tvec4(tvec2<A, Q> const & a, tvec2<B, Q> const & b) :
  x(static_cast<T>(a.x)),
  y(static_cast<T>(a.y)),
  z(static_cast<T>(b.x)),
  w(static_cast<T>(b.y))
 {}

 template <typename T, precision P>
 template <typename U, precision Q>
 inline constexpr tvec4<T, P>::tvec4(tvec4<U, Q> const & v) :
  x(static_cast<T>(v.x)),
  y(static_cast<T>(v.y)),
  z(static_cast<T>(v.z)),
  w(static_cast<T>(v.w))
 {}



 template <typename T, precision P>
 inline T & tvec4<T, P>::operator[](typename tvec4<T, P>::length_type i)
 {
  
# 330 "../../include/glm/detail/type_vec4.inl" 3
 ((
# 330 "../../include/glm/detail/type_vec4.inl"
 i >= 0 && i < this->length()
# 330 "../../include/glm/detail/type_vec4.inl" 3
 ) ? (void)0 : _assert(
# 330 "../../include/glm/detail/type_vec4.inl"
 "i >= 0 && i < this->length()"
# 330 "../../include/glm/detail/type_vec4.inl" 3
 , "../../include/glm/detail/type_vec4.inl", 330))
# 330 "../../include/glm/detail/type_vec4.inl"
                                     ;
  return (&x)[i];
 }

 template <typename T, precision P>
 inline T const & tvec4<T, P>::operator[](typename tvec4<T, P>::length_type i) const
 {
  
# 337 "../../include/glm/detail/type_vec4.inl" 3
 ((
# 337 "../../include/glm/detail/type_vec4.inl"
 i >= 0 && i < this->length()
# 337 "../../include/glm/detail/type_vec4.inl" 3
 ) ? (void)0 : _assert(
# 337 "../../include/glm/detail/type_vec4.inl"
 "i >= 0 && i < this->length()"
# 337 "../../include/glm/detail/type_vec4.inl" 3
 , "../../include/glm/detail/type_vec4.inl", 337))
# 337 "../../include/glm/detail/type_vec4.inl"
                                     ;
  return (&x)[i];
 }
# 355 "../../include/glm/detail/type_vec4.inl"
 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P>& tvec4<T, P>::operator=(tvec4<U, P> const & v)
 {
  this->x = static_cast<T>(v.x);
  this->y = static_cast<T>(v.y);
  this->z = static_cast<T>(v.z);
  this->w = static_cast<T>(v.w);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator+=(U scalar)
 {
  return (*this = detail::compute_vec4_add<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator+=(tvec1<U, P> const & v)
 {
  return (*this = detail::compute_vec4_add<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v.x)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator+=(tvec4<U, P> const & v)
 {
  return (*this = detail::compute_vec4_add<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator-=(U scalar)
 {
  return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator-=(tvec1<U, P> const & v)
 {
  return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v.x)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator-=(tvec4<U, P> const & v)
 {
  return (*this = detail::compute_vec4_sub<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator*=(U scalar)
 {
  return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator*=(tvec1<U, P> const & v)
 {
  return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v.x)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator*=(tvec4<U, P> const & v)
 {
  return (*this = detail::compute_vec4_mul<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator/=(U scalar)
 {
  return (*this = detail::compute_vec4_div<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator/=(tvec1<U, P> const & v)
 {
  return (*this = detail::compute_vec4_div<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v.x)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator/=(tvec4<U, P> const & v)
 {
  return (*this = detail::compute_vec4_div<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));
 }



 template <typename T, precision P>
 inline tvec4<T, P> & tvec4<T, P>::operator++()
 {
  ++this->x;
  ++this->y;
  ++this->z;
  ++this->w;
  return *this;
 }

 template <typename T, precision P>
 inline tvec4<T, P> & tvec4<T, P>::operator--()
 {
  --this->x;
  --this->y;
  --this->z;
  --this->w;
  return *this;
 }

 template <typename T, precision P>
 inline tvec4<T, P> tvec4<T, P>::operator++(int)
 {
  tvec4<T, P> Result(*this);
  ++*this;
  return Result;
 }

 template <typename T, precision P>
 inline tvec4<T, P> tvec4<T, P>::operator--(int)
 {
  tvec4<T, P> Result(*this);
  --*this;
  return Result;
 }



 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator%=(U scalar)
 {
  return (*this = detail::compute_vec4_mod<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator%=(tvec1<U, P> const& v)
 {
  return (*this = detail::compute_vec4_mod<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator%=(tvec4<U, P> const& v)
 {
  return (*this = detail::compute_vec4_mod<T, P, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator&=(U scalar)
 {
  return (*this = detail::compute_vec4_and<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator&=(tvec1<U, P> const & v)
 {
  return (*this = detail::compute_vec4_and<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator&=(tvec4<U, P> const & v)
 {
  return (*this = detail::compute_vec4_and<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator|=(U scalar)
 {
  return (*this = detail::compute_vec4_or<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator|=(tvec1<U, P> const & v)
 {
  return (*this = detail::compute_vec4_or<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator|=(tvec4<U, P> const & v)
 {
  return (*this = detail::compute_vec4_or<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator^=(U scalar)
 {
  return (*this = detail::compute_vec4_xor<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator^=(tvec1<U, P> const & v)
 {
  return (*this = detail::compute_vec4_xor<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator^=(tvec4<U, P> const & v)
 {
  return (*this = detail::compute_vec4_xor<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator<<=(U scalar)
 {
  return (*this = detail::compute_vec4_shift_left<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator<<=(tvec1<U, P> const & v)
 {
  return (*this = detail::compute_vec4_shift_left<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator<<=(tvec4<U, P> const & v)
 {
  return (*this = detail::compute_vec4_shift_left<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator>>=(U scalar)
 {
  return (*this = detail::compute_vec4_shift_right<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(scalar)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator>>=(tvec1<U, P> const & v)
 {
  return (*this = detail::compute_vec4_shift_right<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec4<T, P> & tvec4<T, P>::operator>>=(tvec4<U, P> const & v)
 {
  return (*this = detail::compute_vec4_shift_right<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(*this, tvec4<T, P>(v)));
 }



 template <typename T, precision P>
 inline tvec4<T, P> operator+(tvec4<T, P> const & v)
 {
  return v;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator-(tvec4<T, P> const & v)
 {
  return tvec4<T, P>(0) -= v;
 }



 template <typename T, precision P>
 inline tvec4<T, P> operator+(tvec4<T, P> const & v, T scalar)
 {
  return tvec4<T, P>(v) += scalar;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator+(tvec4<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec4<T, P>(v1) += v2;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator+(T scalar, tvec4<T, P> const & v)
 {
  return tvec4<T, P>(v) += scalar;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator+(tvec1<T, P> const & v1, tvec4<T, P> const & v2)
 {
  return tvec4<T, P>(v2) += v1;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator+(tvec4<T, P> const & v1, tvec4<T, P> const & v2)
 {
  return tvec4<T, P>(v1) += v2;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator-(tvec4<T, P> const & v, T scalar)
 {
  return tvec4<T, P>(v) -= scalar;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator-(tvec4<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec4<T, P>(v1) -= v2;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator-(T scalar, tvec4<T, P> const & v)
 {
  return tvec4<T, P>(scalar) -= v;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator-(tvec1<T, P> const & v1, tvec4<T, P> const & v2)
 {
  return tvec4<T, P>(v1.x) -= v2;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator-(tvec4<T, P> const & v1, tvec4<T, P> const & v2)
 {
  return tvec4<T, P>(v1) -= v2;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator*(tvec4<T, P> const & v, T scalar)
 {
  return tvec4<T, P>(v) *= scalar;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator*(tvec4<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec4<T, P>(v1) *= v2;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator*(T scalar, tvec4<T, P> const & v)
 {
  return tvec4<T, P>(v) *= scalar;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator*(tvec1<T, P> const & v1, tvec4<T, P> const & v2)
 {
  return tvec4<T, P>(v2) *= v1;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator*(tvec4<T, P> const & v1, tvec4<T, P> const & v2)
 {
  return tvec4<T, P>(v1) *= v2;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator/(tvec4<T, P> const & v, T scalar)
 {
  return tvec4<T, P>(v) /= scalar;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator/(tvec4<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec4<T, P>(v1) /= v2;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator/(T scalar, tvec4<T, P> const & v)
 {
  return tvec4<T, P>(scalar) /= v;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator/(tvec1<T, P> const & v1, tvec4<T, P> const & v2)
 {
  return tvec4<T, P>(v1.x) /= v2;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator/(tvec4<T, P> const & v1, tvec4<T, P> const & v2)
 {
  return tvec4<T, P>(v1) /= v2;
 }



 template <typename T, precision P>
 inline tvec4<T, P> operator%(tvec4<T, P> const & v, T scalar)
 {
  return tvec4<T, P>(v) %= scalar;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator%(tvec4<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec4<T, P>(v1) %= v2.x;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator%(T scalar, tvec4<T, P> const & v)
 {
  return tvec4<T, P>(scalar) %= v;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator%(tvec1<T, P> const & scalar, tvec4<T, P> const & v)
 {
  return tvec4<T, P>(scalar.x) %= v;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator%(tvec4<T, P> const & v1, tvec4<T, P> const & v2)
 {
  return tvec4<T, P>(v1) %= v2;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator&(tvec4<T, P> const & v, T scalar)
 {
  return tvec4<T, P>(v) &= scalar;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator&(tvec4<T, P> const & v, tvec1<T, P> const & scalar)
 {
  return tvec4<T, P>(v) &= scalar;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator&(T scalar, tvec4<T, P> const & v)
 {
  return tvec4<T, P>(scalar) &= v;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator&(tvec1<T, P> const & v1, tvec4<T, P> const & v2)
 {
  return tvec4<T, P>(v1.x) &= v2;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator&(tvec4<T, P> const & v1, tvec4<T, P> const & v2)
 {
  return tvec4<T, P>(v1) &= v2;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator|(tvec4<T, P> const & v, T scalar)
 {
  return tvec4<T, P>(v) |= scalar;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator|(tvec4<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec4<T, P>(v1) |= v2.x;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator|(T scalar, tvec4<T, P> const & v)
 {
  return tvec4<T, P>(scalar) |= v;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator|(tvec1<T, P> const & v1, tvec4<T, P> const & v2)
 {
  return tvec4<T, P>(v1.x) |= v2;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator|(tvec4<T, P> const & v1, tvec4<T, P> const & v2)
 {
  return tvec4<T, P>(v1) |= v2;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator^(tvec4<T, P> const & v, T scalar)
 {
  return tvec4<T, P>(v) ^= scalar;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator^(tvec4<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec4<T, P>(v1) ^= v2.x;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator^(T scalar, tvec4<T, P> const & v)
 {
  return tvec4<T, P>(scalar) ^= v;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator^(tvec1<T, P> const & v1, tvec4<T, P> const & v2)
 {
  return tvec4<T, P>(v1.x) ^= v2;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator^(tvec4<T, P> const & v1, tvec4<T, P> const & v2)
 {
  return tvec4<T, P>(v1) ^= v2;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator<<(tvec4<T, P> const & v, T scalar)
 {
  return tvec4<T, P>(v) <<= scalar;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator<<(tvec4<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec4<T, P>(v1) <<= v2.x;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator<<(T scalar, tvec4<T, P> const & v)
 {
  return tvec4<T, P>(scalar) <<= v;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator<<(tvec1<T, P> const & v1, tvec4<T, P> const & v2)
 {
  return tvec4<T, P>(v1.x) <<= v2;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator<<(tvec4<T, P> const & v1, tvec4<T, P> const & v2)
 {
  return tvec4<T, P>(v1) <<= v2;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator>>(tvec4<T, P> const & v, T scalar)
 {
  return tvec4<T, P>(v) >>= scalar;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator>>(tvec4<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec4<T, P>(v1) >>= v2.x;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator>>(T scalar, tvec4<T, P> const & v)
 {
  return tvec4<T, P>(scalar) >>= v;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator>>(tvec1<T, P> const & v1, tvec4<T, P> const & v2)
 {
  return tvec4<T, P>(v1.x) >>= v2;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator>>(tvec4<T, P> const & v1, tvec4<T, P> const & v2)
 {
  return tvec4<T, P>(v1) >>= v2;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator~(tvec4<T, P> const & v)
 {
  return detail::compute_vec4_bitwise_not<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(v);
 }



 template <typename T, precision P>
 inline bool operator==(tvec4<T, P> const & v1, tvec4<T, P> const & v2)
 {
  return detail::compute_vec4_equal<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(v1, v2);
 }

 template <typename T, precision P>
 inline bool operator!=(tvec4<T, P> const & v1, tvec4<T, P> const & v2)
 {
  return detail::compute_vec4_nequal<T, P, detail::is_int<T>::value, sizeof(T) * 8, detail::is_aligned<P>::value>::call(v1, v2);
 }

 template <precision P>
 inline tvec4<bool, P> operator&&(tvec4<bool, P> const & v1, tvec4<bool, P> const & v2)
 {
  return tvec4<bool, P>(v1.x && v2.x, v1.y && v2.y, v1.z && v2.z, v1.w && v2.w);
 }

 template <precision P>
 inline tvec4<bool, P> operator||(tvec4<bool, P> const & v1, tvec4<bool, P> const & v2)
 {
  return tvec4<bool, P>(v1.x || v2.x, v1.y || v2.y, v1.z || v2.z, v1.w || v2.w);
 }
}


# 1 "../../include/glm/detail/type_vec4_simd.inl" 1
# 969 "../../include/glm/detail/type_vec4.inl" 2
# 454 "../../include/glm/detail/type_vec4.hpp" 2
# 7 "../../include/glm/vec4.hpp" 2
# 71 "../../include/glm/glm.hpp" 2
# 1 "../../include/glm/mat2x2.hpp" 1



       

# 1 "../../include/glm/detail/type_mat2x2.hpp" 1



       







namespace glm
{
 template <typename T, precision P = defaultp>
 struct tmat2x2
 {
  typedef tvec2<T, P> col_type;
  typedef tvec2<T, P> row_type;
  typedef tmat2x2<T, P> type;
  typedef tmat2x2<T, P> transpose_type;
  typedef T value_type;

 private:
  col_type value[2];

 public:


  tmat2x2() ;
  tmat2x2(tmat2x2<T, P> const & m) = default;
  template <precision Q>
  tmat2x2(tmat2x2<T, Q> const & m);

  constexpr explicit tmat2x2(ctor);
  explicit tmat2x2(T scalar);
  tmat2x2(
   T const & x1, T const & y1,
   T const & x2, T const & y2);
  tmat2x2(
   col_type const & v1,
   col_type const & v2);



  template <typename U, typename V, typename M, typename N>
  tmat2x2(
   U const & x1, V const & y1,
   M const & x2, N const & y2);

  template <typename U, typename V>
  tmat2x2(
   tvec2<U, P> const & v1,
   tvec2<V, P> const & v2);



  template <typename U, precision Q>
  tmat2x2(tmat2x2<U, Q> const & m);

  tmat2x2(tmat3x3<T, P> const & x);
  tmat2x2(tmat4x4<T, P> const & x);
  tmat2x2(tmat2x3<T, P> const & x);
  tmat2x2(tmat3x2<T, P> const & x);
  tmat2x2(tmat2x4<T, P> const & x);
  tmat2x2(tmat4x2<T, P> const & x);
  tmat2x2(tmat3x4<T, P> const & x);
  tmat2x2(tmat4x3<T, P> const & x);



  typedef length_t length_type;
  static length_type length(){return 2;}

  col_type & operator[](length_type i);
  col_type const & operator[](length_type i) const;



  tmat2x2<T, P> & operator=(tmat2x2<T, P> const & v) = default;

  template <typename U>
  tmat2x2<T, P> & operator=(tmat2x2<U, P> const & m);
  template <typename U>
  tmat2x2<T, P> & operator+=(U s);
  template <typename U>
  tmat2x2<T, P> & operator+=(tmat2x2<U, P> const & m);
  template <typename U>
  tmat2x2<T, P> & operator-=(U s);
  template <typename U>
  tmat2x2<T, P> & operator-=(tmat2x2<U, P> const & m);
  template <typename U>
  tmat2x2<T, P> & operator*=(U s);
  template <typename U>
  tmat2x2<T, P> & operator*=(tmat2x2<U, P> const & m);
  template <typename U>
  tmat2x2<T, P> & operator/=(U s);
  template <typename U>
  tmat2x2<T, P> & operator/=(tmat2x2<U, P> const & m);



  tmat2x2<T, P> & operator++ ();
  tmat2x2<T, P> & operator-- ();
  tmat2x2<T, P> operator++(int);
  tmat2x2<T, P> operator--(int);
 };



 template <typename T, precision P>
 tmat2x2<T, P> operator+(tmat2x2<T, P> const & m);

 template <typename T, precision P>
 tmat2x2<T, P> operator-(tmat2x2<T, P> const & m);



 template <typename T, precision P>
 tmat2x2<T, P> operator+(tmat2x2<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat2x2<T, P> operator+(T scalar, tmat2x2<T, P> const & m);

 template <typename T, precision P>
 tmat2x2<T, P> operator+(tmat2x2<T, P> const & m1, tmat2x2<T, P> const & m2);

 template <typename T, precision P>
 tmat2x2<T, P> operator-(tmat2x2<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat2x2<T, P> operator-(T scalar, tmat2x2<T, P> const & m);

 template <typename T, precision P>
 tmat2x2<T, P> operator-(tmat2x2<T, P> const & m1, tmat2x2<T, P> const & m2);

 template <typename T, precision P>
 tmat2x2<T, P> operator*(tmat2x2<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat2x2<T, P> operator*(T scalar, tmat2x2<T, P> const & m);

 template <typename T, precision P>
 typename tmat2x2<T, P>::col_type operator*(tmat2x2<T, P> const & m, typename tmat2x2<T, P>::row_type const & v);

 template <typename T, precision P>
 typename tmat2x2<T, P>::row_type operator*(typename tmat2x2<T, P>::col_type const & v, tmat2x2<T, P> const & m);

 template <typename T, precision P>
 tmat2x2<T, P> operator*(tmat2x2<T, P> const & m1, tmat2x2<T, P> const & m2);

 template <typename T, precision P>
 tmat3x2<T, P> operator*(tmat2x2<T, P> const & m1, tmat3x2<T, P> const & m2);

 template <typename T, precision P>
 tmat4x2<T, P> operator*(tmat2x2<T, P> const & m1, tmat4x2<T, P> const & m2);

 template <typename T, precision P>
 tmat2x2<T, P> operator/(tmat2x2<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat2x2<T, P> operator/(T scalar, tmat2x2<T, P> const & m);

 template <typename T, precision P>
 typename tmat2x2<T, P>::col_type operator/(tmat2x2<T, P> const & m, typename tmat2x2<T, P>::row_type const & v);

 template <typename T, precision P>
 typename tmat2x2<T, P>::row_type operator/(typename tmat2x2<T, P>::col_type const & v, tmat2x2<T, P> const & m);

 template <typename T, precision P>
 tmat2x2<T, P> operator/(tmat2x2<T, P> const & m1, tmat2x2<T, P> const & m2);



 template <typename T, precision P>
 bool operator==(tmat2x2<T, P> const & m1, tmat2x2<T, P> const & m2);

 template <typename T, precision P>
 bool operator!=(tmat2x2<T, P> const & m1, tmat2x2<T, P> const & m2);
}


# 1 "../../include/glm/detail/type_mat2x2.inl" 1



# 1 "../../include/glm/detail/func_matrix.hpp" 1
# 15 "../../include/glm/detail/func_matrix.hpp"
       
# 25 "../../include/glm/detail/func_matrix.hpp"
# 1 "../../include/glm/detail/../mat2x3.hpp" 1



       

# 1 "../../include/glm/detail/../detail/type_mat2x3.hpp" 1



       
# 13 "../../include/glm/detail/../detail/type_mat2x3.hpp"
namespace glm
{
 template <typename T, precision P = defaultp>
 struct tmat2x3
 {
  typedef tvec3<T, P> col_type;
  typedef tvec2<T, P> row_type;
  typedef tmat2x3<T, P> type;
  typedef tmat3x2<T, P> transpose_type;
  typedef T value_type;

 private:
  col_type value[2];

 public:


  tmat2x3() ;
  tmat2x3(tmat2x3<T, P> const & m) = default;
  template <precision Q>
  tmat2x3(tmat2x3<T, Q> const & m);

  constexpr explicit tmat2x3(ctor);
  explicit tmat2x3(T scalar);
  tmat2x3(
   T x0, T y0, T z0,
   T x1, T y1, T z1);
  tmat2x3(
   col_type const & v0,
   col_type const & v1);



  template <typename X1, typename Y1, typename Z1, typename X2, typename Y2, typename Z2>
  tmat2x3(
   X1 x1, Y1 y1, Z1 z1,
   X2 x2, Y2 y2, Z2 z2);

  template <typename U, typename V>
  tmat2x3(
   tvec3<U, P> const & v1,
   tvec3<V, P> const & v2);



  template <typename U, precision Q>
  tmat2x3(tmat2x3<U, Q> const & m);

  tmat2x3(tmat2x2<T, P> const & x);
  tmat2x3(tmat3x3<T, P> const & x);
  tmat2x3(tmat4x4<T, P> const & x);
  tmat2x3(tmat2x4<T, P> const & x);
  tmat2x3(tmat3x2<T, P> const & x);
  tmat2x3(tmat3x4<T, P> const & x);
  tmat2x3(tmat4x2<T, P> const & x);
  tmat2x3(tmat4x3<T, P> const & x);



  typedef length_t length_type;
  static length_type length(){return 2;}

  col_type & operator[](length_type i);
  col_type const & operator[](length_type i) const;



  tmat2x3<T, P> & operator=(tmat2x3<T, P> const & m) = default;

  template <typename U>
  tmat2x3<T, P> & operator=(tmat2x3<U, P> const & m);
  template <typename U>
  tmat2x3<T, P> & operator+=(U s);
  template <typename U>
  tmat2x3<T, P> & operator+=(tmat2x3<U, P> const & m);
  template <typename U>
  tmat2x3<T, P> & operator-=(U s);
  template <typename U>
  tmat2x3<T, P> & operator-=(tmat2x3<U, P> const & m);
  template <typename U>
  tmat2x3<T, P> & operator*=(U s);
  template <typename U>
  tmat2x3<T, P> & operator/=(U s);



  tmat2x3<T, P> & operator++ ();
  tmat2x3<T, P> & operator-- ();
  tmat2x3<T, P> operator++(int);
  tmat2x3<T, P> operator--(int);
 };



 template <typename T, precision P>
 tmat2x3<T, P> operator+(tmat2x3<T, P> const & m);

 template <typename T, precision P>
 tmat2x3<T, P> operator-(tmat2x3<T, P> const & m);



 template <typename T, precision P>
 tmat2x3<T, P> operator+(tmat2x3<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat2x3<T, P> operator+(tmat2x3<T, P> const & m1, tmat2x3<T, P> const & m2);

 template <typename T, precision P>
 tmat2x3<T, P> operator-(tmat2x3<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat2x3<T, P> operator-(tmat2x3<T, P> const & m1, tmat2x3<T, P> const & m2);

 template <typename T, precision P>
 tmat2x3<T, P> operator*(tmat2x3<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat2x3<T, P> operator*(T scalar, tmat2x3<T, P> const & m);

 template <typename T, precision P>
 typename tmat2x3<T, P>::col_type operator*(tmat2x3<T, P> const & m, typename tmat2x3<T, P>::row_type const & v);

 template <typename T, precision P>
 typename tmat2x3<T, P>::row_type operator*(typename tmat2x3<T, P>::col_type const & v, tmat2x3<T, P> const & m);

 template <typename T, precision P>
 tmat2x3<T, P> operator*(tmat2x3<T, P> const & m1, tmat2x2<T, P> const & m2);

 template <typename T, precision P>
 tmat3x3<T, P> operator*(tmat2x3<T, P> const & m1, tmat3x2<T, P> const & m2);

 template <typename T, precision P>
 tmat4x3<T, P> operator*(tmat2x3<T, P> const & m1, tmat4x2<T, P> const & m2);

 template <typename T, precision P>
 tmat2x3<T, P> operator/(tmat2x3<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat2x3<T, P> operator/(T scalar, tmat2x3<T, P> const & m);



 template <typename T, precision P>
 bool operator==(tmat2x3<T, P> const & m1, tmat2x3<T, P> const & m2);

 template <typename T, precision P>
 bool operator!=(tmat2x3<T, P> const & m1, tmat2x3<T, P> const & m2);
}


# 1 "../../include/glm/detail/../detail/type_mat2x3.inl" 1



namespace glm
{



  template <typename T, precision P>
  inline tmat2x3<T, P>::tmat2x3()
  {

    this->value[0] = col_type(1, 0, 0);
    this->value[1] = col_type(0, 1, 0);

  }
# 28 "../../include/glm/detail/../detail/type_mat2x3.inl"
 template <typename T, precision P>
 template <precision Q>
 inline tmat2x3<T, P>::tmat2x3(tmat2x3<T, Q> const & m)
 {
  this->value[0] = m.value[0];
  this->value[1] = m.value[1];
 }

 template <typename T, precision P>
 inline constexpr tmat2x3<T, P>::tmat2x3(ctor)
 {}

 template <typename T, precision P>
 inline tmat2x3<T, P>::tmat2x3(T scalar)
 {
  this->value[0] = col_type(scalar, 0, 0);
  this->value[1] = col_type(0, scalar, 0);
 }

 template <typename T, precision P>
 inline tmat2x3<T, P>::tmat2x3
 (
  T x0, T y0, T z0,
  T x1, T y1, T z1
 )
 {
  this->value[0] = col_type(x0, y0, z0);
  this->value[1] = col_type(x1, y1, z1);
 }

 template <typename T, precision P>
 inline tmat2x3<T, P>::tmat2x3(col_type const & v0, col_type const & v1)
 {
  this->value[0] = v0;
  this->value[1] = v1;
 }



 template <typename T, precision P>
 template <
  typename X1, typename Y1, typename Z1,
  typename X2, typename Y2, typename Z2>
 inline tmat2x3<T, P>::tmat2x3
 (
  X1 x1, Y1 y1, Z1 z1,
  X2 x2, Y2 y2, Z2 z2
 )
 {
  this->value[0] = col_type(static_cast<T>(x1), value_type(y1), value_type(z1));
  this->value[1] = col_type(static_cast<T>(x2), value_type(y2), value_type(z2));
 }

 template <typename T, precision P>
 template <typename V1, typename V2>
 inline tmat2x3<T, P>::tmat2x3(tvec3<V1, P> const & v1, tvec3<V2, P> const & v2)
 {
  this->value[0] = col_type(v1);
  this->value[1] = col_type(v2);
 }



 template <typename T, precision P>
 template <typename U, precision Q>
 inline tmat2x3<T, P>::tmat2x3(tmat2x3<U, Q> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
 }

 template <typename T, precision P>
 inline tmat2x3<T, P>::tmat2x3(tmat2x2<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0);
  this->value[1] = col_type(m[1], 0);
 }

 template <typename T, precision P>
 inline tmat2x3<T, P>::tmat2x3(tmat3x3<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
 }

 template <typename T, precision P>
 inline tmat2x3<T, P>::tmat2x3(tmat4x4<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
 }

 template <typename T, precision P>
 inline tmat2x3<T, P>::tmat2x3(tmat2x4<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
 }

 template <typename T, precision P>
 inline tmat2x3<T, P>::tmat2x3(tmat3x2<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0);
  this->value[1] = col_type(m[1], 0);
 }

 template <typename T, precision P>
 inline tmat2x3<T, P>::tmat2x3(tmat3x4<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
 }

 template <typename T, precision P>
 inline tmat2x3<T, P>::tmat2x3(tmat4x2<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0);
  this->value[1] = col_type(m[1], 0);
 }

 template <typename T, precision P>
 inline tmat2x3<T, P>::tmat2x3(tmat4x3<T, P> const & m)
 {
  this->value[0] = m[0];
  this->value[1] = m[1];
 }



 template <typename T, precision P>
 inline typename tmat2x3<T, P>::col_type & tmat2x3<T, P>::operator[](typename tmat2x3<T, P>::length_type i)
 {
  
# 160 "../../include/glm/detail/../detail/type_mat2x3.inl" 3
 ((
# 160 "../../include/glm/detail/../detail/type_mat2x3.inl"
 i < this->length()
# 160 "../../include/glm/detail/../detail/type_mat2x3.inl" 3
 ) ? (void)0 : _assert(
# 160 "../../include/glm/detail/../detail/type_mat2x3.inl"
 "i < this->length()"
# 160 "../../include/glm/detail/../detail/type_mat2x3.inl" 3
 , "../../include/glm/detail/../detail/type_mat2x3.inl", 160))
# 160 "../../include/glm/detail/../detail/type_mat2x3.inl"
                           ;
  return this->value[i];
 }

 template <typename T, precision P>
 inline typename tmat2x3<T, P>::col_type const & tmat2x3<T, P>::operator[](typename tmat2x3<T, P>::length_type i) const
 {
  
# 167 "../../include/glm/detail/../detail/type_mat2x3.inl" 3
 ((
# 167 "../../include/glm/detail/../detail/type_mat2x3.inl"
 i < this->length()
# 167 "../../include/glm/detail/../detail/type_mat2x3.inl" 3
 ) ? (void)0 : _assert(
# 167 "../../include/glm/detail/../detail/type_mat2x3.inl"
 "i < this->length()"
# 167 "../../include/glm/detail/../detail/type_mat2x3.inl" 3
 , "../../include/glm/detail/../detail/type_mat2x3.inl", 167))
# 167 "../../include/glm/detail/../detail/type_mat2x3.inl"
                           ;
  return this->value[i];
 }
# 183 "../../include/glm/detail/../detail/type_mat2x3.inl"
 template <typename T, precision P>
 template <typename U>
 inline tmat2x3<T, P>& tmat2x3<T, P>::operator=(tmat2x3<U, P> const & m)
 {
  this->value[0] = m[0];
  this->value[1] = m[1];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat2x3<T, P> & tmat2x3<T, P>::operator+=(U s)
 {
  this->value[0] += s;
  this->value[1] += s;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat2x3<T, P>& tmat2x3<T, P>::operator+=(tmat2x3<U, P> const & m)
 {
  this->value[0] += m[0];
  this->value[1] += m[1];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat2x3<T, P>& tmat2x3<T, P>::operator-=(U s)
 {
  this->value[0] -= s;
  this->value[1] -= s;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat2x3<T, P>& tmat2x3<T, P>::operator-=(tmat2x3<U, P> const & m)
 {
  this->value[0] -= m[0];
  this->value[1] -= m[1];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat2x3<T, P>& tmat2x3<T, P>::operator*=(U s)
 {
  this->value[0] *= s;
  this->value[1] *= s;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat2x3<T, P> & tmat2x3<T, P>::operator/=(U s)
 {
  this->value[0] /= s;
  this->value[1] /= s;
  return *this;
 }



 template <typename T, precision P>
 inline tmat2x3<T, P> & tmat2x3<T, P>::operator++()
 {
  ++this->value[0];
  ++this->value[1];
  return *this;
 }

 template <typename T, precision P>
 inline tmat2x3<T, P> & tmat2x3<T, P>::operator--()
 {
  --this->value[0];
  --this->value[1];
  return *this;
 }

 template <typename T, precision P>
 inline tmat2x3<T, P> tmat2x3<T, P>::operator++(int)
 {
  tmat2x3<T, P> Result(*this);
  ++*this;
  return Result;
 }

 template <typename T, precision P>
 inline tmat2x3<T, P> tmat2x3<T, P>::operator--(int)
 {
  tmat2x3<T, P> Result(*this);
  --*this;
  return Result;
 }



 template <typename T, precision P>
 inline tmat2x3<T, P> operator+(tmat2x3<T, P> const & m)
 {
  return m;
 }

 template <typename T, precision P>
 inline tmat2x3<T, P> operator-(tmat2x3<T, P> const & m)
 {
  return tmat2x3<T, P>(
   -m[0],
   -m[1]);
 }



 template <typename T, precision P>
 inline tmat2x3<T, P> operator+(tmat2x3<T, P> const & m, T scalar)
 {
  return tmat2x3<T, P>(
   m[0] + scalar,
   m[1] + scalar);
 }

 template <typename T, precision P>
 inline tmat2x3<T, P> operator+(tmat2x3<T, P> const & m1, tmat2x3<T, P> const & m2)
 {
  return tmat2x3<T, P>(
   m1[0] + m2[0],
   m1[1] + m2[1]);
 }

 template <typename T, precision P>
 inline tmat2x3<T, P> operator-(tmat2x3<T, P> const & m, T scalar)
 {
  return tmat2x3<T, P>(
   m[0] - scalar,
   m[1] - scalar);
 }

 template <typename T, precision P>
 inline tmat2x3<T, P> operator-(tmat2x3<T, P> const & m1, tmat2x3<T, P> const & m2)
 {
  return tmat2x3<T, P>(
   m1[0] - m2[0],
   m1[1] - m2[1]);
 }

 template <typename T, precision P>
 inline tmat2x3<T, P> operator*(tmat2x3<T, P> const & m, T scalar)
 {
  return tmat2x3<T, P>(
   m[0] * scalar,
   m[1] * scalar);
 }

 template <typename T, precision P>
 inline tmat2x3<T, P> operator*(T scalar, tmat2x3<T, P> const & m)
 {
  return tmat2x3<T, P>(
   m[0] * scalar,
   m[1] * scalar);
 }

 template <typename T, precision P>
 inline typename tmat2x3<T, P>::col_type operator*
 (
  tmat2x3<T, P> const & m,
  typename tmat2x3<T, P>::row_type const & v)
 {
  return typename tmat2x3<T, P>::col_type(
   m[0][0] * v.x + m[1][0] * v.y,
   m[0][1] * v.x + m[1][1] * v.y,
   m[0][2] * v.x + m[1][2] * v.y);
 }

 template <typename T, precision P>
 inline typename tmat2x3<T, P>::row_type operator*
 (
  typename tmat2x3<T, P>::col_type const & v,
  tmat2x3<T, P> const & m)
 {
  return typename tmat2x3<T, P>::row_type(
   v.x * m[0][0] + v.y * m[0][1] + v.z * m[0][2],
   v.x * m[1][0] + v.y * m[1][1] + v.z * m[1][2]);
 }

 template <typename T, precision P>
 inline tmat2x3<T, P> operator*(tmat2x3<T, P> const & m1, tmat2x2<T, P> const & m2)
 {
  return tmat2x3<T, P>(
   m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1],
   m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1],
   m1[0][2] * m2[0][0] + m1[1][2] * m2[0][1],
   m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1],
   m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1],
   m1[0][2] * m2[1][0] + m1[1][2] * m2[1][1]);
 }

 template <typename T, precision P>
 inline tmat3x3<T, P> operator*(tmat2x3<T, P> const & m1, tmat3x2<T, P> const & m2)
 {
  T SrcA00 = m1[0][0];
  T SrcA01 = m1[0][1];
  T SrcA02 = m1[0][2];
  T SrcA10 = m1[1][0];
  T SrcA11 = m1[1][1];
  T SrcA12 = m1[1][2];

  T SrcB00 = m2[0][0];
  T SrcB01 = m2[0][1];
  T SrcB10 = m2[1][0];
  T SrcB11 = m2[1][1];
  T SrcB20 = m2[2][0];
  T SrcB21 = m2[2][1];

  tmat3x3<T, P> Result(uninitialize);
  Result[0][0] = SrcA00 * SrcB00 + SrcA10 * SrcB01;
  Result[0][1] = SrcA01 * SrcB00 + SrcA11 * SrcB01;
  Result[0][2] = SrcA02 * SrcB00 + SrcA12 * SrcB01;
  Result[1][0] = SrcA00 * SrcB10 + SrcA10 * SrcB11;
  Result[1][1] = SrcA01 * SrcB10 + SrcA11 * SrcB11;
  Result[1][2] = SrcA02 * SrcB10 + SrcA12 * SrcB11;
  Result[2][0] = SrcA00 * SrcB20 + SrcA10 * SrcB21;
  Result[2][1] = SrcA01 * SrcB20 + SrcA11 * SrcB21;
  Result[2][2] = SrcA02 * SrcB20 + SrcA12 * SrcB21;
  return Result;
 }

 template <typename T, precision P>
 inline tmat4x3<T, P> operator*(tmat2x3<T, P> const & m1, tmat4x2<T, P> const & m2)
 {
  return tmat4x3<T, P>(
   m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1],
   m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1],
   m1[0][2] * m2[0][0] + m1[1][2] * m2[0][1],
   m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1],
   m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1],
   m1[0][2] * m2[1][0] + m1[1][2] * m2[1][1],
   m1[0][0] * m2[2][0] + m1[1][0] * m2[2][1],
   m1[0][1] * m2[2][0] + m1[1][1] * m2[2][1],
   m1[0][2] * m2[2][0] + m1[1][2] * m2[2][1],
   m1[0][0] * m2[3][0] + m1[1][0] * m2[3][1],
   m1[0][1] * m2[3][0] + m1[1][1] * m2[3][1],
   m1[0][2] * m2[3][0] + m1[1][2] * m2[3][1]);
 }

 template <typename T, precision P>
 inline tmat2x3<T, P> operator/(tmat2x3<T, P> const & m, T scalar)
 {
  return tmat2x3<T, P>(
   m[0] / scalar,
   m[1] / scalar);
 }

 template <typename T, precision P>
 inline tmat2x3<T, P> operator/(T scalar, tmat2x3<T, P> const & m)
 {
  return tmat2x3<T, P>(
   scalar / m[0],
   scalar / m[1]);
 }



 template <typename T, precision P>
 inline bool operator==(tmat2x3<T, P> const & m1, tmat2x3<T, P> const & m2)
 {
  return (m1[0] == m2[0]) && (m1[1] == m2[1]);
 }

 template <typename T, precision P>
 inline bool operator!=(tmat2x3<T, P> const & m1, tmat2x3<T, P> const & m2)
 {
  return (m1[0] != m2[0]) || (m1[1] != m2[1]);
 }
}
# 165 "../../include/glm/detail/../detail/type_mat2x3.hpp" 2
# 7 "../../include/glm/detail/../mat2x3.hpp" 2

namespace glm
{





 typedef tmat2x3<float, lowp> lowp_mat2x3;






 typedef tmat2x3<float, mediump> mediump_mat2x3;






 typedef tmat2x3<float, highp> highp_mat2x3;

}
# 26 "../../include/glm/detail/func_matrix.hpp" 2
# 1 "../../include/glm/detail/../mat2x4.hpp" 1



       

# 1 "../../include/glm/detail/../detail/type_mat2x4.hpp" 1



       
# 13 "../../include/glm/detail/../detail/type_mat2x4.hpp"
namespace glm
{
 template <typename T, precision P = defaultp>
 struct tmat2x4
 {
  typedef tvec4<T, P> col_type;
  typedef tvec2<T, P> row_type;
  typedef tmat2x4<T, P> type;
  typedef tmat4x2<T, P> transpose_type;
  typedef T value_type;

 private:
  col_type value[2];

 public:


  tmat2x4() ;
  tmat2x4(tmat2x4<T, P> const & m) = default;
  template <precision Q>
  tmat2x4(tmat2x4<T, Q> const & m);

  constexpr explicit tmat2x4(ctor);
  explicit tmat2x4(T scalar);
  tmat2x4(
   T x0, T y0, T z0, T w0,
   T x1, T y1, T z1, T w1);
  tmat2x4(
   col_type const & v0,
   col_type const & v1);



  template <
   typename X1, typename Y1, typename Z1, typename W1,
   typename X2, typename Y2, typename Z2, typename W2>
  tmat2x4(
   X1 x1, Y1 y1, Z1 z1, W1 w1,
   X2 x2, Y2 y2, Z2 z2, W2 w2);

  template <typename U, typename V>
  tmat2x4(
   tvec4<U, P> const & v1,
   tvec4<V, P> const & v2);



  template <typename U, precision Q>
  tmat2x4(tmat2x4<U, Q> const & m);

  tmat2x4(tmat2x2<T, P> const & x);
  tmat2x4(tmat3x3<T, P> const & x);
  tmat2x4(tmat4x4<T, P> const & x);
  tmat2x4(tmat2x3<T, P> const & x);
  tmat2x4(tmat3x2<T, P> const & x);
  tmat2x4(tmat3x4<T, P> const & x);
  tmat2x4(tmat4x2<T, P> const & x);
  tmat2x4(tmat4x3<T, P> const & x);



  typedef length_t length_type;
  static length_type length(){return 2;}

  col_type & operator[](length_type i);
  col_type const & operator[](length_type i) const;



  tmat2x4<T, P> & operator=(tmat2x4<T, P> const & m) = default;

  template <typename U>
  tmat2x4<T, P> & operator=(tmat2x4<U, P> const & m);
  template <typename U>
  tmat2x4<T, P> & operator+=(U s);
  template <typename U>
  tmat2x4<T, P> & operator+=(tmat2x4<U, P> const & m);
  template <typename U>
  tmat2x4<T, P> & operator-=(U s);
  template <typename U>
  tmat2x4<T, P> & operator-=(tmat2x4<U, P> const & m);
  template <typename U>
  tmat2x4<T, P> & operator*=(U s);
  template <typename U>
  tmat2x4<T, P> & operator/=(U s);



  tmat2x4<T, P> & operator++ ();
  tmat2x4<T, P> & operator-- ();
  tmat2x4<T, P> operator++(int);
  tmat2x4<T, P> operator--(int);
 };



 template <typename T, precision P>
 tmat2x4<T, P> operator+(tmat2x4<T, P> const & m);

 template <typename T, precision P>
 tmat2x4<T, P> operator-(tmat2x4<T, P> const & m);



 template <typename T, precision P>
 tmat2x4<T, P> operator+(tmat2x4<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat2x4<T, P> operator+(tmat2x4<T, P> const & m1, tmat2x4<T, P> const & m2);

 template <typename T, precision P>
 tmat2x4<T, P> operator-(tmat2x4<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat2x4<T, P> operator-(tmat2x4<T, P> const & m1, tmat2x4<T, P> const & m2);

 template <typename T, precision P>
 tmat2x4<T, P> operator*(tmat2x4<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat2x4<T, P> operator*(T scalar, tmat2x4<T, P> const & m);

 template <typename T, precision P>
 typename tmat2x4<T, P>::col_type operator*(tmat2x4<T, P> const & m, typename tmat2x4<T, P>::row_type const & v);

 template <typename T, precision P>
 typename tmat2x4<T, P>::row_type operator*(typename tmat2x4<T, P>::col_type const & v, tmat2x4<T, P> const & m);

 template <typename T, precision P>
 tmat4x4<T, P> operator*(tmat2x4<T, P> const & m1, tmat4x2<T, P> const & m2);

 template <typename T, precision P>
 tmat2x4<T, P> operator*(tmat2x4<T, P> const & m1, tmat2x2<T, P> const & m2);

 template <typename T, precision P>
 tmat3x4<T, P> operator*(tmat2x4<T, P> const & m1, tmat3x2<T, P> const & m2);

 template <typename T, precision P>
 tmat2x4<T, P> operator/(tmat2x4<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat2x4<T, P> operator/(T scalar, tmat2x4<T, P> const & m);



 template <typename T, precision P>
 bool operator==(tmat2x4<T, P> const & m1, tmat2x4<T, P> const & m2);

 template <typename T, precision P>
 bool operator!=(tmat2x4<T, P> const & m1, tmat2x4<T, P> const & m2);
}


# 1 "../../include/glm/detail/../detail/type_mat2x4.inl" 1



namespace glm
{



  template <typename T, precision P>
  inline tmat2x4<T, P>::tmat2x4()
  {

    this->value[0] = col_type(1, 0, 0, 0);
    this->value[1] = col_type(0, 1, 0, 0);

  }
# 28 "../../include/glm/detail/../detail/type_mat2x4.inl"
 template <typename T, precision P>
 template <precision Q>
 inline tmat2x4<T, P>::tmat2x4(tmat2x4<T, Q> const & m)
 {
  this->value[0] = m.value[0];
  this->value[1] = m.value[1];
 }

 template <typename T, precision P>
 inline constexpr tmat2x4<T, P>::tmat2x4(ctor)
 {}

 template <typename T, precision P>
 inline tmat2x4<T, P>::tmat2x4(T scalar)
 {
  value_type const Zero(0);
  this->value[0] = col_type(scalar, Zero, Zero, Zero);
  this->value[1] = col_type(Zero, scalar, Zero, Zero);
 }

 template <typename T, precision P>
 inline tmat2x4<T, P>::tmat2x4
 (
  T x0, T y0, T z0, T w0,
  T x1, T y1, T z1, T w1
 )
 {
  this->value[0] = col_type(x0, y0, z0, w0);
  this->value[1] = col_type(x1, y1, z1, w1);
 }

 template <typename T, precision P>
 inline tmat2x4<T, P>::tmat2x4(col_type const & v0, col_type const & v1)
 {
  this->value[0] = v0;
  this->value[1] = v1;
 }



 template <typename T, precision P>
 template <
  typename X1, typename Y1, typename Z1, typename W1,
  typename X2, typename Y2, typename Z2, typename W2>
 inline tmat2x4<T, P>::tmat2x4
 (
  X1 x1, Y1 y1, Z1 z1, W1 w1,
  X2 x2, Y2 y2, Z2 z2, W2 w2
 )
 {
  this->value[0] = col_type(static_cast<T>(x1), value_type(y1), value_type(z1), value_type(w1));
  this->value[1] = col_type(static_cast<T>(x2), value_type(y2), value_type(z2), value_type(w2));
 }

 template <typename T, precision P>
 template <typename V1, typename V2>
 inline tmat2x4<T, P>::tmat2x4(tvec4<V1, P> const & v1, tvec4<V2, P> const & v2)
 {
  this->value[0] = col_type(v1);
  this->value[1] = col_type(v2);
 }



 template <typename T, precision P>
 template <typename U, precision Q>
 inline tmat2x4<T, P>::tmat2x4(tmat2x4<U, Q> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
 }

 template <typename T, precision P>
 inline tmat2x4<T, P>::tmat2x4(tmat2x2<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0, 0);
  this->value[1] = col_type(m[1], 0, 0);
 }

 template <typename T, precision P>
 inline tmat2x4<T, P>::tmat2x4(tmat3x3<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0);
  this->value[1] = col_type(m[1], 0);
 }

 template <typename T, precision P>
 inline tmat2x4<T, P>::tmat2x4(tmat4x4<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
 }

 template <typename T, precision P>
 inline tmat2x4<T, P>::tmat2x4(tmat2x3<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0);
  this->value[1] = col_type(m[1], 0);
 }

 template <typename T, precision P>
 inline tmat2x4<T, P>::tmat2x4(tmat3x2<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0, 0);
  this->value[1] = col_type(m[1], 0, 0);
 }

 template <typename T, precision P>
 inline tmat2x4<T, P>::tmat2x4(tmat3x4<T, P> const & m)
 {
  this->value[0] = m[0];
  this->value[1] = m[1];
 }

 template <typename T, precision P>
 inline tmat2x4<T, P>::tmat2x4(tmat4x2<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0, 0);
  this->value[1] = col_type(m[1], 0, 0);
 }

 template <typename T, precision P>
 inline tmat2x4<T, P>::tmat2x4(tmat4x3<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0);
  this->value[1] = col_type(m[1], 0);
 }



 template <typename T, precision P>
 inline typename tmat2x4<T, P>::col_type & tmat2x4<T, P>::operator[](typename tmat2x4<T, P>::length_type i)
 {
  
# 161 "../../include/glm/detail/../detail/type_mat2x4.inl" 3
 ((
# 161 "../../include/glm/detail/../detail/type_mat2x4.inl"
 i < this->length()
# 161 "../../include/glm/detail/../detail/type_mat2x4.inl" 3
 ) ? (void)0 : _assert(
# 161 "../../include/glm/detail/../detail/type_mat2x4.inl"
 "i < this->length()"
# 161 "../../include/glm/detail/../detail/type_mat2x4.inl" 3
 , "../../include/glm/detail/../detail/type_mat2x4.inl", 161))
# 161 "../../include/glm/detail/../detail/type_mat2x4.inl"
                           ;
  return this->value[i];
 }

 template <typename T, precision P>
 inline typename tmat2x4<T, P>::col_type const & tmat2x4<T, P>::operator[](typename tmat2x4<T, P>::length_type i) const
 {
  
# 168 "../../include/glm/detail/../detail/type_mat2x4.inl" 3
 ((
# 168 "../../include/glm/detail/../detail/type_mat2x4.inl"
 i < this->length()
# 168 "../../include/glm/detail/../detail/type_mat2x4.inl" 3
 ) ? (void)0 : _assert(
# 168 "../../include/glm/detail/../detail/type_mat2x4.inl"
 "i < this->length()"
# 168 "../../include/glm/detail/../detail/type_mat2x4.inl" 3
 , "../../include/glm/detail/../detail/type_mat2x4.inl", 168))
# 168 "../../include/glm/detail/../detail/type_mat2x4.inl"
                           ;
  return this->value[i];
 }
# 184 "../../include/glm/detail/../detail/type_mat2x4.inl"
 template <typename T, precision P>
 template <typename U>
 inline tmat2x4<T, P>& tmat2x4<T, P>::operator=(tmat2x4<U, P> const & m)
 {
  this->value[0] = m[0];
  this->value[1] = m[1];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat2x4<T, P>& tmat2x4<T, P>::operator+=(U s)
 {
  this->value[0] += s;
  this->value[1] += s;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat2x4<T, P>& tmat2x4<T, P>::operator+=(tmat2x4<U, P> const & m)
 {
  this->value[0] += m[0];
  this->value[1] += m[1];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat2x4<T, P>& tmat2x4<T, P>::operator-=(U s)
 {
  this->value[0] -= s;
  this->value[1] -= s;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat2x4<T, P>& tmat2x4<T, P>::operator-=(tmat2x4<U, P> const & m)
 {
  this->value[0] -= m[0];
  this->value[1] -= m[1];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat2x4<T, P>& tmat2x4<T, P>::operator*=(U s)
 {
  this->value[0] *= s;
  this->value[1] *= s;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat2x4<T, P> & tmat2x4<T, P>::operator/=(U s)
 {
  this->value[0] /= s;
  this->value[1] /= s;
  return *this;
 }



 template <typename T, precision P>
 inline tmat2x4<T, P>& tmat2x4<T, P>::operator++()
 {
  ++this->value[0];
  ++this->value[1];
  return *this;
 }

 template <typename T, precision P>
 inline tmat2x4<T, P>& tmat2x4<T, P>::operator--()
 {
  --this->value[0];
  --this->value[1];
  return *this;
 }

 template <typename T, precision P>
 inline tmat2x4<T, P> tmat2x4<T, P>::operator++(int)
 {
  tmat2x4<T, P> Result(*this);
  ++*this;
  return Result;
 }

 template <typename T, precision P>
 inline tmat2x4<T, P> tmat2x4<T, P>::operator--(int)
 {
  tmat2x4<T, P> Result(*this);
  --*this;
  return Result;
 }



 template <typename T, precision P>
 inline tmat2x4<T, P> operator+(tmat2x4<T, P> const & m)
 {
  return m;
 }

 template <typename T, precision P>
 inline tmat2x4<T, P> operator-(tmat2x4<T, P> const & m)
 {
  return tmat2x4<T, P>(
   -m[0],
   -m[1]);
 }



 template <typename T, precision P>
 inline tmat2x4<T, P> operator+(tmat2x4<T, P> const & m, T scalar)
 {
  return tmat2x4<T, P>(
   m[0] + scalar,
   m[1] + scalar);
 }

 template <typename T, precision P>
 inline tmat2x4<T, P> operator+(tmat2x4<T, P> const & m1, tmat2x4<T, P> const & m2)
 {
  return tmat2x4<T, P>(
   m1[0] + m2[0],
   m1[1] + m2[1]);
 }

 template <typename T, precision P>
 inline tmat2x4<T, P> operator-(tmat2x4<T, P> const & m, T scalar)
 {
  return tmat2x4<T, P>(
   m[0] - scalar,
   m[1] - scalar);
 }

 template <typename T, precision P>
 inline tmat2x4<T, P> operator-(tmat2x4<T, P> const & m1, tmat2x4<T, P> const & m2)
 {
  return tmat2x4<T, P>(
   m1[0] - m2[0],
   m1[1] - m2[1]);
 }

 template <typename T, precision P>
 inline tmat2x4<T, P> operator*(tmat2x4<T, P> const & m, T scalar)
 {
  return tmat2x4<T, P>(
   m[0] * scalar,
   m[1] * scalar);
 }

 template <typename T, precision P>
 inline tmat2x4<T, P> operator*(T scalar, tmat2x4<T, P> const & m)
 {
  return tmat2x4<T, P>(
   m[0] * scalar,
   m[1] * scalar);
 }

 template <typename T, precision P>
 inline typename tmat2x4<T, P>::col_type operator*(tmat2x4<T, P> const & m, typename tmat2x4<T, P>::row_type const & v)
 {
  return typename tmat2x4<T, P>::col_type(
   m[0][0] * v.x + m[1][0] * v.y,
   m[0][1] * v.x + m[1][1] * v.y,
   m[0][2] * v.x + m[1][2] * v.y,
   m[0][3] * v.x + m[1][3] * v.y);
 }

 template <typename T, precision P>
 inline typename tmat2x4<T, P>::row_type operator*(typename tmat2x4<T, P>::col_type const & v, tmat2x4<T, P> const & m)
 {
  return typename tmat2x4<T, P>::row_type(
   v.x * m[0][0] + v.y * m[0][1] + v.z * m[0][2] + v.w * m[0][3],
   v.x * m[1][0] + v.y * m[1][1] + v.z * m[1][2] + v.w * m[1][3]);
 }

 template <typename T, precision P>
 inline tmat4x4<T, P> operator*(tmat2x4<T, P> const & m1, tmat4x2<T, P> const & m2)
 {
  T SrcA00 = m1[0][0];
  T SrcA01 = m1[0][1];
  T SrcA02 = m1[0][2];
  T SrcA03 = m1[0][3];
  T SrcA10 = m1[1][0];
  T SrcA11 = m1[1][1];
  T SrcA12 = m1[1][2];
  T SrcA13 = m1[1][3];

  T SrcB00 = m2[0][0];
  T SrcB01 = m2[0][1];
  T SrcB10 = m2[1][0];
  T SrcB11 = m2[1][1];
  T SrcB20 = m2[2][0];
  T SrcB21 = m2[2][1];
  T SrcB30 = m2[3][0];
  T SrcB31 = m2[3][1];

  tmat4x4<T, P> Result(uninitialize);
  Result[0][0] = SrcA00 * SrcB00 + SrcA10 * SrcB01;
  Result[0][1] = SrcA01 * SrcB00 + SrcA11 * SrcB01;
  Result[0][2] = SrcA02 * SrcB00 + SrcA12 * SrcB01;
  Result[0][3] = SrcA03 * SrcB00 + SrcA13 * SrcB01;
  Result[1][0] = SrcA00 * SrcB10 + SrcA10 * SrcB11;
  Result[1][1] = SrcA01 * SrcB10 + SrcA11 * SrcB11;
  Result[1][2] = SrcA02 * SrcB10 + SrcA12 * SrcB11;
  Result[1][3] = SrcA03 * SrcB10 + SrcA13 * SrcB11;
  Result[2][0] = SrcA00 * SrcB20 + SrcA10 * SrcB21;
  Result[2][1] = SrcA01 * SrcB20 + SrcA11 * SrcB21;
  Result[2][2] = SrcA02 * SrcB20 + SrcA12 * SrcB21;
  Result[2][3] = SrcA03 * SrcB20 + SrcA13 * SrcB21;
  Result[3][0] = SrcA00 * SrcB30 + SrcA10 * SrcB31;
  Result[3][1] = SrcA01 * SrcB30 + SrcA11 * SrcB31;
  Result[3][2] = SrcA02 * SrcB30 + SrcA12 * SrcB31;
  Result[3][3] = SrcA03 * SrcB30 + SrcA13 * SrcB31;
  return Result;
 }

 template <typename T, precision P>
 inline tmat2x4<T, P> operator*(tmat2x4<T, P> const & m1, tmat2x2<T, P> const & m2)
 {
  return tmat2x4<T, P>(
   m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1],
   m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1],
   m1[0][2] * m2[0][0] + m1[1][2] * m2[0][1],
   m1[0][3] * m2[0][0] + m1[1][3] * m2[0][1],
   m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1],
   m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1],
   m1[0][2] * m2[1][0] + m1[1][2] * m2[1][1],
   m1[0][3] * m2[1][0] + m1[1][3] * m2[1][1]);
 }

 template <typename T, precision P>
 inline tmat3x4<T, P> operator*(tmat2x4<T, P> const & m1, tmat3x2<T, P> const & m2)
 {
  return tmat3x4<T, P>(
   m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1],
   m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1],
   m1[0][2] * m2[0][0] + m1[1][2] * m2[0][1],
   m1[0][3] * m2[0][0] + m1[1][3] * m2[0][1],
   m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1],
   m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1],
   m1[0][2] * m2[1][0] + m1[1][2] * m2[1][1],
   m1[0][3] * m2[1][0] + m1[1][3] * m2[1][1],
   m1[0][0] * m2[2][0] + m1[1][0] * m2[2][1],
   m1[0][1] * m2[2][0] + m1[1][1] * m2[2][1],
   m1[0][2] * m2[2][0] + m1[1][2] * m2[2][1],
   m1[0][3] * m2[2][0] + m1[1][3] * m2[2][1]);
 }

 template <typename T, precision P>
 inline tmat2x4<T, P> operator/(tmat2x4<T, P> const & m, T scalar)
 {
  return tmat2x4<T, P>(
   m[0] / scalar,
   m[1] / scalar);
 }

 template <typename T, precision P>
 inline tmat2x4<T, P> operator/(T scalar, tmat2x4<T, P> const & m)
 {
  return tmat2x4<T, P>(
   scalar / m[0],
   scalar / m[1]);
 }



 template <typename T, precision P>
 inline bool operator==(tmat2x4<T, P> const & m1, tmat2x4<T, P> const & m2)
 {
  return (m1[0] == m2[0]) && (m1[1] == m2[1]);
 }

 template <typename T, precision P>
 inline bool operator!=(tmat2x4<T, P> const & m1, tmat2x4<T, P> const & m2)
 {
  return (m1[0] != m2[0]) || (m1[1] != m2[1]);
 }
}
# 167 "../../include/glm/detail/../detail/type_mat2x4.hpp" 2
# 7 "../../include/glm/detail/../mat2x4.hpp" 2

namespace glm
{





 typedef tmat2x4<float, lowp> lowp_mat2x4;






 typedef tmat2x4<float, mediump> mediump_mat2x4;






 typedef tmat2x4<float, highp> highp_mat2x4;

}
# 27 "../../include/glm/detail/func_matrix.hpp" 2
# 1 "../../include/glm/detail/../mat3x2.hpp" 1



       

# 1 "../../include/glm/detail/../detail/type_mat3x2.hpp" 1



       
# 13 "../../include/glm/detail/../detail/type_mat3x2.hpp"
namespace glm
{
 template <typename T, precision P = defaultp>
 struct tmat3x2
 {
  typedef tvec2<T, P> col_type;
  typedef tvec3<T, P> row_type;
  typedef tmat3x2<T, P> type;
  typedef tmat2x3<T, P> transpose_type;
  typedef T value_type;

 private:
  col_type value[3];

 public:


  tmat3x2() ;
  tmat3x2(tmat3x2<T, P> const & m) = default;
  template <precision Q>
  tmat3x2(tmat3x2<T, Q> const & m);

  constexpr explicit tmat3x2(ctor);
  explicit tmat3x2(T scalar);
  tmat3x2(
   T x0, T y0,
   T x1, T y1,
   T x2, T y2);
  tmat3x2(
   col_type const & v0,
   col_type const & v1,
   col_type const & v2);



  template<
   typename X1, typename Y1,
   typename X2, typename Y2,
   typename X3, typename Y3>
  tmat3x2(
   X1 x1, Y1 y1,
   X2 x2, Y2 y2,
   X3 x3, Y3 y3);

  template <typename V1, typename V2, typename V3>
  tmat3x2(
   tvec2<V1, P> const & v1,
   tvec2<V2, P> const & v2,
   tvec2<V3, P> const & v3);



  template <typename U, precision Q>
  tmat3x2(tmat3x2<U, Q> const & m);

  tmat3x2(tmat2x2<T, P> const & x);
  tmat3x2(tmat3x3<T, P> const & x);
  tmat3x2(tmat4x4<T, P> const & x);
  tmat3x2(tmat2x3<T, P> const & x);
  tmat3x2(tmat2x4<T, P> const & x);
  tmat3x2(tmat3x4<T, P> const & x);
  tmat3x2(tmat4x2<T, P> const & x);
  tmat3x2(tmat4x3<T, P> const & x);



  typedef length_t length_type;
  static length_type length(){return 3;}

  col_type & operator[](length_type i);
  col_type const & operator[](length_type i) const;



  tmat3x2<T, P> & operator=(tmat3x2<T, P> const & m) = default;

  template <typename U>
  tmat3x2<T, P> & operator=(tmat3x2<U, P> const & m);
  template <typename U>
  tmat3x2<T, P> & operator+=(U s);
  template <typename U>
  tmat3x2<T, P> & operator+=(tmat3x2<U, P> const & m);
  template <typename U>
  tmat3x2<T, P> & operator-=(U s);
  template <typename U>
  tmat3x2<T, P> & operator-=(tmat3x2<U, P> const & m);
  template <typename U>
  tmat3x2<T, P> & operator*=(U s);
  template <typename U>
  tmat3x2<T, P> & operator/=(U s);



  tmat3x2<T, P> & operator++ ();
  tmat3x2<T, P> & operator-- ();
  tmat3x2<T, P> operator++(int);
  tmat3x2<T, P> operator--(int);
 };



 template <typename T, precision P>
 tmat3x2<T, P> operator+(tmat3x2<T, P> const & m);

 template <typename T, precision P>
 tmat3x2<T, P> operator-(tmat3x2<T, P> const & m);



 template <typename T, precision P>
 tmat3x2<T, P> operator+(tmat3x2<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat3x2<T, P> operator+(tmat3x2<T, P> const & m1, tmat3x2<T, P> const & m2);

 template <typename T, precision P>
 tmat3x2<T, P> operator-(tmat3x2<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat3x2<T, P> operator-(tmat3x2<T, P> const & m1, tmat3x2<T, P> const & m2);

 template <typename T, precision P>
 tmat3x2<T, P> operator*(tmat3x2<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat3x2<T, P> operator*(T scalar, tmat3x2<T, P> const & m);

 template <typename T, precision P>
 typename tmat3x2<T, P>::col_type operator*(tmat3x2<T, P> const & m, typename tmat3x2<T, P>::row_type const & v);

 template <typename T, precision P>
 typename tmat3x2<T, P>::row_type operator*(typename tmat3x2<T, P>::col_type const & v, tmat3x2<T, P> const & m);

 template <typename T, precision P>
 tmat2x2<T, P> operator*(tmat3x2<T, P> const & m1, tmat2x3<T, P> const & m2);

 template <typename T, precision P>
 tmat3x2<T, P> operator*(tmat3x2<T, P> const & m1, tmat3x3<T, P> const & m2);

 template <typename T, precision P>
 tmat4x2<T, P> operator*(tmat3x2<T, P> const & m1, tmat4x3<T, P> const & m2);

 template <typename T, precision P>
 tmat3x2<T, P> operator/(tmat3x2<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat3x2<T, P> operator/(T scalar, tmat3x2<T, P> const & m);



 template <typename T, precision P>
 bool operator==(tmat3x2<T, P> const & m1, tmat3x2<T, P> const & m2);

 template <typename T, precision P>
 bool operator!=(tmat3x2<T, P> const & m1, tmat3x2<T, P> const & m2);

}


# 1 "../../include/glm/detail/../detail/type_mat3x2.inl" 1



namespace glm
{



  template <typename T, precision P>
  inline tmat3x2<T, P>::tmat3x2()
  {

    this->value[0] = col_type(1, 0);
    this->value[1] = col_type(0, 1);
    this->value[2] = col_type(0, 0);

  }
# 30 "../../include/glm/detail/../detail/type_mat3x2.inl"
 template <typename T, precision P>
 template <precision Q>
 inline tmat3x2<T, P>::tmat3x2(tmat3x2<T, Q> const & m)
 {
  this->value[0] = m.value[0];
  this->value[1] = m.value[1];
  this->value[2] = m.value[2];
 }

 template <typename T, precision P>
 inline constexpr tmat3x2<T, P>::tmat3x2(ctor)
 {}

 template <typename T, precision P>
 inline tmat3x2<T, P>::tmat3x2(T scalar)
 {
  this->value[0] = col_type(scalar, 0);
  this->value[1] = col_type(0, scalar);
  this->value[2] = col_type(0, 0);
 }

 template <typename T, precision P>
 inline tmat3x2<T, P>::tmat3x2
 (
  T x0, T y0,
  T x1, T y1,
  T x2, T y2
 )
 {
  this->value[0] = col_type(x0, y0);
  this->value[1] = col_type(x1, y1);
  this->value[2] = col_type(x2, y2);
 }

 template <typename T, precision P>
 inline tmat3x2<T, P>::tmat3x2
 (
  col_type const & v0,
  col_type const & v1,
  col_type const & v2
 )
 {
  this->value[0] = v0;
  this->value[1] = v1;
  this->value[2] = v2;
 }



 template <typename T, precision P>
 template <
  typename X1, typename Y1,
  typename X2, typename Y2,
  typename X3, typename Y3>
 inline tmat3x2<T, P>::tmat3x2
 (
  X1 x1, Y1 y1,
  X2 x2, Y2 y2,
  X3 x3, Y3 y3
 )
 {
  this->value[0] = col_type(static_cast<T>(x1), value_type(y1));
  this->value[1] = col_type(static_cast<T>(x2), value_type(y2));
  this->value[2] = col_type(static_cast<T>(x3), value_type(y3));
 }

 template <typename T, precision P>
 template <typename V1, typename V2, typename V3>
 inline tmat3x2<T, P>::tmat3x2
 (
  tvec2<V1, P> const & v1,
  tvec2<V2, P> const & v2,
  tvec2<V3, P> const & v3
 )
 {
  this->value[0] = col_type(v1);
  this->value[1] = col_type(v2);
  this->value[2] = col_type(v3);
 }



 template <typename T, precision P>
 template <typename U, precision Q>
 inline tmat3x2<T, P>::tmat3x2(tmat3x2<U, Q> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(m[2]);
 }

 template <typename T, precision P>
 inline tmat3x2<T, P>::tmat3x2(tmat2x2<T, P> const & m)
 {
  this->value[0] = m[0];
  this->value[1] = m[1];
  this->value[2] = col_type(0);
 }

 template <typename T, precision P>
 inline tmat3x2<T, P>::tmat3x2(tmat3x3<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(m[2]);
 }

 template <typename T, precision P>
 inline tmat3x2<T, P>::tmat3x2(tmat4x4<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(m[2]);
 }

 template <typename T, precision P>
 inline tmat3x2<T, P>::tmat3x2(tmat2x3<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(T(0));
 }

 template <typename T, precision P>
 inline tmat3x2<T, P>::tmat3x2(tmat2x4<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(T(0));
 }

 template <typename T, precision P>
 inline tmat3x2<T, P>::tmat3x2(tmat3x4<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(m[2]);
 }

 template <typename T, precision P>
 inline tmat3x2<T, P>::tmat3x2(tmat4x2<T, P> const & m)
 {
  this->value[0] = m[0];
  this->value[1] = m[1];
  this->value[2] = m[2];
 }

 template <typename T, precision P>
 inline tmat3x2<T, P>::tmat3x2(tmat4x3<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(m[2]);
 }



 template <typename T, precision P>
 inline typename tmat3x2<T, P>::col_type & tmat3x2<T, P>::operator[](typename tmat3x2<T, P>::length_type i)
 {
  
# 190 "../../include/glm/detail/../detail/type_mat3x2.inl" 3
 ((
# 190 "../../include/glm/detail/../detail/type_mat3x2.inl"
 i < this->length()
# 190 "../../include/glm/detail/../detail/type_mat3x2.inl" 3
 ) ? (void)0 : _assert(
# 190 "../../include/glm/detail/../detail/type_mat3x2.inl"
 "i < this->length()"
# 190 "../../include/glm/detail/../detail/type_mat3x2.inl" 3
 , "../../include/glm/detail/../detail/type_mat3x2.inl", 190))
# 190 "../../include/glm/detail/../detail/type_mat3x2.inl"
                           ;
  return this->value[i];
 }

 template <typename T, precision P>
 inline typename tmat3x2<T, P>::col_type const & tmat3x2<T, P>::operator[](typename tmat3x2<T, P>::length_type i) const
 {
  
# 197 "../../include/glm/detail/../detail/type_mat3x2.inl" 3
 ((
# 197 "../../include/glm/detail/../detail/type_mat3x2.inl"
 i < this->length()
# 197 "../../include/glm/detail/../detail/type_mat3x2.inl" 3
 ) ? (void)0 : _assert(
# 197 "../../include/glm/detail/../detail/type_mat3x2.inl"
 "i < this->length()"
# 197 "../../include/glm/detail/../detail/type_mat3x2.inl" 3
 , "../../include/glm/detail/../detail/type_mat3x2.inl", 197))
# 197 "../../include/glm/detail/../detail/type_mat3x2.inl"
                           ;
  return this->value[i];
 }
# 214 "../../include/glm/detail/../detail/type_mat3x2.inl"
 template <typename T, precision P>
 template <typename U>
 inline tmat3x2<T, P>& tmat3x2<T, P>::operator=(tmat3x2<U, P> const & m)
 {
  this->value[0] = m[0];
  this->value[1] = m[1];
  this->value[2] = m[2];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat3x2<T, P>& tmat3x2<T, P>::operator+=(U s)
 {
  this->value[0] += s;
  this->value[1] += s;
  this->value[2] += s;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat3x2<T, P>& tmat3x2<T, P>::operator+=(tmat3x2<U, P> const & m)
 {
  this->value[0] += m[0];
  this->value[1] += m[1];
  this->value[2] += m[2];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat3x2<T, P>& tmat3x2<T, P>::operator-=(U s)
 {
  this->value[0] -= s;
  this->value[1] -= s;
  this->value[2] -= s;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat3x2<T, P>& tmat3x2<T, P>::operator-=(tmat3x2<U, P> const & m)
 {
  this->value[0] -= m[0];
  this->value[1] -= m[1];
  this->value[2] -= m[2];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat3x2<T, P>& tmat3x2<T, P>::operator*=(U s)
 {
  this->value[0] *= s;
  this->value[1] *= s;
  this->value[2] *= s;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat3x2<T, P> & tmat3x2<T, P>::operator/=(U s)
 {
  this->value[0] /= s;
  this->value[1] /= s;
  this->value[2] /= s;
  return *this;
 }



 template <typename T, precision P>
 inline tmat3x2<T, P>& tmat3x2<T, P>::operator++()
 {
  ++this->value[0];
  ++this->value[1];
  ++this->value[2];
  return *this;
 }

 template <typename T, precision P>
 inline tmat3x2<T, P>& tmat3x2<T, P>::operator--()
 {
  --this->value[0];
  --this->value[1];
  --this->value[2];
  return *this;
 }

 template <typename T, precision P>
 inline tmat3x2<T, P> tmat3x2<T, P>::operator++(int)
 {
  tmat3x2<T, P> Result(*this);
  ++*this;
  return Result;
 }

 template <typename T, precision P>
 inline tmat3x2<T, P> tmat3x2<T, P>::operator--(int)
 {
  tmat3x2<T, P> Result(*this);
  --*this;
  return Result;
 }



 template <typename T, precision P>
 inline tmat3x2<T, P> operator+(tmat3x2<T, P> const & m)
 {
  return m;
 }

 template <typename T, precision P>
 inline tmat3x2<T, P> operator-(tmat3x2<T, P> const & m)
 {
  return tmat3x2<T, P>(
   -m[0],
   -m[1],
   -m[2]);
 }



 template <typename T, precision P>
 inline tmat3x2<T, P> operator+(tmat3x2<T, P> const & m, T scalar)
 {
  return tmat3x2<T, P>(
   m[0] + scalar,
   m[1] + scalar,
   m[2] + scalar);
 }

 template <typename T, precision P>
 inline tmat3x2<T, P> operator+(tmat3x2<T, P> const & m1, tmat3x2<T, P> const & m2)
 {
  return tmat3x2<T, P>(
   m1[0] + m2[0],
   m1[1] + m2[1],
   m1[2] + m2[2]);
 }

 template <typename T, precision P>
 inline tmat3x2<T, P> operator-(tmat3x2<T, P> const & m, T scalar)
 {
  return tmat3x2<T, P>(
   m[0] - scalar,
   m[1] - scalar,
   m[2] - scalar);
 }

 template <typename T, precision P>
 inline tmat3x2<T, P> operator-(tmat3x2<T, P> const & m1, tmat3x2<T, P> const & m2)
 {
  return tmat3x2<T, P>(
   m1[0] - m2[0],
   m1[1] - m2[1],
   m1[2] - m2[2]);
 }

 template <typename T, precision P>
 inline tmat3x2<T, P> operator*(tmat3x2<T, P> const & m, T scalar)
 {
  return tmat3x2<T, P>(
   m[0] * scalar,
   m[1] * scalar,
   m[2] * scalar);
 }

 template <typename T, precision P>
 inline tmat3x2<T, P> operator*(T scalar, tmat3x2<T, P> const & m)
 {
  return tmat3x2<T, P>(
   m[0] * scalar,
   m[1] * scalar,
   m[2] * scalar);
 }

 template <typename T, precision P>
 inline typename tmat3x2<T, P>::col_type operator*(tmat3x2<T, P> const & m, typename tmat3x2<T, P>::row_type const & v)
 {
  return typename tmat3x2<T, P>::col_type(
   m[0][0] * v.x + m[1][0] * v.y + m[2][0] * v.z,
   m[0][1] * v.x + m[1][1] * v.y + m[2][1] * v.z);
 }

 template <typename T, precision P>
 inline typename tmat3x2<T, P>::row_type operator*(typename tmat3x2<T, P>::col_type const & v, tmat3x2<T, P> const & m)
 {
  return typename tmat3x2<T, P>::row_type(
   v.x * m[0][0] + v.y * m[0][1],
   v.x * m[1][0] + v.y * m[1][1],
   v.x * m[2][0] + v.y * m[2][1]);
 }

 template <typename T, precision P>
 inline tmat2x2<T, P> operator*(tmat3x2<T, P> const & m1, tmat2x3<T, P> const & m2)
 {
  const T SrcA00 = m1[0][0];
  const T SrcA01 = m1[0][1];
  const T SrcA10 = m1[1][0];
  const T SrcA11 = m1[1][1];
  const T SrcA20 = m1[2][0];
  const T SrcA21 = m1[2][1];

  const T SrcB00 = m2[0][0];
  const T SrcB01 = m2[0][1];
  const T SrcB02 = m2[0][2];
  const T SrcB10 = m2[1][0];
  const T SrcB11 = m2[1][1];
  const T SrcB12 = m2[1][2];

  tmat2x2<T, P> Result(uninitialize);
  Result[0][0] = SrcA00 * SrcB00 + SrcA10 * SrcB01 + SrcA20 * SrcB02;
  Result[0][1] = SrcA01 * SrcB00 + SrcA11 * SrcB01 + SrcA21 * SrcB02;
  Result[1][0] = SrcA00 * SrcB10 + SrcA10 * SrcB11 + SrcA20 * SrcB12;
  Result[1][1] = SrcA01 * SrcB10 + SrcA11 * SrcB11 + SrcA21 * SrcB12;
  return Result;
 }

 template <typename T, precision P>
 inline tmat3x2<T, P> operator*(tmat3x2<T, P> const & m1, tmat3x3<T, P> const & m2)
 {
  return tmat3x2<T, P>(
   m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1] + m1[2][0] * m2[0][2],
   m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1] + m1[2][1] * m2[0][2],
   m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1] + m1[2][0] * m2[1][2],
   m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1] + m1[2][1] * m2[1][2],
   m1[0][0] * m2[2][0] + m1[1][0] * m2[2][1] + m1[2][0] * m2[2][2],
   m1[0][1] * m2[2][0] + m1[1][1] * m2[2][1] + m1[2][1] * m2[2][2]);
 }

 template <typename T, precision P>
 inline tmat4x2<T, P> operator*(tmat3x2<T, P> const & m1, tmat4x3<T, P> const & m2)
 {
  return tmat4x2<T, P>(
   m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1] + m1[2][0] * m2[0][2],
   m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1] + m1[2][1] * m2[0][2],
   m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1] + m1[2][0] * m2[1][2],
   m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1] + m1[2][1] * m2[1][2],
   m1[0][0] * m2[2][0] + m1[1][0] * m2[2][1] + m1[2][0] * m2[2][2],
   m1[0][1] * m2[2][0] + m1[1][1] * m2[2][1] + m1[2][1] * m2[2][2],
   m1[0][0] * m2[3][0] + m1[1][0] * m2[3][1] + m1[2][0] * m2[3][2],
   m1[0][1] * m2[3][0] + m1[1][1] * m2[3][1] + m1[2][1] * m2[3][2]);
 }

 template <typename T, precision P>
 inline tmat3x2<T, P> operator/(tmat3x2<T, P> const & m, T scalar)
 {
  return tmat3x2<T, P>(
   m[0] / scalar,
   m[1] / scalar,
   m[2] / scalar);
 }

 template <typename T, precision P>
 inline tmat3x2<T, P> operator/(T scalar, tmat3x2<T, P> const & m)
 {
  return tmat3x2<T, P>(
   scalar / m[0],
   scalar / m[1],
   scalar / m[2]);
 }



 template <typename T, precision P>
 inline bool operator==(tmat3x2<T, P> const & m1, tmat3x2<T, P> const & m2)
 {
  return (m1[0] == m2[0]) && (m1[1] == m2[1]) && (m1[2] == m2[2]);
 }

 template <typename T, precision P>
 inline bool operator!=(tmat3x2<T, P> const & m1, tmat3x2<T, P> const & m2)
 {
  return (m1[0] != m2[0]) || (m1[1] != m2[1]) || (m1[2] != m2[2]);
 }
}
# 173 "../../include/glm/detail/../detail/type_mat3x2.hpp" 2
# 7 "../../include/glm/detail/../mat3x2.hpp" 2

namespace glm
{





 typedef tmat3x2<float, lowp> lowp_mat3x2;






 typedef tmat3x2<float, mediump> mediump_mat3x2;






 typedef tmat3x2<float, highp> highp_mat3x2;

}
# 28 "../../include/glm/detail/func_matrix.hpp" 2
# 1 "../../include/glm/detail/../mat3x3.hpp" 1



       

# 1 "../../include/glm/detail/../detail/type_mat3x3.hpp" 1



       







namespace glm
{
 template <typename T, precision P = defaultp>
 struct tmat3x3
 {
  typedef tvec3<T, P> col_type;
  typedef tvec3<T, P> row_type;
  typedef tmat3x3<T, P> type;
  typedef tmat3x3<T, P> transpose_type;
  typedef T value_type;

 private:
  col_type value[3];

 public:


  tmat3x3() ;
  tmat3x3(tmat3x3<T, P> const & m) = default;
  template <precision Q>
  tmat3x3(tmat3x3<T, Q> const & m);

  constexpr explicit tmat3x3(ctor);
  explicit tmat3x3(T scalar);
  tmat3x3(
   T x0, T y0, T z0,
   T x1, T y1, T z1,
   T x2, T y2, T z2);
  tmat3x3(
   col_type const & v0,
   col_type const & v1,
   col_type const & v2);



  template<
   typename X1, typename Y1, typename Z1,
   typename X2, typename Y2, typename Z2,
   typename X3, typename Y3, typename Z3>
  tmat3x3(
   X1 x1, Y1 y1, Z1 z1,
   X2 x2, Y2 y2, Z2 z2,
   X3 x3, Y3 y3, Z3 z3);

  template <typename V1, typename V2, typename V3>
  tmat3x3(
   tvec3<V1, P> const & v1,
   tvec3<V2, P> const & v2,
   tvec3<V3, P> const & v3);



  template <typename U, precision Q>
  tmat3x3(tmat3x3<U, Q> const & m);

  tmat3x3(tmat2x2<T, P> const & x);
  tmat3x3(tmat4x4<T, P> const & x);
  tmat3x3(tmat2x3<T, P> const & x);
  tmat3x3(tmat3x2<T, P> const & x);
  tmat3x3(tmat2x4<T, P> const & x);
  tmat3x3(tmat4x2<T, P> const & x);
  tmat3x3(tmat3x4<T, P> const & x);
  tmat3x3(tmat4x3<T, P> const & x);



  typedef length_t length_type;
  static length_type length(){return 3;}

  col_type & operator[](length_type i);
  col_type const & operator[](length_type i) const;



  tmat3x3<T, P> & operator=(tmat3x3<T, P> const & m) = default;

  template <typename U>
  tmat3x3<T, P> & operator=(tmat3x3<U, P> const & m);
  template <typename U>
  tmat3x3<T, P> & operator+=(U s);
  template <typename U>
  tmat3x3<T, P> & operator+=(tmat3x3<U, P> const & m);
  template <typename U>
  tmat3x3<T, P> & operator-=(U s);
  template <typename U>
  tmat3x3<T, P> & operator-=(tmat3x3<U, P> const & m);
  template <typename U>
  tmat3x3<T, P> & operator*=(U s);
  template <typename U>
  tmat3x3<T, P> & operator*=(tmat3x3<U, P> const & m);
  template <typename U>
  tmat3x3<T, P> & operator/=(U s);
  template <typename U>
  tmat3x3<T, P> & operator/=(tmat3x3<U, P> const & m);



  tmat3x3<T, P> & operator++();
  tmat3x3<T, P> & operator--();
  tmat3x3<T, P> operator++(int);
  tmat3x3<T, P> operator--(int);
 };



 template <typename T, precision P>
 tmat3x3<T, P> operator+(tmat3x3<T, P> const & m);

 template <typename T, precision P>
 tmat3x3<T, P> operator-(tmat3x3<T, P> const & m);



 template <typename T, precision P>
 tmat3x3<T, P> operator+(tmat3x3<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat3x3<T, P> operator+(T scalar, tmat3x3<T, P> const & m);

 template <typename T, precision P>
 tmat3x3<T, P> operator+(tmat3x3<T, P> const & m1, tmat3x3<T, P> const & m2);

 template <typename T, precision P>
 tmat3x3<T, P> operator-(tmat3x3<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat3x3<T, P> operator-(T scalar, tmat3x3<T, P> const & m);

 template <typename T, precision P>
 tmat3x3<T, P> operator-(tmat3x3<T, P> const & m1, tmat3x3<T, P> const & m2);

 template <typename T, precision P>
 tmat3x3<T, P> operator*(tmat3x3<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat3x3<T, P> operator*(T scalar, tmat3x3<T, P> const & m);

 template <typename T, precision P>
 typename tmat3x3<T, P>::col_type operator*(tmat3x3<T, P> const & m, typename tmat3x3<T, P>::row_type const & v);

 template <typename T, precision P>
 typename tmat3x3<T, P>::row_type operator*(typename tmat3x3<T, P>::col_type const & v, tmat3x3<T, P> const & m);

 template <typename T, precision P>
 tmat3x3<T, P> operator*(tmat3x3<T, P> const & m1, tmat3x3<T, P> const & m2);

 template <typename T, precision P>
 tmat2x3<T, P> operator*(tmat3x3<T, P> const & m1, tmat2x3<T, P> const & m2);

 template <typename T, precision P>
 tmat4x3<T, P> operator*(tmat3x3<T, P> const & m1, tmat4x3<T, P> const & m2);

 template <typename T, precision P>
 tmat3x3<T, P> operator/(tmat3x3<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat3x3<T, P> operator/(T scalar, tmat3x3<T, P> const & m);

 template <typename T, precision P>
 typename tmat3x3<T, P>::col_type operator/(tmat3x3<T, P> const & m, typename tmat3x3<T, P>::row_type const & v);

 template <typename T, precision P>
 typename tmat3x3<T, P>::row_type operator/(typename tmat3x3<T, P>::col_type const & v, tmat3x3<T, P> const & m);

 template <typename T, precision P>
 tmat3x3<T, P> operator/(tmat3x3<T, P> const & m1, tmat3x3<T, P> const & m2);



 template <typename T, precision P>
 bool operator==(tmat3x3<T, P> const & m1, tmat3x3<T, P> const & m2);

 template <typename T, precision P>
 bool operator!=(tmat3x3<T, P> const & m1, tmat3x3<T, P> const & m2);
}


# 1 "../../include/glm/detail/../detail/type_mat3x3.inl" 1





namespace glm
{



  template <typename T, precision P>
  inline tmat3x3<T, P>::tmat3x3()
  {

    this->value[0] = col_type(1, 0, 0);
    this->value[1] = col_type(0, 1, 0);
    this->value[2] = col_type(0, 0, 1);

  }
# 32 "../../include/glm/detail/../detail/type_mat3x3.inl"
 template <typename T, precision P>
 template <precision Q>
 inline tmat3x3<T, P>::tmat3x3(tmat3x3<T, Q> const & m)
 {
  this->value[0] = m.value[0];
  this->value[1] = m.value[1];
  this->value[2] = m.value[2];
 }

 template <typename T, precision P>
 inline constexpr tmat3x3<T, P>::tmat3x3(ctor)
 {}

 template <typename T, precision P>
 inline tmat3x3<T, P>::tmat3x3(T scalar)
 {
  this->value[0] = col_type(scalar, 0, 0);
  this->value[1] = col_type(0, scalar, 0);
  this->value[2] = col_type(0, 0, scalar);
 }

 template <typename T, precision P>
 inline tmat3x3<T, P>::tmat3x3
 (
  T x0, T y0, T z0,
  T x1, T y1, T z1,
  T x2, T y2, T z2
 )
 {
  this->value[0] = col_type(x0, y0, z0);
  this->value[1] = col_type(x1, y1, z1);
  this->value[2] = col_type(x2, y2, z2);
 }

 template <typename T, precision P>
 inline tmat3x3<T, P>::tmat3x3
 (
  col_type const & v0,
  col_type const & v1,
  col_type const & v2
 )
 {
  this->value[0] = v0;
  this->value[1] = v1;
  this->value[2] = v2;
 }



 template <typename T, precision P>
 template <
  typename X1, typename Y1, typename Z1,
  typename X2, typename Y2, typename Z2,
  typename X3, typename Y3, typename Z3>
 inline tmat3x3<T, P>::tmat3x3
 (
  X1 x1, Y1 y1, Z1 z1,
  X2 x2, Y2 y2, Z2 z2,
  X3 x3, Y3 y3, Z3 z3
 )
 {
  this->value[0] = col_type(static_cast<T>(x1), value_type(y1), value_type(z1));
  this->value[1] = col_type(static_cast<T>(x2), value_type(y2), value_type(z2));
  this->value[2] = col_type(static_cast<T>(x3), value_type(y3), value_type(z3));
 }

 template <typename T, precision P>
 template <typename V1, typename V2, typename V3>
 inline tmat3x3<T, P>::tmat3x3
 (
  tvec3<V1, P> const & v1,
  tvec3<V2, P> const & v2,
  tvec3<V3, P> const & v3
 )
 {
  this->value[0] = col_type(v1);
  this->value[1] = col_type(v2);
  this->value[2] = col_type(v3);
 }



 template <typename T, precision P>
 template <typename U, precision Q>
 inline tmat3x3<T, P>::tmat3x3(tmat3x3<U, Q> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(m[2]);
 }

 template <typename T, precision P>
 inline tmat3x3<T, P>::tmat3x3(tmat2x2<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0);
  this->value[1] = col_type(m[1], 0);
  this->value[2] = col_type(0, 0, 1);
 }

 template <typename T, precision P>
 inline tmat3x3<T, P>::tmat3x3(tmat4x4<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(m[2]);
 }

 template <typename T, precision P>
 inline tmat3x3<T, P>::tmat3x3(tmat2x3<T, P> const & m)
 {
  this->value[0] = m[0];
  this->value[1] = m[1];
  this->value[2] = col_type(0, 0, 1);
 }

 template <typename T, precision P>
 inline tmat3x3<T, P>::tmat3x3(tmat3x2<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0);
  this->value[1] = col_type(m[1], 0);
  this->value[2] = col_type(m[2], 1);
 }

 template <typename T, precision P>
 inline tmat3x3<T, P>::tmat3x3(tmat2x4<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(0, 0, 1);
 }

 template <typename T, precision P>
 inline tmat3x3<T, P>::tmat3x3(tmat4x2<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0);
  this->value[1] = col_type(m[1], 0);
  this->value[2] = col_type(m[2], 1);
 }

 template <typename T, precision P>
 inline tmat3x3<T, P>::tmat3x3(tmat3x4<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(m[2]);
 }

 template <typename T, precision P>
 inline tmat3x3<T, P>::tmat3x3(tmat4x3<T, P> const & m)
 {
  this->value[0] = m[0];
  this->value[1] = m[1];
  this->value[2] = m[2];
 }



 template <typename T, precision P>
 inline typename tmat3x3<T, P>::col_type & tmat3x3<T, P>::operator[](typename tmat3x3<T, P>::length_type i)
 {
  
# 192 "../../include/glm/detail/../detail/type_mat3x3.inl" 3
 ((
# 192 "../../include/glm/detail/../detail/type_mat3x3.inl"
 i < this->length()
# 192 "../../include/glm/detail/../detail/type_mat3x3.inl" 3
 ) ? (void)0 : _assert(
# 192 "../../include/glm/detail/../detail/type_mat3x3.inl"
 "i < this->length()"
# 192 "../../include/glm/detail/../detail/type_mat3x3.inl" 3
 , "../../include/glm/detail/../detail/type_mat3x3.inl", 192))
# 192 "../../include/glm/detail/../detail/type_mat3x3.inl"
                           ;
  return this->value[i];
 }

 template <typename T, precision P>
 inline typename tmat3x3<T, P>::col_type const & tmat3x3<T, P>::operator[](typename tmat3x3<T, P>::length_type i) const
 {
  
# 199 "../../include/glm/detail/../detail/type_mat3x3.inl" 3
 ((
# 199 "../../include/glm/detail/../detail/type_mat3x3.inl"
 i < this->length()
# 199 "../../include/glm/detail/../detail/type_mat3x3.inl" 3
 ) ? (void)0 : _assert(
# 199 "../../include/glm/detail/../detail/type_mat3x3.inl"
 "i < this->length()"
# 199 "../../include/glm/detail/../detail/type_mat3x3.inl" 3
 , "../../include/glm/detail/../detail/type_mat3x3.inl", 199))
# 199 "../../include/glm/detail/../detail/type_mat3x3.inl"
                           ;
  return this->value[i];
 }
# 216 "../../include/glm/detail/../detail/type_mat3x3.inl"
 template <typename T, precision P>
 template <typename U>
 inline tmat3x3<T, P> & tmat3x3<T, P>::operator=(tmat3x3<U, P> const & m)
 {
  this->value[0] = m[0];
  this->value[1] = m[1];
  this->value[2] = m[2];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat3x3<T, P> & tmat3x3<T, P>::operator+=(U s)
 {
  this->value[0] += s;
  this->value[1] += s;
  this->value[2] += s;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat3x3<T, P> & tmat3x3<T, P>::operator+=(tmat3x3<U, P> const & m)
 {
  this->value[0] += m[0];
  this->value[1] += m[1];
  this->value[2] += m[2];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat3x3<T, P> & tmat3x3<T, P>::operator-=(U s)
 {
  this->value[0] -= s;
  this->value[1] -= s;
  this->value[2] -= s;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat3x3<T, P> & tmat3x3<T, P>::operator-=(tmat3x3<U, P> const & m)
 {
  this->value[0] -= m[0];
  this->value[1] -= m[1];
  this->value[2] -= m[2];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat3x3<T, P> & tmat3x3<T, P>::operator*=(U s)
 {
  this->value[0] *= s;
  this->value[1] *= s;
  this->value[2] *= s;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat3x3<T, P> & tmat3x3<T, P>::operator*=(tmat3x3<U, P> const & m)
 {
  return (*this = *this * m);
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat3x3<T, P> & tmat3x3<T, P>::operator/=(U s)
 {
  this->value[0] /= s;
  this->value[1] /= s;
  this->value[2] /= s;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat3x3<T, P> & tmat3x3<T, P>::operator/=(tmat3x3<U, P> const & m)
 {
  return *this *= inverse(m);
 }



 template <typename T, precision P>
 inline tmat3x3<T, P> & tmat3x3<T, P>::operator++()
 {
  ++this->value[0];
  ++this->value[1];
  ++this->value[2];
  return *this;
 }

 template <typename T, precision P>
 inline tmat3x3<T, P> & tmat3x3<T, P>::operator--()
 {
  --this->value[0];
  --this->value[1];
  --this->value[2];
  return *this;
 }

 template <typename T, precision P>
 inline tmat3x3<T, P> tmat3x3<T, P>::operator++(int)
 {
  tmat3x3<T, P> Result(*this);
  ++*this;
  return Result;
 }

 template <typename T, precision P>
 inline tmat3x3<T, P> tmat3x3<T, P>::operator--(int)
 {
  tmat3x3<T, P> Result(*this);
  --*this;
  return Result;
 }



 template <typename T, precision P>
 inline tmat3x3<T, P> operator+(tmat3x3<T, P> const & m)
 {
  return m;
 }

 template <typename T, precision P>
 inline tmat3x3<T, P> operator-(tmat3x3<T, P> const & m)
 {
  return tmat3x3<T, P>(
   -m[0],
   -m[1],
   -m[2]);
 }



 template <typename T, precision P>
 inline tmat3x3<T, P> operator+(tmat3x3<T, P> const & m, T scalar)
 {
  return tmat3x3<T, P>(
   m[0] + scalar,
   m[1] + scalar,
   m[2] + scalar);
 }

 template <typename T, precision P>
 inline tmat3x3<T, P> operator+(T scalar, tmat3x3<T, P> const & m)
 {
  return tmat3x3<T, P>(
   m[0] + scalar,
   m[1] + scalar,
   m[2] + scalar);
 }

 template <typename T, precision P>
 inline tmat3x3<T, P> operator+(tmat3x3<T, P> const & m1, tmat3x3<T, P> const & m2)
 {
  return tmat3x3<T, P>(
   m1[0] + m2[0],
   m1[1] + m2[1],
   m1[2] + m2[2]);
 }

 template <typename T, precision P>
 inline tmat3x3<T, P> operator-(tmat3x3<T, P> const & m, T scalar)
 {
  return tmat3x3<T, P>(
   m[0] - scalar,
   m[1] - scalar,
   m[2] - scalar);
 }

 template <typename T, precision P>
 inline tmat3x3<T, P> operator-(T scalar, tmat3x3<T, P> const & m)
 {
  return tmat3x3<T, P>(
   scalar - m[0],
   scalar - m[1],
   scalar - m[2]);
 }

 template <typename T, precision P>
 inline tmat3x3<T, P> operator-(tmat3x3<T, P> const & m1, tmat3x3<T, P> const & m2)
 {
  return tmat3x3<T, P>(
   m1[0] - m2[0],
   m1[1] - m2[1],
   m1[2] - m2[2]);
 }

 template <typename T, precision P>
 inline tmat3x3<T, P> operator*(tmat3x3<T, P> const & m, T scalar)
 {
  return tmat3x3<T, P>(
   m[0] * scalar,
   m[1] * scalar,
   m[2] * scalar);
 }

 template <typename T, precision P>
 inline tmat3x3<T, P> operator*(T scalar, tmat3x3<T, P> const & m)
 {
  return tmat3x3<T, P>(
   m[0] * scalar,
   m[1] * scalar,
   m[2] * scalar);
 }

 template <typename T, precision P>
 inline typename tmat3x3<T, P>::col_type operator*(tmat3x3<T, P> const & m, typename tmat3x3<T, P>::row_type const & v)
 {
  return typename tmat3x3<T, P>::col_type(
   m[0][0] * v.x + m[1][0] * v.y + m[2][0] * v.z,
   m[0][1] * v.x + m[1][1] * v.y + m[2][1] * v.z,
   m[0][2] * v.x + m[1][2] * v.y + m[2][2] * v.z);
 }

 template <typename T, precision P>
 inline typename tmat3x3<T, P>::row_type operator*(typename tmat3x3<T, P>::col_type const & v, tmat3x3<T, P> const & m)
 {
  return typename tmat3x3<T, P>::row_type(
   m[0][0] * v.x + m[0][1] * v.y + m[0][2] * v.z,
   m[1][0] * v.x + m[1][1] * v.y + m[1][2] * v.z,
   m[2][0] * v.x + m[2][1] * v.y + m[2][2] * v.z);
 }

 template <typename T, precision P>
 inline tmat3x3<T, P> operator*(tmat3x3<T, P> const & m1, tmat3x3<T, P> const & m2)
 {
  T const SrcA00 = m1[0][0];
  T const SrcA01 = m1[0][1];
  T const SrcA02 = m1[0][2];
  T const SrcA10 = m1[1][0];
  T const SrcA11 = m1[1][1];
  T const SrcA12 = m1[1][2];
  T const SrcA20 = m1[2][0];
  T const SrcA21 = m1[2][1];
  T const SrcA22 = m1[2][2];

  T const SrcB00 = m2[0][0];
  T const SrcB01 = m2[0][1];
  T const SrcB02 = m2[0][2];
  T const SrcB10 = m2[1][0];
  T const SrcB11 = m2[1][1];
  T const SrcB12 = m2[1][2];
  T const SrcB20 = m2[2][0];
  T const SrcB21 = m2[2][1];
  T const SrcB22 = m2[2][2];

  tmat3x3<T, P> Result(uninitialize);
  Result[0][0] = SrcA00 * SrcB00 + SrcA10 * SrcB01 + SrcA20 * SrcB02;
  Result[0][1] = SrcA01 * SrcB00 + SrcA11 * SrcB01 + SrcA21 * SrcB02;
  Result[0][2] = SrcA02 * SrcB00 + SrcA12 * SrcB01 + SrcA22 * SrcB02;
  Result[1][0] = SrcA00 * SrcB10 + SrcA10 * SrcB11 + SrcA20 * SrcB12;
  Result[1][1] = SrcA01 * SrcB10 + SrcA11 * SrcB11 + SrcA21 * SrcB12;
  Result[1][2] = SrcA02 * SrcB10 + SrcA12 * SrcB11 + SrcA22 * SrcB12;
  Result[2][0] = SrcA00 * SrcB20 + SrcA10 * SrcB21 + SrcA20 * SrcB22;
  Result[2][1] = SrcA01 * SrcB20 + SrcA11 * SrcB21 + SrcA21 * SrcB22;
  Result[2][2] = SrcA02 * SrcB20 + SrcA12 * SrcB21 + SrcA22 * SrcB22;
  return Result;
 }

 template <typename T, precision P>
 inline tmat2x3<T, P> operator*(tmat3x3<T, P> const & m1, tmat2x3<T, P> const & m2)
 {
  return tmat2x3<T, P>(
   m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1] + m1[2][0] * m2[0][2],
   m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1] + m1[2][1] * m2[0][2],
   m1[0][2] * m2[0][0] + m1[1][2] * m2[0][1] + m1[2][2] * m2[0][2],
   m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1] + m1[2][0] * m2[1][2],
   m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1] + m1[2][1] * m2[1][2],
   m1[0][2] * m2[1][0] + m1[1][2] * m2[1][1] + m1[2][2] * m2[1][2]);
 }

 template <typename T, precision P>
 inline tmat4x3<T, P> operator*(tmat3x3<T, P> const & m1, tmat4x3<T, P> const & m2)
 {
  return tmat4x3<T, P>(
   m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1] + m1[2][0] * m2[0][2],
   m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1] + m1[2][1] * m2[0][2],
   m1[0][2] * m2[0][0] + m1[1][2] * m2[0][1] + m1[2][2] * m2[0][2],
   m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1] + m1[2][0] * m2[1][2],
   m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1] + m1[2][1] * m2[1][2],
   m1[0][2] * m2[1][0] + m1[1][2] * m2[1][1] + m1[2][2] * m2[1][2],
   m1[0][0] * m2[2][0] + m1[1][0] * m2[2][1] + m1[2][0] * m2[2][2],
   m1[0][1] * m2[2][0] + m1[1][1] * m2[2][1] + m1[2][1] * m2[2][2],
   m1[0][2] * m2[2][0] + m1[1][2] * m2[2][1] + m1[2][2] * m2[2][2],
   m1[0][0] * m2[3][0] + m1[1][0] * m2[3][1] + m1[2][0] * m2[3][2],
   m1[0][1] * m2[3][0] + m1[1][1] * m2[3][1] + m1[2][1] * m2[3][2],
   m1[0][2] * m2[3][0] + m1[1][2] * m2[3][1] + m1[2][2] * m2[3][2]);
 }

 template <typename T, precision P>
 inline tmat3x3<T, P> operator/(tmat3x3<T, P> const & m, T scalar)
 {
  return tmat3x3<T, P>(
   m[0] / scalar,
   m[1] / scalar,
   m[2] / scalar);
 }

 template <typename T, precision P>
 inline tmat3x3<T, P> operator/(T scalar, tmat3x3<T, P> const & m)
 {
  return tmat3x3<T, P>(
   scalar / m[0],
   scalar / m[1],
   scalar / m[2]);
 }

 template <typename T, precision P>
 inline typename tmat3x3<T, P>::col_type operator/(tmat3x3<T, P> const & m, typename tmat3x3<T, P>::row_type const & v)
 {
  return inverse(m) * v;
 }

 template <typename T, precision P>
 inline typename tmat3x3<T, P>::row_type operator/(typename tmat3x3<T, P>::col_type const & v, tmat3x3<T, P> const & m)
 {
  return v * inverse(m);
 }

 template <typename T, precision P>
 inline tmat3x3<T, P> operator/(tmat3x3<T, P> const & m1, tmat3x3<T, P> const & m2)
 {
  tmat3x3<T, P> m1_copy(m1);
  return m1_copy /= m2;
 }



 template <typename T, precision P>
 inline bool operator==(tmat3x3<T, P> const & m1, tmat3x3<T, P> const & m2)
 {
  return (m1[0] == m2[0]) && (m1[1] == m2[1]) && (m1[2] == m2[2]);
 }

 template <typename T, precision P>
 inline bool operator!=(tmat3x3<T, P> const & m1, tmat3x3<T, P> const & m2)
 {
  return (m1[0] != m2[0]) || (m1[1] != m2[1]) || (m1[2] != m2[2]);
 }
}
# 190 "../../include/glm/detail/../detail/type_mat3x3.hpp" 2
# 7 "../../include/glm/detail/../mat3x3.hpp" 2

namespace glm
{





 typedef tmat3x3<float, lowp> lowp_mat3;






 typedef tmat3x3<float, mediump> mediump_mat3;






 typedef tmat3x3<float, highp> highp_mat3;






 typedef tmat3x3<float, lowp> lowp_mat3x3;






 typedef tmat3x3<float, mediump> mediump_mat3x3;






 typedef tmat3x3<float, highp> highp_mat3x3;

}
# 29 "../../include/glm/detail/func_matrix.hpp" 2
# 1 "../../include/glm/detail/../mat3x4.hpp" 1



       

# 1 "../../include/glm/detail/../detail/type_mat3x4.hpp" 1



       
# 13 "../../include/glm/detail/../detail/type_mat3x4.hpp"
namespace glm
{
 template <typename T, precision P = defaultp>
 struct tmat3x4
 {
  typedef tvec4<T, P> col_type;
  typedef tvec3<T, P> row_type;
  typedef tmat3x4<T, P> type;
  typedef tmat4x3<T, P> transpose_type;
  typedef T value_type;

 private:
  col_type value[3];

 public:


  tmat3x4() ;
  tmat3x4(tmat3x4<T, P> const & m) = default;
  template <precision Q>
  tmat3x4(tmat3x4<T, Q> const & m);

  constexpr explicit tmat3x4(ctor);
  explicit tmat3x4(T scalar);
  tmat3x4(
   T x0, T y0, T z0, T w0,
   T x1, T y1, T z1, T w1,
   T x2, T y2, T z2, T w2);
  tmat3x4(
   col_type const & v0,
   col_type const & v1,
   col_type const & v2);



  template<
   typename X1, typename Y1, typename Z1, typename W1,
   typename X2, typename Y2, typename Z2, typename W2,
   typename X3, typename Y3, typename Z3, typename W3>
  tmat3x4(
   X1 x1, Y1 y1, Z1 z1, W1 w1,
   X2 x2, Y2 y2, Z2 z2, W2 w2,
   X3 x3, Y3 y3, Z3 z3, W3 w3);

  template <typename V1, typename V2, typename V3>
  tmat3x4(
   tvec4<V1, P> const & v1,
   tvec4<V2, P> const & v2,
   tvec4<V3, P> const & v3);



  template <typename U, precision Q>
  tmat3x4(tmat3x4<U, Q> const & m);

  tmat3x4(tmat2x2<T, P> const & x);
  tmat3x4(tmat3x3<T, P> const & x);
  tmat3x4(tmat4x4<T, P> const & x);
  tmat3x4(tmat2x3<T, P> const & x);
  tmat3x4(tmat3x2<T, P> const & x);
  tmat3x4(tmat2x4<T, P> const & x);
  tmat3x4(tmat4x2<T, P> const & x);
  tmat3x4(tmat4x3<T, P> const & x);



  typedef length_t length_type;
  static length_type length(){return 3;}

  col_type & operator[](length_type i);
  col_type const & operator[](length_type i) const;



  tmat3x4<T, P> & operator=(tmat3x4<T, P> const & m) = default;

  template <typename U>
  tmat3x4<T, P> & operator=(tmat3x4<U, P> const & m);
  template <typename U>
  tmat3x4<T, P> & operator+=(U s);
  template <typename U>
  tmat3x4<T, P> & operator+=(tmat3x4<U, P> const & m);
  template <typename U>
  tmat3x4<T, P> & operator-=(U s);
  template <typename U>
  tmat3x4<T, P> & operator-=(tmat3x4<U, P> const & m);
  template <typename U>
  tmat3x4<T, P> & operator*=(U s);
  template <typename U>
  tmat3x4<T, P> & operator/=(U s);



  tmat3x4<T, P> & operator++();
  tmat3x4<T, P> & operator--();
  tmat3x4<T, P> operator++(int);
  tmat3x4<T, P> operator--(int);
 };



 template <typename T, precision P>
 tmat3x4<T, P> operator+(tmat3x4<T, P> const & m);

 template <typename T, precision P>
 tmat3x4<T, P> operator-(tmat3x4<T, P> const & m);



 template <typename T, precision P>
 tmat3x4<T, P> operator+(tmat3x4<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat3x4<T, P> operator+(tmat3x4<T, P> const & m1, tmat3x4<T, P> const & m2);

 template <typename T, precision P>
 tmat3x4<T, P> operator-(tmat3x4<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat3x4<T, P> operator-(tmat3x4<T, P> const & m1, tmat3x4<T, P> const & m2);

 template <typename T, precision P>
 tmat3x4<T, P> operator*(tmat3x4<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat3x4<T, P> operator*(T scalar, tmat3x4<T, P> const & m);

 template <typename T, precision P>
 typename tmat3x4<T, P>::col_type operator*(tmat3x4<T, P> const & m, typename tmat3x4<T, P>::row_type const & v);

 template <typename T, precision P>
 typename tmat3x4<T, P>::row_type operator*(typename tmat3x4<T, P>::col_type const & v, tmat3x4<T, P> const & m);

 template <typename T, precision P>
 tmat4x4<T, P> operator*(tmat3x4<T, P> const & m1, tmat4x3<T, P> const & m2);

 template <typename T, precision P>
 tmat2x4<T, P> operator*(tmat3x4<T, P> const & m1, tmat2x3<T, P> const & m2);

 template <typename T, precision P>
 tmat3x4<T, P> operator*(tmat3x4<T, P> const & m1, tmat3x3<T, P> const & m2);

 template <typename T, precision P>
 tmat3x4<T, P> operator/(tmat3x4<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat3x4<T, P> operator/(T scalar, tmat3x4<T, P> const & m);



 template <typename T, precision P>
 bool operator==(tmat3x4<T, P> const & m1, tmat3x4<T, P> const & m2);

 template <typename T, precision P>
 bool operator!=(tmat3x4<T, P> const & m1, tmat3x4<T, P> const & m2);
}


# 1 "../../include/glm/detail/../detail/type_mat3x4.inl" 1



namespace glm
{



  template <typename T, precision P>
  inline tmat3x4<T, P>::tmat3x4()
  {

    this->value[0] = col_type(1, 0, 0, 0);
    this->value[1] = col_type(0, 1, 0, 0);
    this->value[2] = col_type(0, 0, 1, 0);

  }
# 30 "../../include/glm/detail/../detail/type_mat3x4.inl"
 template <typename T, precision P>
 template <precision Q>
 inline tmat3x4<T, P>::tmat3x4(tmat3x4<T, Q> const & m)
 {
  this->value[0] = m.value[0];
  this->value[1] = m.value[1];
  this->value[2] = m.value[2];
 }

 template <typename T, precision P>
 inline constexpr tmat3x4<T, P>::tmat3x4(ctor)
 {}

 template <typename T, precision P>
 inline tmat3x4<T, P>::tmat3x4(T scalar)
 {
  this->value[0] = col_type(scalar, 0, 0, 0);
  this->value[1] = col_type(0, scalar, 0, 0);
  this->value[2] = col_type(0, 0, scalar, 0);
 }

 template <typename T, precision P>
 inline tmat3x4<T, P>::tmat3x4
 (
  T x0, T y0, T z0, T w0,
  T x1, T y1, T z1, T w1,
  T x2, T y2, T z2, T w2
 )
 {
  this->value[0] = col_type(x0, y0, z0, w0);
  this->value[1] = col_type(x1, y1, z1, w1);
  this->value[2] = col_type(x2, y2, z2, w2);
 }

 template <typename T, precision P>
 inline tmat3x4<T, P>::tmat3x4
 (
  col_type const & v0,
  col_type const & v1,
  col_type const & v2
 )
 {
  this->value[0] = v0;
  this->value[1] = v1;
  this->value[2] = v2;
 }



 template <typename T, precision P>
 template <
  typename X1, typename Y1, typename Z1, typename W1,
  typename X2, typename Y2, typename Z2, typename W2,
  typename X3, typename Y3, typename Z3, typename W3>
 inline tmat3x4<T, P>::tmat3x4
 (
  X1 x1, Y1 y1, Z1 z1, W1 w1,
  X2 x2, Y2 y2, Z2 z2, W2 w2,
  X3 x3, Y3 y3, Z3 z3, W3 w3
 )
 {
  this->value[0] = col_type(static_cast<T>(x1), value_type(y1), value_type(z1), value_type(w1));
  this->value[1] = col_type(static_cast<T>(x2), value_type(y2), value_type(z2), value_type(w2));
  this->value[2] = col_type(static_cast<T>(x3), value_type(y3), value_type(z3), value_type(w3));
 }

 template <typename T, precision P>
 template <typename V1, typename V2, typename V3>
 inline tmat3x4<T, P>::tmat3x4
 (
  tvec4<V1, P> const & v1,
  tvec4<V2, P> const & v2,
  tvec4<V3, P> const & v3
 )
 {
  this->value[0] = col_type(v1);
  this->value[1] = col_type(v2);
  this->value[2] = col_type(v3);
 }



 template <typename T, precision P>
 template <typename U, precision Q>
 inline tmat3x4<T, P>::tmat3x4(tmat3x4<U, Q> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(m[2]);
 }

 template <typename T, precision P>
 inline tmat3x4<T, P>::tmat3x4(tmat2x2<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0, 0);
  this->value[1] = col_type(m[1], 0, 0);
  this->value[2] = col_type(0, 0, 1, 0);
 }

 template <typename T, precision P>
 inline tmat3x4<T, P>::tmat3x4(tmat3x3<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0);
  this->value[1] = col_type(m[1], 0);
  this->value[2] = col_type(m[2], 0);
 }

 template <typename T, precision P>
 inline tmat3x4<T, P>::tmat3x4(tmat4x4<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(m[2]);
 }

 template <typename T, precision P>
 inline tmat3x4<T, P>::tmat3x4(tmat2x3<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0);
  this->value[1] = col_type(m[1], 0);
  this->value[2] = col_type(0, 0, 1, 0);
 }

 template <typename T, precision P>
 inline tmat3x4<T, P>::tmat3x4(tmat3x2<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0, 0);
  this->value[1] = col_type(m[1], 0, 0);
  this->value[2] = col_type(m[2], 1, 0);
 }

 template <typename T, precision P>
 inline tmat3x4<T, P>::tmat3x4(tmat2x4<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(0, 0, 1, 0);
 }

 template <typename T, precision P>
 inline tmat3x4<T, P>::tmat3x4(tmat4x2<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0, 0);
  this->value[1] = col_type(m[1], 0, 0);
  this->value[2] = col_type(m[2], 1, 0);
 }

 template <typename T, precision P>
 inline tmat3x4<T, P>::tmat3x4(tmat4x3<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0);
  this->value[1] = col_type(m[1], 0);
  this->value[2] = col_type(m[2], 0);
 }



 template <typename T, precision P>
 inline typename tmat3x4<T, P>::col_type & tmat3x4<T, P>::operator[](typename tmat3x4<T, P>::length_type i)
 {
  
# 190 "../../include/glm/detail/../detail/type_mat3x4.inl" 3
 ((
# 190 "../../include/glm/detail/../detail/type_mat3x4.inl"
 i < this->length()
# 190 "../../include/glm/detail/../detail/type_mat3x4.inl" 3
 ) ? (void)0 : _assert(
# 190 "../../include/glm/detail/../detail/type_mat3x4.inl"
 "i < this->length()"
# 190 "../../include/glm/detail/../detail/type_mat3x4.inl" 3
 , "../../include/glm/detail/../detail/type_mat3x4.inl", 190))
# 190 "../../include/glm/detail/../detail/type_mat3x4.inl"
                           ;
  return this->value[i];
 }

 template <typename T, precision P>
 inline typename tmat3x4<T, P>::col_type const & tmat3x4<T, P>::operator[](typename tmat3x4<T, P>::length_type i) const
 {
  
# 197 "../../include/glm/detail/../detail/type_mat3x4.inl" 3
 ((
# 197 "../../include/glm/detail/../detail/type_mat3x4.inl"
 i < this->length()
# 197 "../../include/glm/detail/../detail/type_mat3x4.inl" 3
 ) ? (void)0 : _assert(
# 197 "../../include/glm/detail/../detail/type_mat3x4.inl"
 "i < this->length()"
# 197 "../../include/glm/detail/../detail/type_mat3x4.inl" 3
 , "../../include/glm/detail/../detail/type_mat3x4.inl", 197))
# 197 "../../include/glm/detail/../detail/type_mat3x4.inl"
                           ;
  return this->value[i];
 }
# 214 "../../include/glm/detail/../detail/type_mat3x4.inl"
 template <typename T, precision P>
 template <typename U>
 inline tmat3x4<T, P>& tmat3x4<T, P>::operator=(tmat3x4<U, P> const & m)
 {
  this->value[0] = m[0];
  this->value[1] = m[1];
  this->value[2] = m[2];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat3x4<T, P>& tmat3x4<T, P>::operator+=(U s)
 {
  this->value[0] += s;
  this->value[1] += s;
  this->value[2] += s;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat3x4<T, P>& tmat3x4<T, P>::operator+=(tmat3x4<U, P> const & m)
 {
  this->value[0] += m[0];
  this->value[1] += m[1];
  this->value[2] += m[2];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat3x4<T, P>& tmat3x4<T, P>::operator-=(U s)
 {
  this->value[0] -= s;
  this->value[1] -= s;
  this->value[2] -= s;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat3x4<T, P>& tmat3x4<T, P>::operator-=(tmat3x4<U, P> const & m)
 {
  this->value[0] -= m[0];
  this->value[1] -= m[1];
  this->value[2] -= m[2];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat3x4<T, P>& tmat3x4<T, P>::operator*=(U s)
 {
  this->value[0] *= s;
  this->value[1] *= s;
  this->value[2] *= s;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat3x4<T, P> & tmat3x4<T, P>::operator/=(U s)
 {
  this->value[0] /= s;
  this->value[1] /= s;
  this->value[2] /= s;
  return *this;
 }



 template <typename T, precision P>
 inline tmat3x4<T, P>& tmat3x4<T, P>::operator++()
 {
  ++this->value[0];
  ++this->value[1];
  ++this->value[2];
  return *this;
 }

 template <typename T, precision P>
 inline tmat3x4<T, P>& tmat3x4<T, P>::operator--()
 {
  --this->value[0];
  --this->value[1];
  --this->value[2];
  return *this;
 }

 template <typename T, precision P>
 inline tmat3x4<T, P> tmat3x4<T, P>::operator++(int)
 {
  tmat3x4<T, P> Result(*this);
  ++*this;
  return Result;
 }

 template <typename T, precision P>
 inline tmat3x4<T, P> tmat3x4<T, P>::operator--(int)
 {
  tmat3x4<T, P> Result(*this);
  --*this;
  return Result;
 }



 template <typename T, precision P>
 inline tmat3x4<T, P> operator+(tmat3x4<T, P> const & m)
 {
  return m;
 }

 template <typename T, precision P>
 inline tmat3x4<T, P> operator-(tmat3x4<T, P> const & m)
 {
  return tmat3x4<T, P>(
   -m[0],
   -m[1],
   -m[2]);
 }



 template <typename T, precision P>
 inline tmat3x4<T, P> operator+(tmat3x4<T, P> const & m, T scalar)
 {
  return tmat3x4<T, P>(
   m[0] + scalar,
   m[1] + scalar,
   m[2] + scalar);
 }

 template <typename T, precision P>
 inline tmat3x4<T, P> operator+(tmat3x4<T, P> const & m1, tmat3x4<T, P> const & m2)
 {
  return tmat3x4<T, P>(
   m1[0] + m2[0],
   m1[1] + m2[1],
   m1[2] + m2[2]);
 }

 template <typename T, precision P>
 inline tmat3x4<T, P> operator-(tmat3x4<T, P> const & m, T scalar)
 {
  return tmat3x4<T, P>(
   m[0] - scalar,
   m[1] - scalar,
   m[2] - scalar);
 }

 template <typename T, precision P>
 inline tmat3x4<T, P> operator-(tmat3x4<T, P> const & m1, tmat3x4<T, P> const & m2)
 {
  return tmat3x4<T, P>(
   m1[0] - m2[0],
   m1[1] - m2[1],
   m1[2] - m2[2]);
 }

 template <typename T, precision P>
 inline tmat3x4<T, P> operator*(tmat3x4<T, P> const & m, T scalar)
 {
  return tmat3x4<T, P>(
   m[0] * scalar,
   m[1] * scalar,
   m[2] * scalar);
 }

 template <typename T, precision P>
 inline tmat3x4<T, P> operator*(T scalar, tmat3x4<T, P> const & m)
 {
  return tmat3x4<T, P>(
   m[0] * scalar,
   m[1] * scalar,
   m[2] * scalar);
 }

 template <typename T, precision P>
 inline typename tmat3x4<T, P>::col_type operator*
 (
  tmat3x4<T, P> const & m,
  typename tmat3x4<T, P>::row_type const & v
 )
 {
  return typename tmat3x4<T, P>::col_type(
   m[0][0] * v.x + m[1][0] * v.y + m[2][0] * v.z,
   m[0][1] * v.x + m[1][1] * v.y + m[2][1] * v.z,
   m[0][2] * v.x + m[1][2] * v.y + m[2][2] * v.z,
   m[0][3] * v.x + m[1][3] * v.y + m[2][3] * v.z);
 }

 template <typename T, precision P>
 inline typename tmat3x4<T, P>::row_type operator*
 (
  typename tmat3x4<T, P>::col_type const & v,
  tmat3x4<T, P> const & m
 )
 {
  return typename tmat3x4<T, P>::row_type(
   v.x * m[0][0] + v.y * m[0][1] + v.z * m[0][2] + v.w * m[0][3],
   v.x * m[1][0] + v.y * m[1][1] + v.z * m[1][2] + v.w * m[1][3],
   v.x * m[2][0] + v.y * m[2][1] + v.z * m[2][2] + v.w * m[2][3]);
 }

 template <typename T, precision P>
 inline tmat4x4<T, P> operator*(tmat3x4<T, P> const & m1, tmat4x3<T, P> const & m2)
 {
  const T SrcA00 = m1[0][0];
  const T SrcA01 = m1[0][1];
  const T SrcA02 = m1[0][2];
  const T SrcA03 = m1[0][3];
  const T SrcA10 = m1[1][0];
  const T SrcA11 = m1[1][1];
  const T SrcA12 = m1[1][2];
  const T SrcA13 = m1[1][3];
  const T SrcA20 = m1[2][0];
  const T SrcA21 = m1[2][1];
  const T SrcA22 = m1[2][2];
  const T SrcA23 = m1[2][3];

  const T SrcB00 = m2[0][0];
  const T SrcB01 = m2[0][1];
  const T SrcB02 = m2[0][2];
  const T SrcB10 = m2[1][0];
  const T SrcB11 = m2[1][1];
  const T SrcB12 = m2[1][2];
  const T SrcB20 = m2[2][0];
  const T SrcB21 = m2[2][1];
  const T SrcB22 = m2[2][2];
  const T SrcB30 = m2[3][0];
  const T SrcB31 = m2[3][1];
  const T SrcB32 = m2[3][2];

  tmat4x4<T, P> Result(uninitialize);
  Result[0][0] = SrcA00 * SrcB00 + SrcA10 * SrcB01 + SrcA20 * SrcB02;
  Result[0][1] = SrcA01 * SrcB00 + SrcA11 * SrcB01 + SrcA21 * SrcB02;
  Result[0][2] = SrcA02 * SrcB00 + SrcA12 * SrcB01 + SrcA22 * SrcB02;
  Result[0][3] = SrcA03 * SrcB00 + SrcA13 * SrcB01 + SrcA23 * SrcB02;
  Result[1][0] = SrcA00 * SrcB10 + SrcA10 * SrcB11 + SrcA20 * SrcB12;
  Result[1][1] = SrcA01 * SrcB10 + SrcA11 * SrcB11 + SrcA21 * SrcB12;
  Result[1][2] = SrcA02 * SrcB10 + SrcA12 * SrcB11 + SrcA22 * SrcB12;
  Result[1][3] = SrcA03 * SrcB10 + SrcA13 * SrcB11 + SrcA23 * SrcB12;
  Result[2][0] = SrcA00 * SrcB20 + SrcA10 * SrcB21 + SrcA20 * SrcB22;
  Result[2][1] = SrcA01 * SrcB20 + SrcA11 * SrcB21 + SrcA21 * SrcB22;
  Result[2][2] = SrcA02 * SrcB20 + SrcA12 * SrcB21 + SrcA22 * SrcB22;
  Result[2][3] = SrcA03 * SrcB20 + SrcA13 * SrcB21 + SrcA23 * SrcB22;
  Result[3][0] = SrcA00 * SrcB30 + SrcA10 * SrcB31 + SrcA20 * SrcB32;
  Result[3][1] = SrcA01 * SrcB30 + SrcA11 * SrcB31 + SrcA21 * SrcB32;
  Result[3][2] = SrcA02 * SrcB30 + SrcA12 * SrcB31 + SrcA22 * SrcB32;
  Result[3][3] = SrcA03 * SrcB30 + SrcA13 * SrcB31 + SrcA23 * SrcB32;
  return Result;
 }

 template <typename T, precision P>
 inline tmat2x4<T, P> operator*(tmat3x4<T, P> const & m1, tmat2x3<T, P> const & m2)
 {
  return tmat2x4<T, P>(
   m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1] + m1[2][0] * m2[0][2],
   m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1] + m1[2][1] * m2[0][2],
   m1[0][2] * m2[0][0] + m1[1][2] * m2[0][1] + m1[2][2] * m2[0][2],
   m1[0][3] * m2[0][0] + m1[1][3] * m2[0][1] + m1[2][3] * m2[0][2],
   m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1] + m1[2][0] * m2[1][2],
   m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1] + m1[2][1] * m2[1][2],
   m1[0][2] * m2[1][0] + m1[1][2] * m2[1][1] + m1[2][2] * m2[1][2],
   m1[0][3] * m2[1][0] + m1[1][3] * m2[1][1] + m1[2][3] * m2[1][2]);
 }

 template <typename T, precision P>
 inline tmat3x4<T, P> operator*(tmat3x4<T, P> const & m1, tmat3x3<T, P> const & m2)
 {
  return tmat3x4<T, P>(
   m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1] + m1[2][0] * m2[0][2],
   m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1] + m1[2][1] * m2[0][2],
   m1[0][2] * m2[0][0] + m1[1][2] * m2[0][1] + m1[2][2] * m2[0][2],
   m1[0][3] * m2[0][0] + m1[1][3] * m2[0][1] + m1[2][3] * m2[0][2],
   m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1] + m1[2][0] * m2[1][2],
   m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1] + m1[2][1] * m2[1][2],
   m1[0][2] * m2[1][0] + m1[1][2] * m2[1][1] + m1[2][2] * m2[1][2],
   m1[0][3] * m2[1][0] + m1[1][3] * m2[1][1] + m1[2][3] * m2[1][2],
   m1[0][0] * m2[2][0] + m1[1][0] * m2[2][1] + m1[2][0] * m2[2][2],
   m1[0][1] * m2[2][0] + m1[1][1] * m2[2][1] + m1[2][1] * m2[2][2],
   m1[0][2] * m2[2][0] + m1[1][2] * m2[2][1] + m1[2][2] * m2[2][2],
   m1[0][3] * m2[2][0] + m1[1][3] * m2[2][1] + m1[2][3] * m2[2][2]);
 }

 template <typename T, precision P>
 inline tmat3x4<T, P> operator/(tmat3x4<T, P> const & m, T scalar)
 {
  return tmat3x4<T, P>(
   m[0] / scalar,
   m[1] / scalar,
   m[2] / scalar);
 }

 template <typename T, precision P>
 inline tmat3x4<T, P> operator/(T scalar, tmat3x4<T, P> const & m)
 {
  return tmat3x4<T, P>(
   scalar / m[0],
   scalar / m[1],
   scalar / m[2]);
 }



 template <typename T, precision P>
 inline bool operator==(tmat3x4<T, P> const & m1, tmat3x4<T, P> const & m2)
 {
  return (m1[0] == m2[0]) && (m1[1] == m2[1]) && (m1[2] == m2[2]);
 }

 template <typename T, precision P>
 inline bool operator!=(tmat3x4<T, P> const & m1, tmat3x4<T, P> const & m2)
 {
  return (m1[0] != m2[0]) || (m1[1] != m2[1]) || (m1[2] != m2[2]);
 }
}
# 172 "../../include/glm/detail/../detail/type_mat3x4.hpp" 2
# 7 "../../include/glm/detail/../mat3x4.hpp" 2

namespace glm
{





 typedef tmat3x4<float, lowp> lowp_mat3x4;






 typedef tmat3x4<float, mediump> mediump_mat3x4;






 typedef tmat3x4<float, highp> highp_mat3x4;

}
# 30 "../../include/glm/detail/func_matrix.hpp" 2
# 1 "../../include/glm/detail/../mat4x2.hpp" 1



       

# 1 "../../include/glm/detail/../detail/type_mat4x2.hpp" 1



       
# 13 "../../include/glm/detail/../detail/type_mat4x2.hpp"
namespace glm
{
 template <typename T, precision P = defaultp>
 struct tmat4x2
 {
  typedef tvec2<T, P> col_type;
  typedef tvec4<T, P> row_type;
  typedef tmat4x2<T, P> type;
  typedef tmat2x4<T, P> transpose_type;
  typedef T value_type;

 private:
  col_type value[4];

 public:


  tmat4x2() ;
  tmat4x2(tmat4x2<T, P> const & m) = default;
  template <precision Q>
  tmat4x2(tmat4x2<T, Q> const & m);

  constexpr explicit tmat4x2(ctor);
  explicit tmat4x2(T scalar);
  tmat4x2(
   T x0, T y0,
   T x1, T y1,
   T x2, T y2,
   T x3, T y3);
  tmat4x2(
   col_type const & v0,
   col_type const & v1,
   col_type const & v2,
   col_type const & v3);



  template <
   typename X1, typename Y1,
   typename X2, typename Y2,
   typename X3, typename Y3,
   typename X4, typename Y4>
  tmat4x2(
   X1 x1, Y1 y1,
   X2 x2, Y2 y2,
   X3 x3, Y3 y3,
   X4 x4, Y4 y4);

  template <typename V1, typename V2, typename V3, typename V4>
  tmat4x2(
   tvec2<V1, P> const & v1,
   tvec2<V2, P> const & v2,
   tvec2<V3, P> const & v3,
   tvec2<V4, P> const & v4);



  template <typename U, precision Q>
  tmat4x2(tmat4x2<U, Q> const & m);

  tmat4x2(tmat2x2<T, P> const & x);
  tmat4x2(tmat3x3<T, P> const & x);
  tmat4x2(tmat4x4<T, P> const & x);
  tmat4x2(tmat2x3<T, P> const & x);
  tmat4x2(tmat3x2<T, P> const & x);
  tmat4x2(tmat2x4<T, P> const & x);
  tmat4x2(tmat4x3<T, P> const & x);
  tmat4x2(tmat3x4<T, P> const & x);



  typedef length_t length_type;
  static length_type length(){return 4;}

  col_type & operator[](length_type i);
  col_type const & operator[](length_type i) const;



  tmat4x2<T, P> & operator=(tmat4x2<T, P> const & m) = default;

  template <typename U>
  tmat4x2<T, P> & operator=(tmat4x2<U, P> const & m);
  template <typename U>
  tmat4x2<T, P> & operator+=(U s);
  template <typename U>
  tmat4x2<T, P> & operator+=(tmat4x2<U, P> const & m);
  template <typename U>
  tmat4x2<T, P> & operator-=(U s);
  template <typename U>
  tmat4x2<T, P> & operator-=(tmat4x2<U, P> const & m);
  template <typename U>
  tmat4x2<T, P> & operator*=(U s);
  template <typename U>
  tmat4x2<T, P> & operator/=(U s);



  tmat4x2<T, P> & operator++ ();
  tmat4x2<T, P> & operator-- ();
  tmat4x2<T, P> operator++(int);
  tmat4x2<T, P> operator--(int);
 };



 template <typename T, precision P>
 tmat4x2<T, P> operator+(tmat4x2<T, P> const & m);

 template <typename T, precision P>
 tmat4x2<T, P> operator-(tmat4x2<T, P> const & m);



 template <typename T, precision P>
 tmat4x2<T, P> operator+(tmat4x2<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat4x2<T, P> operator+(tmat4x2<T, P> const & m1, tmat4x2<T, P> const & m2);

 template <typename T, precision P>
 tmat4x2<T, P> operator-(tmat4x2<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat4x2<T, P> operator-(tmat4x2<T, P> const & m1, tmat4x2<T, P> const & m2);

 template <typename T, precision P>
 tmat4x2<T, P> operator*(tmat4x2<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat4x2<T, P> operator*(T scalar, tmat4x2<T, P> const & m);

 template <typename T, precision P>
 typename tmat4x2<T, P>::col_type operator*(tmat4x2<T, P> const & m, typename tmat4x2<T, P>::row_type const & v);

 template <typename T, precision P>
 typename tmat4x2<T, P>::row_type operator*(typename tmat4x2<T, P>::col_type const & v, tmat4x2<T, P> const & m);

 template <typename T, precision P>
 tmat2x2<T, P> operator*(tmat4x2<T, P> const & m1, tmat2x4<T, P> const & m2);

 template <typename T, precision P>
 tmat3x2<T, P> operator*(tmat4x2<T, P> const & m1, tmat3x4<T, P> const & m2);

 template <typename T, precision P>
 tmat4x2<T, P> operator*(tmat4x2<T, P> const & m1, tmat4x4<T, P> const & m2);

 template <typename T, precision P>
 tmat4x2<T, P> operator/(tmat4x2<T, P> const & m, T scalar);

 template <typename T, precision P>
 tmat4x2<T, P> operator/(T scalar, tmat4x2<T, P> const & m);



 template <typename T, precision P>
 bool operator==(tmat4x2<T, P> const & m1, tmat4x2<T, P> const & m2);

 template <typename T, precision P>
 bool operator!=(tmat4x2<T, P> const & m1, tmat4x2<T, P> const & m2);
}


# 1 "../../include/glm/detail/../detail/type_mat4x2.inl" 1



namespace glm
{
# 16 "../../include/glm/detail/../detail/type_mat4x2.inl"
  template <typename T, precision P>
  inline tmat4x2<T, P>::tmat4x2()
  {

    this->value[0] = col_type(1, 0);
    this->value[1] = col_type(0, 1);
    this->value[2] = col_type(0, 0);
    this->value[3] = col_type(0, 0);

  }
# 39 "../../include/glm/detail/../detail/type_mat4x2.inl"
 template <typename T, precision P>
 template <precision Q>
 inline tmat4x2<T, P>::tmat4x2(tmat4x2<T, Q> const & m)
 {
  this->value[0] = m.value[0];
  this->value[1] = m.value[1];
  this->value[2] = m.value[2];
  this->value[3] = m.value[3];
 }

 template <typename T, precision P>
 inline constexpr tmat4x2<T, P>::tmat4x2(ctor)
 {}

 template <typename T, precision P>
 inline tmat4x2<T, P>::tmat4x2(T scalar)
 {
  this->value[0] = col_type(scalar, 0);
  this->value[1] = col_type(0, scalar);
  this->value[2] = col_type(0, 0);
  this->value[3] = col_type(0, 0);
 }

 template <typename T, precision P>
 inline tmat4x2<T, P>::tmat4x2
 (
  T x0, T y0,
  T x1, T y1,
  T x2, T y2,
  T x3, T y3
 )
 {
  this->value[0] = col_type(x0, y0);
  this->value[1] = col_type(x1, y1);
  this->value[2] = col_type(x2, y2);
  this->value[3] = col_type(x3, y3);
 }

 template <typename T, precision P>
 inline tmat4x2<T, P>::tmat4x2
 (
  col_type const & v0,
  col_type const & v1,
  col_type const & v2,
  col_type const & v3
 )
 {
  this->value[0] = v0;
  this->value[1] = v1;
  this->value[2] = v2;
  this->value[3] = v3;
 }



 template <typename T, precision P>
 template <
  typename X1, typename Y1,
  typename X2, typename Y2,
  typename X3, typename Y3,
  typename X4, typename Y4>
 inline tmat4x2<T, P>::tmat4x2
 (
  X1 x1, Y1 y1,
  X2 x2, Y2 y2,
  X3 x3, Y3 y3,
  X4 x4, Y4 y4
 )
 {
  this->value[0] = col_type(static_cast<T>(x1), value_type(y1));
  this->value[1] = col_type(static_cast<T>(x2), value_type(y2));
  this->value[2] = col_type(static_cast<T>(x3), value_type(y3));
  this->value[3] = col_type(static_cast<T>(x4), value_type(y4));
 }

 template <typename T, precision P>
 template <typename V1, typename V2, typename V3, typename V4>
 inline tmat4x2<T, P>::tmat4x2
 (
  tvec2<V1, P> const & v1,
  tvec2<V2, P> const & v2,
  tvec2<V3, P> const & v3,
  tvec2<V4, P> const & v4
 )
 {
  this->value[0] = col_type(v1);
  this->value[1] = col_type(v2);
  this->value[2] = col_type(v3);
  this->value[3] = col_type(v4);
 }



 template <typename T, precision P>
 template <typename U, precision Q>
 inline tmat4x2<T, P>::tmat4x2(tmat4x2<U, Q> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(m[2]);
  this->value[3] = col_type(m[3]);
 }

 template <typename T, precision P>
 inline tmat4x2<T, P>::tmat4x2(tmat2x2<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(0);
  this->value[3] = col_type(0);
 }

 template <typename T, precision P>
 inline tmat4x2<T, P>::tmat4x2(tmat3x3<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(m[2]);
  this->value[3] = col_type(0);
 }

 template <typename T, precision P>
 inline tmat4x2<T, P>::tmat4x2(tmat4x4<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(m[2]);
  this->value[3] = col_type(m[3]);
 }

 template <typename T, precision P>
 inline tmat4x2<T, P>::tmat4x2(tmat2x3<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(0);
  this->value[3] = col_type(0);
 }

 template <typename T, precision P>
 inline tmat4x2<T, P>::tmat4x2(tmat3x2<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(m[2]);
  this->value[3] = col_type(0);
 }

 template <typename T, precision P>
 inline tmat4x2<T, P>::tmat4x2(tmat2x4<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(0);
  this->value[3] = col_type(0);
 }

 template <typename T, precision P>
 inline tmat4x2<T, P>::tmat4x2(tmat4x3<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(m[2]);
  this->value[3] = col_type(m[3]);
 }

 template <typename T, precision P>
 inline tmat4x2<T, P>::tmat4x2(tmat3x4<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(m[2]);
  this->value[3] = col_type(0);
 }



 template <typename T, precision P>
 inline typename tmat4x2<T, P>::col_type & tmat4x2<T, P>::operator[](typename tmat4x2<T, P>::length_type i)
 {
  
# 219 "../../include/glm/detail/../detail/type_mat4x2.inl" 3
 ((
# 219 "../../include/glm/detail/../detail/type_mat4x2.inl"
 i < this->length()
# 219 "../../include/glm/detail/../detail/type_mat4x2.inl" 3
 ) ? (void)0 : _assert(
# 219 "../../include/glm/detail/../detail/type_mat4x2.inl"
 "i < this->length()"
# 219 "../../include/glm/detail/../detail/type_mat4x2.inl" 3
 , "../../include/glm/detail/../detail/type_mat4x2.inl", 219))
# 219 "../../include/glm/detail/../detail/type_mat4x2.inl"
                           ;
  return this->value[i];
 }

 template <typename T, precision P>
 inline typename tmat4x2<T, P>::col_type const & tmat4x2<T, P>::operator[](typename tmat4x2<T, P>::length_type i) const
 {
  
# 226 "../../include/glm/detail/../detail/type_mat4x2.inl" 3
 ((
# 226 "../../include/glm/detail/../detail/type_mat4x2.inl"
 i < this->length()
# 226 "../../include/glm/detail/../detail/type_mat4x2.inl" 3
 ) ? (void)0 : _assert(
# 226 "../../include/glm/detail/../detail/type_mat4x2.inl"
 "i < this->length()"
# 226 "../../include/glm/detail/../detail/type_mat4x2.inl" 3
 , "../../include/glm/detail/../detail/type_mat4x2.inl", 226))
# 226 "../../include/glm/detail/../detail/type_mat4x2.inl"
                           ;
  return this->value[i];
 }
# 244 "../../include/glm/detail/../detail/type_mat4x2.inl"
 template <typename T, precision P>
 template <typename U>
 inline tmat4x2<T, P>& tmat4x2<T, P>::operator=(tmat4x2<U, P> const & m)
 {
  this->value[0] = m[0];
  this->value[1] = m[1];
  this->value[2] = m[2];
  this->value[3] = m[3];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat4x2<T, P> & tmat4x2<T, P>::operator+=(U s)
 {
  this->value[0] += s;
  this->value[1] += s;
  this->value[2] += s;
  this->value[3] += s;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat4x2<T, P> & tmat4x2<T, P>::operator+=(tmat4x2<U, P> const & m)
 {
  this->value[0] += m[0];
  this->value[1] += m[1];
  this->value[2] += m[2];
  this->value[3] += m[3];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat4x2<T, P> & tmat4x2<T, P>::operator-=(U s)
 {
  this->value[0] -= s;
  this->value[1] -= s;
  this->value[2] -= s;
  this->value[3] -= s;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat4x2<T, P> & tmat4x2<T, P>::operator-=(tmat4x2<U, P> const & m)
 {
  this->value[0] -= m[0];
  this->value[1] -= m[1];
  this->value[2] -= m[2];
  this->value[3] -= m[3];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat4x2<T, P> & tmat4x2<T, P>::operator*=(U s)
 {
  this->value[0] *= s;
  this->value[1] *= s;
  this->value[2] *= s;
  this->value[3] *= s;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat4x2<T, P> & tmat4x2<T, P>::operator/=(U s)
 {
  this->value[0] /= s;
  this->value[1] /= s;
  this->value[2] /= s;
  this->value[3] /= s;
  return *this;
 }



 template <typename T, precision P>
 inline tmat4x2<T, P> & tmat4x2<T, P>::operator++()
 {
  ++this->value[0];
  ++this->value[1];
  ++this->value[2];
  ++this->value[3];
  return *this;
 }

 template <typename T, precision P>
 inline tmat4x2<T, P> & tmat4x2<T, P>::operator--()
 {
  --this->value[0];
  --this->value[1];
  --this->value[2];
  --this->value[3];
  return *this;
 }

 template <typename T, precision P>
 inline tmat4x2<T, P> tmat4x2<T, P>::operator++(int)
 {
  tmat4x2<T, P> Result(*this);
  ++*this;
  return Result;
 }

 template <typename T, precision P>
 inline tmat4x2<T, P> tmat4x2<T, P>::operator--(int)
 {
  tmat4x2<T, P> Result(*this);
  --*this;
  return Result;
 }



 template <typename T, precision P>
 inline tmat4x2<T, P> operator+(tmat4x2<T, P> const & m)
 {
  return m;
 }

 template <typename T, precision P>
 inline tmat4x2<T, P> operator-(tmat4x2<T, P> const & m)
 {
  return tmat4x2<T, P>(
   -m[0],
   -m[1],
   -m[2],
   -m[3]);
 }



 template <typename T, precision P>
 inline tmat4x2<T, P> operator+(tmat4x2<T, P> const & m, T scalar)
 {
  return tmat4x2<T, P>(
   m[0] + scalar,
   m[1] + scalar,
   m[2] + scalar,
   m[3] + scalar);
 }

 template <typename T, precision P>
 inline tmat4x2<T, P> operator+(tmat4x2<T, P> const & m1, tmat4x2<T, P> const & m2)
 {
  return tmat4x2<T, P>(
   m1[0] + m2[0],
   m1[1] + m2[1],
   m1[2] + m2[2],
   m1[3] + m2[3]);
 }

 template <typename T, precision P>
 inline tmat4x2<T, P> operator-(tmat4x2<T, P> const & m, T scalar)
 {
  return tmat4x2<T, P>(
   m[0] - scalar,
   m[1] - scalar,
   m[2] - scalar,
   m[3] - scalar);
 }

 template <typename T, precision P>
 inline tmat4x2<T, P> operator-(tmat4x2<T, P> const & m1, tmat4x2<T, P> const & m2)
 {
  return tmat4x2<T, P>(
   m1[0] - m2[0],
   m1[1] - m2[1],
   m1[2] - m2[2],
   m1[3] - m2[3]);
 }

 template <typename T, precision P>
 inline tmat4x2<T, P> operator*(tmat4x2<T, P> const & m, T scalar)
 {
  return tmat4x2<T, P>(
   m[0] * scalar,
   m[1] * scalar,
   m[2] * scalar,
   m[3] * scalar);
 }

 template <typename T, precision P>
 inline tmat4x2<T, P> operator*(T scalar, tmat4x2<T, P> const & m)
 {
  return tmat4x2<T, P>(
   m[0] * scalar,
   m[1] * scalar,
   m[2] * scalar,
   m[3] * scalar);
 }

 template <typename T, precision P>
 inline typename tmat4x2<T, P>::col_type operator*(tmat4x2<T, P> const & m, typename tmat4x2<T, P>::row_type const & v)
 {
  return typename tmat4x2<T, P>::col_type(
   m[0][0] * v.x + m[1][0] * v.y + m[2][0] * v.z + m[3][0] * v.w,
   m[0][1] * v.x + m[1][1] * v.y + m[2][1] * v.z + m[3][1] * v.w);
 }

 template <typename T, precision P>
 inline typename tmat4x2<T, P>::row_type operator*(typename tmat4x2<T, P>::col_type const & v, tmat4x2<T, P> const & m)
 {
  return typename tmat4x2<T, P>::row_type(
   v.x * m[0][0] + v.y * m[0][1],
   v.x * m[1][0] + v.y * m[1][1],
   v.x * m[2][0] + v.y * m[2][1],
   v.x * m[3][0] + v.y * m[3][1]);
 }

 template <typename T, precision P>
 inline tmat2x2<T, P> operator*(tmat4x2<T, P> const & m1, tmat2x4<T, P> const & m2)
 {
  T const SrcA00 = m1[0][0];
  T const SrcA01 = m1[0][1];
  T const SrcA10 = m1[1][0];
  T const SrcA11 = m1[1][1];
  T const SrcA20 = m1[2][0];
  T const SrcA21 = m1[2][1];
  T const SrcA30 = m1[3][0];
  T const SrcA31 = m1[3][1];

  T const SrcB00 = m2[0][0];
  T const SrcB01 = m2[0][1];
  T const SrcB02 = m2[0][2];
  T const SrcB03 = m2[0][3];
  T const SrcB10 = m2[1][0];
  T const SrcB11 = m2[1][1];
  T const SrcB12 = m2[1][2];
  T const SrcB13 = m2[1][3];

  tmat2x2<T, P> Result(uninitialize);
  Result[0][0] = SrcA00 * SrcB00 + SrcA10 * SrcB01 + SrcA20 * SrcB02 + SrcA30 * SrcB03;
  Result[0][1] = SrcA01 * SrcB00 + SrcA11 * SrcB01 + SrcA21 * SrcB02 + SrcA31 * SrcB03;
  Result[1][0] = SrcA00 * SrcB10 + SrcA10 * SrcB11 + SrcA20 * SrcB12 + SrcA30 * SrcB13;
  Result[1][1] = SrcA01 * SrcB10 + SrcA11 * SrcB11 + SrcA21 * SrcB12 + SrcA31 * SrcB13;
  return Result;
 }

 template <typename T, precision P>
 inline tmat3x2<T, P> operator*(tmat4x2<T, P> const & m1, tmat3x4<T, P> const & m2)
 {
  return tmat3x2<T, P>(
   m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1] + m1[2][0] * m2[0][2] + m1[3][0] * m2[0][3],
   m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1] + m1[2][1] * m2[0][2] + m1[3][1] * m2[0][3],
   m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1] + m1[2][0] * m2[1][2] + m1[3][0] * m2[1][3],
   m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1] + m1[2][1] * m2[1][2] + m1[3][1] * m2[1][3],
   m1[0][0] * m2[2][0] + m1[1][0] * m2[2][1] + m1[2][0] * m2[2][2] + m1[3][0] * m2[2][3],
   m1[0][1] * m2[2][0] + m1[1][1] * m2[2][1] + m1[2][1] * m2[2][2] + m1[3][1] * m2[2][3]);
 }

 template <typename T, precision P>
 inline tmat4x2<T, P> operator*(tmat4x2<T, P> const & m1, tmat4x4<T, P> const & m2)
 {
  return tmat4x2<T, P>(
   m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1] + m1[2][0] * m2[0][2] + m1[3][0] * m2[0][3],
   m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1] + m1[2][1] * m2[0][2] + m1[3][1] * m2[0][3],
   m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1] + m1[2][0] * m2[1][2] + m1[3][0] * m2[1][3],
   m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1] + m1[2][1] * m2[1][2] + m1[3][1] * m2[1][3],
   m1[0][0] * m2[2][0] + m1[1][0] * m2[2][1] + m1[2][0] * m2[2][2] + m1[3][0] * m2[2][3],
   m1[0][1] * m2[2][0] + m1[1][1] * m2[2][1] + m1[2][1] * m2[2][2] + m1[3][1] * m2[2][3],
   m1[0][0] * m2[3][0] + m1[1][0] * m2[3][1] + m1[2][0] * m2[3][2] + m1[3][0] * m2[3][3],
   m1[0][1] * m2[3][0] + m1[1][1] * m2[3][1] + m1[2][1] * m2[3][2] + m1[3][1] * m2[3][3]);
 }

 template <typename T, precision P>
 inline tmat4x2<T, P> operator/(tmat4x2<T, P> const & m, T scalar)
 {
  return tmat4x2<T, P>(
   m[0] / scalar,
   m[1] / scalar,
   m[2] / scalar,
   m[3] / scalar);
 }

 template <typename T, precision P>
 inline tmat4x2<T, P> operator/(T scalar, tmat4x2<T, P> const & m)
 {
  return tmat4x2<T, P>(
   scalar / m[0],
   scalar / m[1],
   scalar / m[2],
   scalar / m[3]);
 }



 template <typename T, precision P>
 inline bool operator==(tmat4x2<T, P> const & m1, tmat4x2<T, P> const & m2)
 {
  return (m1[0] == m2[0]) && (m1[1] == m2[1]) && (m1[2] == m2[2]) && (m1[3] == m2[3]);
 }

 template <typename T, precision P>
 inline bool operator!=(tmat4x2<T, P> const & m1, tmat4x2<T, P> const & m2)
 {
  return (m1[0] != m2[0]) || (m1[1] != m2[1]) || (m1[2] != m2[2]) || (m1[3] != m2[3]);
 }
}
# 177 "../../include/glm/detail/../detail/type_mat4x2.hpp" 2
# 7 "../../include/glm/detail/../mat4x2.hpp" 2

namespace glm
{





 typedef tmat4x2<float, lowp> lowp_mat4x2;






 typedef tmat4x2<float, mediump> mediump_mat4x2;






 typedef tmat4x2<float, highp> highp_mat4x2;

}
# 31 "../../include/glm/detail/func_matrix.hpp" 2
# 1 "../../include/glm/detail/../mat4x3.hpp" 1



       

# 1 "../../include/glm/detail/../detail/type_mat4x3.hpp" 1



       
# 13 "../../include/glm/detail/../detail/type_mat4x3.hpp"
namespace glm
{
 template <typename T, precision P = defaultp>
 struct tmat4x3
 {
  typedef tvec3<T, P> col_type;
  typedef tvec4<T, P> row_type;
  typedef tmat4x3<T, P> type;
  typedef tmat3x4<T, P> transpose_type;
  typedef T value_type;

 private:
  col_type value[4];

 public:


  tmat4x3() ;
  tmat4x3(tmat4x3<T, P> const & m) = default;
  template <precision Q>
  tmat4x3(tmat4x3<T, Q> const & m);

  constexpr explicit tmat4x3(ctor);
  explicit tmat4x3(T const & x);
  tmat4x3(
   T const & x0, T const & y0, T const & z0,
   T const & x1, T const & y1, T const & z1,
   T const & x2, T const & y2, T const & z2,
   T const & x3, T const & y3, T const & z3);
  tmat4x3(
   col_type const & v0,
   col_type const & v1,
   col_type const & v2,
   col_type const & v3);



  template <
   typename X1, typename Y1, typename Z1,
   typename X2, typename Y2, typename Z2,
   typename X3, typename Y3, typename Z3,
   typename X4, typename Y4, typename Z4>
  tmat4x3(
   X1 const & x1, Y1 const & y1, Z1 const & z1,
   X2 const & x2, Y2 const & y2, Z2 const & z2,
   X3 const & x3, Y3 const & y3, Z3 const & z3,
   X4 const & x4, Y4 const & y4, Z4 const & z4);

  template <typename V1, typename V2, typename V3, typename V4>
  tmat4x3(
   tvec3<V1, P> const & v1,
   tvec3<V2, P> const & v2,
   tvec3<V3, P> const & v3,
   tvec3<V4, P> const & v4);



  template <typename U, precision Q>
  tmat4x3(tmat4x3<U, Q> const & m);

  tmat4x3(tmat2x2<T, P> const & x);
  tmat4x3(tmat3x3<T, P> const & x);
  tmat4x3(tmat4x4<T, P> const & x);
  tmat4x3(tmat2x3<T, P> const & x);
  tmat4x3(tmat3x2<T, P> const & x);
  tmat4x3(tmat2x4<T, P> const & x);
  tmat4x3(tmat4x2<T, P> const & x);
  tmat4x3(tmat3x4<T, P> const & x);



  typedef length_t length_type;
  static length_type length(){return 4;}

  col_type & operator[](length_type i);
  col_type const & operator[](length_type i) const;



  tmat4x3<T, P> & operator=(tmat4x3<T, P> const & m) = default;

  template <typename U>
  tmat4x3<T, P> & operator=(tmat4x3<U, P> const & m);
  template <typename U>
  tmat4x3<T, P> & operator+=(U s);
  template <typename U>
  tmat4x3<T, P> & operator+=(tmat4x3<U, P> const & m);
  template <typename U>
  tmat4x3<T, P> & operator-=(U s);
  template <typename U>
  tmat4x3<T, P> & operator-=(tmat4x3<U, P> const & m);
  template <typename U>
  tmat4x3<T, P> & operator*=(U s);
  template <typename U>
  tmat4x3<T, P> & operator/=(U s);



  tmat4x3<T, P> & operator++();
  tmat4x3<T, P> & operator--();
  tmat4x3<T, P> operator++(int);
  tmat4x3<T, P> operator--(int);
 };



 template <typename T, precision P>
 tmat4x3<T, P> operator+(tmat4x3<T, P> const & m);

 template <typename T, precision P>
 tmat4x3<T, P> operator-(tmat4x3<T, P> const & m);



 template <typename T, precision P>
 tmat4x3<T, P> operator+(tmat4x3<T, P> const & m, T const & s);

 template <typename T, precision P>
 tmat4x3<T, P> operator+(tmat4x3<T, P> const & m1, tmat4x3<T, P> const & m2);

 template <typename T, precision P>
 tmat4x3<T, P> operator-(tmat4x3<T, P> const & m, T const & s);

 template <typename T, precision P>
 tmat4x3<T, P> operator-(tmat4x3<T, P> const & m1, tmat4x3<T, P> const & m2);

 template <typename T, precision P>
 tmat4x3<T, P> operator*(tmat4x3<T, P> const & m, T const & s);

 template <typename T, precision P>
 tmat4x3<T, P> operator*(T const & s, tmat4x3<T, P> const & m);

 template <typename T, precision P>
 typename tmat4x3<T, P>::col_type operator*(tmat4x3<T, P> const & m, typename tmat4x3<T, P>::row_type const & v);

 template <typename T, precision P>
 typename tmat4x3<T, P>::row_type operator*(typename tmat4x3<T, P>::col_type const & v, tmat4x3<T, P> const & m);

 template <typename T, precision P>
 tmat2x3<T, P> operator*(tmat4x3<T, P> const & m1, tmat2x4<T, P> const & m2);

 template <typename T, precision P>
 tmat3x3<T, P> operator*(tmat4x3<T, P> const & m1, tmat3x4<T, P> const & m2);

 template <typename T, precision P>
 tmat4x3<T, P> operator*(tmat4x3<T, P> const & m1, tmat4x4<T, P> const & m2);

 template <typename T, precision P>
 tmat4x3<T, P> operator/(tmat4x3<T, P> const & m, T const & s);

 template <typename T, precision P>
 tmat4x3<T, P> operator/(T const & s, tmat4x3<T, P> const & m);



 template <typename T, precision P>
 bool operator==(tmat4x3<T, P> const & m1, tmat4x3<T, P> const & m2);

 template <typename T, precision P>
 bool operator!=(tmat4x3<T, P> const & m1, tmat4x3<T, P> const & m2);
}


# 1 "../../include/glm/detail/../detail/type_mat4x3.inl" 1



namespace glm
{



  template <typename T, precision P>
  inline tmat4x3<T, P>::tmat4x3()
  {

    this->value[0] = col_type(1, 0, 0);
    this->value[1] = col_type(0, 1, 0);
    this->value[2] = col_type(0, 0, 1);
    this->value[3] = col_type(0, 0, 0);

  }
# 32 "../../include/glm/detail/../detail/type_mat4x3.inl"
 template <typename T, precision P>
 template <precision Q>
 inline tmat4x3<T, P>::tmat4x3(tmat4x3<T, Q> const & m)
 {
  this->value[0] = m.value[0];
  this->value[1] = m.value[1];
  this->value[2] = m.value[2];
  this->value[3] = m.value[3];
 }

 template <typename T, precision P>
 inline constexpr tmat4x3<T, P>::tmat4x3(ctor)
 {}

 template <typename T, precision P>
 inline tmat4x3<T, P>::tmat4x3(T const & s)
 {
  this->value[0] = col_type(s, 0, 0);
  this->value[1] = col_type(0, s, 0);
  this->value[2] = col_type(0, 0, s);
  this->value[3] = col_type(0, 0, 0);
 }

 template <typename T, precision P>
 inline tmat4x3<T, P>::tmat4x3
 (
  T const & x0, T const & y0, T const & z0,
  T const & x1, T const & y1, T const & z1,
  T const & x2, T const & y2, T const & z2,
  T const & x3, T const & y3, T const & z3
 )
 {
  this->value[0] = col_type(x0, y0, z0);
  this->value[1] = col_type(x1, y1, z1);
  this->value[2] = col_type(x2, y2, z2);
  this->value[3] = col_type(x3, y3, z3);
 }

 template <typename T, precision P>
 inline tmat4x3<T, P>::tmat4x3
 (
  col_type const & v0,
  col_type const & v1,
  col_type const & v2,
  col_type const & v3
 )
 {
  this->value[0] = v0;
  this->value[1] = v1;
  this->value[2] = v2;
  this->value[3] = v3;
 }



 template <typename T, precision P>
 template <
  typename X1, typename Y1, typename Z1,
  typename X2, typename Y2, typename Z2,
  typename X3, typename Y3, typename Z3,
  typename X4, typename Y4, typename Z4>
 inline tmat4x3<T, P>::tmat4x3
 (
  X1 const & x1, Y1 const & y1, Z1 const & z1,
  X2 const & x2, Y2 const & y2, Z2 const & z2,
  X3 const & x3, Y3 const & y3, Z3 const & z3,
  X4 const & x4, Y4 const & y4, Z4 const & z4
 )
 {
  this->value[0] = col_type(static_cast<T>(x1), value_type(y1), value_type(z1));
  this->value[1] = col_type(static_cast<T>(x2), value_type(y2), value_type(z2));
  this->value[2] = col_type(static_cast<T>(x3), value_type(y3), value_type(z3));
  this->value[3] = col_type(static_cast<T>(x4), value_type(y4), value_type(z4));
 }

 template <typename T, precision P>
 template <typename V1, typename V2, typename V3, typename V4>
 inline tmat4x3<T, P>::tmat4x3
 (
  tvec3<V1, P> const & v1,
  tvec3<V2, P> const & v2,
  tvec3<V3, P> const & v3,
  tvec3<V4, P> const & v4
 )
 {
  this->value[0] = col_type(v1);
  this->value[1] = col_type(v2);
  this->value[2] = col_type(v3);
  this->value[3] = col_type(v4);
 }



 template <typename T, precision P>
 template <typename U, precision Q>
 inline tmat4x3<T, P>::tmat4x3(tmat4x3<U, Q> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(m[2]);
  this->value[3] = col_type(m[3]);
 }

 template <typename T, precision P>
 inline tmat4x3<T, P>::tmat4x3(tmat2x2<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0);
  this->value[1] = col_type(m[1], 0);
  this->value[2] = col_type(0, 0, 1);
  this->value[3] = col_type(0);
 }

 template <typename T, precision P>
 inline tmat4x3<T, P>::tmat4x3(tmat3x3<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(m[2]);
  this->value[3] = col_type(0);
 }

 template <typename T, precision P>
 inline tmat4x3<T, P>::tmat4x3(tmat4x4<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(m[2]);
  this->value[3] = col_type(m[3]);
 }

 template <typename T, precision P>
 inline tmat4x3<T, P>::tmat4x3(tmat2x3<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(0, 0, 1);
  this->value[3] = col_type(0);
 }

 template <typename T, precision P>
 inline tmat4x3<T, P>::tmat4x3(tmat3x2<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0);
  this->value[1] = col_type(m[1], 0);
  this->value[2] = col_type(m[2], 1);
  this->value[3] = col_type(0);
 }

 template <typename T, precision P>
 inline tmat4x3<T, P>::tmat4x3(tmat2x4<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(0, 0, 1);
  this->value[3] = col_type(0);
 }

 template <typename T, precision P>
 inline tmat4x3<T, P>::tmat4x3(tmat4x2<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0);
  this->value[1] = col_type(m[1], 0);
  this->value[2] = col_type(m[2], 1);
  this->value[3] = col_type(m[3], 0);
 }

 template <typename T, precision P>
 inline tmat4x3<T, P>::tmat4x3(tmat3x4<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(m[2]);
  this->value[3] = col_type(0);
 }



 template <typename T, precision P>
 inline typename tmat4x3<T, P>::col_type & tmat4x3<T, P>::operator[](typename tmat4x3<T, P>::length_type i)
 {
  
# 212 "../../include/glm/detail/../detail/type_mat4x3.inl" 3
 ((
# 212 "../../include/glm/detail/../detail/type_mat4x3.inl"
 i < this->length()
# 212 "../../include/glm/detail/../detail/type_mat4x3.inl" 3
 ) ? (void)0 : _assert(
# 212 "../../include/glm/detail/../detail/type_mat4x3.inl"
 "i < this->length()"
# 212 "../../include/glm/detail/../detail/type_mat4x3.inl" 3
 , "../../include/glm/detail/../detail/type_mat4x3.inl", 212))
# 212 "../../include/glm/detail/../detail/type_mat4x3.inl"
                           ;
  return this->value[i];
 }

 template <typename T, precision P>
 inline typename tmat4x3<T, P>::col_type const & tmat4x3<T, P>::operator[](typename tmat4x3<T, P>::length_type i) const
 {
  
# 219 "../../include/glm/detail/../detail/type_mat4x3.inl" 3
 ((
# 219 "../../include/glm/detail/../detail/type_mat4x3.inl"
 i < this->length()
# 219 "../../include/glm/detail/../detail/type_mat4x3.inl" 3
 ) ? (void)0 : _assert(
# 219 "../../include/glm/detail/../detail/type_mat4x3.inl"
 "i < this->length()"
# 219 "../../include/glm/detail/../detail/type_mat4x3.inl" 3
 , "../../include/glm/detail/../detail/type_mat4x3.inl", 219))
# 219 "../../include/glm/detail/../detail/type_mat4x3.inl"
                           ;
  return this->value[i];
 }
# 237 "../../include/glm/detail/../detail/type_mat4x3.inl"
 template <typename T, precision P>
 template <typename U>
 inline tmat4x3<T, P>& tmat4x3<T, P>::operator=(tmat4x3<U, P> const & m)
 {
  this->value[0] = m[0];
  this->value[1] = m[1];
  this->value[2] = m[2];
  this->value[3] = m[3];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat4x3<T, P> & tmat4x3<T, P>::operator+=(U s)
 {
  this->value[0] += s;
  this->value[1] += s;
  this->value[2] += s;
  this->value[3] += s;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat4x3<T, P> & tmat4x3<T, P>::operator+=(tmat4x3<U, P> const & m)
 {
  this->value[0] += m[0];
  this->value[1] += m[1];
  this->value[2] += m[2];
  this->value[3] += m[3];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat4x3<T, P> & tmat4x3<T, P>::operator-=(U s)
 {
  this->value[0] -= s;
  this->value[1] -= s;
  this->value[2] -= s;
  this->value[3] -= s;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat4x3<T, P> & tmat4x3<T, P>::operator-=(tmat4x3<U, P> const & m)
 {
  this->value[0] -= m[0];
  this->value[1] -= m[1];
  this->value[2] -= m[2];
  this->value[3] -= m[3];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat4x3<T, P> & tmat4x3<T, P>::operator*=(U s)
 {
  this->value[0] *= s;
  this->value[1] *= s;
  this->value[2] *= s;
  this->value[3] *= s;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat4x3<T, P> & tmat4x3<T, P>::operator/=(U s)
 {
  this->value[0] /= s;
  this->value[1] /= s;
  this->value[2] /= s;
  this->value[3] /= s;
  return *this;
 }



 template <typename T, precision P>
 inline tmat4x3<T, P> & tmat4x3<T, P>::operator++()
 {
  ++this->value[0];
  ++this->value[1];
  ++this->value[2];
  ++this->value[3];
  return *this;
 }

 template <typename T, precision P>
 inline tmat4x3<T, P> & tmat4x3<T, P>::operator--()
 {
  --this->value[0];
  --this->value[1];
  --this->value[2];
  --this->value[3];
  return *this;
 }

 template <typename T, precision P>
 inline tmat4x3<T, P> tmat4x3<T, P>::operator++(int)
 {
  tmat4x3<T, P> Result(*this);
  ++*this;
  return Result;
 }

 template <typename T, precision P>
 inline tmat4x3<T, P> tmat4x3<T, P>::operator--(int)
 {
  tmat4x3<T, P> Result(*this);
  --*this;
  return Result;
 }



 template <typename T, precision P>
 inline tmat4x3<T, P> operator+(tmat4x3<T, P> const & m)
 {
  return m;
 }

 template <typename T, precision P>
 inline tmat4x3<T, P> operator-(tmat4x3<T, P> const & m)
 {
  return tmat4x3<T, P>(
   -m[0],
   -m[1],
   -m[2],
   -m[3]);
 }



 template <typename T, precision P>
 inline tmat4x3<T, P> operator+(tmat4x3<T, P> const & m, T const & s)
 {
  return tmat4x3<T, P>(
   m[0] + s,
   m[1] + s,
   m[2] + s,
   m[3] + s);
 }

 template <typename T, precision P>
 inline tmat4x3<T, P> operator+(tmat4x3<T, P> const & m1, tmat4x3<T, P> const & m2)
 {
  return tmat4x3<T, P>(
   m1[0] + m2[0],
   m1[1] + m2[1],
   m1[2] + m2[2],
   m1[3] + m2[3]);
 }

 template <typename T, precision P>
 inline tmat4x3<T, P> operator-(tmat4x3<T, P> const & m, T const & s)
 {
  return tmat4x3<T, P>(
   m[0] - s,
   m[1] - s,
   m[2] - s,
   m[3] - s);
 }

 template <typename T, precision P>
 inline tmat4x3<T, P> operator-(tmat4x3<T, P> const & m1, tmat4x3<T, P> const & m2)
 {
  return tmat4x3<T, P>(
   m1[0] - m2[0],
   m1[1] - m2[1],
   m1[2] - m2[2],
   m1[3] - m2[3]);
 }

 template <typename T, precision P>
 inline tmat4x3<T, P> operator*(tmat4x3<T, P> const & m, T const & s)
 {
  return tmat4x3<T, P>(
   m[0] * s,
   m[1] * s,
   m[2] * s,
   m[3] * s);
 }

 template <typename T, precision P>
 inline tmat4x3<T, P> operator*(T const & s, tmat4x3<T, P> const & m)
 {
  return tmat4x3<T, P>(
   m[0] * s,
   m[1] * s,
   m[2] * s,
   m[3] * s);
 }

 template <typename T, precision P>
 inline typename tmat4x3<T, P>::col_type operator*
 (
  tmat4x3<T, P> const & m,
  typename tmat4x3<T, P>::row_type const & v)
 {
  return typename tmat4x3<T, P>::col_type(
   m[0][0] * v.x + m[1][0] * v.y + m[2][0] * v.z + m[3][0] * v.w,
   m[0][1] * v.x + m[1][1] * v.y + m[2][1] * v.z + m[3][1] * v.w,
   m[0][2] * v.x + m[1][2] * v.y + m[2][2] * v.z + m[3][2] * v.w);
 }

 template <typename T, precision P>
 inline typename tmat4x3<T, P>::row_type operator*
 (
  typename tmat4x3<T, P>::col_type const & v,
  tmat4x3<T, P> const & m)
 {
  return typename tmat4x3<T, P>::row_type(
   v.x * m[0][0] + v.y * m[0][1] + v.z * m[0][2],
   v.x * m[1][0] + v.y * m[1][1] + v.z * m[1][2],
   v.x * m[2][0] + v.y * m[2][1] + v.z * m[2][2],
   v.x * m[3][0] + v.y * m[3][1] + v.z * m[3][2]);
 }

 template <typename T, precision P>
 inline tmat2x3<T, P> operator*(tmat4x3<T, P> const & m1, tmat2x4<T, P> const & m2)
 {
  return tmat2x3<T, P>(
   m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1] + m1[2][0] * m2[0][2] + m1[3][0] * m2[0][3],
   m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1] + m1[2][1] * m2[0][2] + m1[3][1] * m2[0][3],
   m1[0][2] * m2[0][0] + m1[1][2] * m2[0][1] + m1[2][2] * m2[0][2] + m1[3][2] * m2[0][3],
   m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1] + m1[2][0] * m2[1][2] + m1[3][0] * m2[1][3],
   m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1] + m1[2][1] * m2[1][2] + m1[3][1] * m2[1][3],
   m1[0][2] * m2[1][0] + m1[1][2] * m2[1][1] + m1[2][2] * m2[1][2] + m1[3][2] * m2[1][3]);
 }

 template <typename T, precision P>
 inline tmat3x3<T, P> operator*(tmat4x3<T, P> const & m1, tmat3x4<T, P> const & m2)
 {
  T const SrcA00 = m1[0][0];
  T const SrcA01 = m1[0][1];
  T const SrcA02 = m1[0][2];
  T const SrcA10 = m1[1][0];
  T const SrcA11 = m1[1][1];
  T const SrcA12 = m1[1][2];
  T const SrcA20 = m1[2][0];
  T const SrcA21 = m1[2][1];
  T const SrcA22 = m1[2][2];
  T const SrcA30 = m1[3][0];
  T const SrcA31 = m1[3][1];
  T const SrcA32 = m1[3][2];

  T const SrcB00 = m2[0][0];
  T const SrcB01 = m2[0][1];
  T const SrcB02 = m2[0][2];
  T const SrcB03 = m2[0][3];
  T const SrcB10 = m2[1][0];
  T const SrcB11 = m2[1][1];
  T const SrcB12 = m2[1][2];
  T const SrcB13 = m2[1][3];
  T const SrcB20 = m2[2][0];
  T const SrcB21 = m2[2][1];
  T const SrcB22 = m2[2][2];
  T const SrcB23 = m2[2][3];

  tmat3x3<T, P> Result(uninitialize);
  Result[0][0] = SrcA00 * SrcB00 + SrcA10 * SrcB01 + SrcA20 * SrcB02 + SrcA30 * SrcB03;
  Result[0][1] = SrcA01 * SrcB00 + SrcA11 * SrcB01 + SrcA21 * SrcB02 + SrcA31 * SrcB03;
  Result[0][2] = SrcA02 * SrcB00 + SrcA12 * SrcB01 + SrcA22 * SrcB02 + SrcA32 * SrcB03;
  Result[1][0] = SrcA00 * SrcB10 + SrcA10 * SrcB11 + SrcA20 * SrcB12 + SrcA30 * SrcB13;
  Result[1][1] = SrcA01 * SrcB10 + SrcA11 * SrcB11 + SrcA21 * SrcB12 + SrcA31 * SrcB13;
  Result[1][2] = SrcA02 * SrcB10 + SrcA12 * SrcB11 + SrcA22 * SrcB12 + SrcA32 * SrcB13;
  Result[2][0] = SrcA00 * SrcB20 + SrcA10 * SrcB21 + SrcA20 * SrcB22 + SrcA30 * SrcB23;
  Result[2][1] = SrcA01 * SrcB20 + SrcA11 * SrcB21 + SrcA21 * SrcB22 + SrcA31 * SrcB23;
  Result[2][2] = SrcA02 * SrcB20 + SrcA12 * SrcB21 + SrcA22 * SrcB22 + SrcA32 * SrcB23;
  return Result;
 }

 template <typename T, precision P>
 inline tmat4x3<T, P> operator*(tmat4x3<T, P> const & m1, tmat4x4<T, P> const & m2)
 {
  return tmat4x3<T, P>(
   m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1] + m1[2][0] * m2[0][2] + m1[3][0] * m2[0][3],
   m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1] + m1[2][1] * m2[0][2] + m1[3][1] * m2[0][3],
   m1[0][2] * m2[0][0] + m1[1][2] * m2[0][1] + m1[2][2] * m2[0][2] + m1[3][2] * m2[0][3],
   m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1] + m1[2][0] * m2[1][2] + m1[3][0] * m2[1][3],
   m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1] + m1[2][1] * m2[1][2] + m1[3][1] * m2[1][3],
   m1[0][2] * m2[1][0] + m1[1][2] * m2[1][1] + m1[2][2] * m2[1][2] + m1[3][2] * m2[1][3],
   m1[0][0] * m2[2][0] + m1[1][0] * m2[2][1] + m1[2][0] * m2[2][2] + m1[3][0] * m2[2][3],
   m1[0][1] * m2[2][0] + m1[1][1] * m2[2][1] + m1[2][1] * m2[2][2] + m1[3][1] * m2[2][3],
   m1[0][2] * m2[2][0] + m1[1][2] * m2[2][1] + m1[2][2] * m2[2][2] + m1[3][2] * m2[2][3],
   m1[0][0] * m2[3][0] + m1[1][0] * m2[3][1] + m1[2][0] * m2[3][2] + m1[3][0] * m2[3][3],
   m1[0][1] * m2[3][0] + m1[1][1] * m2[3][1] + m1[2][1] * m2[3][2] + m1[3][1] * m2[3][3],
   m1[0][2] * m2[3][0] + m1[1][2] * m2[3][1] + m1[2][2] * m2[3][2] + m1[3][2] * m2[3][3]);
 }

 template <typename T, precision P>
 inline tmat4x3<T, P> operator/(tmat4x3<T, P> const & m, T const & s)
 {
  return tmat4x3<T, P>(
   m[0] / s,
   m[1] / s,
   m[2] / s,
   m[3] / s);
 }

 template <typename T, precision P>
 inline tmat4x3<T, P> operator/(T const & s, tmat4x3<T, P> const & m)
 {
  return tmat4x3<T, P>(
   s / m[0],
   s / m[1],
   s / m[2],
   s / m[3]);
 }



 template <typename T, precision P>
 inline bool operator==(tmat4x3<T, P> const & m1, tmat4x3<T, P> const & m2)
 {
  return (m1[0] == m2[0]) && (m1[1] == m2[1]) && (m1[2] == m2[2]) && (m1[3] == m2[3]);
 }

 template <typename T, precision P>
 inline bool operator!=(tmat4x3<T, P> const & m1, tmat4x3<T, P> const & m2)
 {
  return (m1[0] != m2[0]) || (m1[1] != m2[1]) || (m1[2] != m2[2]) || (m1[3] != m2[3]);
 }
}
# 177 "../../include/glm/detail/../detail/type_mat4x3.hpp" 2
# 7 "../../include/glm/detail/../mat4x3.hpp" 2

namespace glm
{





 typedef tmat4x3<float, lowp> lowp_mat4x3;






 typedef tmat4x3<float, mediump> mediump_mat4x3;






 typedef tmat4x3<float, highp> highp_mat4x3;

}
# 32 "../../include/glm/detail/func_matrix.hpp" 2
# 1 "../../include/glm/detail/../mat4x4.hpp" 1



       

# 1 "../../include/glm/detail/../detail/type_mat4x4.hpp" 1



       







namespace glm
{
 template <typename T, precision P = defaultp>
 struct tmat4x4
 {
  typedef tvec4<T, P> col_type;
  typedef tvec4<T, P> row_type;
  typedef tmat4x4<T, P> type;
  typedef tmat4x4<T, P> transpose_type;
  typedef T value_type;

 private:
  col_type value[4];

 public:


  tmat4x4() ;
  tmat4x4(tmat4x4<T, P> const & m) = default;
  template <precision Q>
  tmat4x4(tmat4x4<T, Q> const & m);

  explicit tmat4x4(ctor);
  explicit tmat4x4(T const & x);
  tmat4x4(
   T const & x0, T const & y0, T const & z0, T const & w0,
   T const & x1, T const & y1, T const & z1, T const & w1,
   T const & x2, T const & y2, T const & z2, T const & w2,
   T const & x3, T const & y3, T const & z3, T const & w3);
  tmat4x4(
   col_type const & v0,
   col_type const & v1,
   col_type const & v2,
   col_type const & v3);



  template <
   typename X1, typename Y1, typename Z1, typename W1,
   typename X2, typename Y2, typename Z2, typename W2,
   typename X3, typename Y3, typename Z3, typename W3,
   typename X4, typename Y4, typename Z4, typename W4>
  tmat4x4(
   X1 const & x1, Y1 const & y1, Z1 const & z1, W1 const & w1,
   X2 const & x2, Y2 const & y2, Z2 const & z2, W2 const & w2,
   X3 const & x3, Y3 const & y3, Z3 const & z3, W3 const & w3,
   X4 const & x4, Y4 const & y4, Z4 const & z4, W4 const & w4);

  template <typename V1, typename V2, typename V3, typename V4>
  tmat4x4(
   tvec4<V1, P> const & v1,
   tvec4<V2, P> const & v2,
   tvec4<V3, P> const & v3,
   tvec4<V4, P> const & v4);



  template <typename U, precision Q>
  tmat4x4(tmat4x4<U, Q> const & m);

  tmat4x4(tmat2x2<T, P> const & x);
  tmat4x4(tmat3x3<T, P> const & x);
  tmat4x4(tmat2x3<T, P> const & x);
  tmat4x4(tmat3x2<T, P> const & x);
  tmat4x4(tmat2x4<T, P> const & x);
  tmat4x4(tmat4x2<T, P> const & x);
  tmat4x4(tmat3x4<T, P> const & x);
  tmat4x4(tmat4x3<T, P> const & x);



  typedef length_t length_type;
  static length_type length(){return 4;}

  col_type & operator[](length_type i);
  col_type const & operator[](length_type i) const;



  tmat4x4<T, P> & operator=(tmat4x4<T, P> const & m) = default;

  template <typename U>
  tmat4x4<T, P> & operator=(tmat4x4<U, P> const & m);
  template <typename U>
  tmat4x4<T, P> & operator+=(U s);
  template <typename U>
  tmat4x4<T, P> & operator+=(tmat4x4<U, P> const & m);
  template <typename U>
  tmat4x4<T, P> & operator-=(U s);
  template <typename U>
  tmat4x4<T, P> & operator-=(tmat4x4<U, P> const & m);
  template <typename U>
  tmat4x4<T, P> & operator*=(U s);
  template <typename U>
  tmat4x4<T, P> & operator*=(tmat4x4<U, P> const & m);
  template <typename U>
  tmat4x4<T, P> & operator/=(U s);
  template <typename U>
  tmat4x4<T, P> & operator/=(tmat4x4<U, P> const & m);



  tmat4x4<T, P> & operator++();
  tmat4x4<T, P> & operator--();
  tmat4x4<T, P> operator++(int);
  tmat4x4<T, P> operator--(int);
 };



 template <typename T, precision P>
 tmat4x4<T, P> operator+(tmat4x4<T, P> const & m);

 template <typename T, precision P>
 tmat4x4<T, P> operator-(tmat4x4<T, P> const & m);



 template <typename T, precision P>
 tmat4x4<T, P> operator+(tmat4x4<T, P> const & m, T const & s);

 template <typename T, precision P>
 tmat4x4<T, P> operator+(T const & s, tmat4x4<T, P> const & m);

 template <typename T, precision P>
 tmat4x4<T, P> operator+(tmat4x4<T, P> const & m1, tmat4x4<T, P> const & m2);

 template <typename T, precision P>
 tmat4x4<T, P> operator-(tmat4x4<T, P> const & m, T const & s);

 template <typename T, precision P>
 tmat4x4<T, P> operator-(T const & s, tmat4x4<T, P> const & m);

 template <typename T, precision P>
 tmat4x4<T, P> operator-(tmat4x4<T, P> const & m1, tmat4x4<T, P> const & m2);

 template <typename T, precision P>
 tmat4x4<T, P> operator*(tmat4x4<T, P> const & m, T const & s);

 template <typename T, precision P>
 tmat4x4<T, P> operator*(T const & s, tmat4x4<T, P> const & m);

 template <typename T, precision P>
 typename tmat4x4<T, P>::col_type operator*(tmat4x4<T, P> const & m, typename tmat4x4<T, P>::row_type const & v);

 template <typename T, precision P>
 typename tmat4x4<T, P>::row_type operator*(typename tmat4x4<T, P>::col_type const & v, tmat4x4<T, P> const & m);

 template <typename T, precision P>
 tmat2x4<T, P> operator*(tmat4x4<T, P> const & m1, tmat2x4<T, P> const & m2);

 template <typename T, precision P>
 tmat3x4<T, P> operator*(tmat4x4<T, P> const & m1, tmat3x4<T, P> const & m2);

 template <typename T, precision P>
 tmat4x4<T, P> operator*(tmat4x4<T, P> const & m1, tmat4x4<T, P> const & m2);

 template <typename T, precision P>
 tmat4x4<T, P> operator/(tmat4x4<T, P> const & m, T const & s);

 template <typename T, precision P>
 tmat4x4<T, P> operator/(T const & s, tmat4x4<T, P> const & m);

 template <typename T, precision P>
 typename tmat4x4<T, P>::col_type operator/(tmat4x4<T, P> const & m, typename tmat4x4<T, P>::row_type const & v);

 template <typename T, precision P>
 typename tmat4x4<T, P>::row_type operator/(typename tmat4x4<T, P>::col_type const & v, tmat4x4<T, P> const & m);

 template <typename T, precision P>
 tmat4x4<T, P> operator/(tmat4x4<T, P> const & m1, tmat4x4<T, P> const & m2);



 template <typename T, precision P>
 bool operator==(tmat4x4<T, P> const & m1, tmat4x4<T, P> const & m2);

 template <typename T, precision P>
 bool operator!=(tmat4x4<T, P> const & m1, tmat4x4<T, P> const & m2);
}


# 1 "../../include/glm/detail/../detail/type_mat4x4.inl" 1





namespace glm
{



  template <typename T, precision P>
  inline tmat4x4<T, P>::tmat4x4()
  {

    this->value[0] = col_type(1, 0, 0, 0);
    this->value[1] = col_type(0, 1, 0, 0);
    this->value[2] = col_type(0, 0, 1, 0);
    this->value[3] = col_type(0, 0, 0, 1);

  }
# 34 "../../include/glm/detail/../detail/type_mat4x4.inl"
 template <typename T, precision P>
 template <precision Q>
 inline tmat4x4<T, P>::tmat4x4(tmat4x4<T, Q> const & m)
 {
  this->value[0] = m[0];
  this->value[1] = m[1];
  this->value[2] = m[2];
  this->value[3] = m[3];
 }

 template <typename T, precision P>
 inline tmat4x4<T, P>::tmat4x4(ctor)
 {}

 template <typename T, precision P>
 inline tmat4x4<T, P>::tmat4x4(T const & s)
 {
  this->value[0] = col_type(s, 0, 0, 0);
  this->value[1] = col_type(0, s, 0, 0);
  this->value[2] = col_type(0, 0, s, 0);
  this->value[3] = col_type(0, 0, 0, s);
 }

 template <typename T, precision P>
 inline tmat4x4<T, P>::tmat4x4
 (
  T const & x0, T const & y0, T const & z0, T const & w0,
  T const & x1, T const & y1, T const & z1, T const & w1,
  T const & x2, T const & y2, T const & z2, T const & w2,
  T const & x3, T const & y3, T const & z3, T const & w3
 )
 {
  this->value[0] = col_type(x0, y0, z0, w0);
  this->value[1] = col_type(x1, y1, z1, w1);
  this->value[2] = col_type(x2, y2, z2, w2);
  this->value[3] = col_type(x3, y3, z3, w3);
 }

 template <typename T, precision P>
 inline tmat4x4<T, P>::tmat4x4
 (
  col_type const & v0,
  col_type const & v1,
  col_type const & v2,
  col_type const & v3
 )
 {
  this->value[0] = v0;
  this->value[1] = v1;
  this->value[2] = v2;
  this->value[3] = v3;
 }

 template <typename T, precision P>
 template <typename U, precision Q>
 inline tmat4x4<T, P>::tmat4x4
 (
  tmat4x4<U, Q> const & m
 )
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
  this->value[2] = col_type(m[2]);
  this->value[3] = col_type(m[3]);
 }



 template <typename T, precision P>
 template <
  typename X1, typename Y1, typename Z1, typename W1,
  typename X2, typename Y2, typename Z2, typename W2,
  typename X3, typename Y3, typename Z3, typename W3,
  typename X4, typename Y4, typename Z4, typename W4>
 inline tmat4x4<T, P>::tmat4x4
 (
  X1 const & x1, Y1 const & y1, Z1 const & z1, W1 const & w1,
  X2 const & x2, Y2 const & y2, Z2 const & z2, W2 const & w2,
  X3 const & x3, Y3 const & y3, Z3 const & z3, W3 const & w3,
  X4 const & x4, Y4 const & y4, Z4 const & z4, W4 const & w4
 )
 {
  static_assert(std::numeric_limits<X1>::is_iec559 || std::numeric_limits<X1>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 1st parameter type invalid.");
  static_assert(std::numeric_limits<Y1>::is_iec559 || std::numeric_limits<Y1>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 2nd parameter type invalid.");
  static_assert(std::numeric_limits<Z1>::is_iec559 || std::numeric_limits<Z1>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 3rd parameter type invalid.");
  static_assert(std::numeric_limits<W1>::is_iec559 || std::numeric_limits<W1>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 4th parameter type invalid.");

  static_assert(std::numeric_limits<X2>::is_iec559 || std::numeric_limits<X2>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 5th parameter type invalid.");
  static_assert(std::numeric_limits<Y2>::is_iec559 || std::numeric_limits<Y2>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 6th parameter type invalid.");
  static_assert(std::numeric_limits<Z2>::is_iec559 || std::numeric_limits<Z2>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 7th parameter type invalid.");
  static_assert(std::numeric_limits<W2>::is_iec559 || std::numeric_limits<W2>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 8th parameter type invalid.");

  static_assert(std::numeric_limits<X3>::is_iec559 || std::numeric_limits<X3>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 9th parameter type invalid.");
  static_assert(std::numeric_limits<Y3>::is_iec559 || std::numeric_limits<Y3>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 10th parameter type invalid.");
  static_assert(std::numeric_limits<Z3>::is_iec559 || std::numeric_limits<Z3>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 11th parameter type invalid.");
  static_assert(std::numeric_limits<W3>::is_iec559 || std::numeric_limits<W3>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 12th parameter type invalid.");

  static_assert(std::numeric_limits<X4>::is_iec559 || std::numeric_limits<X4>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 13th parameter type invalid.");
  static_assert(std::numeric_limits<Y4>::is_iec559 || std::numeric_limits<Y4>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 14th parameter type invalid.");
  static_assert(std::numeric_limits<Z4>::is_iec559 || std::numeric_limits<Z4>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 15th parameter type invalid.");
  static_assert(std::numeric_limits<W4>::is_iec559 || std::numeric_limits<W4>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 16th parameter type invalid.");

  this->value[0] = col_type(static_cast<T>(x1), value_type(y1), value_type(z1), value_type(w1));
  this->value[1] = col_type(static_cast<T>(x2), value_type(y2), value_type(z2), value_type(w2));
  this->value[2] = col_type(static_cast<T>(x3), value_type(y3), value_type(z3), value_type(w3));
  this->value[3] = col_type(static_cast<T>(x4), value_type(y4), value_type(z4), value_type(w4));
 }

 template <typename T, precision P>
 template <typename V1, typename V2, typename V3, typename V4>
 inline tmat4x4<T, P>::tmat4x4
 (
  tvec4<V1, P> const & v1,
  tvec4<V2, P> const & v2,
  tvec4<V3, P> const & v3,
  tvec4<V4, P> const & v4
 )
 {
  static_assert(std::numeric_limits<V1>::is_iec559 || std::numeric_limits<V1>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 1st parameter type invalid.");
  static_assert(std::numeric_limits<V2>::is_iec559 || std::numeric_limits<V2>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 2nd parameter type invalid.");
  static_assert(std::numeric_limits<V3>::is_iec559 || std::numeric_limits<V3>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 3rd parameter type invalid.");
  static_assert(std::numeric_limits<V4>::is_iec559 || std::numeric_limits<V4>::is_integer || 0, "*mat4x4 constructor only takes float and integer types, 4th parameter type invalid.");

  this->value[0] = col_type(v1);
  this->value[1] = col_type(v2);
  this->value[2] = col_type(v3);
  this->value[3] = col_type(v4);
 }



 template <typename T, precision P>
 inline tmat4x4<T, P>::tmat4x4(tmat2x2<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0, 0);
  this->value[1] = col_type(m[1], 0, 0);
  this->value[2] = col_type(0, 0, 1, 0);
  this->value[3] = col_type(0, 0, 0, 1);
 }

 template <typename T, precision P>
 inline tmat4x4<T, P>::tmat4x4(tmat3x3<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0);
  this->value[1] = col_type(m[1], 0);
  this->value[2] = col_type(m[2], 0);
  this->value[3] = col_type(0, 0, 0, 1);
 }

 template <typename T, precision P>
 inline tmat4x4<T, P>::tmat4x4(tmat2x3<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0);
  this->value[1] = col_type(m[1], 0);
  this->value[2] = col_type(0, 0, 1, 0);
  this->value[3] = col_type(0, 0, 0, 1);
 }

 template <typename T, precision P>
 inline tmat4x4<T, P>::tmat4x4(tmat3x2<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0, 0);
  this->value[1] = col_type(m[1], 0, 0);
  this->value[2] = col_type(m[2], 1, 0);
  this->value[3] = col_type(0, 0, 0, 1);
 }

 template <typename T, precision P>
 inline tmat4x4<T, P>::tmat4x4(tmat2x4<T, P> const & m)
 {
  this->value[0] = m[0];
  this->value[1] = m[1];
  this->value[2] = col_type(0, 0, 1, 0);
  this->value[3] = col_type(0, 0, 0, 1);
 }

 template <typename T, precision P>
 inline tmat4x4<T, P>::tmat4x4(tmat4x2<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0, 0);
  this->value[1] = col_type(m[1], 0, 0);
  this->value[2] = col_type(0, 0, 1, 0);
  this->value[3] = col_type(0, 0, 0, 1);
 }

 template <typename T, precision P>
 inline tmat4x4<T, P>::tmat4x4(tmat3x4<T, P> const & m)
 {
  this->value[0] = m[0];
  this->value[1] = m[1];
  this->value[2] = m[2];
  this->value[3] = col_type(0, 0, 0, 1);
 }

 template <typename T, precision P>
 inline tmat4x4<T, P>::tmat4x4(tmat4x3<T, P> const & m)
 {
  this->value[0] = col_type(m[0], 0);
  this->value[1] = col_type(m[1], 0);
  this->value[2] = col_type(m[2], 0);
  this->value[3] = col_type(m[3], 1);
 }



 template <typename T, precision P>
 inline typename tmat4x4<T, P>::col_type & tmat4x4<T, P>::operator[](typename tmat4x4<T, P>::length_type i)
 {
  
# 242 "../../include/glm/detail/../detail/type_mat4x4.inl" 3
 ((
# 242 "../../include/glm/detail/../detail/type_mat4x4.inl"
 i < this->length()
# 242 "../../include/glm/detail/../detail/type_mat4x4.inl" 3
 ) ? (void)0 : _assert(
# 242 "../../include/glm/detail/../detail/type_mat4x4.inl"
 "i < this->length()"
# 242 "../../include/glm/detail/../detail/type_mat4x4.inl" 3
 , "../../include/glm/detail/../detail/type_mat4x4.inl", 242))
# 242 "../../include/glm/detail/../detail/type_mat4x4.inl"
                           ;
  return this->value[i];
 }

 template <typename T, precision P>
 inline typename tmat4x4<T, P>::col_type const & tmat4x4<T, P>::operator[](typename tmat4x4<T, P>::length_type i) const
 {
  
# 249 "../../include/glm/detail/../detail/type_mat4x4.inl" 3
 ((
# 249 "../../include/glm/detail/../detail/type_mat4x4.inl"
 i < this->length()
# 249 "../../include/glm/detail/../detail/type_mat4x4.inl" 3
 ) ? (void)0 : _assert(
# 249 "../../include/glm/detail/../detail/type_mat4x4.inl"
 "i < this->length()"
# 249 "../../include/glm/detail/../detail/type_mat4x4.inl" 3
 , "../../include/glm/detail/../detail/type_mat4x4.inl", 249))
# 249 "../../include/glm/detail/../detail/type_mat4x4.inl"
                           ;
  return this->value[i];
 }
# 269 "../../include/glm/detail/../detail/type_mat4x4.inl"
 template <typename T, precision P>
 template <typename U>
 inline tmat4x4<T, P>& tmat4x4<T, P>::operator=(tmat4x4<U, P> const & m)
 {


  this->value[0] = m[0];
  this->value[1] = m[1];
  this->value[2] = m[2];
  this->value[3] = m[3];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat4x4<T, P>& tmat4x4<T, P>::operator+=(U s)
 {
  this->value[0] += s;
  this->value[1] += s;
  this->value[2] += s;
  this->value[3] += s;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat4x4<T, P>& tmat4x4<T, P>::operator+=(tmat4x4<U, P> const & m)
 {
  this->value[0] += m[0];
  this->value[1] += m[1];
  this->value[2] += m[2];
  this->value[3] += m[3];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat4x4<T, P> & tmat4x4<T, P>::operator-=(U s)
 {
  this->value[0] -= s;
  this->value[1] -= s;
  this->value[2] -= s;
  this->value[3] -= s;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat4x4<T, P> & tmat4x4<T, P>::operator-=(tmat4x4<U, P> const & m)
 {
  this->value[0] -= m[0];
  this->value[1] -= m[1];
  this->value[2] -= m[2];
  this->value[3] -= m[3];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat4x4<T, P> & tmat4x4<T, P>::operator*=(U s)
 {
  this->value[0] *= s;
  this->value[1] *= s;
  this->value[2] *= s;
  this->value[3] *= s;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat4x4<T, P> & tmat4x4<T, P>::operator*=(tmat4x4<U, P> const & m)
 {
  return (*this = *this * m);
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat4x4<T, P> & tmat4x4<T, P>::operator/=(U s)
 {
  this->value[0] /= s;
  this->value[1] /= s;
  this->value[2] /= s;
  this->value[3] /= s;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat4x4<T, P> & tmat4x4<T, P>::operator/=(tmat4x4<U, P> const & m)
 {
  return *this *= inverse(m);
 }



 template <typename T, precision P>
 inline tmat4x4<T, P> & tmat4x4<T, P>::operator++()
 {
  ++this->value[0];
  ++this->value[1];
  ++this->value[2];
  ++this->value[3];
  return *this;
 }

 template <typename T, precision P>
 inline tmat4x4<T, P> & tmat4x4<T, P>::operator--()
 {
  --this->value[0];
  --this->value[1];
  --this->value[2];
  --this->value[3];
  return *this;
 }

 template <typename T, precision P>
 inline tmat4x4<T, P> tmat4x4<T, P>::operator++(int)
 {
  tmat4x4<T, P> Result(*this);
  ++*this;
  return Result;
 }

 template <typename T, precision P>
 inline tmat4x4<T, P> tmat4x4<T, P>::operator--(int)
 {
  tmat4x4<T, P> Result(*this);
  --*this;
  return Result;
 }



 template <typename T, precision P>
 inline tmat4x4<T, P> operator+(tmat4x4<T, P> const & m)
 {
  return m;
 }

 template <typename T, precision P>
 inline tmat4x4<T, P> operator-(tmat4x4<T, P> const & m)
 {
  return tmat4x4<T, P>(
   -m[0],
   -m[1],
   -m[2],
   -m[3]);
 }



 template <typename T, precision P>
 inline tmat4x4<T, P> operator+(tmat4x4<T, P> const & m, T const & s)
 {
  return tmat4x4<T, P>(
   m[0] + s,
   m[1] + s,
   m[2] + s,
   m[3] + s);
 }

 template <typename T, precision P>
 inline tmat4x4<T, P> operator+(T const & s, tmat4x4<T, P> const & m)
 {
  return tmat4x4<T, P>(
   m[0] + s,
   m[1] + s,
   m[2] + s,
   m[3] + s);
 }

 template <typename T, precision P>
 inline tmat4x4<T, P> operator+(tmat4x4<T, P> const & m1, tmat4x4<T, P> const & m2)
 {
  return tmat4x4<T, P>(
   m1[0] + m2[0],
   m1[1] + m2[1],
   m1[2] + m2[2],
   m1[3] + m2[3]);
 }

 template <typename T, precision P>
 inline tmat4x4<T, P> operator-(tmat4x4<T, P> const & m, T const & s)
 {
  return tmat4x4<T, P>(
   m[0] - s,
   m[1] - s,
   m[2] - s,
   m[3] - s);
 }

 template <typename T, precision P>
 inline tmat4x4<T, P> operator-(T const & s, tmat4x4<T, P> const & m)
 {
  return tmat4x4<T, P>(
   s - m[0],
   s - m[1],
   s - m[2],
   s - m[3]);
 }

 template <typename T, precision P>
 inline tmat4x4<T, P> operator-(tmat4x4<T, P> const & m1, tmat4x4<T, P> const & m2)
 {
  return tmat4x4<T, P>(
   m1[0] - m2[0],
   m1[1] - m2[1],
   m1[2] - m2[2],
   m1[3] - m2[3]);
 }

 template <typename T, precision P>
 inline tmat4x4<T, P> operator*(tmat4x4<T, P> const & m, T const & s)
 {
  return tmat4x4<T, P>(
   m[0] * s,
   m[1] * s,
   m[2] * s,
   m[3] * s);
 }

 template <typename T, precision P>
 inline tmat4x4<T, P> operator*(T const & s, tmat4x4<T, P> const & m)
 {
  return tmat4x4<T, P>(
   m[0] * s,
   m[1] * s,
   m[2] * s,
   m[3] * s);
 }

 template <typename T, precision P>
 inline typename tmat4x4<T, P>::col_type operator*
 (
  tmat4x4<T, P> const & m,
  typename tmat4x4<T, P>::row_type const & v
 )
 {
# 526 "../../include/glm/detail/../detail/type_mat4x4.inl"
  typename tmat4x4<T, P>::col_type const Mov0(v[0]);
  typename tmat4x4<T, P>::col_type const Mov1(v[1]);
  typename tmat4x4<T, P>::col_type const Mul0 = m[0] * Mov0;
  typename tmat4x4<T, P>::col_type const Mul1 = m[1] * Mov1;
  typename tmat4x4<T, P>::col_type const Add0 = Mul0 + Mul1;
  typename tmat4x4<T, P>::col_type const Mov2(v[2]);
  typename tmat4x4<T, P>::col_type const Mov3(v[3]);
  typename tmat4x4<T, P>::col_type const Mul2 = m[2] * Mov2;
  typename tmat4x4<T, P>::col_type const Mul3 = m[3] * Mov3;
  typename tmat4x4<T, P>::col_type const Add1 = Mul2 + Mul3;
  typename tmat4x4<T, P>::col_type const Add2 = Add0 + Add1;
  return Add2;
# 546 "../../include/glm/detail/../detail/type_mat4x4.inl"
 }

 template <typename T, precision P>
 inline typename tmat4x4<T, P>::row_type operator*
 (
  typename tmat4x4<T, P>::col_type const & v,
  tmat4x4<T, P> const & m
 )
 {
  return typename tmat4x4<T, P>::row_type(
   m[0][0] * v[0] + m[0][1] * v[1] + m[0][2] * v[2] + m[0][3] * v[3],
   m[1][0] * v[0] + m[1][1] * v[1] + m[1][2] * v[2] + m[1][3] * v[3],
   m[2][0] * v[0] + m[2][1] * v[1] + m[2][2] * v[2] + m[2][3] * v[3],
   m[3][0] * v[0] + m[3][1] * v[1] + m[3][2] * v[2] + m[3][3] * v[3]);
 }

 template <typename T, precision P>
 inline tmat2x4<T, P> operator*(tmat4x4<T, P> const & m1, tmat2x4<T, P> const & m2)
 {
  return tmat2x4<T, P>(
   m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1] + m1[2][0] * m2[0][2] + m1[3][0] * m2[0][3],
   m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1] + m1[2][1] * m2[0][2] + m1[3][1] * m2[0][3],
   m1[0][2] * m2[0][0] + m1[1][2] * m2[0][1] + m1[2][2] * m2[0][2] + m1[3][2] * m2[0][3],
   m1[0][3] * m2[0][0] + m1[1][3] * m2[0][1] + m1[2][3] * m2[0][2] + m1[3][3] * m2[0][3],
   m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1] + m1[2][0] * m2[1][2] + m1[3][0] * m2[1][3],
   m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1] + m1[2][1] * m2[1][2] + m1[3][1] * m2[1][3],
   m1[0][2] * m2[1][0] + m1[1][2] * m2[1][1] + m1[2][2] * m2[1][2] + m1[3][2] * m2[1][3],
   m1[0][3] * m2[1][0] + m1[1][3] * m2[1][1] + m1[2][3] * m2[1][2] + m1[3][3] * m2[1][3]);
 }

 template <typename T, precision P>
 inline tmat3x4<T, P> operator*(tmat4x4<T, P> const & m1, tmat3x4<T, P> const & m2)
 {
  return tmat3x4<T, P>(
   m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1] + m1[2][0] * m2[0][2] + m1[3][0] * m2[0][3],
   m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1] + m1[2][1] * m2[0][2] + m1[3][1] * m2[0][3],
   m1[0][2] * m2[0][0] + m1[1][2] * m2[0][1] + m1[2][2] * m2[0][2] + m1[3][2] * m2[0][3],
   m1[0][3] * m2[0][0] + m1[1][3] * m2[0][1] + m1[2][3] * m2[0][2] + m1[3][3] * m2[0][3],
   m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1] + m1[2][0] * m2[1][2] + m1[3][0] * m2[1][3],
   m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1] + m1[2][1] * m2[1][2] + m1[3][1] * m2[1][3],
   m1[0][2] * m2[1][0] + m1[1][2] * m2[1][1] + m1[2][2] * m2[1][2] + m1[3][2] * m2[1][3],
   m1[0][3] * m2[1][0] + m1[1][3] * m2[1][1] + m1[2][3] * m2[1][2] + m1[3][3] * m2[1][3],
   m1[0][0] * m2[2][0] + m1[1][0] * m2[2][1] + m1[2][0] * m2[2][2] + m1[3][0] * m2[2][3],
   m1[0][1] * m2[2][0] + m1[1][1] * m2[2][1] + m1[2][1] * m2[2][2] + m1[3][1] * m2[2][3],
   m1[0][2] * m2[2][0] + m1[1][2] * m2[2][1] + m1[2][2] * m2[2][2] + m1[3][2] * m2[2][3],
   m1[0][3] * m2[2][0] + m1[1][3] * m2[2][1] + m1[2][3] * m2[2][2] + m1[3][3] * m2[2][3]);
 }

 template <typename T, precision P>
 inline tmat4x4<T, P> operator*(tmat4x4<T, P> const & m1, tmat4x4<T, P> const & m2)
 {
  typename tmat4x4<T, P>::col_type const SrcA0 = m1[0];
  typename tmat4x4<T, P>::col_type const SrcA1 = m1[1];
  typename tmat4x4<T, P>::col_type const SrcA2 = m1[2];
  typename tmat4x4<T, P>::col_type const SrcA3 = m1[3];

  typename tmat4x4<T, P>::col_type const SrcB0 = m2[0];
  typename tmat4x4<T, P>::col_type const SrcB1 = m2[1];
  typename tmat4x4<T, P>::col_type const SrcB2 = m2[2];
  typename tmat4x4<T, P>::col_type const SrcB3 = m2[3];

  tmat4x4<T, P> Result(uninitialize);
  Result[0] = SrcA0 * SrcB0[0] + SrcA1 * SrcB0[1] + SrcA2 * SrcB0[2] + SrcA3 * SrcB0[3];
  Result[1] = SrcA0 * SrcB1[0] + SrcA1 * SrcB1[1] + SrcA2 * SrcB1[2] + SrcA3 * SrcB1[3];
  Result[2] = SrcA0 * SrcB2[0] + SrcA1 * SrcB2[1] + SrcA2 * SrcB2[2] + SrcA3 * SrcB2[3];
  Result[3] = SrcA0 * SrcB3[0] + SrcA1 * SrcB3[1] + SrcA2 * SrcB3[2] + SrcA3 * SrcB3[3];
  return Result;
 }

 template <typename T, precision P>
 inline tmat4x4<T, P> operator/(tmat4x4<T, P> const & m, T const & s)
 {
  return tmat4x4<T, P>(
   m[0] / s,
   m[1] / s,
   m[2] / s,
   m[3] / s);
 }

 template <typename T, precision P>
 inline tmat4x4<T, P> operator/(T const & s, tmat4x4<T, P> const & m)
 {
  return tmat4x4<T, P>(
   s / m[0],
   s / m[1],
   s / m[2],
   s / m[3]);
 }

 template <typename T, precision P>
 inline typename tmat4x4<T, P>::col_type operator/(tmat4x4<T, P> const & m, typename tmat4x4<T, P>::row_type const & v)
 {
  return inverse(m) * v;
 }

 template <typename T, precision P>
 inline typename tmat4x4<T, P>::row_type operator/(typename tmat4x4<T, P>::col_type const & v, tmat4x4<T, P> const & m)
 {
  return v * inverse(m);
 }

 template <typename T, precision P>
 inline tmat4x4<T, P> operator/(tmat4x4<T, P> const & m1, tmat4x4<T, P> const & m2)
 {
  tmat4x4<T, P> m1_copy(m1);
  return m1_copy /= m2;
 }



 template <typename T, precision P>
 inline bool operator==(tmat4x4<T, P> const & m1, tmat4x4<T, P> const & m2)
 {
  return (m1[0] == m2[0]) && (m1[1] == m2[1]) && (m1[2] == m2[2]) && (m1[3] == m2[3]);
 }

 template <typename T, precision P>
 inline bool operator!=(tmat4x4<T, P> const & m1, tmat4x4<T, P> const & m2)
 {
  return (m1[0] != m2[0]) || (m1[1] != m2[1]) || (m1[2] != m2[2]) || (m1[3] != m2[3]);
 }
}


# 1 "../../include/glm/detail/../detail/type_mat4x4_simd.inl" 1



namespace glm
{

}
# 671 "../../include/glm/detail/../detail/type_mat4x4.inl" 2
# 195 "../../include/glm/detail/../detail/type_mat4x4.hpp" 2
# 7 "../../include/glm/detail/../mat4x4.hpp" 2

namespace glm
{





 typedef tmat4x4<float, lowp> lowp_mat4;






 typedef tmat4x4<float, mediump> mediump_mat4;






 typedef tmat4x4<float, highp> highp_mat4;






 typedef tmat4x4<float, lowp> lowp_mat4x4;






 typedef tmat4x4<float, mediump> mediump_mat4x4;






 typedef tmat4x4<float, highp> highp_mat4x4;

}
# 33 "../../include/glm/detail/func_matrix.hpp" 2

namespace glm{
namespace detail
{
 template <typename T, precision P>
 struct outerProduct_trait<T, P, tvec2, tvec2>
 {
  typedef tmat2x2<T, P> type;
 };

 template <typename T, precision P>
 struct outerProduct_trait<T, P, tvec2, tvec3>
 {
  typedef tmat3x2<T, P> type;
 };

 template <typename T, precision P>
 struct outerProduct_trait<T, P, tvec2, tvec4>
 {
  typedef tmat4x2<T, P> type;
 };

 template <typename T, precision P>
 struct outerProduct_trait<T, P, tvec3, tvec2>
 {
  typedef tmat2x3<T, P> type;
 };

 template <typename T, precision P>
 struct outerProduct_trait<T, P, tvec3, tvec3>
 {
  typedef tmat3x3<T, P> type;
 };

 template <typename T, precision P>
 struct outerProduct_trait<T, P, tvec3, tvec4>
 {
  typedef tmat4x3<T, P> type;
 };

 template <typename T, precision P>
 struct outerProduct_trait<T, P, tvec4, tvec2>
 {
  typedef tmat2x4<T, P> type;
 };

 template <typename T, precision P>
 struct outerProduct_trait<T, P, tvec4, tvec3>
 {
  typedef tmat3x4<T, P> type;
 };

 template <typename T, precision P>
 struct outerProduct_trait<T, P, tvec4, tvec4>
 {
  typedef tmat4x4<T, P> type;
 };

}
# 103 "../../include/glm/detail/func_matrix.hpp"
 template <typename T, precision P, template <typename, precision> class matType>
 matType<T, P> matrixCompMult(matType<T, P> const & x, matType<T, P> const & y);
# 114 "../../include/glm/detail/func_matrix.hpp"
 template <typename T, precision P, template <typename, precision> class vecTypeA, template <typename, precision> class vecTypeB>
 typename detail::outerProduct_trait<T, P, vecTypeA, vecTypeB>::type outerProduct(vecTypeA<T, P> const & c, vecTypeB<T, P> const & r);
# 134 "../../include/glm/detail/func_matrix.hpp"
 template <typename T, precision P, template <typename, precision> class matType>
 T determinant(matType<T, P> const & m);







 template <typename T, precision P, template <typename, precision> class matType>
 matType<T, P> inverse(matType<T, P> const & m);


}

# 1 "../../include/glm/detail/func_matrix.inl" 1



# 1 "../../include/glm/detail/../geometric.hpp" 1



       

# 1 "../../include/glm/detail/../detail/func_geometric.hpp" 1
# 11 "../../include/glm/detail/../detail/func_geometric.hpp"
       



namespace glm
{
# 26 "../../include/glm/detail/../detail/func_geometric.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 T length(
  vecType<T, P> const & x);







 template <typename T, precision P, template <typename, precision> class vecType>
 T distance(
  vecType<T, P> const & p0,
  vecType<T, P> const & p1);







 template <typename T, precision P, template <typename, precision> class vecType>
 T dot(
  vecType<T, P> const & x,
  vecType<T, P> const & y);







 template <typename T, precision P>
 tvec3<T, P> cross(
  tvec3<T, P> const & x,
  tvec3<T, P> const & y);






 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> normalize(
  vecType<T, P> const & x);







 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> faceforward(
  vecType<T, P> const & N,
  vecType<T, P> const & I,
  vecType<T, P> const & Nref);
# 91 "../../include/glm/detail/../detail/func_geometric.hpp"
 template <typename genType>
 genType reflect(
  genType const & I,
  genType const & N);
# 104 "../../include/glm/detail/../detail/func_geometric.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> refract(
  vecType<T, P> const & I,
  vecType<T, P> const & N,
  T eta);


}

# 1 "../../include/glm/detail/../detail/func_geometric.inl" 1



# 1 "../../include/glm/detail/../detail/func_exponential.hpp" 1
# 11 "../../include/glm/detail/../detail/func_exponential.hpp"
       

# 1 "../../include/glm/detail/../detail/type_vec1.hpp" 1



       
# 17 "../../include/glm/detail/../detail/type_vec1.hpp"
namespace glm
{
 template <typename T, precision P = defaultp>
 struct tvec1
 {


  typedef T value_type;
  typedef tvec1<T, P> type;
  typedef tvec1<bool, P> bool_type;
# 35 "../../include/glm/detail/../detail/type_vec1.hpp"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"







   union
   {
    T x;
    T r;
    T s;
# 61 "../../include/glm/detail/../detail/type_vec1.hpp"
   };





#pragma GCC diagnostic pop
# 80 "../../include/glm/detail/../detail/type_vec1.hpp"
  typedef length_t length_type;
  static length_type length(){return 1;}

  T & operator[](length_type i);
  T const & operator[](length_type i) const;



  constexpr tvec1() ;
  constexpr tvec1(tvec1<T, P> const & v) = default;
  template <precision Q>
  constexpr tvec1(tvec1<T, Q> const & v);



  constexpr explicit tvec1(ctor);
  constexpr explicit tvec1(T scalar);




  template <typename U, precision Q>
  constexpr tvec1(tvec2<U, Q> const & v);

  template <typename U, precision Q>
  constexpr tvec1(tvec3<U, Q> const & v);

  template <typename U, precision Q>
  constexpr tvec1(tvec4<U, Q> const & v);


  template <typename U, precision Q>
  constexpr tvec1(tvec1<U, Q> const & v);
# 126 "../../include/glm/detail/../detail/type_vec1.hpp"
  tvec1<T, P> & operator=(tvec1<T, P> const & v) = default;

  template <typename U>
  tvec1<T, P> & operator=(tvec1<U, P> const & v);
  template <typename U>
  tvec1<T, P> & operator+=(U scalar);
  template <typename U>
  tvec1<T, P> & operator+=(tvec1<U, P> const & v);
  template <typename U>
  tvec1<T, P> & operator-=(U scalar);
  template <typename U>
  tvec1<T, P> & operator-=(tvec1<U, P> const & v);
  template <typename U>
  tvec1<T, P> & operator*=(U scalar);
  template <typename U>
  tvec1<T, P> & operator*=(tvec1<U, P> const & v);
  template <typename U>
  tvec1<T, P> & operator/=(U scalar);
  template <typename U>
  tvec1<T, P> & operator/=(tvec1<U, P> const & v);



  tvec1<T, P> & operator++();
  tvec1<T, P> & operator--();
  tvec1<T, P> operator++(int);
  tvec1<T, P> operator--(int);



  template <typename U>
  tvec1<T, P> & operator%=(U scalar);
  template <typename U>
  tvec1<T, P> & operator%=(tvec1<U, P> const & v);
  template <typename U>
  tvec1<T, P> & operator&=(U scalar);
  template <typename U>
  tvec1<T, P> & operator&=(tvec1<U, P> const & v);
  template <typename U>
  tvec1<T, P> & operator|=(U scalar);
  template <typename U>
  tvec1<T, P> & operator|=(tvec1<U, P> const & v);
  template <typename U>
  tvec1<T, P> & operator^=(U scalar);
  template <typename U>
  tvec1<T, P> & operator^=(tvec1<U, P> const & v);
  template <typename U>
  tvec1<T, P> & operator<<=(U scalar);
  template <typename U>
  tvec1<T, P> & operator<<=(tvec1<U, P> const & v);
  template <typename U>
  tvec1<T, P> & operator>>=(U scalar);
  template <typename U>
  tvec1<T, P> & operator>>=(tvec1<U, P> const & v);
 };



 template <typename T, precision P>
 tvec1<T, P> operator+(tvec1<T, P> const & v);

 template <typename T, precision P>
 tvec1<T, P> operator-(tvec1<T, P> const & v);



 template <typename T, precision P>
 tvec1<T, P> operator+(tvec1<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec1<T, P> operator+(T scalar, tvec1<T, P> const & v);

 template <typename T, precision P>
 tvec1<T, P> operator+(tvec1<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec1<T, P> operator-(tvec1<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec1<T, P> operator-(T scalar, tvec1<T, P> const & v);

 template <typename T, precision P>
 tvec1<T, P> operator- (tvec1<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec1<T, P> operator*(tvec1<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec1<T, P> operator*(T scalar, tvec1<T, P> const & v);

 template <typename T, precision P>
 tvec1<T, P> operator*(tvec1<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec1<T, P> operator/(tvec1<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec1<T, P> operator/(T scalar, tvec1<T, P> const & v);

 template <typename T, precision P>
 tvec1<T, P> operator/(tvec1<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec1<T, P> operator%(tvec1<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec1<T, P> operator%(T scalar, tvec1<T, P> const & v);

 template <typename T, precision P>
 tvec1<T, P> operator%(tvec1<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec1<T, P> operator&(tvec1<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec1<T, P> operator&(T scalar, tvec1<T, P> const & v);

 template <typename T, precision P>
 tvec1<T, P> operator&(tvec1<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec1<T, P> operator|(tvec1<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec1<T, P> operator|(T scalar, tvec1<T, P> const & v);

 template <typename T, precision P>
 tvec1<T, P> operator|(tvec1<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec1<T, P> operator^(tvec1<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec1<T, P> operator^(T scalar, tvec1<T, P> const & v);

 template <typename T, precision P>
 tvec1<T, P> operator^(tvec1<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec1<T, P> operator<<(tvec1<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec1<T, P> operator<<(T scalar, tvec1<T, P> const & v);

 template <typename T, precision P>
 tvec1<T, P> operator<<(tvec1<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec1<T, P> operator>>(tvec1<T, P> const & v, T scalar);

 template <typename T, precision P>
 tvec1<T, P> operator>>(T scalar, tvec1<T, P> const & v);

 template <typename T, precision P>
 tvec1<T, P> operator>>(tvec1<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 tvec1<T, P> operator~(tvec1<T, P> const & v);



 template <typename T, precision P>
 bool operator==(tvec1<T, P> const & v1, tvec1<T, P> const & v2);

 template <typename T, precision P>
 bool operator!=(tvec1<T, P> const & v1, tvec1<T, P> const & v2);

 template <precision P>
 tvec1<bool, P> operator&&(tvec1<bool, P> const & v1, tvec1<bool, P> const & v2);

 template <precision P>
 tvec1<bool, P> operator||(tvec1<bool, P> const & v1, tvec1<bool, P> const & v2);
}


# 1 "../../include/glm/detail/../detail/type_vec1.inl" 1



namespace glm
{



  template <typename T, precision P>
  inline constexpr tvec1<T, P>::tvec1()

    : x(0)

  {}
# 24 "../../include/glm/detail/../detail/type_vec1.inl"
 template <typename T, precision P>
 template <precision Q>
 inline constexpr tvec1<T, P>::tvec1(tvec1<T, Q> const & v)
  : x(v.x)
 {}



 template <typename T, precision P>
 inline constexpr tvec1<T, P>::tvec1(ctor)
 {}

 template <typename T, precision P>
 inline constexpr tvec1<T, P>::tvec1(T scalar)
  : x(scalar)
 {}



 template <typename T, precision P>
 template <typename U, precision Q>
 inline constexpr tvec1<T, P>::tvec1(tvec1<U, Q> const & v)
  : x(static_cast<T>(v.x))
 {}

 template <typename T, precision P>
 template <typename U, precision Q>
 inline constexpr tvec1<T, P>::tvec1(tvec2<U, Q> const & v)
  : x(static_cast<T>(v.x))
 {}

 template <typename T, precision P>
 template <typename U, precision Q>
 inline constexpr tvec1<T, P>::tvec1(tvec3<U, Q> const & v)
  : x(static_cast<T>(v.x))
 {}

 template <typename T, precision P>
 template <typename U, precision Q>
 inline constexpr tvec1<T, P>::tvec1(tvec4<U, Q> const & v)
  : x(static_cast<T>(v.x))
 {}



 template <typename T, precision P>
 inline T & tvec1<T, P>::operator[](typename tvec1<T, P>::length_type i)
 {
  
# 72 "../../include/glm/detail/../detail/type_vec1.inl" 3
 ((
# 72 "../../include/glm/detail/../detail/type_vec1.inl"
 i >= 0 && i < this->length()
# 72 "../../include/glm/detail/../detail/type_vec1.inl" 3
 ) ? (void)0 : _assert(
# 72 "../../include/glm/detail/../detail/type_vec1.inl"
 "i >= 0 && i < this->length()"
# 72 "../../include/glm/detail/../detail/type_vec1.inl" 3
 , "../../include/glm/detail/../detail/type_vec1.inl", 72))
# 72 "../../include/glm/detail/../detail/type_vec1.inl"
                                     ;
  return (&x)[i];
 }

 template <typename T, precision P>
 inline T const & tvec1<T, P>::operator[](typename tvec1<T, P>::length_type i) const
 {
  
# 79 "../../include/glm/detail/../detail/type_vec1.inl" 3
 ((
# 79 "../../include/glm/detail/../detail/type_vec1.inl"
 i >= 0 && i < this->length()
# 79 "../../include/glm/detail/../detail/type_vec1.inl" 3
 ) ? (void)0 : _assert(
# 79 "../../include/glm/detail/../detail/type_vec1.inl"
 "i >= 0 && i < this->length()"
# 79 "../../include/glm/detail/../detail/type_vec1.inl" 3
 , "../../include/glm/detail/../detail/type_vec1.inl", 79))
# 79 "../../include/glm/detail/../detail/type_vec1.inl"
                                     ;
  return (&x)[i];
 }
# 94 "../../include/glm/detail/../detail/type_vec1.inl"
 template <typename T, precision P>
 template <typename U>
 inline tvec1<T, P> & tvec1<T, P>::operator=(tvec1<U, P> const & v)
 {
  this->x = static_cast<T>(v.x);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec1<T, P> & tvec1<T, P>::operator+=(U scalar)
 {
  this->x += static_cast<T>(scalar);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec1<T, P> & tvec1<T, P>::operator+=(tvec1<U, P> const & v)
 {
  this->x += static_cast<T>(v.x);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec1<T, P> & tvec1<T, P>::operator-=(U scalar)
 {
  this->x -= static_cast<T>(scalar);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec1<T, P> & tvec1<T, P>::operator-=(tvec1<U, P> const & v)
 {
  this->x -= static_cast<T>(v.x);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec1<T, P> & tvec1<T, P>::operator*=(U scalar)
 {
  this->x *= static_cast<T>(scalar);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec1<T, P> & tvec1<T, P>::operator*=(tvec1<U, P> const & v)
 {
  this->x *= static_cast<T>(v.x);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec1<T, P> & tvec1<T, P>::operator/=(U scalar)
 {
  this->x /= static_cast<T>(scalar);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec1<T, P> & tvec1<T, P>::operator/=(tvec1<U, P> const & v)
 {
  this->x /= static_cast<T>(v.x);
  return *this;
 }



 template <typename T, precision P>
 inline tvec1<T, P> & tvec1<T, P>::operator++()
 {
  ++this->x;
  return *this;
 }

 template <typename T, precision P>
 inline tvec1<T, P> & tvec1<T, P>::operator--()
 {
  --this->x;
  return *this;
 }

 template <typename T, precision P>
 inline tvec1<T, P> tvec1<T, P>::operator++(int)
 {
  tvec1<T, P> Result(*this);
  ++*this;
  return Result;
 }

 template <typename T, precision P>
 inline tvec1<T, P> tvec1<T, P>::operator--(int)
 {
  tvec1<T, P> Result(*this);
  --*this;
  return Result;
 }



 template <typename T, precision P>
 template <typename U>
 inline tvec1<T, P> & tvec1<T, P>::operator%=(U scalar)
 {
  this->x %= static_cast<T>(scalar);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec1<T, P> & tvec1<T, P>::operator%=(tvec1<U, P> const & v)
 {
  this->x %= static_cast<T>(v.x);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec1<T, P> & tvec1<T, P>::operator&=(U scalar)
 {
  this->x &= static_cast<T>(scalar);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec1<T, P> & tvec1<T, P>::operator&=(tvec1<U, P> const & v)
 {
  this->x &= static_cast<T>(v.x);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec1<T, P> & tvec1<T, P>::operator|=(U scalar)
 {
  this->x |= static_cast<T>(scalar);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec1<T, P> & tvec1<T, P>::operator|=(tvec1<U, P> const & v)
 {
  this->x |= U(v.x);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec1<T, P> & tvec1<T, P>::operator^=(U scalar)
 {
  this->x ^= static_cast<T>(scalar);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec1<T, P> & tvec1<T, P>::operator^=(tvec1<U, P> const & v)
 {
  this->x ^= static_cast<T>(v.x);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec1<T, P> & tvec1<T, P>::operator<<=(U scalar)
 {
  this->x <<= static_cast<T>(scalar);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec1<T, P> & tvec1<T, P>::operator<<=(tvec1<U, P> const & v)
 {
  this->x <<= static_cast<T>(v.x);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec1<T, P> & tvec1<T, P>::operator>>=(U scalar)
 {
  this->x >>= static_cast<T>(scalar);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tvec1<T, P> & tvec1<T, P>::operator>>=(tvec1<U, P> const & v)
 {
  this->x >>= static_cast<T>(v.x);
  return *this;
 }



 template <typename T, precision P>
 inline tvec1<T, P> operator+(tvec1<T, P> const & v)
 {
  return v;
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator-(tvec1<T, P> const & v)
 {
  return tvec1<T, P>(
   -v.x);
 }



 template <typename T, precision P>
 inline tvec1<T, P> operator+(tvec1<T, P> const & v, T scalar)
 {
  return tvec1<T, P>(
   v.x + scalar);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator+(T scalar, tvec1<T, P> const & v)
 {
  return tvec1<T, P>(
   scalar + v.x);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator+(tvec1<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec1<T, P>(
   v1.x + v2.x);
 }


 template <typename T, precision P>
 inline tvec1<T, P> operator-(tvec1<T, P> const & v, T scalar)
 {
  return tvec1<T, P>(
   v.x - scalar);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator-(T scalar, tvec1<T, P> const & v)
 {
  return tvec1<T, P>(
   scalar - v.x);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator-(tvec1<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec1<T, P>(
   v1.x - v2.x);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator*(tvec1<T, P> const & v, T scalar)
 {
  return tvec1<T, P>(
   v.x * scalar);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator*(T scalar, tvec1<T, P> const & v)
 {
  return tvec1<T, P>(
   scalar * v.x);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator*(tvec1<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec1<T, P>(
   v1.x * v2.x);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator/(tvec1<T, P> const & v, T scalar)
 {
  return tvec1<T, P>(
   v.x / scalar);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator/(T scalar, tvec1<T, P> const & v)
 {
  return tvec1<T, P>(
   scalar / v.x);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator/(tvec1<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec1<T, P>(
   v1.x / v2.x);
 }



 template <typename T, precision P>
 inline tvec1<T, P> operator%(tvec1<T, P> const & v, T scalar)
 {
  return tvec1<T, P>(
   v.x % scalar);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator%(T scalar, tvec1<T, P> const & v)
 {
  return tvec1<T, P>(
   scalar % v.x);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator%(tvec1<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec1<T, P>(
   v1.x % v2.x);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator&(tvec1<T, P> const & v, T scalar)
 {
  return tvec1<T, P>(
   v.x & scalar);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator&(T scalar, tvec1<T, P> const & v)
 {
  return tvec1<T, P>(
   scalar & v.x);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator&(tvec1<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec1<T, P>(
   v1.x & v2.x);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator|(tvec1<T, P> const & v, T scalar)
 {
  return tvec1<T, P>(
   v.x | scalar);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator|(T scalar, tvec1<T, P> const & v)
 {
  return tvec1<T, P>(
   scalar | v.x);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator|(tvec1<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec1<T, P>(
   v1.x | v2.x);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator^(tvec1<T, P> const & v, T scalar)
 {
  return tvec1<T, P>(
   v.x ^ scalar);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator^(T scalar, tvec1<T, P> const & v)
 {
  return tvec1<T, P>(
   scalar ^ v.x);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator^(tvec1<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec1<T, P>(
   v1.x ^ v2.x);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator<<(tvec1<T, P> const & v, T scalar)
 {
  return tvec1<T, P>(
   v.x << scalar);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator<<(T scalar, tvec1<T, P> const & v)
 {
  return tvec1<T, P>(
   scalar << v.x);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator<<(tvec1<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec1<T, P>(
   v1.x << v2.x);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator>>(tvec1<T, P> const & v, T scalar)
 {
  return tvec1<T, P>(
   v.x >> scalar);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator>>(T scalar, tvec1<T, P> const & v)
 {
  return tvec1<T, P>(
   scalar >> v.x);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator>>(tvec1<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return tvec1<T, P>(
   v1.x >> v2.x);
 }

 template <typename T, precision P>
 inline tvec1<T, P> operator~(tvec1<T, P> const & v)
 {
  return tvec1<T, P>(
   ~v.x);
 }



 template <typename T, precision P>
 inline bool operator==(tvec1<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return (v1.x == v2.x);
 }

 template <typename T, precision P>
 inline bool operator!=(tvec1<T, P> const & v1, tvec1<T, P> const & v2)
 {
  return (v1.x != v2.x);
 }

 template <precision P>
 inline tvec1<bool, P> operator&&(tvec1<bool, P> const & v1, tvec1<bool, P> const & v2)
 {
  return tvec1<bool, P>(v1.x && v2.x);
 }

 template <precision P>
 inline tvec1<bool, P> operator||(tvec1<bool, P> const & v1, tvec1<bool, P> const & v2)
 {
  return tvec1<bool, P>(v1.x || v2.x);
 }
}
# 302 "../../include/glm/detail/../detail/type_vec1.hpp" 2
# 14 "../../include/glm/detail/../detail/func_exponential.hpp" 2



# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 3
# 18 "../../include/glm/detail/../detail/func_exponential.hpp" 2

namespace glm
{
# 32 "../../include/glm/detail/../detail/func_exponential.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> pow(vecType<T, P> const & base, vecType<T, P> const & exponent);
# 42 "../../include/glm/detail/../detail/func_exponential.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> exp(vecType<T, P> const & v);
# 54 "../../include/glm/detail/../detail/func_exponential.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> log(vecType<T, P> const & v);
# 64 "../../include/glm/detail/../detail/func_exponential.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> exp2(vecType<T, P> const & v);
# 75 "../../include/glm/detail/../detail/func_exponential.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> log2(vecType<T, P> const & v);
# 87 "../../include/glm/detail/../detail/func_exponential.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> sqrt(vecType<T, P> const & v);
# 97 "../../include/glm/detail/../detail/func_exponential.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> inversesqrt(vecType<T, P> const & v);


}

# 1 "../../include/glm/detail/../detail/func_exponential.inl" 1



# 1 "../../include/glm/detail/../detail/func_vector_relational.hpp" 1
# 16 "../../include/glm/detail/../detail/func_vector_relational.hpp"
       




namespace glm
{
# 32 "../../include/glm/detail/../detail/func_vector_relational.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<bool, P> lessThan(vecType<T, P> const & x, vecType<T, P> const & y);







 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<bool, P> lessThanEqual(vecType<T, P> const & x, vecType<T, P> const & y);







 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<bool, P> greaterThan(vecType<T, P> const & x, vecType<T, P> const & y);







 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<bool, P> greaterThanEqual(vecType<T, P> const & x, vecType<T, P> const & y);







 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<bool, P> equal(vecType<T, P> const & x, vecType<T, P> const & y);







 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<bool, P> notEqual(vecType<T, P> const & x, vecType<T, P> const & y);







 template <precision P, template <typename, precision> class vecType>
 bool any(vecType<bool, P> const & v);







 template <precision P, template <typename, precision> class vecType>
 bool all(vecType<bool, P> const & v);
# 105 "../../include/glm/detail/../detail/func_vector_relational.hpp"
 template <precision P, template <typename, precision> class vecType>
 vecType<bool, P> not_(vecType<bool, P> const & v);


}

# 1 "../../include/glm/detail/../detail/func_vector_relational.inl" 1





namespace glm
{
 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<bool, P> lessThan(vecType<T, P> const & x, vecType<T, P> const & y)
 {
  
# 11 "../../include/glm/detail/../detail/func_vector_relational.inl" 3
 ((
# 11 "../../include/glm/detail/../detail/func_vector_relational.inl"
 x.length() == y.length()
# 11 "../../include/glm/detail/../detail/func_vector_relational.inl" 3
 ) ? (void)0 : _assert(
# 11 "../../include/glm/detail/../detail/func_vector_relational.inl"
 "x.length() == y.length()"
# 11 "../../include/glm/detail/../detail/func_vector_relational.inl" 3
 , "../../include/glm/detail/../detail/func_vector_relational.inl", 11))
# 11 "../../include/glm/detail/../detail/func_vector_relational.inl"
                                 ;

  vecType<bool, P> Result(uninitialize);
  for(length_t i = 0; i < x.length(); ++i)
   Result[i] = x[i] < y[i];

  return Result;
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<bool, P> lessThanEqual(vecType<T, P> const & x, vecType<T, P> const & y)
 {
  
# 23 "../../include/glm/detail/../detail/func_vector_relational.inl" 3
 ((
# 23 "../../include/glm/detail/../detail/func_vector_relational.inl"
 x.length() == y.length()
# 23 "../../include/glm/detail/../detail/func_vector_relational.inl" 3
 ) ? (void)0 : _assert(
# 23 "../../include/glm/detail/../detail/func_vector_relational.inl"
 "x.length() == y.length()"
# 23 "../../include/glm/detail/../detail/func_vector_relational.inl" 3
 , "../../include/glm/detail/../detail/func_vector_relational.inl", 23))
# 23 "../../include/glm/detail/../detail/func_vector_relational.inl"
                                 ;

  vecType<bool, P> Result(uninitialize);
  for(length_t i = 0; i < x.length(); ++i)
   Result[i] = x[i] <= y[i];
  return Result;
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<bool, P> greaterThan(vecType<T, P> const & x, vecType<T, P> const & y)
 {
  
# 34 "../../include/glm/detail/../detail/func_vector_relational.inl" 3
 ((
# 34 "../../include/glm/detail/../detail/func_vector_relational.inl"
 x.length() == y.length()
# 34 "../../include/glm/detail/../detail/func_vector_relational.inl" 3
 ) ? (void)0 : _assert(
# 34 "../../include/glm/detail/../detail/func_vector_relational.inl"
 "x.length() == y.length()"
# 34 "../../include/glm/detail/../detail/func_vector_relational.inl" 3
 , "../../include/glm/detail/../detail/func_vector_relational.inl", 34))
# 34 "../../include/glm/detail/../detail/func_vector_relational.inl"
                                 ;

  vecType<bool, P> Result(uninitialize);
  for(length_t i = 0; i < x.length(); ++i)
   Result[i] = x[i] > y[i];
  return Result;
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<bool, P> greaterThanEqual(vecType<T, P> const & x, vecType<T, P> const & y)
 {
  
# 45 "../../include/glm/detail/../detail/func_vector_relational.inl" 3
 ((
# 45 "../../include/glm/detail/../detail/func_vector_relational.inl"
 x.length() == y.length()
# 45 "../../include/glm/detail/../detail/func_vector_relational.inl" 3
 ) ? (void)0 : _assert(
# 45 "../../include/glm/detail/../detail/func_vector_relational.inl"
 "x.length() == y.length()"
# 45 "../../include/glm/detail/../detail/func_vector_relational.inl" 3
 , "../../include/glm/detail/../detail/func_vector_relational.inl", 45))
# 45 "../../include/glm/detail/../detail/func_vector_relational.inl"
                                 ;

  vecType<bool, P> Result(uninitialize);
  for(length_t i = 0; i < x.length(); ++i)
   Result[i] = x[i] >= y[i];
  return Result;
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<bool, P> equal(vecType<T, P> const & x, vecType<T, P> const & y)
 {
  
# 56 "../../include/glm/detail/../detail/func_vector_relational.inl" 3
 ((
# 56 "../../include/glm/detail/../detail/func_vector_relational.inl"
 x.length() == y.length()
# 56 "../../include/glm/detail/../detail/func_vector_relational.inl" 3
 ) ? (void)0 : _assert(
# 56 "../../include/glm/detail/../detail/func_vector_relational.inl"
 "x.length() == y.length()"
# 56 "../../include/glm/detail/../detail/func_vector_relational.inl" 3
 , "../../include/glm/detail/../detail/func_vector_relational.inl", 56))
# 56 "../../include/glm/detail/../detail/func_vector_relational.inl"
                                 ;

  vecType<bool, P> Result(uninitialize);
  for(length_t i = 0; i < x.length(); ++i)
   Result[i] = x[i] == y[i];
  return Result;
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<bool, P> notEqual(vecType<T, P> const & x, vecType<T, P> const & y)
 {
  
# 67 "../../include/glm/detail/../detail/func_vector_relational.inl" 3
 ((
# 67 "../../include/glm/detail/../detail/func_vector_relational.inl"
 x.length() == y.length()
# 67 "../../include/glm/detail/../detail/func_vector_relational.inl" 3
 ) ? (void)0 : _assert(
# 67 "../../include/glm/detail/../detail/func_vector_relational.inl"
 "x.length() == y.length()"
# 67 "../../include/glm/detail/../detail/func_vector_relational.inl" 3
 , "../../include/glm/detail/../detail/func_vector_relational.inl", 67))
# 67 "../../include/glm/detail/../detail/func_vector_relational.inl"
                                 ;

  vecType<bool, P> Result(uninitialize);
  for(length_t i = 0; i < x.length(); ++i)
   Result[i] = x[i] != y[i];
  return Result;
 }

 template <precision P, template <typename, precision> class vecType>
 inline bool any(vecType<bool, P> const & v)
 {
  bool Result = false;
  for(length_t i = 0; i < v.length(); ++i)
   Result = Result || v[i];
  return Result;
 }

 template <precision P, template <typename, precision> class vecType>
 inline bool all(vecType<bool, P> const & v)
 {
  bool Result = true;
  for(length_t i = 0; i < v.length(); ++i)
   Result = Result && v[i];
  return Result;
 }

 template <precision P, template <typename, precision> class vecType>
 inline vecType<bool, P> not_(vecType<bool, P> const & v)
 {
  vecType<bool, P> Result(uninitialize);
  for(length_t i = 0; i < v.length(); ++i)
   Result[i] = !v[i];
  return Result;
 }
}


# 1 "../../include/glm/detail/../detail/func_vector_relational_simd.inl" 1



namespace glm{
namespace detail
{

}
}
# 105 "../../include/glm/detail/../detail/func_vector_relational.inl" 2
# 112 "../../include/glm/detail/../detail/func_vector_relational.hpp" 2
# 5 "../../include/glm/detail/../detail/func_exponential.inl" 2
# 1 "../../include/glm/detail/../detail/_vectorize.hpp" 1



       






namespace glm{
namespace detail
{
 template <typename R, typename T, precision P, template <typename, precision> class vecType>
 struct functor1{};

 template <typename R, typename T, precision P>
 struct functor1<R, T, P, tvec1>
 {
  inline static tvec1<R, P> call(R (*Func) (T x), tvec1<T, P> const & v)
  {
   return tvec1<R, P>(Func(v.x));
  }
 };

 template <typename R, typename T, precision P>
 struct functor1<R, T, P, tvec2>
 {
  inline static tvec2<R, P> call(R (*Func) (T x), tvec2<T, P> const & v)
  {
   return tvec2<R, P>(Func(v.x), Func(v.y));
  }
 };

 template <typename R, typename T, precision P>
 struct functor1<R, T, P, tvec3>
 {
  inline static tvec3<R, P> call(R (*Func) (T x), tvec3<T, P> const & v)
  {
   return tvec3<R, P>(Func(v.x), Func(v.y), Func(v.z));
  }
 };

 template <typename R, typename T, precision P>
 struct functor1<R, T, P, tvec4>
 {
  inline static tvec4<R, P> call(R (*Func) (T x), tvec4<T, P> const & v)
  {
   return tvec4<R, P>(Func(v.x), Func(v.y), Func(v.z), Func(v.w));
  }
 };

 template <typename T, precision P, template <typename, precision> class vecType>
 struct functor2{};

 template <typename T, precision P>
 struct functor2<T, P, tvec1>
 {
  inline static tvec1<T, P> call(T (*Func) (T x, T y), tvec1<T, P> const & a, tvec1<T, P> const & b)
  {
   return tvec1<T, P>(Func(a.x, b.x));
  }
 };

 template <typename T, precision P>
 struct functor2<T, P, tvec2>
 {
  inline static tvec2<T, P> call(T (*Func) (T x, T y), tvec2<T, P> const & a, tvec2<T, P> const & b)
  {
   return tvec2<T, P>(Func(a.x, b.x), Func(a.y, b.y));
  }
 };

 template <typename T, precision P>
 struct functor2<T, P, tvec3>
 {
  inline static tvec3<T, P> call(T (*Func) (T x, T y), tvec3<T, P> const & a, tvec3<T, P> const & b)
  {
   return tvec3<T, P>(Func(a.x, b.x), Func(a.y, b.y), Func(a.z, b.z));
  }
 };

 template <typename T, precision P>
 struct functor2<T, P, tvec4>
 {
  inline static tvec4<T, P> call(T (*Func) (T x, T y), tvec4<T, P> const & a, tvec4<T, P> const & b)
  {
   return tvec4<T, P>(Func(a.x, b.x), Func(a.y, b.y), Func(a.z, b.z), Func(a.w, b.w));
  }
 };

 template <typename T, precision P, template <typename, precision> class vecType>
 struct functor2_vec_sca{};

 template <typename T, precision P>
 struct functor2_vec_sca<T, P, tvec1>
 {
  inline static tvec1<T, P> call(T (*Func) (T x, T y), tvec1<T, P> const & a, T b)
  {
   return tvec1<T, P>(Func(a.x, b));
  }
 };

 template <typename T, precision P>
 struct functor2_vec_sca<T, P, tvec2>
 {
  inline static tvec2<T, P> call(T (*Func) (T x, T y), tvec2<T, P> const & a, T b)
  {
   return tvec2<T, P>(Func(a.x, b), Func(a.y, b));
  }
 };

 template <typename T, precision P>
 struct functor2_vec_sca<T, P, tvec3>
 {
  inline static tvec3<T, P> call(T (*Func) (T x, T y), tvec3<T, P> const & a, T b)
  {
   return tvec3<T, P>(Func(a.x, b), Func(a.y, b), Func(a.z, b));
  }
 };

 template <typename T, precision P>
 struct functor2_vec_sca<T, P, tvec4>
 {
  inline static tvec4<T, P> call(T (*Func) (T x, T y), tvec4<T, P> const & a, T b)
  {
   return tvec4<T, P>(Func(a.x, b), Func(a.y, b), Func(a.z, b), Func(a.w, b));
  }
 };
}
}
# 6 "../../include/glm/detail/../detail/func_exponential.inl" 2

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 3
# 8 "../../include/glm/detail/../detail/func_exponential.inl" 2
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cassert" 1 3
# 41 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cassert" 3
       
# 42 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cassert" 3


# 1 "c:\\mingw\\include\\assert.h" 1 3
# 23 "c:\\mingw\\include\\assert.h" 3

# 23 "c:\\mingw\\include\\assert.h" 3
extern "C" {
# 38 "c:\\mingw\\include\\assert.h" 3
 void __attribute__((__cdecl__)) __attribute__((__nothrow__)) _assert (const char*, const char*, int) __attribute__((__noreturn__));
# 48 "c:\\mingw\\include\\assert.h" 3
}
# 44 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cassert" 2 3
# 9 "../../include/glm/detail/../detail/func_exponential.inl" 2


# 10 "../../include/glm/detail/../detail/func_exponential.inl"
namespace glm{
namespace detail
{

  using std::log2;
# 23 "../../include/glm/detail/../detail/func_exponential.inl"
 template <typename T, precision P, template <class, precision> class vecType, bool isFloat, bool Aligned>
 struct compute_log2
 {
  inline static vecType<T, P> call(vecType<T, P> const & vec)
  {
   return detail::functor1<T, T, P, vecType>::call(log2, vec);
  }
 };

 template <template <class, precision> class vecType, typename T, precision P, bool Aligned>
 struct compute_sqrt
 {
  inline static vecType<T, P> call(vecType<T, P> const & x)
  {
   return detail::functor1<T, T, P, vecType>::call(std::sqrt, x);
  }
 };

 template <template <class, precision> class vecType, typename T, precision P, bool Aligned>
 struct compute_inversesqrt
 {
  inline static vecType<T, P> call(vecType<T, P> const & x)
  {
   return static_cast<T>(1) / sqrt(x);
  }
 };

 template <template <class, precision> class vecType, bool Aligned>
 struct compute_inversesqrt<vecType, float, lowp, Aligned>
 {
  inline static vecType<float, lowp> call(vecType<float, lowp> const & x)
  {
   vecType<float, lowp> tmp(x);
   vecType<float, lowp> xhalf(tmp * 0.5f);
   vecType<uint, lowp>* p = reinterpret_cast<vecType<uint, lowp>*>(const_cast<vecType<float, lowp>*>(&x));
   vecType<uint, lowp> i = vecType<uint, lowp>(0x5f375a86) - (*p >> vecType<uint, lowp>(1));
   vecType<float, lowp>* ptmp = reinterpret_cast<vecType<float, lowp>*>(&i);
   tmp = *ptmp;
   tmp = tmp * (1.5f - xhalf * tmp * tmp);
   return tmp;
  }
 };
}


 using std::pow;
 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> pow(vecType<T, P> const & base, vecType<T, P> const & exponent)
 {
  return detail::functor2<T, P, vecType>::call(pow, base, exponent);
 }


 using std::exp;
 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> exp(vecType<T, P> const & x)
 {
  return detail::functor1<T, T, P, vecType>::call(exp, x);
 }


 using std::log;
 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> log(vecType<T, P> const & x)
 {
  return detail::functor1<T, T, P, vecType>::call(log, x);
 }


 template <typename genType>
 inline genType exp2(genType x)
 {
  static_assert(std::numeric_limits<genType>::is_iec559, "'exp2' only accept floating-point inputs");

  return std::exp(static_cast<genType>(0.69314718055994530941723212145818) * x);
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> exp2(vecType<T, P> const & x)
 {
  return detail::functor1<T, T, P, vecType>::call(exp2, x);
 }


 template <typename genType>
 inline genType log2(genType x)
 {
  return log2(tvec1<genType>(x)).x;
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> log2(vecType<T, P> const & x)
 {
  return detail::compute_log2<T, P, vecType, std::numeric_limits<T>::is_iec559, detail::is_aligned<P>::value>::call(x);
 }


 using std::sqrt;
 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> sqrt(vecType<T, P> const & x)
 {
  static_assert(std::numeric_limits<T>::is_iec559, "'sqrt' only accept floating-point inputs");
  return detail::compute_sqrt<vecType, T, P, detail::is_aligned<P>::value>::call(x);
 }


 template <typename genType>
 inline genType inversesqrt(genType x)
 {
  return static_cast<genType>(1) / sqrt(x);
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> inversesqrt(vecType<T, P> const & x)
 {
  static_assert(std::numeric_limits<T>::is_iec559, "'inversesqrt' only accept floating-point inputs");
  return detail::compute_inversesqrt<vecType, T, P, detail::is_aligned<P>::value>::call(x);
 }
}


# 1 "../../include/glm/detail/../detail/func_exponential_simd.inl" 1



# 1 "../../include/glm/detail/../detail/../simd/exponential.h" 1



       
# 5 "../../include/glm/detail/../detail/func_exponential_simd.inl" 2
# 145 "../../include/glm/detail/../detail/func_exponential.inl" 2
# 104 "../../include/glm/detail/../detail/func_exponential.hpp" 2
# 5 "../../include/glm/detail/../detail/func_geometric.inl" 2
# 1 "../../include/glm/detail/../detail/func_common.hpp" 1
# 11 "../../include/glm/detail/../detail/func_common.hpp"
       




# 1 "../../include/glm/detail/../detail/_fixes.hpp" 1



# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 3
# 5 "../../include/glm/detail/../detail/_fixes.hpp" 2
# 17 "../../include/glm/detail/../detail/func_common.hpp" 2

namespace glm
{
# 29 "../../include/glm/detail/../detail/func_common.hpp"
 template <typename genType>
 genType abs(genType x);

 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> abs(vecType<T, P> const & x);







 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> sign(vecType<T, P> const & x);







 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> floor(vecType<T, P> const & x);
# 60 "../../include/glm/detail/../detail/func_common.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> trunc(vecType<T, P> const & x);
# 73 "../../include/glm/detail/../detail/func_common.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> round(vecType<T, P> const & x);
# 85 "../../include/glm/detail/../detail/func_common.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> roundEven(vecType<T, P> const & x);
# 95 "../../include/glm/detail/../detail/func_common.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> ceil(vecType<T, P> const & x);







 template <typename genType>
 genType fract(genType x);

 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> fract(vecType<T, P> const & x);
# 117 "../../include/glm/detail/../detail/func_common.hpp"
 template <typename genType>
 genType mod(genType x, genType y);

 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> mod(vecType<T, P> const & x, T y);

 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> mod(vecType<T, P> const & x, vecType<T, P> const & y);
# 135 "../../include/glm/detail/../detail/func_common.hpp"
 template <typename genType>
 genType modf(genType x, genType & i);







 template <typename genType>
 genType min(genType x, genType y);

 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> min(vecType<T, P> const & x, T y);

 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> min(vecType<T, P> const & x, vecType<T, P> const & y);







 template <typename genType>
 genType max(genType x, genType y);

 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> max(vecType<T, P> const & x, T y);

 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> max(vecType<T, P> const & x, vecType<T, P> const & y);
# 175 "../../include/glm/detail/../detail/func_common.hpp"
 template <typename genType>
 genType clamp(genType x, genType minVal, genType maxVal);

 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> clamp(vecType<T, P> const & x, T minVal, T maxVal);

 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> clamp(vecType<T, P> const & x, vecType<T, P> const & minVal, vecType<T, P> const & maxVal);
# 226 "../../include/glm/detail/../detail/func_common.hpp"
 template <typename T, typename U, precision P, template <typename, precision> class vecType>
 vecType<T, P> mix(vecType<T, P> const & x, vecType<T, P> const & y, vecType<U, P> const & a);

 template <typename T, typename U, precision P, template <typename, precision> class vecType>
 vecType<T, P> mix(vecType<T, P> const & x, vecType<T, P> const & y, U a);

 template <typename genTypeT, typename genTypeU>
 genTypeT mix(genTypeT x, genTypeT y, genTypeU a);





 template <typename genType>
 genType step(genType edge, genType x);





 template <template <typename, precision> class vecType, typename T, precision P>
 vecType<T, P> step(T edge, vecType<T, P> const & x);





 template <template <typename, precision> class vecType, typename T, precision P>
 vecType<T, P> step(vecType<T, P> const & edge, vecType<T, P> const & x);
# 270 "../../include/glm/detail/../detail/func_common.hpp"
 template <typename genType>
 genType smoothstep(genType edge0, genType edge1, genType x);

 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> smoothstep(T edge0, T edge1, vecType<T, P> const & x);

 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> smoothstep(vecType<T, P> const & edge0, vecType<T, P> const & edge1, vecType<T, P> const & x);
# 291 "../../include/glm/detail/../detail/func_common.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<bool, P> isnan(vecType<T, P> const & x);
# 304 "../../include/glm/detail/../detail/func_common.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<bool, P> isinf(vecType<T, P> const & x);







 int floatBitsToInt(float const & v);







 template <template <typename, precision> class vecType, precision P>
 vecType<int, P> floatBitsToInt(vecType<float, P> const & v);







 uint floatBitsToUint(float const & v);







 template <template <typename, precision> class vecType, precision P>
 vecType<uint, P> floatBitsToUint(vecType<float, P> const & v);
# 349 "../../include/glm/detail/../detail/func_common.hpp"
 float intBitsToFloat(int const & v);
# 359 "../../include/glm/detail/../detail/func_common.hpp"
 template <template <typename, precision> class vecType, precision P>
 vecType<float, P> intBitsToFloat(vecType<int, P> const & v);
# 370 "../../include/glm/detail/../detail/func_common.hpp"
 float uintBitsToFloat(uint const & v);
# 380 "../../include/glm/detail/../detail/func_common.hpp"
 template <template <typename, precision> class vecType, precision P>
 vecType<float, P> uintBitsToFloat(vecType<uint, P> const & v);







 template <typename genType>
 genType fma(genType const & a, genType const & b, genType const & c);
# 406 "../../include/glm/detail/../detail/func_common.hpp"
 template <typename genType, typename genIType>
 genType frexp(genType const & x, genIType & exp);
# 420 "../../include/glm/detail/../detail/func_common.hpp"
 template <typename genType, typename genIType>
 genType ldexp(genType const & x, genIType const & exp);


}

# 1 "../../include/glm/detail/../detail/func_common.inl" 1
# 11 "../../include/glm/detail/../detail/func_common.inl"
namespace glm
{

 template <typename genType>
 inline genType min(genType x, genType y)
 {
  static_assert(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || 0, "'min' only accept floating-point or integer inputs");
  return x < y ? x : y;
 }


 template <typename genType>
 inline genType max(genType x, genType y)
 {
  static_assert(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || 0, "'max' only accept floating-point or integer inputs");

  return x > y ? x : y;
 }


 template <>
 inline int32 abs(int32 x)
 {
  int32 const y = x >> 31;
  return (x ^ y) - y;
 }



  using ::std::round;
# 53 "../../include/glm/detail/../detail/func_common.inl"
  using ::std::trunc;
# 64 "../../include/glm/detail/../detail/func_common.inl"
}

namespace glm{
namespace detail
{
 template <typename genFIType, bool >
 struct compute_abs
 {};

 template <typename genFIType>
 struct compute_abs<genFIType, true>
 {
  inline static genFIType call(genFIType x)
  {
   static_assert(std::numeric_limits<genFIType>::is_iec559 || std::numeric_limits<genFIType>::is_signed || 0, "'abs' only accept floating-point and integer scalar or vector inputs")

                                                                           ;

   return x >= genFIType(0) ? x : -x;

  }
 };
# 98 "../../include/glm/detail/../detail/func_common.inl"
 template <typename genFIType>
 struct compute_abs<genFIType, false>
 {
  inline static genFIType call(genFIType x)
  {
   static_assert((!std::numeric_limits<genFIType>::is_signed && std::numeric_limits<genFIType>::is_integer) || 0, "'abs' only accept floating-point and integer scalar or vector inputs")

                                                                           ;
   return x;
  }
 };

 template <typename T, precision P, template <typename, precision> class vecType, bool Aligned>
 struct compute_abs_vector
 {
  inline static vecType<T, P> call(vecType<T, P> const & x)
  {
   return detail::functor1<T, T, P, vecType>::call(abs, x);
  }
 };

 template <typename T, typename U, precision P, template <typename, precision> class vecType, bool Aligned>
 struct compute_mix_vector
 {
  inline static vecType<T, P> call(vecType<T, P> const & x, vecType<T, P> const & y, vecType<U, P> const & a)
  {
   static_assert(std::numeric_limits<U>::is_iec559 || 0, "'mix' only accept floating-point inputs for the interpolator a");

   return vecType<T, P>(vecType<U, P>(x) + a * vecType<U, P>(y - x));
  }
 };

 template <typename T, precision P, template <typename, precision> class vecType, bool Aligned>
 struct compute_mix_vector<T, bool, P, vecType, Aligned>
 {
  inline static vecType<T, P> call(vecType<T, P> const & x, vecType<T, P> const & y, vecType<bool, P> const & a)
  {
   vecType<T, P> Result(uninitialize);
   for(length_t i = 0; i < x.length(); ++i)
    Result[i] = a[i] ? y[i] : x[i];
   return Result;
  }
 };

 template <typename T, typename U, precision P, template <typename, precision> class vecType, bool Aligned>
 struct compute_mix_scalar
 {
  inline static vecType<T, P> call(vecType<T, P> const & x, vecType<T, P> const & y, U const & a)
  {
   static_assert(std::numeric_limits<U>::is_iec559 || 0, "'mix' only accept floating-point inputs for the interpolator a");

   return vecType<T, P>(vecType<U, P>(x) + a * vecType<U, P>(y - x));
  }
 };

 template <typename T, precision P, template <typename, precision> class vecType, bool Aligned>
 struct compute_mix_scalar<T, bool, P, vecType, Aligned>
 {
  inline static vecType<T, P> call(vecType<T, P> const & x, vecType<T, P> const & y, bool const & a)
  {
   return a ? y : x;
  }
 };

 template <typename T, typename U>
 struct compute_mix
 {
  inline static T call(T const & x, T const & y, U const & a)
  {
   static_assert(std::numeric_limits<U>::is_iec559 || 0, "'mix' only accept floating-point inputs for the interpolator a");

   return static_cast<T>(static_cast<U>(x) + a * static_cast<U>(y - x));
  }
 };

 template <typename T>
 struct compute_mix<T, bool>
 {
  inline static T call(T const & x, T const & y, bool const & a)
  {
   return a ? y : x;
  }
 };

 template <typename T, precision P, template <typename, precision> class vecType, bool isFloat, bool Aligned>
 struct compute_sign
 {
  inline static vecType<T, P> call(vecType<T, P> const & x)
  {
   return vecType<T, P>(glm::lessThan(vecType<T, P>(0), x)) - vecType<T, P>(glm::lessThan(x, vecType<T, P>(0)));
  }
 };


 template <typename T, precision P, template <typename, precision> class vecType, bool Aligned>
 struct compute_sign<T, P, vecType, false, Aligned>
 {
  inline static vecType<T, P> call(vecType<T, P> const & x)
  {
   T const Shift(static_cast<T>(sizeof(T) * 8 - 1));
   vecType<T, P> const y(vecType<typename make_unsigned<T>::type, P>(-x) >> typename make_unsigned<T>::type(Shift));

   return (x >> Shift) | y;
  }
 };


 template <typename T, precision P, template <typename, precision> class vecType, bool Aligned>
 struct compute_floor
 {
  inline static vecType<T, P> call(vecType<T, P> const & x)
  {
   return detail::functor1<T, T, P, vecType>::call(std::floor, x);
  }
 };

 template <typename T, precision P, template <typename, precision> class vecType, bool Aligned>
 struct compute_ceil
 {
  inline static vecType<T, P> call(vecType<T, P> const & x)
  {
   return detail::functor1<T, T, P, vecType>::call(std::ceil, x);
  }
 };

 template <typename T, precision P, template <typename, precision> class vecType, bool Aligned>
 struct compute_fract
 {
  inline static vecType<T, P> call(vecType<T, P> const & x)
  {
   return x - floor(x);
  }
 };

 template <typename T, precision P, template <typename, precision> class vecType, bool Aligned>
 struct compute_trunc
 {
  inline static vecType<T, P> call(vecType<T, P> const & x)
  {
   return detail::functor1<T, T, P, vecType>::call(trunc, x);
  }
 };

 template <typename T, precision P, template <typename, precision> class vecType, bool Aligned>
 struct compute_round
 {
  inline static vecType<T, P> call(vecType<T, P> const & x)
  {
   return detail::functor1<T, T, P, vecType>::call(round, x);
  }
 };

 template <typename T, precision P, template <typename, precision> class vecType, bool Aligned>
 struct compute_mod
 {
  inline static vecType<T, P> call(vecType<T, P> const & a, vecType<T, P> const & b)
  {
   static_assert(std::numeric_limits<T>::is_iec559, "'mod' only accept floating-point inputs. Include <glm/gtc/integer.hpp> for integer inputs.");
   return a - b * floor(a / b);
  }
 };

 template <typename T, precision P, template <typename, precision> class vecType, bool Aligned>
 struct compute_min_vector
 {
  inline static vecType<T, P> call(vecType<T, P> const & x, vecType<T, P> const & y)
  {
   return detail::functor2<T, P, vecType>::call(min, x, y);
  }
 };

 template <typename T, precision P, template <typename, precision> class vecType, bool Aligned>
 struct compute_max_vector
 {
  inline static vecType<T, P> call(vecType<T, P> const & x, vecType<T, P> const & y)
  {
   return detail::functor2<T, P, vecType>::call(max, x, y);
  }
 };

 template <typename T, precision P, template <typename, precision> class vecType, bool Aligned>
 struct compute_clamp_vector
 {
  inline static vecType<T, P> call(vecType<T, P> const & x, vecType<T, P> const & minVal, vecType<T, P> const & maxVal)
  {
   return min(max(x, minVal), maxVal);
  }
 };

 template <typename T, precision P, template <typename, precision> class vecType, bool Aligned>
 struct compute_step_vector
 {
  inline static vecType<T, P> call(vecType<T, P> const & edge, vecType<T, P> const & x)
  {
   return mix(vecType<T, P>(1), vecType<T, P>(0), glm::lessThan(x, edge));
  }
 };

 template <typename T, precision P, template <typename, precision> class vecType, bool Aligned>
 struct compute_smoothstep_vector
 {
  inline static vecType<T, P> call(vecType<T, P> const & edge0, vecType<T, P> const & edge1, vecType<T, P> const & x)
  {
   static_assert(std::numeric_limits<T>::is_iec559 || 0, "'step' only accept floating-point inputs");
   vecType<T, P> const tmp(clamp((x - edge0) / (edge1 - edge0), static_cast<T>(0), static_cast<T>(1)));
   return tmp * tmp * (static_cast<T>(3) - static_cast<T>(2) * tmp);
  }
 };
}

 template <typename genFIType>
 inline genFIType abs(genFIType x)
 {
  return detail::compute_abs<genFIType, std::numeric_limits<genFIType>::is_signed>::call(x);
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> abs(vecType<T, P> const & x)
 {
  return detail::compute_abs_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x);
 }



 template <typename genFIType>
 inline genFIType sign(genFIType x)
 {
  static_assert(std::numeric_limits<genFIType>::is_iec559 || (std::numeric_limits<genFIType>::is_signed && std::numeric_limits<genFIType>::is_integer), "'sign' only accept signed inputs")

                                      ;

  return detail::compute_sign<genFIType, defaultp, tvec1, std::numeric_limits<genFIType>::is_iec559, highp>::call(tvec1<genFIType>(x)).x;
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> sign(vecType<T, P> const & x)
 {
  static_assert(std::numeric_limits<T>::is_iec559 || (std::numeric_limits<T>::is_signed && std::numeric_limits<T>::is_integer), "'sign' only accept signed inputs")

                                      ;

  return detail::compute_sign<T, P, vecType, std::numeric_limits<T>::is_iec559, detail::is_aligned<P>::value>::call(x);
 }


 using ::std::floor;
 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> floor(vecType<T, P> const & x)
 {
  static_assert(std::numeric_limits<T>::is_iec559, "'floor' only accept floating-point inputs.");
  return detail::compute_floor<T, P, vecType, detail::is_aligned<P>::value>::call(x);
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> trunc(vecType<T, P> const & x)
 {
  static_assert(std::numeric_limits<T>::is_iec559, "'trunc' only accept floating-point inputs");
  return detail::compute_trunc<T, P, vecType, detail::is_aligned<P>::value>::call(x);
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> round(vecType<T, P> const & x)
 {
  static_assert(std::numeric_limits<T>::is_iec559, "'round' only accept floating-point inputs");
  return detail::compute_round<T, P, vecType, detail::is_aligned<P>::value>::call(x);
 }
# 377 "../../include/glm/detail/../detail/func_common.inl"
 template <typename genType>
 inline genType roundEven(genType x)
 {
  static_assert(std::numeric_limits<genType>::is_iec559, "'roundEven' only accept floating-point inputs");

  int Integer = static_cast<int>(x);
  genType IntegerPart = static_cast<genType>(Integer);
  genType FractionalPart = fract(x);

  if(FractionalPart > static_cast<genType>(0.5) || FractionalPart < static_cast<genType>(0.5))
  {
   return round(x);
  }
  else if((Integer % 2) == 0)
  {
   return IntegerPart;
  }
  else if(x <= static_cast<genType>(0))
  {
   return IntegerPart - static_cast<genType>(1);
  }
  else
  {
   return IntegerPart + static_cast<genType>(1);
  }




 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> roundEven(vecType<T, P> const & x)
 {
  static_assert(std::numeric_limits<T>::is_iec559, "'roundEven' only accept floating-point inputs");
  return detail::functor1<T, T, P, vecType>::call(roundEven, x);
 }


 using ::std::ceil;
 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> ceil(vecType<T, P> const & x)
 {
  static_assert(std::numeric_limits<T>::is_iec559, "'ceil' only accept floating-point inputs");
  return detail::compute_ceil<T, P, vecType, detail::is_aligned<P>::value>::call(x);
 }


 template <typename genType>
 inline genType fract(genType x)
 {
  return fract(tvec1<genType>(x)).x;
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> fract(vecType<T, P> const & x)
 {
  static_assert(std::numeric_limits<T>::is_iec559, "'fract' only accept floating-point inputs");
  return detail::compute_fract<T, P, vecType, detail::is_aligned<P>::value>::call(x);
 }


 template <typename genType>
 inline genType mod(genType x, genType y)
 {





   return mod(tvec1<genType, defaultp>(x), y).x;

 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> mod(vecType<T, P> const & x, T y)
 {
  return detail::compute_mod<T, P, vecType, detail::is_aligned<P>::value>::call(x, vecType<T, P>(y));
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> mod(vecType<T, P> const & x, vecType<T, P> const & y)
 {
  return detail::compute_mod<T, P, vecType, detail::is_aligned<P>::value>::call(x, y);
 }


 template <typename genType>
 inline genType modf(genType x, genType & i)
 {
  static_assert(std::numeric_limits<genType>::is_iec559, "'modf' only accept floating-point inputs");
  return std::modf(x, &i);
 }

 template <typename T, precision P>
 inline tvec1<T, P> modf(tvec1<T, P> const & x, tvec1<T, P> & i)
 {
  return tvec1<T, P>(
   modf(x.x, i.x));
 }

 template <typename T, precision P>
 inline tvec2<T, P> modf(tvec2<T, P> const & x, tvec2<T, P> & i)
 {
  return tvec2<T, P>(
   modf(x.x, i.x),
   modf(x.y, i.y));
 }

 template <typename T, precision P>
 inline tvec3<T, P> modf(tvec3<T, P> const & x, tvec3<T, P> & i)
 {
  return tvec3<T, P>(
   modf(x.x, i.x),
   modf(x.y, i.y),
   modf(x.z, i.z));
 }

 template <typename T, precision P>
 inline tvec4<T, P> modf(tvec4<T, P> const & x, tvec4<T, P> & i)
 {
  return tvec4<T, P>(
   modf(x.x, i.x),
   modf(x.y, i.y),
   modf(x.z, i.z),
   modf(x.w, i.w));
 }
# 514 "../../include/glm/detail/../detail/func_common.inl"
 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> min(vecType<T, P> const & a, T b)
 {
  static_assert(std::numeric_limits<T>::is_iec559 || 0, "'min' only accept floating-point inputs for the interpolator a");
  return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, vecType<T, P>(b));
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> min(vecType<T, P> const & a, vecType<T, P> const & b)
 {
  return detail::compute_min_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);
 }


 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> max(vecType<T, P> const & a, T b)
 {
  static_assert(std::numeric_limits<T>::is_iec559 || 0, "'max' only accept floating-point inputs for the interpolator a");
  return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, vecType<T, P>(b));
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> max(vecType<T, P> const & a, vecType<T, P> const & b)
 {
  return detail::compute_max_vector<T, P, vecType, detail::is_aligned<P>::value>::call(a, b);
 }


 template <typename genType>
 inline genType clamp(genType x, genType minVal, genType maxVal)
 {
  static_assert(std::numeric_limits<genType>::is_iec559 || std::numeric_limits<genType>::is_integer || 0, "'clamp' only accept floating-point or integer inputs");
  return min(max(x, minVal), maxVal);
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> clamp(vecType<T, P> const & x, T minVal, T maxVal)
 {
  static_assert(std::numeric_limits<T>::is_iec559 || std::numeric_limits<T>::is_integer || 0, "'clamp' only accept floating-point or integer inputs");
  return detail::compute_clamp_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x, vecType<T, P>(minVal), vecType<T, P>(maxVal));
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> clamp(vecType<T, P> const & x, vecType<T, P> const & minVal, vecType<T, P> const & maxVal)
 {
  static_assert(std::numeric_limits<T>::is_iec559 || std::numeric_limits<T>::is_integer || 0, "'clamp' only accept floating-point or integer inputs");
  return detail::compute_clamp_vector<T, P, vecType, detail::is_aligned<P>::value>::call(x, minVal, maxVal);
 }

 template <typename genTypeT, typename genTypeU>
 inline genTypeT mix(genTypeT x, genTypeT y, genTypeU a)
 {
  return detail::compute_mix<genTypeT, genTypeU>::call(x, y, a);
 }

 template <typename T, typename U, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> mix(vecType<T, P> const & x, vecType<T, P> const & y, U a)
 {
  return detail::compute_mix_scalar<T, U, P, vecType, detail::is_aligned<P>::value>::call(x, y, a);
 }

 template <typename T, typename U, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> mix(vecType<T, P> const & x, vecType<T, P> const & y, vecType<U, P> const & a)
 {
  return detail::compute_mix_vector<T, U, P, vecType, detail::is_aligned<P>::value>::call(x, y, a);
 }


 template <typename genType>
 inline genType step(genType edge, genType x)
 {
  return mix(static_cast<genType>(1), static_cast<genType>(0), glm::lessThan(x, edge));
 }

 template <template <typename, precision> class vecType, typename T, precision P>
 inline vecType<T, P> step(T edge, vecType<T, P> const & x)
 {
  return detail::compute_step_vector<T, P, vecType, detail::is_aligned<P>::value>::call(vecType<T, P>(edge), x);
 }

 template <template <typename, precision> class vecType, typename T, precision P>
 inline vecType<T, P> step(vecType<T, P> const & edge, vecType<T, P> const & x)
 {
  return detail::compute_step_vector<T, P, vecType, detail::is_aligned<P>::value>::call(edge, x);
 }


 template <typename genType>
 inline genType smoothstep(genType edge0, genType edge1, genType x)
 {
  static_assert(std::numeric_limits<genType>::is_iec559 || 0, "'smoothstep' only accept floating-point inputs");

  genType const tmp(clamp((x - edge0) / (edge1 - edge0), genType(0), genType(1)));
  return tmp * tmp * (genType(3) - genType(2) * tmp);
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> smoothstep(T edge0, T edge1, vecType<T, P> const & x)
 {
  return detail::compute_smoothstep_vector<T, P, vecType, detail::is_aligned<P>::value>::call(vecType<T, P>(edge0), vecType<T, P>(edge1), x);
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> smoothstep(vecType<T, P> const & edge0, vecType<T, P> const & edge1, vecType<T, P> const & x)
 {
  return detail::compute_smoothstep_vector<T, P, vecType, detail::is_aligned<P>::value>::call(edge0, edge1, x);
 }


  using std::isnan;
# 650 "../../include/glm/detail/../detail/func_common.inl"
 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<bool, P> isnan(vecType<T, P> const & x)
 {
  static_assert(std::numeric_limits<T>::is_iec559, "'isnan' only accept floating-point inputs");

  return detail::functor1<bool, T, P, vecType>::call(isnan, x);
 }


  using std::isinf;
# 689 "../../include/glm/detail/../detail/func_common.inl"
 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<bool, P> isinf(vecType<T, P> const & x)
 {
  static_assert(std::numeric_limits<T>::is_iec559, "'isnan' only accept floating-point inputs");

  return detail::functor1<bool, T, P, vecType>::call(isinf, x);
 }

 inline int floatBitsToInt(float const & v)
 {
  return reinterpret_cast<int&>(const_cast<float&>(v));
 }

 template <template <typename, precision> class vecType, precision P>
 inline vecType<int, P> floatBitsToInt(vecType<float, P> const & v)
 {
  return reinterpret_cast<vecType<int, P>&>(const_cast<vecType<float, P>&>(v));
 }

 inline uint floatBitsToUint(float const & v)
 {
  return reinterpret_cast<uint&>(const_cast<float&>(v));
 }

 template <template <typename, precision> class vecType, precision P>
 inline vecType<uint, P> floatBitsToUint(vecType<float, P> const & v)
 {
  return reinterpret_cast<vecType<uint, P>&>(const_cast<vecType<float, P>&>(v));
 }

 inline float intBitsToFloat(int const & v)
 {
  return reinterpret_cast<float&>(const_cast<int&>(v));
 }

 template <template <typename, precision> class vecType, precision P>
 inline vecType<float, P> intBitsToFloat(vecType<int, P> const & v)
 {
  return reinterpret_cast<vecType<float, P>&>(const_cast<vecType<int, P>&>(v));
 }

 inline float uintBitsToFloat(uint const & v)
 {
  return reinterpret_cast<float&>(const_cast<uint&>(v));
 }

 template <template <typename, precision> class vecType, precision P>
 inline vecType<float, P> uintBitsToFloat(vecType<uint, P> const & v)
 {
  return reinterpret_cast<vecType<float, P>&>(const_cast<vecType<uint, P>&>(v));
 }

 template <typename genType>
 inline genType fma(genType const & a, genType const & b, genType const & c)
 {
  return a * b + c;
 }

 template <typename genType>
 inline genType frexp(genType x, int & exp)
 {
  static_assert(std::numeric_limits<genType>::is_iec559 || 0, "'frexp' only accept floating-point inputs");

  return std::frexp(x, &exp);
 }

 template <typename T, precision P>
 inline tvec1<T, P> frexp(tvec1<T, P> const & x, tvec1<int, P> & exp)
 {
  static_assert(std::numeric_limits<T>::is_iec559 || 0, "'frexp' only accept floating-point inputs");

  return tvec1<T, P>(std::frexp(x.x, &exp.x));
 }

 template <typename T, precision P>
 inline tvec2<T, P> frexp(tvec2<T, P> const & x, tvec2<int, P> & exp)
 {
  static_assert(std::numeric_limits<T>::is_iec559 || 0, "'frexp' only accept floating-point inputs");

  return tvec2<T, P>(
   frexp(x.x, exp.x),
   frexp(x.y, exp.y));
 }

 template <typename T, precision P>
 inline tvec3<T, P> frexp(tvec3<T, P> const & x, tvec3<int, P> & exp)
 {
  static_assert(std::numeric_limits<T>::is_iec559 || 0, "'frexp' only accept floating-point inputs");

  return tvec3<T, P>(
   frexp(x.x, exp.x),
   frexp(x.y, exp.y),
   frexp(x.z, exp.z));
 }

 template <typename T, precision P>
 inline tvec4<T, P> frexp(tvec4<T, P> const & x, tvec4<int, P> & exp)
 {
  static_assert(std::numeric_limits<T>::is_iec559 || 0, "'frexp' only accept floating-point inputs");

  return tvec4<T, P>(
   frexp(x.x, exp.x),
   frexp(x.y, exp.y),
   frexp(x.z, exp.z),
   frexp(x.w, exp.w));
 }

 template <typename genType>
 inline genType ldexp(genType const & x, int const & exp)
 {
  static_assert(std::numeric_limits<genType>::is_iec559 || 0, "'ldexp' only accept floating-point inputs");

  return std::ldexp(x, exp);
 }

 template <typename T, precision P>
 inline tvec1<T, P> ldexp(tvec1<T, P> const & x, tvec1<int, P> const & exp)
 {
  static_assert(std::numeric_limits<T>::is_iec559 || 0, "'ldexp' only accept floating-point inputs");

  return tvec1<T, P>(
   ldexp(x.x, exp.x));
 }

 template <typename T, precision P>
 inline tvec2<T, P> ldexp(tvec2<T, P> const & x, tvec2<int, P> const & exp)
 {
  static_assert(std::numeric_limits<T>::is_iec559 || 0, "'ldexp' only accept floating-point inputs");

  return tvec2<T, P>(
   ldexp(x.x, exp.x),
   ldexp(x.y, exp.y));
 }

 template <typename T, precision P>
 inline tvec3<T, P> ldexp(tvec3<T, P> const & x, tvec3<int, P> const & exp)
 {
  static_assert(std::numeric_limits<T>::is_iec559 || 0, "'ldexp' only accept floating-point inputs");

  return tvec3<T, P>(
   ldexp(x.x, exp.x),
   ldexp(x.y, exp.y),
   ldexp(x.z, exp.z));
 }

 template <typename T, precision P>
 inline tvec4<T, P> ldexp(tvec4<T, P> const & x, tvec4<int, P> const & exp)
 {
  static_assert(std::numeric_limits<T>::is_iec559 || 0, "'ldexp' only accept floating-point inputs");

  return tvec4<T, P>(
   ldexp(x.x, exp.x),
   ldexp(x.y, exp.y),
   ldexp(x.z, exp.z),
   ldexp(x.w, exp.w));
 }
}


# 1 "../../include/glm/detail/../detail/func_common_simd.inl" 1
# 849 "../../include/glm/detail/../detail/func_common.inl" 2
# 427 "../../include/glm/detail/../detail/func_common.hpp" 2
# 6 "../../include/glm/detail/../detail/func_geometric.inl" 2




namespace glm{
namespace detail
{
 template <template <typename, precision> class vecType, typename T, precision P, bool Aligned>
 struct compute_length
 {
  inline static T call(vecType<T, P> const & v)
  {
   return sqrt(dot(v, v));
  }
 };

 template <template <typename, precision> class vecType, typename T, precision P, bool Aligned>
 struct compute_distance
 {
  inline static T call(vecType<T, P> const & p0, vecType<T, P> const & p1)
  {
   return length(p1 - p0);
  }
 };

 template <template <class, precision> class vecType, typename T, precision P, bool Aligned>
 struct compute_dot{};

 template <typename T, precision P, bool Aligned>
 struct compute_dot<tvec1, T, P, Aligned>
 {
  inline static T call(tvec1<T, P> const & a, tvec1<T, P> const & b)
  {
   return a.x * b.x;
  }
 };

 template <typename T, precision P, bool Aligned>
 struct compute_dot<tvec2, T, P, Aligned>
 {
  inline static T call(tvec2<T, P> const & x, tvec2<T, P> const & y)
  {
   tvec2<T, P> tmp(x * y);
   return tmp.x + tmp.y;
  }
 };

 template <typename T, precision P, bool Aligned>
 struct compute_dot<tvec3, T, P, Aligned>
 {
  inline static T call(tvec3<T, P> const & x, tvec3<T, P> const & y)
  {
   tvec3<T, P> tmp(x * y);
   return tmp.x + tmp.y + tmp.z;
  }
 };

 template <typename T, precision P, bool Aligned>
 struct compute_dot<tvec4, T, P, Aligned>
 {
  inline static T call(tvec4<T, P> const & x, tvec4<T, P> const & y)
  {
   tvec4<T, P> tmp(x * y);
   return (tmp.x + tmp.y) + (tmp.z + tmp.w);
  }
 };

 template <typename T, precision P, bool Aligned>
 struct compute_cross
 {
  inline static tvec3<T, P> call(tvec3<T, P> const & x, tvec3<T, P> const & y)
  {
   static_assert(std::numeric_limits<T>::is_iec559, "'cross' accepts only floating-point inputs");

   return tvec3<T, P>(
    x.y * y.z - y.y * x.z,
    x.z * y.x - y.z * x.x,
    x.x * y.y - y.x * x.y);
  }
 };

 template <typename T, precision P, template <typename, precision> class vecType, bool Aligned>
 struct compute_normalize
 {
  inline static vecType<T, P> call(vecType<T, P> const & v)
  {
   static_assert(std::numeric_limits<T>::is_iec559, "'normalize' accepts only floating-point inputs");

   return v * inversesqrt(dot(v, v));
  }
 };

 template <typename T, precision P, template <typename, precision> class vecType, bool Aligned>
 struct compute_faceforward
 {
  inline static vecType<T, P> call(vecType<T, P> const & N, vecType<T, P> const & I, vecType<T, P> const & Nref)
  {
   static_assert(std::numeric_limits<T>::is_iec559, "'normalize' accepts only floating-point inputs");

   return dot(Nref, I) < static_cast<T>(0) ? N : -N;
  }
 };

 template <typename T, precision P, template <typename, precision> class vecType, bool Aligned>
 struct compute_reflect
 {
  inline static vecType<T, P> call(vecType<T, P> const & I, vecType<T, P> const & N)
  {
   return I - N * dot(N, I) * static_cast<T>(2);
  }
 };

 template <typename T, precision P, template <typename, precision> class vecType, bool Aligned>
 struct compute_refract
 {
  inline static vecType<T, P> call(vecType<T, P> const & I, vecType<T, P> const & N, T eta)
  {
   T const dotValue(dot(N, I));
   T const k(static_cast<T>(1) - eta * eta * (static_cast<T>(1) - dotValue * dotValue));
   return (eta * I - (eta * dotValue + std::sqrt(k)) * N) * static_cast<T>(k >= static_cast<T>(0));
  }
 };
}


 template <typename genType>
 inline genType length(genType x)
 {
  static_assert(std::numeric_limits<genType>::is_iec559, "'length' accepts only floating-point inputs");

  return abs(x);
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline T length(vecType<T, P> const & v)
 {
  static_assert(std::numeric_limits<T>::is_iec559, "'length' accepts only floating-point inputs");

  return detail::compute_length<vecType, T, P, detail::is_aligned<P>::value>::call(v);
 }


 template <typename genType>
 inline genType distance(genType const & p0, genType const & p1)
 {
  static_assert(std::numeric_limits<genType>::is_iec559, "'distance' accepts only floating-point inputs");

  return length(p1 - p0);
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline T distance(vecType<T, P> const & p0, vecType<T, P> const & p1)
 {
  return detail::compute_distance<vecType, T, P, detail::is_aligned<P>::value>::call(p0, p1);
 }


 template <typename T>
 inline T dot(T x, T y)
 {
  static_assert(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
  return x * y;
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline T dot(vecType<T, P> const & x, vecType<T, P> const & y)
 {
  static_assert(std::numeric_limits<T>::is_iec559, "'dot' accepts only floating-point inputs");
  return detail::compute_dot<vecType, T, P, detail::is_aligned<P>::value>::call(x, y);
 }


 template <typename T, precision P>
 inline tvec3<T, P> cross(tvec3<T, P> const & x, tvec3<T, P> const & y)
 {
  return detail::compute_cross<T, P, detail::is_aligned<P>::value>::call(x, y);
 }


 template <typename genType>
 inline genType normalize(genType const & x)
 {
  static_assert(std::numeric_limits<genType>::is_iec559, "'normalize' accepts only floating-point inputs");

  return x < genType(0) ? genType(-1) : genType(1);
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> normalize(vecType<T, P> const & x)
 {
  static_assert(std::numeric_limits<T>::is_iec559, "'normalize' accepts only floating-point inputs");

  return detail::compute_normalize<T, P, vecType, detail::is_aligned<P>::value>::call(x);
 }


 template <typename genType>
 inline genType faceforward(genType const & N, genType const & I, genType const & Nref)
 {
  return dot(Nref, I) < static_cast<genType>(0) ? N : -N;
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> faceforward(vecType<T, P> const & N, vecType<T, P> const & I, vecType<T, P> const & Nref)
 {
  return detail::compute_faceforward<T, P, vecType, detail::is_aligned<P>::value>::call(N, I, Nref);
 }


 template <typename genType>
 inline genType reflect(genType const & I, genType const & N)
 {
  return I - N * dot(N, I) * genType(2);
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> reflect(vecType<T, P> const & I, vecType<T, P> const & N)
 {
  return detail::compute_reflect<T, P, vecType, detail::is_aligned<P>::value>::call(I, N);
 }


 template <typename genType>
 inline genType refract(genType const & I, genType const & N, genType eta)
 {
  static_assert(std::numeric_limits<genType>::is_iec559, "'refract' accepts only floating-point inputs");
  genType const dotValue(dot(N, I));
  genType const k(static_cast<genType>(1) - eta * eta * (static_cast<genType>(1) - dotValue * dotValue));
  return (eta * I - (eta * dotValue + sqrt(k)) * N) * static_cast<genType>(k >= static_cast<genType>(0));
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> refract(vecType<T, P> const & I, vecType<T, P> const & N, T eta)
 {
  static_assert(std::numeric_limits<T>::is_iec559, "'refract' accepts only floating-point inputs");
  return detail::compute_refract<T, P, vecType, detail::is_aligned<P>::value>::call(I, N, eta);
 }
}


# 1 "../../include/glm/detail/../detail/func_geometric_simd.inl" 1



# 1 "../../include/glm/detail/../detail/../simd/geometric.h" 1



       

# 1 "../../include/glm/detail/../detail/../simd/common.h" 1



       
# 7 "../../include/glm/detail/../detail/../simd/geometric.h" 2
# 5 "../../include/glm/detail/../detail/func_geometric_simd.inl" 2
# 247 "../../include/glm/detail/../detail/func_geometric.inl" 2
# 114 "../../include/glm/detail/../detail/func_geometric.hpp" 2
# 7 "../../include/glm/detail/../geometric.hpp" 2
# 5 "../../include/glm/detail/func_matrix.inl" 2


namespace glm{
namespace detail
{
 template <template <typename, precision> class matType, typename T, precision P, bool Aligned>
 struct compute_matrixCompMult
 {
  inline static matType<T, P> call(matType<T, P> const& x, matType<T, P> const& y)
  {
   matType<T, P> result(uninitialize);
   for(length_t i = 0; i < result.length(); ++i)
    result[i] = x[i] * y[i];
   return result;
  }
 };

 template <template <class, precision> class matType, typename T, precision P, bool Aligned>
 struct compute_transpose{};

 template <typename T, precision P, bool Aligned>
 struct compute_transpose<tmat2x2, T, P, Aligned>
 {
  inline static tmat2x2<T, P> call(tmat2x2<T, P> const & m)
  {
   tmat2x2<T, P> result(uninitialize);
   result[0][0] = m[0][0];
   result[0][1] = m[1][0];
   result[1][0] = m[0][1];
   result[1][1] = m[1][1];
   return result;
  }
 };

 template <typename T, precision P, bool Aligned>
 struct compute_transpose<tmat2x3, T, P, Aligned>
 {
  inline static tmat3x2<T, P> call(tmat2x3<T, P> const & m)
  {
   tmat3x2<T, P> result(uninitialize);
   result[0][0] = m[0][0];
   result[0][1] = m[1][0];
   result[1][0] = m[0][1];
   result[1][1] = m[1][1];
   result[2][0] = m[0][2];
   result[2][1] = m[1][2];
   return result;
  }
 };

 template <typename T, precision P, bool Aligned>
 struct compute_transpose<tmat2x4, T, P, Aligned>
 {
  inline static tmat4x2<T, P> call(tmat2x4<T, P> const & m)
  {
   tmat4x2<T, P> result(uninitialize);
   result[0][0] = m[0][0];
   result[0][1] = m[1][0];
   result[1][0] = m[0][1];
   result[1][1] = m[1][1];
   result[2][0] = m[0][2];
   result[2][1] = m[1][2];
   result[3][0] = m[0][3];
   result[3][1] = m[1][3];
   return result;
  }
 };

 template <typename T, precision P, bool Aligned>
 struct compute_transpose<tmat3x2, T, P, Aligned>
 {
  inline static tmat2x3<T, P> call(tmat3x2<T, P> const & m)
  {
   tmat2x3<T, P> result(uninitialize);
   result[0][0] = m[0][0];
   result[0][1] = m[1][0];
   result[0][2] = m[2][0];
   result[1][0] = m[0][1];
   result[1][1] = m[1][1];
   result[1][2] = m[2][1];
   return result;
  }
 };

 template <typename T, precision P, bool Aligned>
 struct compute_transpose<tmat3x3, T, P, Aligned>
 {
  inline static tmat3x3<T, P> call(tmat3x3<T, P> const & m)
  {
   tmat3x3<T, P> result(uninitialize);
   result[0][0] = m[0][0];
   result[0][1] = m[1][0];
   result[0][2] = m[2][0];

   result[1][0] = m[0][1];
   result[1][1] = m[1][1];
   result[1][2] = m[2][1];

   result[2][0] = m[0][2];
   result[2][1] = m[1][2];
   result[2][2] = m[2][2];
   return result;
  }
 };

 template <typename T, precision P, bool Aligned>
 struct compute_transpose<tmat3x4, T, P, Aligned>
 {
  inline static tmat4x3<T, P> call(tmat3x4<T, P> const & m)
  {
   tmat4x3<T, P> result(uninitialize);
   result[0][0] = m[0][0];
   result[0][1] = m[1][0];
   result[0][2] = m[2][0];
   result[1][0] = m[0][1];
   result[1][1] = m[1][1];
   result[1][2] = m[2][1];
   result[2][0] = m[0][2];
   result[2][1] = m[1][2];
   result[2][2] = m[2][2];
   result[3][0] = m[0][3];
   result[3][1] = m[1][3];
   result[3][2] = m[2][3];
   return result;
  }
 };

 template <typename T, precision P, bool Aligned>
 struct compute_transpose<tmat4x2, T, P, Aligned>
 {
  inline static tmat2x4<T, P> call(tmat4x2<T, P> const & m)
  {
   tmat2x4<T, P> result(uninitialize);
   result[0][0] = m[0][0];
   result[0][1] = m[1][0];
   result[0][2] = m[2][0];
   result[0][3] = m[3][0];
   result[1][0] = m[0][1];
   result[1][1] = m[1][1];
   result[1][2] = m[2][1];
   result[1][3] = m[3][1];
   return result;
  }
 };

 template <typename T, precision P, bool Aligned>
 struct compute_transpose<tmat4x3, T, P, Aligned>
 {
  inline static tmat3x4<T, P> call(tmat4x3<T, P> const & m)
  {
   tmat3x4<T, P> result(uninitialize);
   result[0][0] = m[0][0];
   result[0][1] = m[1][0];
   result[0][2] = m[2][0];
   result[0][3] = m[3][0];
   result[1][0] = m[0][1];
   result[1][1] = m[1][1];
   result[1][2] = m[2][1];
   result[1][3] = m[3][1];
   result[2][0] = m[0][2];
   result[2][1] = m[1][2];
   result[2][2] = m[2][2];
   result[2][3] = m[3][2];
   return result;
  }
 };

 template <typename T, precision P, bool Aligned>
 struct compute_transpose<tmat4x4, T, P, Aligned>
 {
  inline static tmat4x4<T, P> call(tmat4x4<T, P> const & m)
  {
   tmat4x4<T, P> result(uninitialize);
   result[0][0] = m[0][0];
   result[0][1] = m[1][0];
   result[0][2] = m[2][0];
   result[0][3] = m[3][0];

   result[1][0] = m[0][1];
   result[1][1] = m[1][1];
   result[1][2] = m[2][1];
   result[1][3] = m[3][1];

   result[2][0] = m[0][2];
   result[2][1] = m[1][2];
   result[2][2] = m[2][2];
   result[2][3] = m[3][2];

   result[3][0] = m[0][3];
   result[3][1] = m[1][3];
   result[3][2] = m[2][3];
   result[3][3] = m[3][3];
   return result;
  }
 };

 template <template <typename, precision> class matType, typename T, precision P, bool Aligned>
 struct compute_determinant{};

 template <typename T, precision P, bool Aligned>
 struct compute_determinant<tmat2x2, T, P, Aligned>
 {
  inline static T call(tmat2x2<T, P> const & m)
  {
   return m[0][0] * m[1][1] - m[1][0] * m[0][1];
  }
 };

 template <typename T, precision P, bool Aligned>
 struct compute_determinant<tmat3x3, T, P, Aligned>
 {
  inline static T call(tmat3x3<T, P> const & m)
  {
   return
    + m[0][0] * (m[1][1] * m[2][2] - m[2][1] * m[1][2])
    - m[1][0] * (m[0][1] * m[2][2] - m[2][1] * m[0][2])
    + m[2][0] * (m[0][1] * m[1][2] - m[1][1] * m[0][2]);
  }
 };

 template <typename T, precision P, bool Aligned>
 struct compute_determinant<tmat4x4, T, P, Aligned>
 {
  inline static T call(tmat4x4<T, P> const & m)
  {
   T SubFactor00 = m[2][2] * m[3][3] - m[3][2] * m[2][3];
   T SubFactor01 = m[2][1] * m[3][3] - m[3][1] * m[2][3];
   T SubFactor02 = m[2][1] * m[3][2] - m[3][1] * m[2][2];
   T SubFactor03 = m[2][0] * m[3][3] - m[3][0] * m[2][3];
   T SubFactor04 = m[2][0] * m[3][2] - m[3][0] * m[2][2];
   T SubFactor05 = m[2][0] * m[3][1] - m[3][0] * m[2][1];

   tvec4<T, P> DetCof(
    + (m[1][1] * SubFactor00 - m[1][2] * SubFactor01 + m[1][3] * SubFactor02),
    - (m[1][0] * SubFactor00 - m[1][2] * SubFactor03 + m[1][3] * SubFactor04),
    + (m[1][0] * SubFactor01 - m[1][1] * SubFactor03 + m[1][3] * SubFactor05),
    - (m[1][0] * SubFactor02 - m[1][1] * SubFactor04 + m[1][2] * SubFactor05));

   return
    m[0][0] * DetCof[0] + m[0][1] * DetCof[1] +
    m[0][2] * DetCof[2] + m[0][3] * DetCof[3];
  }
 };

 template <template <typename, precision> class matType, typename T, precision P, bool Aligned>
 struct compute_inverse{};

 template <typename T, precision P, bool Aligned>
 struct compute_inverse<tmat2x2, T, P, Aligned>
 {
  inline static tmat2x2<T, P> call(tmat2x2<T, P> const& m)
  {
   T OneOverDeterminant = static_cast<T>(1) / (
    + m[0][0] * m[1][1]
    - m[1][0] * m[0][1]);

   tmat2x2<T, P> Inverse(
    + m[1][1] * OneOverDeterminant,
    - m[0][1] * OneOverDeterminant,
    - m[1][0] * OneOverDeterminant,
    + m[0][0] * OneOverDeterminant);

   return Inverse;
  }
 };

 template <typename T, precision P, bool Aligned>
 struct compute_inverse<tmat3x3, T, P, Aligned>
 {
  inline static tmat3x3<T, P> call(tmat3x3<T, P> const& m)
  {
   T OneOverDeterminant = static_cast<T>(1) / (
    + m[0][0] * (m[1][1] * m[2][2] - m[2][1] * m[1][2])
    - m[1][0] * (m[0][1] * m[2][2] - m[2][1] * m[0][2])
    + m[2][0] * (m[0][1] * m[1][2] - m[1][1] * m[0][2]));

   tmat3x3<T, P> Inverse(uninitialize);
   Inverse[0][0] = + (m[1][1] * m[2][2] - m[2][1] * m[1][2]) * OneOverDeterminant;
   Inverse[1][0] = - (m[1][0] * m[2][2] - m[2][0] * m[1][2]) * OneOverDeterminant;
   Inverse[2][0] = + (m[1][0] * m[2][1] - m[2][0] * m[1][1]) * OneOverDeterminant;
   Inverse[0][1] = - (m[0][1] * m[2][2] - m[2][1] * m[0][2]) * OneOverDeterminant;
   Inverse[1][1] = + (m[0][0] * m[2][2] - m[2][0] * m[0][2]) * OneOverDeterminant;
   Inverse[2][1] = - (m[0][0] * m[2][1] - m[2][0] * m[0][1]) * OneOverDeterminant;
   Inverse[0][2] = + (m[0][1] * m[1][2] - m[1][1] * m[0][2]) * OneOverDeterminant;
   Inverse[1][2] = - (m[0][0] * m[1][2] - m[1][0] * m[0][2]) * OneOverDeterminant;
   Inverse[2][2] = + (m[0][0] * m[1][1] - m[1][0] * m[0][1]) * OneOverDeterminant;

   return Inverse;
  }
 };

 template <typename T, precision P, bool Aligned>
 struct compute_inverse<tmat4x4, T, P, Aligned>
 {
  inline static tmat4x4<T, P> call(tmat4x4<T, P> const& m)
  {
   T Coef00 = m[2][2] * m[3][3] - m[3][2] * m[2][3];
   T Coef02 = m[1][2] * m[3][3] - m[3][2] * m[1][3];
   T Coef03 = m[1][2] * m[2][3] - m[2][2] * m[1][3];

   T Coef04 = m[2][1] * m[3][3] - m[3][1] * m[2][3];
   T Coef06 = m[1][1] * m[3][3] - m[3][1] * m[1][3];
   T Coef07 = m[1][1] * m[2][3] - m[2][1] * m[1][3];

   T Coef08 = m[2][1] * m[3][2] - m[3][1] * m[2][2];
   T Coef10 = m[1][1] * m[3][2] - m[3][1] * m[1][2];
   T Coef11 = m[1][1] * m[2][2] - m[2][1] * m[1][2];

   T Coef12 = m[2][0] * m[3][3] - m[3][0] * m[2][3];
   T Coef14 = m[1][0] * m[3][3] - m[3][0] * m[1][3];
   T Coef15 = m[1][0] * m[2][3] - m[2][0] * m[1][3];

   T Coef16 = m[2][0] * m[3][2] - m[3][0] * m[2][2];
   T Coef18 = m[1][0] * m[3][2] - m[3][0] * m[1][2];
   T Coef19 = m[1][0] * m[2][2] - m[2][0] * m[1][2];

   T Coef20 = m[2][0] * m[3][1] - m[3][0] * m[2][1];
   T Coef22 = m[1][0] * m[3][1] - m[3][0] * m[1][1];
   T Coef23 = m[1][0] * m[2][1] - m[2][0] * m[1][1];

   tvec4<T, P> Fac0(Coef00, Coef00, Coef02, Coef03);
   tvec4<T, P> Fac1(Coef04, Coef04, Coef06, Coef07);
   tvec4<T, P> Fac2(Coef08, Coef08, Coef10, Coef11);
   tvec4<T, P> Fac3(Coef12, Coef12, Coef14, Coef15);
   tvec4<T, P> Fac4(Coef16, Coef16, Coef18, Coef19);
   tvec4<T, P> Fac5(Coef20, Coef20, Coef22, Coef23);

   tvec4<T, P> Vec0(m[1][0], m[0][0], m[0][0], m[0][0]);
   tvec4<T, P> Vec1(m[1][1], m[0][1], m[0][1], m[0][1]);
   tvec4<T, P> Vec2(m[1][2], m[0][2], m[0][2], m[0][2]);
   tvec4<T, P> Vec3(m[1][3], m[0][3], m[0][3], m[0][3]);

   tvec4<T, P> Inv0(Vec1 * Fac0 - Vec2 * Fac1 + Vec3 * Fac2);
   tvec4<T, P> Inv1(Vec0 * Fac0 - Vec2 * Fac3 + Vec3 * Fac4);
   tvec4<T, P> Inv2(Vec0 * Fac1 - Vec1 * Fac3 + Vec3 * Fac5);
   tvec4<T, P> Inv3(Vec0 * Fac2 - Vec1 * Fac4 + Vec2 * Fac5);

   tvec4<T, P> SignA(+1, -1, +1, -1);
   tvec4<T, P> SignB(-1, +1, -1, +1);
   tmat4x4<T, P> Inverse(Inv0 * SignA, Inv1 * SignB, Inv2 * SignA, Inv3 * SignB);

   tvec4<T, P> Row0(Inverse[0][0], Inverse[1][0], Inverse[2][0], Inverse[3][0]);

   tvec4<T, P> Dot0(m[0] * Row0);
   T Dot1 = (Dot0.x + Dot0.y) + (Dot0.z + Dot0.w);

   T OneOverDeterminant = static_cast<T>(1) / Dot1;

   return Inverse * OneOverDeterminant;
  }
 };
}

 template <typename T, precision P, template <typename, precision> class matType>
 inline matType<T, P> matrixCompMult(matType<T, P> const & x, matType<T, P> const & y)
 {
  static_assert(std::numeric_limits<T>::is_iec559 || 0, "'matrixCompMult' only accept floating-point inputs");
  return detail::compute_matrixCompMult<matType, T, P, detail::is_aligned<P>::value>::call(x, y);
 }

 template<typename T, precision P, template <typename, precision> class vecTypeA, template <typename, precision> class vecTypeB>
 inline typename detail::outerProduct_trait<T, P, vecTypeA, vecTypeB>::type outerProduct(vecTypeA<T, P> const & c, vecTypeB<T, P> const & r)
 {
  static_assert(std::numeric_limits<T>::is_iec559 || 0, "'outerProduct' only accept floating-point inputs");

  typename detail::outerProduct_trait<T, P, vecTypeA, vecTypeB>::type m(uninitialize);
  for(length_t i = 0; i < m.length(); ++i)
   m[i] = c * r[i];
  return m;
 }

 template <typename T, precision P, template <typename, precision> class matType>
 inline typename matType<T, P>::transpose_type transpose(matType<T, P> const & m)
 {
  static_assert(std::numeric_limits<T>::is_iec559 || 0, "'transpose' only accept floating-point inputs");
  return detail::compute_transpose<matType, T, P, detail::is_aligned<P>::value>::call(m);
 }

 template <typename T, precision P, template <typename, precision> class matType>
 inline T determinant(matType<T, P> const & m)
 {
  static_assert(std::numeric_limits<T>::is_iec559 || 0, "'determinant' only accept floating-point inputs");
  return detail::compute_determinant<matType, T, P, detail::is_aligned<P>::value>::call(m);
 }

 template <typename T, precision P, template <typename, precision> class matType>
 inline matType<T, P> inverse(matType<T, P> const & m)
 {
  static_assert(std::numeric_limits<T>::is_iec559 || 0, "'inverse' only accept floating-point inputs");
  return detail::compute_inverse<matType, T, P, detail::is_aligned<P>::value>::call(m);
 }
}


# 1 "../../include/glm/detail/func_matrix_simd.inl" 1
# 400 "../../include/glm/detail/func_matrix.inl" 2
# 150 "../../include/glm/detail/func_matrix.hpp" 2
# 5 "../../include/glm/detail/type_mat2x2.inl" 2

namespace glm
{



  template <typename T, precision P>
  inline tmat2x2<T, P>::tmat2x2()
  {

    this->value[0] = col_type(1, 0);
    this->value[1] = col_type(0, 1);

  }
# 30 "../../include/glm/detail/type_mat2x2.inl"
 template <typename T, precision P>
 template <precision Q>
 inline tmat2x2<T, P>::tmat2x2(tmat2x2<T, Q> const & m)
 {
  this->value[0] = m.value[0];
  this->value[1] = m.value[1];
 }

 template <typename T, precision P>
 inline constexpr tmat2x2<T, P>::tmat2x2(ctor)
 {}

 template <typename T, precision P>
 inline tmat2x2<T, P>::tmat2x2(T scalar)
 {
  this->value[0] = col_type(scalar, 0);
  this->value[1] = col_type(0, scalar);
 }

 template <typename T, precision P>
 inline tmat2x2<T, P>::tmat2x2
 (
  T const & x0, T const & y0,
  T const & x1, T const & y1
 )
 {
  this->value[0] = col_type(x0, y0);
  this->value[1] = col_type(x1, y1);
 }

 template <typename T, precision P>
 inline tmat2x2<T, P>::tmat2x2(col_type const & v0, col_type const & v1)
 {
  this->value[0] = v0;
  this->value[1] = v1;
 }



 template <typename T, precision P>
 template <typename X1, typename Y1, typename X2, typename Y2>
 inline tmat2x2<T, P>::tmat2x2
 (
  X1 const & x1, Y1 const & y1,
  X2 const & x2, Y2 const & y2
 )
 {
  this->value[0] = col_type(static_cast<T>(x1), value_type(y1));
  this->value[1] = col_type(static_cast<T>(x2), value_type(y2));
 }

 template <typename T, precision P>
 template <typename V1, typename V2>
 inline tmat2x2<T, P>::tmat2x2(tvec2<V1, P> const & v1, tvec2<V2, P> const & v2)
 {
  this->value[0] = col_type(v1);
  this->value[1] = col_type(v2);
 }



 template <typename T, precision P>
 template <typename U, precision Q>
 inline tmat2x2<T, P>::tmat2x2(tmat2x2<U, Q> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
 }

 template <typename T, precision P>
 inline tmat2x2<T, P>::tmat2x2(tmat3x3<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
 }

 template <typename T, precision P>
 inline tmat2x2<T, P>::tmat2x2(tmat4x4<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
 }

 template <typename T, precision P>
 inline tmat2x2<T, P>::tmat2x2(tmat2x3<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
 }

 template <typename T, precision P>
 inline tmat2x2<T, P>::tmat2x2(tmat3x2<T, P> const & m)
 {
  this->value[0] = m[0];
  this->value[1] = m[1];
 }

 template <typename T, precision P>
 inline tmat2x2<T, P>::tmat2x2(tmat2x4<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
 }

 template <typename T, precision P>
 inline tmat2x2<T, P>::tmat2x2(tmat4x2<T, P> const & m)
 {
  this->value[0] = m[0];
  this->value[1] = m[1];
 }

 template <typename T, precision P>
 inline tmat2x2<T, P>::tmat2x2(tmat3x4<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
 }

 template <typename T, precision P>
 inline tmat2x2<T, P>::tmat2x2(tmat4x3<T, P> const & m)
 {
  this->value[0] = col_type(m[0]);
  this->value[1] = col_type(m[1]);
 }



 template <typename T, precision P>
 inline typename tmat2x2<T, P>::col_type & tmat2x2<T, P>::operator[](typename tmat2x2<T, P>::length_type i)
 {
  
# 160 "../../include/glm/detail/type_mat2x2.inl" 3
 ((
# 160 "../../include/glm/detail/type_mat2x2.inl"
 i < this->length()
# 160 "../../include/glm/detail/type_mat2x2.inl" 3
 ) ? (void)0 : _assert(
# 160 "../../include/glm/detail/type_mat2x2.inl"
 "i < this->length()"
# 160 "../../include/glm/detail/type_mat2x2.inl" 3
 , "../../include/glm/detail/type_mat2x2.inl", 160))
# 160 "../../include/glm/detail/type_mat2x2.inl"
                           ;
  return this->value[i];
 }

 template <typename T, precision P>
 inline typename tmat2x2<T, P>::col_type const & tmat2x2<T, P>::operator[](typename tmat2x2<T, P>::length_type i) const
 {
  
# 167 "../../include/glm/detail/type_mat2x2.inl" 3
 ((
# 167 "../../include/glm/detail/type_mat2x2.inl"
 i < this->length()
# 167 "../../include/glm/detail/type_mat2x2.inl" 3
 ) ? (void)0 : _assert(
# 167 "../../include/glm/detail/type_mat2x2.inl"
 "i < this->length()"
# 167 "../../include/glm/detail/type_mat2x2.inl" 3
 , "../../include/glm/detail/type_mat2x2.inl", 167))
# 167 "../../include/glm/detail/type_mat2x2.inl"
                           ;
  return this->value[i];
 }
# 183 "../../include/glm/detail/type_mat2x2.inl"
 template <typename T, precision P>
 template <typename U>
 inline tmat2x2<T, P>& tmat2x2<T, P>::operator=(tmat2x2<U, P> const & m)
 {
  this->value[0] = m[0];
  this->value[1] = m[1];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat2x2<T, P>& tmat2x2<T, P>::operator+=(U scalar)
 {
  this->value[0] += scalar;
  this->value[1] += scalar;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat2x2<T, P>& tmat2x2<T, P>::operator+=(tmat2x2<U, P> const & m)
 {
  this->value[0] += m[0];
  this->value[1] += m[1];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat2x2<T, P>& tmat2x2<T, P>::operator-=(U scalar)
 {
  this->value[0] -= scalar;
  this->value[1] -= scalar;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat2x2<T, P>& tmat2x2<T, P>::operator-=(tmat2x2<U, P> const & m)
 {
  this->value[0] -= m[0];
  this->value[1] -= m[1];
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat2x2<T, P>& tmat2x2<T, P>::operator*=(U scalar)
 {
  this->value[0] *= scalar;
  this->value[1] *= scalar;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat2x2<T, P>& tmat2x2<T, P>::operator*=(tmat2x2<U, P> const & m)
 {
  return (*this = *this * m);
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat2x2<T, P>& tmat2x2<T, P>::operator/=(U scalar)
 {
  this->value[0] /= scalar;
  this->value[1] /= scalar;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tmat2x2<T, P>& tmat2x2<T, P>::operator/=(tmat2x2<U, P> const & m)
 {
  return *this *= inverse(m);
 }



 template <typename T, precision P>
 inline tmat2x2<T, P>& tmat2x2<T, P>::operator++()
 {
  ++this->value[0];
  ++this->value[1];
  return *this;
 }

 template <typename T, precision P>
 inline tmat2x2<T, P>& tmat2x2<T, P>::operator--()
 {
  --this->value[0];
  --this->value[1];
  return *this;
 }

 template <typename T, precision P>
 inline tmat2x2<T, P> tmat2x2<T, P>::operator++(int)
 {
  tmat2x2<T, P> Result(*this);
  ++*this;
  return Result;
 }

 template <typename T, precision P>
 inline tmat2x2<T, P> tmat2x2<T, P>::operator--(int)
 {
  tmat2x2<T, P> Result(*this);
  --*this;
  return Result;
 }



 template <typename T, precision P>
 inline tmat2x2<T, P> operator+(tmat2x2<T, P> const & m)
 {
  return m;
 }

 template <typename T, precision P>
 inline tmat2x2<T, P> operator-(tmat2x2<T, P> const & m)
 {
  return tmat2x2<T, P>(
   -m[0],
   -m[1]);
 }



 template <typename T, precision P>
 inline tmat2x2<T, P> operator+(tmat2x2<T, P> const & m, T scalar)
 {
  return tmat2x2<T, P>(
   m[0] + scalar,
   m[1] + scalar);
 }

 template <typename T, precision P>
 inline tmat2x2<T, P> operator+(T scalar, tmat2x2<T, P> const & m)
 {
  return tmat2x2<T, P>(
   m[0] + scalar,
   m[1] + scalar);
 }

 template <typename T, precision P>
 inline tmat2x2<T, P> operator+(tmat2x2<T, P> const & m1, tmat2x2<T, P> const & m2)
 {
  return tmat2x2<T, P>(
   m1[0] + m2[0],
   m1[1] + m2[1]);
 }

 template <typename T, precision P>
 inline tmat2x2<T, P> operator-(tmat2x2<T, P> const & m, T scalar)
 {
  return tmat2x2<T, P>(
   m[0] - scalar,
   m[1] - scalar);
 }

 template <typename T, precision P>
 inline tmat2x2<T, P> operator-(T scalar, tmat2x2<T, P> const & m)
 {
  return tmat2x2<T, P>(
   scalar - m[0],
   scalar - m[1]);
 }

 template <typename T, precision P>
 inline tmat2x2<T, P> operator-(tmat2x2<T, P> const & m1, tmat2x2<T, P> const & m2)
 {
  return tmat2x2<T, P>(
   m1[0] - m2[0],
   m1[1] - m2[1]);
 }

 template <typename T, precision P>
 inline tmat2x2<T, P> operator*(tmat2x2<T, P> const & m, T scalar)
 {
  return tmat2x2<T, P>(
   m[0] * scalar,
   m[1] * scalar);
 }

 template <typename T, precision P>
 inline tmat2x2<T, P> operator*(T scalar, tmat2x2<T, P> const & m)
 {
  return tmat2x2<T, P>(
   m[0] * scalar,
   m[1] * scalar);
 }

 template <typename T, precision P>
 inline typename tmat2x2<T, P>::col_type operator*
 (
  tmat2x2<T, P> const & m,
  typename tmat2x2<T, P>::row_type const & v
 )
 {
  return tvec2<T, P>(
   m[0][0] * v.x + m[1][0] * v.y,
   m[0][1] * v.x + m[1][1] * v.y);
 }

 template <typename T, precision P>
 inline typename tmat2x2<T, P>::row_type operator*
 (
  typename tmat2x2<T, P>::col_type const & v,
  tmat2x2<T, P> const & m
 )
 {
  return tvec2<T, P>(
   v.x * m[0][0] + v.y * m[0][1],
   v.x * m[1][0] + v.y * m[1][1]);
 }

 template <typename T, precision P>
 inline tmat2x2<T, P> operator*(tmat2x2<T, P> const & m1, tmat2x2<T, P> const & m2)
 {
  return tmat2x2<T, P>(
   m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1],
   m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1],
   m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1],
   m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1]);
 }

 template <typename T, precision P>
 inline tmat3x2<T, P> operator*(tmat2x2<T, P> const & m1, tmat3x2<T, P> const & m2)
 {
  return tmat3x2<T, P>(
   m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1],
   m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1],
   m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1],
   m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1],
   m1[0][0] * m2[2][0] + m1[1][0] * m2[2][1],
   m1[0][1] * m2[2][0] + m1[1][1] * m2[2][1]);
 }

 template <typename T, precision P>
 inline tmat4x2<T, P> operator*(tmat2x2<T, P> const & m1, tmat4x2<T, P> const & m2)
 {
  return tmat4x2<T, P>(
   m1[0][0] * m2[0][0] + m1[1][0] * m2[0][1],
   m1[0][1] * m2[0][0] + m1[1][1] * m2[0][1],
   m1[0][0] * m2[1][0] + m1[1][0] * m2[1][1],
   m1[0][1] * m2[1][0] + m1[1][1] * m2[1][1],
   m1[0][0] * m2[2][0] + m1[1][0] * m2[2][1],
   m1[0][1] * m2[2][0] + m1[1][1] * m2[2][1],
   m1[0][0] * m2[3][0] + m1[1][0] * m2[3][1],
   m1[0][1] * m2[3][0] + m1[1][1] * m2[3][1]);
 }

 template <typename T, precision P>
 inline tmat2x2<T, P> operator/(tmat2x2<T, P> const & m, T scalar)
 {
  return tmat2x2<T, P>(
   m[0] / scalar,
   m[1] / scalar);
 }

 template <typename T, precision P>
 inline tmat2x2<T, P> operator/(T scalar, tmat2x2<T, P> const & m)
 {
  return tmat2x2<T, P>(
   scalar / m[0],
   scalar / m[1]);
 }

 template <typename T, precision P>
 inline typename tmat2x2<T, P>::col_type operator/(tmat2x2<T, P> const & m, typename tmat2x2<T, P>::row_type const & v)
 {
  return inverse(m) * v;
 }

 template <typename T, precision P>
 inline typename tmat2x2<T, P>::row_type operator/(typename tmat2x2<T, P>::col_type const & v, tmat2x2<T, P> const & m)
 {
  return v * inverse(m);
 }

 template <typename T, precision P>
 inline tmat2x2<T, P> operator/(tmat2x2<T, P> const & m1, tmat2x2<T, P> const & m2)
 {
  tmat2x2<T, P> m1_copy(m1);
  return m1_copy /= m2;
 }



 template <typename T, precision P>
 inline bool operator==(tmat2x2<T, P> const & m1, tmat2x2<T, P> const & m2)
 {
  return (m1[0] == m2[0]) && (m1[1] == m2[1]);
 }

 template <typename T, precision P>
 inline bool operator!=(tmat2x2<T, P> const & m1, tmat2x2<T, P> const & m2)
 {
  return (m1[0] != m2[0]) || (m1[1] != m2[1]);
 }
}
# 183 "../../include/glm/detail/type_mat2x2.hpp" 2
# 7 "../../include/glm/mat2x2.hpp" 2

namespace glm
{





 typedef tmat2x2<float, lowp> lowp_mat2;






 typedef tmat2x2<float, mediump> mediump_mat2;






 typedef tmat2x2<float, highp> highp_mat2;






 typedef tmat2x2<float, lowp> lowp_mat2x2;






 typedef tmat2x2<float, mediump> mediump_mat2x2;






 typedef tmat2x2<float, highp> highp_mat2x2;

}
# 72 "../../include/glm/glm.hpp" 2
# 81 "../../include/glm/glm.hpp"
# 1 "../../include/glm/trigonometric.hpp" 1



       

# 1 "../../include/glm/detail/func_trigonometric.hpp" 1
# 15 "../../include/glm/detail/func_trigonometric.hpp"
       




namespace glm
{
# 31 "../../include/glm/detail/func_trigonometric.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 constexpr vecType<T, P> radians(vecType<T, P> const & degrees);







 template <typename T, precision P, template <typename, precision> class vecType>
 constexpr vecType<T, P> degrees(vecType<T, P> const & radians);
# 50 "../../include/glm/detail/func_trigonometric.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> sin(vecType<T, P> const & angle);
# 60 "../../include/glm/detail/func_trigonometric.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> cos(vecType<T, P> const & angle);







 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> tan(vecType<T, P> const & angle);
# 80 "../../include/glm/detail/func_trigonometric.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> asin(vecType<T, P> const & x);
# 91 "../../include/glm/detail/func_trigonometric.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> acos(vecType<T, P> const & x);
# 104 "../../include/glm/detail/func_trigonometric.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> atan(vecType<T, P> const & y, vecType<T, P> const & x);
# 114 "../../include/glm/detail/func_trigonometric.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> atan(vecType<T, P> const & y_over_x);







 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> sinh(vecType<T, P> const & angle);







 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> cosh(vecType<T, P> const & angle);







 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> tanh(vecType<T, P> const & angle);







 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> asinh(vecType<T, P> const & x);
# 160 "../../include/glm/detail/func_trigonometric.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> acosh(vecType<T, P> const & x);
# 170 "../../include/glm/detail/func_trigonometric.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> atanh(vecType<T, P> const & x);


}

# 1 "../../include/glm/detail/func_trigonometric.inl" 1




# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 3
# 6 "../../include/glm/detail/func_trigonometric.inl" 2


namespace glm
{

 template <typename genType>
 inline constexpr genType radians(genType degrees)
 {
  static_assert(std::numeric_limits<genType>::is_iec559, "'radians' only accept floating-point input");

  return degrees * static_cast<genType>(0.01745329251994329576923690768489);
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline constexpr vecType<T, P> radians(vecType<T, P> const & v)
 {
  return detail::functor1<T, T, P, vecType>::call(radians, v);
 }


 template <typename genType>
 inline constexpr genType degrees(genType radians)
 {
  static_assert(std::numeric_limits<genType>::is_iec559, "'degrees' only accept floating-point input");

  return radians * static_cast<genType>(57.295779513082320876798154814105);
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline constexpr vecType<T, P> degrees(vecType<T, P> const & v)
 {
  return detail::functor1<T, T, P, vecType>::call(degrees, v);
 }


 using ::std::sin;

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> sin(vecType<T, P> const & v)
 {
  return detail::functor1<T, T, P, vecType>::call(sin, v);
 }


 using std::cos;

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> cos(vecType<T, P> const & v)
 {
  return detail::functor1<T, T, P, vecType>::call(cos, v);
 }


 using std::tan;

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> tan(vecType<T, P> const & v)
 {
  return detail::functor1<T, T, P, vecType>::call(tan, v);
 }


 using std::asin;

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> asin(vecType<T, P> const & v)
 {
  return detail::functor1<T, T, P, vecType>::call(asin, v);
 }


 using std::acos;

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> acos(vecType<T, P> const & v)
 {
  return detail::functor1<T, T, P, vecType>::call(acos, v);
 }


 template <typename genType>
 inline genType atan(genType y, genType x)
 {
  static_assert(std::numeric_limits<genType>::is_iec559, "'atan' only accept floating-point input");

  return ::std::atan2(y, x);
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> atan(vecType<T, P> const & a, vecType<T, P> const & b)
 {
  return detail::functor2<T, P, vecType>::call(::std::atan2, a, b);
 }

 using std::atan;

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> atan(vecType<T, P> const & v)
 {
  return detail::functor1<T, T, P, vecType>::call(atan, v);
 }


 using std::sinh;

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> sinh(vecType<T, P> const & v)
 {
  return detail::functor1<T, T, P, vecType>::call(sinh, v);
 }


 using std::cosh;

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> cosh(vecType<T, P> const & v)
 {
  return detail::functor1<T, T, P, vecType>::call(cosh, v);
 }


 using std::tanh;

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> tanh(vecType<T, P> const & v)
 {
  return detail::functor1<T, T, P, vecType>::call(tanh, v);
 }



  using std::asinh;
# 148 "../../include/glm/detail/func_trigonometric.inl"
 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> asinh(vecType<T, P> const & v)
 {
  return detail::functor1<T, T, P, vecType>::call(asinh, v);
 }



  using std::acosh;
# 169 "../../include/glm/detail/func_trigonometric.inl"
 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> acosh(vecType<T, P> const & v)
 {
  return detail::functor1<T, T, P, vecType>::call(acosh, v);
 }



  using std::atanh;
# 190 "../../include/glm/detail/func_trigonometric.inl"
 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> atanh(vecType<T, P> const & v)
 {
  return detail::functor1<T, T, P, vecType>::call(atanh, v);
 }
}


# 1 "../../include/glm/detail/func_trigonometric_simd.inl" 1
# 199 "../../include/glm/detail/func_trigonometric.inl" 2
# 177 "../../include/glm/detail/func_trigonometric.hpp" 2
# 7 "../../include/glm/trigonometric.hpp" 2
# 82 "../../include/glm/glm.hpp" 2
# 1 "../../include/glm/exponential.hpp" 1



       
# 83 "../../include/glm/glm.hpp" 2
# 1 "../../include/glm/common.hpp" 1



       
# 84 "../../include/glm/glm.hpp" 2
# 1 "../../include/glm/packing.hpp" 1



       

# 1 "../../include/glm/detail/func_packing.hpp" 1
# 12 "../../include/glm/detail/func_packing.hpp"
       




namespace glm
{
# 33 "../../include/glm/detail/func_packing.hpp"
 uint packUnorm2x16(vec2 const & v);
# 46 "../../include/glm/detail/func_packing.hpp"
 uint packSnorm2x16(vec2 const & v);
# 59 "../../include/glm/detail/func_packing.hpp"
 uint packUnorm4x8(vec4 const & v);
# 72 "../../include/glm/detail/func_packing.hpp"
 uint packSnorm4x8(vec4 const & v);
# 85 "../../include/glm/detail/func_packing.hpp"
 vec2 unpackUnorm2x16(uint p);
# 98 "../../include/glm/detail/func_packing.hpp"
 vec2 unpackSnorm2x16(uint p);
# 111 "../../include/glm/detail/func_packing.hpp"
 vec4 unpackUnorm4x8(uint p);
# 124 "../../include/glm/detail/func_packing.hpp"
 vec4 unpackSnorm4x8(uint p);
# 134 "../../include/glm/detail/func_packing.hpp"
 double packDouble2x32(uvec2 const & v);
# 143 "../../include/glm/detail/func_packing.hpp"
 uvec2 unpackDouble2x32(double v);
# 153 "../../include/glm/detail/func_packing.hpp"
 uint packHalf2x16(vec2 const & v);
# 163 "../../include/glm/detail/func_packing.hpp"
 vec2 unpackHalf2x16(uint v);


}

# 1 "../../include/glm/detail/func_packing.inl" 1




# 1 "../../include/glm/detail/type_half.hpp" 1



       



namespace glm{
namespace detail
{
 typedef short hdata;

 float toFloat32(hdata value);
 hdata toFloat16(float const & value);

}
}

# 1 "../../include/glm/detail/type_half.inl" 1



namespace glm{
namespace detail
{
 inline float overflow()
 {
  volatile float f = 1e10;

  for(int i = 0; i < 10; ++i)
   f *= f;
  return f;
 }

 union uif32
 {
  inline uif32() :
   i(0)
  {}

  inline uif32(float f_) :
   f(f_)
  {}

  inline uif32(uint32 i_) :
   i(i_)
  {}

  float f;
  uint32 i;
 };

 inline float toFloat32(hdata value)
 {
  int s = (value >> 15) & 0x00000001;
  int e = (value >> 10) & 0x0000001f;
  int m = value & 0x000003ff;

  if(e == 0)
  {
   if(m == 0)
   {




    detail::uif32 result;
    result.i = (unsigned int)(s << 31);
    return result.f;
   }
   else
   {




    while(!(m & 0x00000400))
    {
     m <<= 1;
     e -= 1;
    }

    e += 1;
    m &= ~0x00000400;
   }
  }
  else if(e == 31)
  {
   if(m == 0)
   {




    uif32 result;
    result.i = (unsigned int)((s << 31) | 0x7f800000);
    return result.f;
   }
   else
   {




    uif32 result;
    result.i = (unsigned int)((s << 31) | 0x7f800000 | (m << 13));
    return result.f;
   }
  }





  e = e + (127 - 15);
  m = m << 13;





  uif32 Result;
  Result.i = (unsigned int)((s << 31) | (e << 23) | m);
  return Result.f;
 }

 inline hdata toFloat16(float const & f)
 {
  uif32 Entry;
  Entry.f = f;
  int i = (int)Entry.i;
# 124 "../../include/glm/detail/type_half.inl"
  int s = (i >> 16) & 0x00008000;
  int e = ((i >> 23) & 0x000000ff) - (127 - 15);
  int m = i & 0x007fffff;





  if(e <= 0)
  {
   if(e < -10)
   {
# 144 "../../include/glm/detail/type_half.inl"
    return hdata(s);
   }
# 154 "../../include/glm/detail/type_half.inl"
   m = (m | 0x00800000) >> (1 - e);
# 165 "../../include/glm/detail/type_half.inl"
   if(m & 0x00001000)
    m += 0x00002000;





   return hdata(s | (m >> 13));
  }
  else if(e == 0xff - (127 - 15))
  {
   if(m == 0)
   {





    return hdata(s | 0x7c00);
   }
   else
   {
# 196 "../../include/glm/detail/type_half.inl"
    m >>= 13;

    return hdata(s | 0x7c00 | m | (m == 0));
   }
  }
  else
  {
# 212 "../../include/glm/detail/type_half.inl"
   if(m & 0x00001000)
   {
    m += 0x00002000;

    if(m & 0x00800000)
    {
     m = 0;
     e += 1;
    }
   }





   if (e > 30)
   {
    overflow();

    return hdata(s | 0x7c00);

   }





   return hdata(s | (e << 10) | (m >> 13));
  }
 }

}
}
# 20 "../../include/glm/detail/type_half.hpp" 2
# 6 "../../include/glm/detail/func_packing.inl" 2


namespace glm
{
 inline uint packUnorm2x16(vec2 const & v)
 {
  union
  {
   u16 in[2];
   uint out;
  } u;

  u16vec2 result(round(clamp(v, 0.0f, 1.0f) * 65535.0f));

  u.in[0] = result[0];
  u.in[1] = result[1];

  return u.out;
 }

 inline vec2 unpackUnorm2x16(uint p)
 {
  union
  {
   uint in;
   u16 out[2];
  } u;

  u.in = p;

  return vec2(u.out[0], u.out[1]) * 1.5259021896696421759365224689097e-5f;
 }

 inline uint packSnorm2x16(vec2 const & v)
 {
  union
  {
   i16 in[2];
   uint out;
  } u;

  i16vec2 result(round(clamp(v, -1.0f, 1.0f) * 32767.0f));

  u.in[0] = result[0];
  u.in[1] = result[1];

  return u.out;
 }

 inline vec2 unpackSnorm2x16(uint p)
 {
  union
  {
   uint in;
   i16 out[2];
  } u;

  u.in = p;

  return clamp(vec2(u.out[0], u.out[1]) * 3.0518509475997192297128208258309e-5f, -1.0f, 1.0f);
 }

 inline uint packUnorm4x8(vec4 const & v)
 {
  union
  {
   u8 in[4];
   uint out;
  } u;

  u8vec4 result(round(clamp(v, 0.0f, 1.0f) * 255.0f));

  u.in[0] = result[0];
  u.in[1] = result[1];
  u.in[2] = result[2];
  u.in[3] = result[3];

  return u.out;
 }

 inline vec4 unpackUnorm4x8(uint p)
 {
  union
  {
   uint in;
   u8 out[4];
  } u;

  u.in = p;

  return vec4(u.out[0], u.out[1], u.out[2], u.out[3]) * 0.0039215686274509803921568627451f;
 }

 inline uint packSnorm4x8(vec4 const & v)
 {
  union
  {
   i8 in[4];
   uint out;
  } u;

  i8vec4 result(round(clamp(v, -1.0f, 1.0f) * 127.0f));

  u.in[0] = result[0];
  u.in[1] = result[1];
  u.in[2] = result[2];
  u.in[3] = result[3];

  return u.out;
 }

 inline glm::vec4 unpackSnorm4x8(uint p)
 {
  union
  {
   uint in;
   i8 out[4];
  } u;

  u.in = p;

  return clamp(vec4(u.out[0], u.out[1], u.out[2], u.out[3]) * 0.0078740157480315f, -1.0f, 1.0f);
 }

 inline double packDouble2x32(uvec2 const & v)
 {
  union
  {
   uint in[2];
   double out;
  } u;

  u.in[0] = v[0];
  u.in[1] = v[1];

  return u.out;
 }

 inline uvec2 unpackDouble2x32(double v)
 {
  union
  {
   double in;
   uint out[2];
  } u;

  u.in = v;

  return uvec2(u.out[0], u.out[1]);
 }

 inline uint packHalf2x16(vec2 const & v)
 {
  union
  {
   i16 in[2];
   uint out;
  } u;

  u.in[0] = detail::toFloat16(v.x);
  u.in[1] = detail::toFloat16(v.y);

  return u.out;
 }

 inline vec2 unpackHalf2x16(uint v)
 {
  union
  {
   uint in;
   i16 out[2];
  } u;

  u.in = v;

  return vec2(
   detail::toFloat32(u.out[0]),
   detail::toFloat32(u.out[1]));
 }
}


# 1 "../../include/glm/detail/func_packing_simd.inl" 1



namespace glm{
namespace detail
{

}
}
# 189 "../../include/glm/detail/func_packing.inl" 2
# 169 "../../include/glm/detail/func_packing.hpp" 2
# 7 "../../include/glm/packing.hpp" 2
# 85 "../../include/glm/glm.hpp" 2

# 1 "../../include/glm/matrix.hpp" 1



       
# 87 "../../include/glm/glm.hpp" 2
# 1 "../../include/glm/vector_relational.hpp" 1



       
# 88 "../../include/glm/glm.hpp" 2
# 1 "../../include/glm/integer.hpp" 1



       

# 1 "../../include/glm/detail/func_integer.hpp" 1
# 13 "../../include/glm/detail/func_integer.hpp"
       






namespace glm
{
# 33 "../../include/glm/detail/func_integer.hpp"
 template <precision P, template <typename, precision> class vecType>
 vecType<uint, P> uaddCarry(
  vecType<uint, P> const & x,
  vecType<uint, P> const & y,
  vecType<uint, P> & carry);
# 47 "../../include/glm/detail/func_integer.hpp"
 template <precision P, template <typename, precision> class vecType>
 vecType<uint, P> usubBorrow(
  vecType<uint, P> const & x,
  vecType<uint, P> const & y,
  vecType<uint, P> & borrow);
# 61 "../../include/glm/detail/func_integer.hpp"
 template <precision P, template <typename, precision> class vecType>
 void umulExtended(
  vecType<uint, P> const & x,
  vecType<uint, P> const & y,
  vecType<uint, P> & msb,
  vecType<uint, P> & lsb);
# 76 "../../include/glm/detail/func_integer.hpp"
 template <precision P, template <typename, precision> class vecType>
 void imulExtended(
  vecType<int, P> const & x,
  vecType<int, P> const & y,
  vecType<int, P> & msb,
  vecType<int, P> & lsb);
# 98 "../../include/glm/detail/func_integer.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> bitfieldExtract(
  vecType<T, P> const & Value,
  int Offset,
  int Bits);
# 118 "../../include/glm/detail/func_integer.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> bitfieldInsert(
  vecType<T, P> const & Base,
  vecType<T, P> const & Insert,
  int Offset,
  int Bits);
# 133 "../../include/glm/detail/func_integer.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<T, P> bitfieldReverse(vecType<T, P> const & v);







 template <typename genType>
 int bitCount(genType v);







 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<int, P> bitCount(vecType<T, P> const & v);
# 162 "../../include/glm/detail/func_integer.hpp"
 template <typename genIUType>
 int findLSB(genIUType x);
# 173 "../../include/glm/detail/func_integer.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<int, P> findLSB(vecType<T, P> const & v);
# 185 "../../include/glm/detail/func_integer.hpp"
 template <typename genIUType>
 int findMSB(genIUType x);
# 197 "../../include/glm/detail/func_integer.hpp"
 template <typename T, precision P, template <typename, precision> class vecType>
 vecType<int, P> findMSB(vecType<T, P> const & v);


}

# 1 "../../include/glm/detail/func_integer.inl" 1
# 24 "../../include/glm/detail/func_integer.inl"
namespace glm{
namespace detail
{
 template <typename T>
 inline T mask(T Bits)
 {
  return Bits >= sizeof(T) * 8 ? ~static_cast<T>(0) : (static_cast<T>(1) << Bits) - static_cast<T>(1);
 }

 template <typename T, glm::precision P, template <typename, glm::precision> class vecType, bool Aligned, bool EXEC>
 struct compute_bitfieldReverseStep
 {
  inline static vecType<T, P> call(vecType<T, P> const & v, T, T)
  {
   return v;
  }
 };

 template <typename T, glm::precision P, template <typename, glm::precision> class vecType, bool Aligned>
 struct compute_bitfieldReverseStep<T, P, vecType, Aligned, true>
 {
  inline static vecType<T, P> call(vecType<T, P> const & v, T Mask, T Shift)
  {
   return (v & Mask) << Shift | (v & (~Mask)) >> Shift;
  }
 };

 template <typename T, glm::precision P, template <typename, glm::precision> class vecType, bool Aligned, bool EXEC>
 struct compute_bitfieldBitCountStep
 {
  inline static vecType<T, P> call(vecType<T, P> const & v, T, T)
  {
   return v;
  }
 };

 template <typename T, glm::precision P, template <typename, glm::precision> class vecType, bool Aligned>
 struct compute_bitfieldBitCountStep<T, P, vecType, Aligned, true>
 {
  inline static vecType<T, P> call(vecType<T, P> const & v, T Mask, T Shift)
  {
   return (v & Mask) + ((v >> Shift) & Mask);
  }
 };

 template <typename genIUType, size_t Bits>
 struct compute_findLSB
 {
  inline static int call(genIUType Value)
  {
   if(Value == 0)
    return -1;

   return glm::bitCount(~Value & (Value - static_cast<genIUType>(1)));
  }
 };
# 107 "../../include/glm/detail/func_integer.inl"
 template <typename T, glm::precision P, template <class, glm::precision> class vecType, bool EXEC = true>
 struct compute_findMSB_step_vec
 {
  inline static vecType<T, P> call(vecType<T, P> const & x, T Shift)
  {
   return x | (x >> Shift);
  }
 };

 template <typename T, glm::precision P, template <typename, glm::precision> class vecType>
 struct compute_findMSB_step_vec<T, P, vecType, false>
 {
  inline static vecType<T, P> call(vecType<T, P> const & x, T)
  {
   return x;
  }
 };

 template <typename T, glm::precision P, template <typename, glm::precision> class vecType, int>
 struct compute_findMSB_vec
 {
  inline static vecType<int, P> call(vecType<T, P> const & vec)
  {
   vecType<T, P> x(vec);
   x = compute_findMSB_step_vec<T, P, vecType, sizeof(T) * 8 >= 8>::call(x, static_cast<T>( 1));
   x = compute_findMSB_step_vec<T, P, vecType, sizeof(T) * 8 >= 8>::call(x, static_cast<T>( 2));
   x = compute_findMSB_step_vec<T, P, vecType, sizeof(T) * 8 >= 8>::call(x, static_cast<T>( 4));
   x = compute_findMSB_step_vec<T, P, vecType, sizeof(T) * 8 >= 16>::call(x, static_cast<T>( 8));
   x = compute_findMSB_step_vec<T, P, vecType, sizeof(T) * 8 >= 32>::call(x, static_cast<T>(16));
   x = compute_findMSB_step_vec<T, P, vecType, sizeof(T) * 8 >= 64>::call(x, static_cast<T>(32));
   return vecType<int, P>(sizeof(T) * 8 - 1) - glm::bitCount(~x);
  }
 };
# 178 "../../include/glm/detail/func_integer.inl"
}


 inline uint uaddCarry(uint const & x, uint const & y, uint & Carry)
 {
  uint64 const Value64(static_cast<uint64>(x) + static_cast<uint64>(y));
  uint64 const Max32((static_cast<uint64>(1) << static_cast<uint64>(32)) - static_cast<uint64>(1));
  Carry = Value64 > Max32 ? 1u : 0u;
  return static_cast<uint32>(Value64 % (Max32 + static_cast<uint64>(1)));
 }

 template <precision P, template <typename, precision> class vecType>
 inline vecType<uint, P> uaddCarry(vecType<uint, P> const & x, vecType<uint, P> const & y, vecType<uint, P> & Carry)
 {
  vecType<uint64, P> Value64(vecType<uint64, P>(x) + vecType<uint64, P>(y));
  vecType<uint64, P> Max32((static_cast<uint64>(1) << static_cast<uint64>(32)) - static_cast<uint64>(1));
  Carry = mix(vecType<uint32, P>(0), vecType<uint32, P>(1), greaterThan(Value64, Max32));
  return vecType<uint32,P>(Value64 % (Max32 + static_cast<uint64>(1)));
 }


 inline uint usubBorrow(uint const & x, uint const & y, uint & Borrow)
 {
  static_assert(sizeof(uint) == sizeof(uint32), "uint and uint32 size mismatch");

  Borrow = x >= y ? static_cast<uint32>(0) : static_cast<uint32>(1);
  if(y >= x)
   return y - x;
  else
   return static_cast<uint32>((static_cast<int64>(1) << static_cast<int64>(32)) + (static_cast<int64>(y) - static_cast<int64>(x)));
 }

 template <precision P, template <typename, precision> class vecType>
 inline vecType<uint, P> usubBorrow(vecType<uint, P> const & x, vecType<uint, P> const & y, vecType<uint, P> & Borrow)
 {
  Borrow = mix(vecType<uint, P>(1), vecType<uint, P>(0), greaterThanEqual(x, y));
  vecType<uint, P> const YgeX(y - x);
  vecType<uint, P> const XgeY(vecType<uint32, P>((static_cast<int64>(1) << static_cast<int64>(32)) + (vecType<int64, P>(y) - vecType<int64, P>(x))));
  return mix(XgeY, YgeX, greaterThanEqual(y, x));
 }


 inline void umulExtended(uint const & x, uint const & y, uint & msb, uint & lsb)
 {
  static_assert(sizeof(uint) == sizeof(uint32), "uint and uint32 size mismatch");

  uint64 Value64 = static_cast<uint64>(x) * static_cast<uint64>(y);
  msb = static_cast<uint>(Value64 >> static_cast<uint64>(32));
  lsb = static_cast<uint>(Value64);
 }

 template <precision P, template <typename, precision> class vecType>
 inline void umulExtended(vecType<uint, P> const & x, vecType<uint, P> const & y, vecType<uint, P> & msb, vecType<uint, P> & lsb)
 {
  static_assert(sizeof(uint) == sizeof(uint32), "uint and uint32 size mismatch");

  vecType<uint64, P> Value64(vecType<uint64, P>(x) * vecType<uint64, P>(y));
  msb = vecType<uint32, P>(Value64 >> static_cast<uint64>(32));
  lsb = vecType<uint32, P>(Value64);
 }


 inline void imulExtended(int x, int y, int & msb, int & lsb)
 {
  static_assert(sizeof(int) == sizeof(int32), "int and int32 size mismatch");

  int64 Value64 = static_cast<int64>(x) * static_cast<int64>(y);
  msb = static_cast<int>(Value64 >> static_cast<int64>(32));
  lsb = static_cast<int>(Value64);
 }

 template <precision P, template <typename, precision> class vecType>
 inline void imulExtended(vecType<int, P> const & x, vecType<int, P> const & y, vecType<int, P> & msb, vecType<int, P> & lsb)
 {
  static_assert(sizeof(int) == sizeof(int32), "int and int32 size mismatch");

  vecType<int64, P> Value64(vecType<int64, P>(x) * vecType<int64, P>(y));
  lsb = vecType<int32, P>(Value64 & static_cast<int64>(0xFFFFFFFF));
  msb = vecType<int32, P>((Value64 >> static_cast<int64>(32)) & static_cast<int64>(0xFFFFFFFF));
 }


 template <typename genIUType>
 inline genIUType bitfieldExtract(genIUType Value, int Offset, int Bits)
 {
  return bitfieldExtract(tvec1<genIUType>(Value), Offset, Bits).x;
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> bitfieldExtract(vecType<T, P> const & Value, int Offset, int Bits)
 {
  static_assert(std::numeric_limits<T>::is_integer, "'bitfieldExtract' only accept integer inputs");

  return (Value >> static_cast<T>(Offset)) & static_cast<T>(detail::mask(Bits));
 }


 template <typename genIUType>
 inline genIUType bitfieldInsert(genIUType const & Base, genIUType const & Insert, int Offset, int Bits)
 {
  return bitfieldInsert(tvec1<genIUType>(Base), tvec1<genIUType>(Insert), Offset, Bits).x;
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<T, P> bitfieldInsert(vecType<T, P> const & Base, vecType<T, P> const & Insert, int Offset, int Bits)
 {
  static_assert(std::numeric_limits<T>::is_integer, "'bitfieldInsert' only accept integer values");

  T const Mask = static_cast<T>(detail::mask(Bits) << Offset);
  return (Base & ~Mask) | (Insert & Mask);
 }


 template <typename genType>
 inline genType bitfieldReverse(genType x)
 {
  return bitfieldReverse(glm::tvec1<genType, glm::defaultp>(x)).x;
 }

 template <typename T, glm::precision P, template <typename, glm::precision> class vecType>
 inline vecType<T, P> bitfieldReverse(vecType<T, P> const & v)
 {
  vecType<T, P> x(v);
  x = detail::compute_bitfieldReverseStep<T, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 2>::call(x, T(0x5555555555555555ull), static_cast<T>( 1));
  x = detail::compute_bitfieldReverseStep<T, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 4>::call(x, T(0x3333333333333333ull), static_cast<T>( 2));
  x = detail::compute_bitfieldReverseStep<T, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 8>::call(x, T(0x0F0F0F0F0F0F0F0Full), static_cast<T>( 4));
  x = detail::compute_bitfieldReverseStep<T, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 16>::call(x, T(0x00FF00FF00FF00FFull), static_cast<T>( 8));
  x = detail::compute_bitfieldReverseStep<T, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 32>::call(x, T(0x0000FFFF0000FFFFull), static_cast<T>(16));
  x = detail::compute_bitfieldReverseStep<T, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 64>::call(x, T(0x00000000FFFFFFFFull), static_cast<T>(32));
  return x;
 }


 template <typename genType>
 inline int bitCount(genType x)
 {
  return bitCount(glm::tvec1<genType, glm::defaultp>(x)).x;
 }

 template <typename T, glm::precision P, template <typename, glm::precision> class vecType>
 inline vecType<int, P> bitCount(vecType<T, P> const & v)
 {
  vecType<typename detail::make_unsigned<T>::type, P> x(*reinterpret_cast<vecType<typename detail::make_unsigned<T>::type, P> const *>(&v));
  x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 2>::call(x, typename detail::make_unsigned<T>::type(0x5555555555555555ull), typename detail::make_unsigned<T>::type( 1));
  x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 4>::call(x, typename detail::make_unsigned<T>::type(0x3333333333333333ull), typename detail::make_unsigned<T>::type( 2));
  x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 8>::call(x, typename detail::make_unsigned<T>::type(0x0F0F0F0F0F0F0F0Full), typename detail::make_unsigned<T>::type( 4));
  x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 16>::call(x, typename detail::make_unsigned<T>::type(0x00FF00FF00FF00FFull), typename detail::make_unsigned<T>::type( 8));
  x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 32>::call(x, typename detail::make_unsigned<T>::type(0x0000FFFF0000FFFFull), typename detail::make_unsigned<T>::type(16));
  x = detail::compute_bitfieldBitCountStep<typename detail::make_unsigned<T>::type, P, vecType, detail::is_aligned<P>::value, sizeof(T) * 8>= 64>::call(x, typename detail::make_unsigned<T>::type(0x00000000FFFFFFFFull), typename detail::make_unsigned<T>::type(32));
  return vecType<int, P>(x);
 }


 template <typename genIUType>
 inline int findLSB(genIUType Value)
 {
  static_assert(std::numeric_limits<genIUType>::is_integer, "'findLSB' only accept integer values");

  return detail::compute_findLSB<genIUType, sizeof(genIUType) * 8>::call(Value);
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<int, P> findLSB(vecType<T, P> const & x)
 {
  static_assert(std::numeric_limits<T>::is_integer, "'findLSB' only accept integer values");

  return detail::functor1<int, T, P, vecType>::call(findLSB, x);
 }


 template <typename genIUType>
 inline int findMSB(genIUType x)
 {
  static_assert(std::numeric_limits<genIUType>::is_integer, "'findMSB' only accept integer values");

  return findMSB(tvec1<genIUType>(x)).x;
 }

 template <typename T, precision P, template <typename, precision> class vecType>
 inline vecType<int, P> findMSB(vecType<T, P> const & x)
 {
  static_assert(std::numeric_limits<T>::is_integer, "'findMSB' only accept integer values");

  return detail::compute_findMSB_vec<T, P, vecType, sizeof(T) * 8>::call(x);
 }
}


# 1 "../../include/glm/detail/func_integer_simd.inl" 1



# 1 "../../include/glm/detail/../simd/integer.h" 1



       
# 5 "../../include/glm/detail/func_integer_simd.inl" 2
# 367 "../../include/glm/detail/func_integer.inl" 2
# 204 "../../include/glm/detail/func_integer.hpp" 2
# 7 "../../include/glm/integer.hpp" 2
# 89 "../../include/glm/glm.hpp" 2
# 6 "../../include/utils/shader.h" 2
# 1 "../../include/glm/gtc/matrix_transform.hpp" 1
# 21 "../../include/glm/gtc/matrix_transform.hpp"
       






# 1 "../../include/glm/gtc/../gtc/constants.hpp" 1
# 14 "../../include/glm/gtc/../gtc/constants.hpp"
       
# 23 "../../include/glm/gtc/../gtc/constants.hpp"
namespace glm
{





 template <typename genType>
 constexpr genType epsilon();



 template <typename genType>
 constexpr genType zero();



 template <typename genType>
 constexpr genType one();



 template <typename genType>
 constexpr genType pi();



 template <typename genType>
 constexpr genType two_pi();



 template <typename genType>
 constexpr genType root_pi();



 template <typename genType>
 constexpr genType half_pi();



 template <typename genType>
 constexpr genType three_over_two_pi();



 template <typename genType>
 constexpr genType quarter_pi();



 template <typename genType>
 constexpr genType one_over_pi();



 template <typename genType>
 constexpr genType one_over_two_pi();



 template <typename genType>
 constexpr genType two_over_pi();



 template <typename genType>
 constexpr genType four_over_pi();



 template <typename genType>
 constexpr genType two_over_root_pi();



 template <typename genType>
 constexpr genType one_over_root_two();



 template <typename genType>
 constexpr genType root_half_pi();



 template <typename genType>
 constexpr genType root_two_pi();



 template <typename genType>
 constexpr genType root_ln_four();



 template <typename genType>
 constexpr genType e();



 template <typename genType>
 constexpr genType euler();



 template <typename genType>
 constexpr genType root_two();



 template <typename genType>
 constexpr genType root_three();



 template <typename genType>
 constexpr genType root_five();



 template <typename genType>
 constexpr genType ln_two();



 template <typename genType>
 constexpr genType ln_ten();



 template <typename genType>
 constexpr genType ln_ln_two();



 template <typename genType>
 constexpr genType third();



 template <typename genType>
 constexpr genType two_thirds();



 template <typename genType>
 constexpr genType golden_ratio();


}

# 1 "../../include/glm/gtc/../gtc/constants.inl" 1





namespace glm
{
 template <typename genType>
 inline constexpr genType epsilon()
 {
  return std::numeric_limits<genType>::epsilon();
 }

 template <typename genType>
 inline constexpr genType zero()
 {
  return genType(0);
 }

 template <typename genType>
 inline constexpr genType one()
 {
  return genType(1);
 }

 template <typename genType>
 inline constexpr genType pi()
 {
  return genType(3.14159265358979323846264338327950288);
 }

 template <typename genType>
 inline constexpr genType two_pi()
 {
  return genType(6.28318530717958647692528676655900576);
 }

 template <typename genType>
 inline constexpr genType root_pi()
 {
  return genType(1.772453850905516027);
 }

 template <typename genType>
 inline constexpr genType half_pi()
 {
  return genType(1.57079632679489661923132169163975144);
 }

 template <typename genType>
 inline constexpr genType three_over_two_pi()
 {
  return genType(4.71238898038468985769396507491925432);
 }

 template <typename genType>
 inline constexpr genType quarter_pi()
 {
  return genType(0.785398163397448309615660845819875721);
 }

 template <typename genType>
 inline constexpr genType one_over_pi()
 {
  return genType(0.318309886183790671537767526745028724);
 }

 template <typename genType>
 inline constexpr genType one_over_two_pi()
 {
  return genType(0.159154943091895335768883763372514362);
 }

 template <typename genType>
 inline constexpr genType two_over_pi()
 {
  return genType(0.636619772367581343075535053490057448);
 }

 template <typename genType>
 inline constexpr genType four_over_pi()
 {
  return genType(1.273239544735162686151070106980114898);
 }

 template <typename genType>
 inline constexpr genType two_over_root_pi()
 {
  return genType(1.12837916709551257389615890312154517);
 }

 template <typename genType>
 inline constexpr genType one_over_root_two()
 {
  return genType(0.707106781186547524400844362104849039);
 }

 template <typename genType>
 inline constexpr genType root_half_pi()
 {
  return genType(1.253314137315500251);
 }

 template <typename genType>
 inline constexpr genType root_two_pi()
 {
  return genType(2.506628274631000502);
 }

 template <typename genType>
 inline constexpr genType root_ln_four()
 {
  return genType(1.17741002251547469);
 }

 template <typename genType>
 inline constexpr genType e()
 {
  return genType(2.71828182845904523536);
 }

 template <typename genType>
 inline constexpr genType euler()
 {
  return genType(0.577215664901532860606);
 }

 template <typename genType>
 inline constexpr genType root_two()
 {
  return genType(1.41421356237309504880168872420969808);
 }

 template <typename genType>
 inline constexpr genType root_three()
 {
  return genType(1.73205080756887729352744634150587236);
 }

 template <typename genType>
 inline constexpr genType root_five()
 {
  return genType(2.23606797749978969640917366873127623);
 }

 template <typename genType>
 inline constexpr genType ln_two()
 {
  return genType(0.693147180559945309417232121458176568);
 }

 template <typename genType>
 inline constexpr genType ln_ten()
 {
  return genType(2.30258509299404568401799145468436421);
 }

 template <typename genType>
 inline constexpr genType ln_ln_two()
 {
  return genType(-0.3665129205816643);
 }

 template <typename genType>
 inline constexpr genType third()
 {
  return genType(0.3333333333333333333333333333333333333333);
 }

 template <typename genType>
 inline constexpr genType two_thirds()
 {
  return genType(0.666666666666666666666666666666666666667);
 }

 template <typename genType>
 inline constexpr genType golden_ratio()
 {
  return genType(1.61803398874989484820458683436563811);
 }
}
# 177 "../../include/glm/gtc/../gtc/constants.hpp" 2
# 29 "../../include/glm/gtc/matrix_transform.hpp" 2





namespace glm
{
# 57 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T, precision P>
 tmat4x4<T, P> translate(
  tmat4x4<T, P> const & m,
  tvec3<T, P> const & v);
# 71 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T, precision P>
 tmat4x4<T, P> rotate(
  tmat4x4<T, P> const & m,
  T angle,
  tvec3<T, P> const & axis);
# 85 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T, precision P>
 tmat4x4<T, P> scale(
  tmat4x4<T, P> const & m,
  tvec3<T, P> const & v);
# 101 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T>
 tmat4x4<T, defaultp> ortho(
  T left,
  T right,
  T bottom,
  T top,
  T zNear,
  T zFar);
# 121 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T>
 tmat4x4<T, defaultp> orthoLH(
  T left,
  T right,
  T bottom,
  T top,
  T zNear,
  T zFar);
# 141 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T>
 tmat4x4<T, defaultp> orthoRH(
  T left,
  T right,
  T bottom,
  T top,
  T zNear,
  T zFar);
# 159 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T>
 tmat4x4<T, defaultp> ortho(
  T left,
  T right,
  T bottom,
  T top);
# 176 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T>
 tmat4x4<T, defaultp> frustum(
  T left,
  T right,
  T bottom,
  T top,
  T ,
  T );
# 195 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T>
 tmat4x4<T, defaultp> frustumLH(
  T left,
  T right,
  T bottom,
  T top,
  T ,
  T );
# 214 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T>
 tmat4x4<T, defaultp> frustumRH(
  T left,
  T right,
  T bottom,
  T top,
  T ,
  T );
# 231 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T>
 tmat4x4<T, defaultp> perspective(
  T fovy,
  T aspect,
  T ,
  T );
# 246 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T>
 tmat4x4<T, defaultp> perspectiveRH(
  T fovy,
  T aspect,
  T ,
  T );
# 261 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T>
 tmat4x4<T, defaultp> perspectiveLH(
  T fovy,
  T aspect,
  T ,
  T );
# 277 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T>
 tmat4x4<T, defaultp> perspectiveFov(
  T fov,
  T width,
  T height,
  T ,
  T );
# 294 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T>
 tmat4x4<T, defaultp> perspectiveFovRH(
  T fov,
  T width,
  T height,
  T ,
  T );
# 311 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T>
 tmat4x4<T, defaultp> perspectiveFovLH(
  T fov,
  T width,
  T height,
  T ,
  T );
# 326 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T>
 tmat4x4<T, defaultp> infinitePerspective(
  T fovy, T aspect, T );
# 337 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T>
 tmat4x4<T, defaultp> infinitePerspectiveLH(
  T fovy, T aspect, T );
# 348 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T>
 tmat4x4<T, defaultp> infinitePerspectiveRH(
  T fovy, T aspect, T );
# 359 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T>
 tmat4x4<T, defaultp> tweakedInfinitePerspective(
  T fovy, T aspect, T );
# 371 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T>
 tmat4x4<T, defaultp> tweakedInfinitePerspective(
  T fovy, T aspect, T , T ep);
# 385 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T, typename U, precision P>
 tvec3<T, P> project(
  tvec3<T, P> const & obj,
  tmat4x4<T, P> const & model,
  tmat4x4<T, P> const & proj,
  tvec4<U, P> const & viewport);
# 402 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T, typename U, precision P>
 tvec3<T, P> unProject(
  tvec3<T, P> const & win,
  tmat4x4<T, P> const & model,
  tmat4x4<T, P> const & proj,
  tvec4<U, P> const & viewport);
# 417 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T, precision P, typename U>
 tmat4x4<T, P> pickMatrix(
  tvec2<T, P> const & center,
  tvec2<T, P> const & delta,
  tvec4<U, P> const & viewport);
# 430 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T, precision P>
 tmat4x4<T, P> lookAt(
  tvec3<T, P> const & eye,
  tvec3<T, P> const & center,
  tvec3<T, P> const & up);
# 443 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T, precision P>
 tmat4x4<T, P> lookAtRH(
  tvec3<T, P> const & eye,
  tvec3<T, P> const & center,
  tvec3<T, P> const & up);
# 456 "../../include/glm/gtc/matrix_transform.hpp"
 template <typename T, precision P>
 tmat4x4<T, P> lookAtLH(
  tvec3<T, P> const & eye,
  tvec3<T, P> const & center,
  tvec3<T, P> const & up);


}

# 1 "../../include/glm/gtc/matrix_transform.inl" 1







namespace glm
{
 template <typename T, precision P>
 inline tmat4x4<T, P> translate(tmat4x4<T, P> const & m, tvec3<T, P> const & v)
 {
  tmat4x4<T, P> Result(m);
  Result[3] = m[0] * v[0] + m[1] * v[1] + m[2] * v[2] + m[3];
  return Result;
 }

 template <typename T, precision P>
 inline tmat4x4<T, P> rotate(tmat4x4<T, P> const & m, T angle, tvec3<T, P> const & v)
 {
  T const a = angle;
  T const c = cos(a);
  T const s = sin(a);

  tvec3<T, P> axis(normalize(v));
  tvec3<T, P> temp((T(1) - c) * axis);

  tmat4x4<T, P> Rotate(uninitialize);
  Rotate[0][0] = c + temp[0] * axis[0];
  Rotate[0][1] = temp[0] * axis[1] + s * axis[2];
  Rotate[0][2] = temp[0] * axis[2] - s * axis[1];

  Rotate[1][0] = temp[1] * axis[0] - s * axis[2];
  Rotate[1][1] = c + temp[1] * axis[1];
  Rotate[1][2] = temp[1] * axis[2] + s * axis[0];

  Rotate[2][0] = temp[2] * axis[0] + s * axis[1];
  Rotate[2][1] = temp[2] * axis[1] - s * axis[0];
  Rotate[2][2] = c + temp[2] * axis[2];

  tmat4x4<T, P> Result(uninitialize);
  Result[0] = m[0] * Rotate[0][0] + m[1] * Rotate[0][1] + m[2] * Rotate[0][2];
  Result[1] = m[0] * Rotate[1][0] + m[1] * Rotate[1][1] + m[2] * Rotate[1][2];
  Result[2] = m[0] * Rotate[2][0] + m[1] * Rotate[2][1] + m[2] * Rotate[2][2];
  Result[3] = m[3];
  return Result;
 }

 template <typename T, precision P>
 inline tmat4x4<T, P> rotate_slow(tmat4x4<T, P> const & m, T angle, tvec3<T, P> const & v)
 {
  T const a = angle;
  T const c = cos(a);
  T const s = sin(a);
  tmat4x4<T, P> Result;

  tvec3<T, P> axis = normalize(v);

  Result[0][0] = c + (static_cast<T>(1) - c) * axis.x * axis.x;
  Result[0][1] = (static_cast<T>(1) - c) * axis.x * axis.y + s * axis.z;
  Result[0][2] = (static_cast<T>(1) - c) * axis.x * axis.z - s * axis.y;
  Result[0][3] = static_cast<T>(0);

  Result[1][0] = (static_cast<T>(1) - c) * axis.y * axis.x - s * axis.z;
  Result[1][1] = c + (static_cast<T>(1) - c) * axis.y * axis.y;
  Result[1][2] = (static_cast<T>(1) - c) * axis.y * axis.z + s * axis.x;
  Result[1][3] = static_cast<T>(0);

  Result[2][0] = (static_cast<T>(1) - c) * axis.z * axis.x + s * axis.y;
  Result[2][1] = (static_cast<T>(1) - c) * axis.z * axis.y - s * axis.x;
  Result[2][2] = c + (static_cast<T>(1) - c) * axis.z * axis.z;
  Result[2][3] = static_cast<T>(0);

  Result[3] = tvec4<T, P>(0, 0, 0, 1);
  return m * Result;
 }

 template <typename T, precision P>
 inline tmat4x4<T, P> scale(tmat4x4<T, P> const & m, tvec3<T, P> const & v)
 {
  tmat4x4<T, P> Result(uninitialize);
  Result[0] = m[0] * v[0];
  Result[1] = m[1] * v[1];
  Result[2] = m[2] * v[2];
  Result[3] = m[3];
  return Result;
 }

 template <typename T, precision P>
 inline tmat4x4<T, P> scale_slow(tmat4x4<T, P> const & m, tvec3<T, P> const & v)
 {
  tmat4x4<T, P> Result(T(1));
  Result[0][0] = v.x;
  Result[1][1] = v.y;
  Result[2][2] = v.z;
  return m * Result;
 }

 template <typename T>
 inline tmat4x4<T, defaultp> ortho
 (
  T left, T right,
  T bottom, T top,
  T zNear, T zFar
 )
 {



   return orthoRH(left, right, bottom, top, zNear, zFar);

 }

 template <typename T>
 inline tmat4x4<T, defaultp> orthoLH
 (
  T left, T right,
  T bottom, T top,
  T zNear, T zFar
 )
 {
  tmat4x4<T, defaultp> Result(1);
  Result[0][0] = static_cast<T>(2) / (right - left);
  Result[1][1] = static_cast<T>(2) / (top - bottom);
  Result[3][0] = - (right + left) / (right - left);
  Result[3][1] = - (top + bottom) / (top - bottom);





   Result[2][2] = static_cast<T>(2) / (zFar - zNear);
   Result[3][2] = - (zFar + zNear) / (zFar - zNear);


  return Result;
 }

 template <typename T>
 inline tmat4x4<T, defaultp> orthoRH
 (
  T left, T right,
  T bottom, T top,
  T zNear, T zFar
 )
 {
  tmat4x4<T, defaultp> Result(1);
  Result[0][0] = static_cast<T>(2) / (right - left);
  Result[1][1] = static_cast<T>(2) / (top - bottom);
  Result[3][0] = - (right + left) / (right - left);
  Result[3][1] = - (top + bottom) / (top - bottom);





   Result[2][2] = - static_cast<T>(2) / (zFar - zNear);
   Result[3][2] = - (zFar + zNear) / (zFar - zNear);


  return Result;
 }

 template <typename T>
 inline tmat4x4<T, defaultp> ortho
 (
  T left, T right,
  T bottom, T top
 )
 {
  tmat4x4<T, defaultp> Result(static_cast<T>(1));
  Result[0][0] = static_cast<T>(2) / (right - left);
  Result[1][1] = static_cast<T>(2) / (top - bottom);
  Result[2][2] = - static_cast<T>(1);
  Result[3][0] = - (right + left) / (right - left);
  Result[3][1] = - (top + bottom) / (top - bottom);
  return Result;
 }

 template <typename T>
 inline tmat4x4<T, defaultp> frustum
 (
  T left, T right,
  T bottom, T top,
  T nearVal, T farVal
 )
 {



   return frustumRH(left, right, bottom, top, nearVal, farVal);

 }

 template <typename T>
 inline tmat4x4<T, defaultp> frustumLH
 (
  T left, T right,
  T bottom, T top,
  T nearVal, T farVal
 )
 {
  tmat4x4<T, defaultp> Result(0);
  Result[0][0] = (static_cast<T>(2) * nearVal) / (right - left);
  Result[1][1] = (static_cast<T>(2) * nearVal) / (top - bottom);
  Result[2][0] = (right + left) / (right - left);
  Result[2][1] = (top + bottom) / (top - bottom);
  Result[2][3] = static_cast<T>(1);





   Result[2][2] = (farVal + nearVal) / (farVal - nearVal);
   Result[3][2] = - (static_cast<T>(2) * farVal * nearVal) / (farVal - nearVal);


  return Result;
 }

 template <typename T>
 inline tmat4x4<T, defaultp> frustumRH
 (
  T left, T right,
  T bottom, T top,
  T nearVal, T farVal
 )
 {
  tmat4x4<T, defaultp> Result(0);
  Result[0][0] = (static_cast<T>(2) * nearVal) / (right - left);
  Result[1][1] = (static_cast<T>(2) * nearVal) / (top - bottom);
  Result[2][0] = (right + left) / (right - left);
  Result[2][1] = (top + bottom) / (top - bottom);
  Result[2][3] = static_cast<T>(-1);





   Result[2][2] = - (farVal + nearVal) / (farVal - nearVal);
   Result[3][2] = - (static_cast<T>(2) * farVal * nearVal) / (farVal - nearVal);


  return Result;
 }

 template <typename T>
 inline tmat4x4<T, defaultp> perspective(T fovy, T aspect, T zNear, T zFar)
 {



   return perspectiveRH(fovy, aspect, zNear, zFar);

 }

 template <typename T>
 inline tmat4x4<T, defaultp> perspectiveRH(T fovy, T aspect, T zNear, T zFar)
 {
  
# 260 "../../include/glm/gtc/matrix_transform.inl" 3
 ((
# 260 "../../include/glm/gtc/matrix_transform.inl"
 abs(aspect - std::numeric_limits<T>::epsilon()) > static_cast<T>(0)
# 260 "../../include/glm/gtc/matrix_transform.inl" 3
 ) ? (void)0 : _assert(
# 260 "../../include/glm/gtc/matrix_transform.inl"
 "abs(aspect - std::numeric_limits<T>::epsilon()) > static_cast<T>(0)"
# 260 "../../include/glm/gtc/matrix_transform.inl" 3
 , "../../include/glm/gtc/matrix_transform.inl", 260))
# 260 "../../include/glm/gtc/matrix_transform.inl"
                                                                            ;

  T const tanHalfFovy = tan(fovy / static_cast<T>(2));

  tmat4x4<T, defaultp> Result(static_cast<T>(0));
  Result[0][0] = static_cast<T>(1) / (aspect * tanHalfFovy);
  Result[1][1] = static_cast<T>(1) / (tanHalfFovy);
  Result[2][3] = - static_cast<T>(1);





   Result[2][2] = - (zFar + zNear) / (zFar - zNear);
   Result[3][2] = - (static_cast<T>(2) * zFar * zNear) / (zFar - zNear);


  return Result;
 }

 template <typename T>
 inline tmat4x4<T, defaultp> perspectiveLH(T fovy, T aspect, T zNear, T zFar)
 {
  
# 283 "../../include/glm/gtc/matrix_transform.inl" 3
 ((
# 283 "../../include/glm/gtc/matrix_transform.inl"
 abs(aspect - std::numeric_limits<T>::epsilon()) > static_cast<T>(0)
# 283 "../../include/glm/gtc/matrix_transform.inl" 3
 ) ? (void)0 : _assert(
# 283 "../../include/glm/gtc/matrix_transform.inl"
 "abs(aspect - std::numeric_limits<T>::epsilon()) > static_cast<T>(0)"
# 283 "../../include/glm/gtc/matrix_transform.inl" 3
 , "../../include/glm/gtc/matrix_transform.inl", 283))
# 283 "../../include/glm/gtc/matrix_transform.inl"
                                                                            ;

  T const tanHalfFovy = tan(fovy / static_cast<T>(2));

  tmat4x4<T, defaultp> Result(static_cast<T>(0));
  Result[0][0] = static_cast<T>(1) / (aspect * tanHalfFovy);
  Result[1][1] = static_cast<T>(1) / (tanHalfFovy);
  Result[2][3] = static_cast<T>(1);





   Result[2][2] = (zFar + zNear) / (zFar - zNear);
   Result[3][2] = - (static_cast<T>(2) * zFar * zNear) / (zFar - zNear);


  return Result;
 }

 template <typename T>
 inline tmat4x4<T, defaultp> perspectiveFov(T fov, T width, T height, T zNear, T zFar)
 {



   return perspectiveFovRH(fov, width, height, zNear, zFar);

 }

 template <typename T>
 inline tmat4x4<T, defaultp> perspectiveFovRH(T fov, T width, T height, T zNear, T zFar)
 {
  
# 316 "../../include/glm/gtc/matrix_transform.inl" 3
 ((
# 316 "../../include/glm/gtc/matrix_transform.inl"
 width > static_cast<T>(0)
# 316 "../../include/glm/gtc/matrix_transform.inl" 3
 ) ? (void)0 : _assert(
# 316 "../../include/glm/gtc/matrix_transform.inl"
 "width > static_cast<T>(0)"
# 316 "../../include/glm/gtc/matrix_transform.inl" 3
 , "../../include/glm/gtc/matrix_transform.inl", 316))
# 316 "../../include/glm/gtc/matrix_transform.inl"
                                  ;
  
# 317 "../../include/glm/gtc/matrix_transform.inl" 3
 ((
# 317 "../../include/glm/gtc/matrix_transform.inl"
 height > static_cast<T>(0)
# 317 "../../include/glm/gtc/matrix_transform.inl" 3
 ) ? (void)0 : _assert(
# 317 "../../include/glm/gtc/matrix_transform.inl"
 "height > static_cast<T>(0)"
# 317 "../../include/glm/gtc/matrix_transform.inl" 3
 , "../../include/glm/gtc/matrix_transform.inl", 317))
# 317 "../../include/glm/gtc/matrix_transform.inl"
                                   ;
  
# 318 "../../include/glm/gtc/matrix_transform.inl" 3
 ((
# 318 "../../include/glm/gtc/matrix_transform.inl"
 fov > static_cast<T>(0)
# 318 "../../include/glm/gtc/matrix_transform.inl" 3
 ) ? (void)0 : _assert(
# 318 "../../include/glm/gtc/matrix_transform.inl"
 "fov > static_cast<T>(0)"
# 318 "../../include/glm/gtc/matrix_transform.inl" 3
 , "../../include/glm/gtc/matrix_transform.inl", 318))
# 318 "../../include/glm/gtc/matrix_transform.inl"
                                ;

  T const rad = fov;
  T const h = glm::cos(static_cast<T>(0.5) * rad) / glm::sin(static_cast<T>(0.5) * rad);
  T const w = h * height / width;

  tmat4x4<T, defaultp> Result(static_cast<T>(0));
  Result[0][0] = w;
  Result[1][1] = h;
  Result[2][3] = - static_cast<T>(1);





   Result[2][2] = - (zFar + zNear) / (zFar - zNear);
   Result[3][2] = - (static_cast<T>(2) * zFar * zNear) / (zFar - zNear);


  return Result;
 }

 template <typename T>
 inline tmat4x4<T, defaultp> perspectiveFovLH(T fov, T width, T height, T zNear, T zFar)
 {
  
# 343 "../../include/glm/gtc/matrix_transform.inl" 3
 ((
# 343 "../../include/glm/gtc/matrix_transform.inl"
 width > static_cast<T>(0)
# 343 "../../include/glm/gtc/matrix_transform.inl" 3
 ) ? (void)0 : _assert(
# 343 "../../include/glm/gtc/matrix_transform.inl"
 "width > static_cast<T>(0)"
# 343 "../../include/glm/gtc/matrix_transform.inl" 3
 , "../../include/glm/gtc/matrix_transform.inl", 343))
# 343 "../../include/glm/gtc/matrix_transform.inl"
                                  ;
  
# 344 "../../include/glm/gtc/matrix_transform.inl" 3
 ((
# 344 "../../include/glm/gtc/matrix_transform.inl"
 height > static_cast<T>(0)
# 344 "../../include/glm/gtc/matrix_transform.inl" 3
 ) ? (void)0 : _assert(
# 344 "../../include/glm/gtc/matrix_transform.inl"
 "height > static_cast<T>(0)"
# 344 "../../include/glm/gtc/matrix_transform.inl" 3
 , "../../include/glm/gtc/matrix_transform.inl", 344))
# 344 "../../include/glm/gtc/matrix_transform.inl"
                                   ;
  
# 345 "../../include/glm/gtc/matrix_transform.inl" 3
 ((
# 345 "../../include/glm/gtc/matrix_transform.inl"
 fov > static_cast<T>(0)
# 345 "../../include/glm/gtc/matrix_transform.inl" 3
 ) ? (void)0 : _assert(
# 345 "../../include/glm/gtc/matrix_transform.inl"
 "fov > static_cast<T>(0)"
# 345 "../../include/glm/gtc/matrix_transform.inl" 3
 , "../../include/glm/gtc/matrix_transform.inl", 345))
# 345 "../../include/glm/gtc/matrix_transform.inl"
                                ;

  T const rad = fov;
  T const h = glm::cos(static_cast<T>(0.5) * rad) / glm::sin(static_cast<T>(0.5) * rad);
  T const w = h * height / width;

  tmat4x4<T, defaultp> Result(static_cast<T>(0));
  Result[0][0] = w;
  Result[1][1] = h;
  Result[2][3] = static_cast<T>(1);





   Result[2][2] = (zFar + zNear) / (zFar - zNear);
   Result[3][2] = - (static_cast<T>(2) * zFar * zNear) / (zFar - zNear);


  return Result;
 }

 template <typename T>
 inline tmat4x4<T, defaultp> infinitePerspective(T fovy, T aspect, T zNear)
 {



   return infinitePerspectiveRH(fovy, aspect, zNear);

 }

 template <typename T>
 inline tmat4x4<T, defaultp> infinitePerspectiveRH(T fovy, T aspect, T zNear)
 {
  T const range = tan(fovy / static_cast<T>(2)) * zNear;
  T const left = -range * aspect;
  T const right = range * aspect;
  T const bottom = -range;
  T const top = range;

  tmat4x4<T, defaultp> Result(static_cast<T>(0));
  Result[0][0] = (static_cast<T>(2) * zNear) / (right - left);
  Result[1][1] = (static_cast<T>(2) * zNear) / (top - bottom);
  Result[2][2] = - static_cast<T>(1);
  Result[2][3] = - static_cast<T>(1);
  Result[3][2] = - static_cast<T>(2) * zNear;
  return Result;
 }

 template <typename T>
 inline tmat4x4<T, defaultp> infinitePerspectiveLH(T fovy, T aspect, T zNear)
 {
  T const range = tan(fovy / static_cast<T>(2)) * zNear;
  T const left = -range * aspect;
  T const right = range * aspect;
  T const bottom = -range;
  T const top = range;

  tmat4x4<T, defaultp> Result(T(0));
  Result[0][0] = (static_cast<T>(2) * zNear) / (right - left);
  Result[1][1] = (static_cast<T>(2) * zNear) / (top - bottom);
  Result[2][2] = static_cast<T>(1);
  Result[2][3] = static_cast<T>(1);
  Result[3][2] = - static_cast<T>(2) * zNear;
  return Result;
 }


 template <typename T>
 inline tmat4x4<T, defaultp> tweakedInfinitePerspective(T fovy, T aspect, T zNear, T ep)
 {
  T const range = tan(fovy / static_cast<T>(2)) * zNear;
  T const left = -range * aspect;
  T const right = range * aspect;
  T const bottom = -range;
  T const top = range;

  tmat4x4<T, defaultp> Result(static_cast<T>(0));
  Result[0][0] = (static_cast<T>(2) * zNear) / (right - left);
  Result[1][1] = (static_cast<T>(2) * zNear) / (top - bottom);
  Result[2][2] = ep - static_cast<T>(1);
  Result[2][3] = static_cast<T>(-1);
  Result[3][2] = (ep - static_cast<T>(2)) * zNear;
  return Result;
 }

 template <typename T>
 inline tmat4x4<T, defaultp> tweakedInfinitePerspective(T fovy, T aspect, T zNear)
 {
  return tweakedInfinitePerspective(fovy, aspect, zNear, epsilon<T>());
 }

 template <typename T, typename U, precision P>
 inline tvec3<T, P> project
 (
  tvec3<T, P> const & obj,
  tmat4x4<T, P> const & model,
  tmat4x4<T, P> const & proj,
  tvec4<U, P> const & viewport
 )
 {
  tvec4<T, P> tmp = tvec4<T, P>(obj, static_cast<T>(1));
  tmp = model * tmp;
  tmp = proj * tmp;

  tmp /= tmp.w;




   tmp = tmp * static_cast<T>(0.5) + static_cast<T>(0.5);

  tmp[0] = tmp[0] * T(viewport[2]) + T(viewport[0]);
  tmp[1] = tmp[1] * T(viewport[3]) + T(viewport[1]);

  return tvec3<T, P>(tmp);
 }

 template <typename T, typename U, precision P>
 inline tvec3<T, P> unProject
 (
  tvec3<T, P> const & win,
  tmat4x4<T, P> const & model,
  tmat4x4<T, P> const & proj,
  tvec4<U, P> const & viewport
 )
 {
  tmat4x4<T, P> Inverse = inverse(proj * model);

  tvec4<T, P> tmp = tvec4<T, P>(win, T(1));
  tmp.x = (tmp.x - T(viewport[0])) / T(viewport[2]);
  tmp.y = (tmp.y - T(viewport[1])) / T(viewport[3]);




   tmp = tmp * static_cast<T>(2) - static_cast<T>(1);


  tvec4<T, P> obj = Inverse * tmp;
  obj /= obj.w;

  return tvec3<T, P>(obj);
 }

 template <typename T, precision P, typename U>
 inline tmat4x4<T, P> pickMatrix(tvec2<T, P> const & center, tvec2<T, P> const & delta, tvec4<U, P> const & viewport)
 {
  
# 494 "../../include/glm/gtc/matrix_transform.inl" 3
 ((
# 494 "../../include/glm/gtc/matrix_transform.inl"
 delta.x > static_cast<T>(0) && delta.y > static_cast<T>(0)
# 494 "../../include/glm/gtc/matrix_transform.inl" 3
 ) ? (void)0 : _assert(
# 494 "../../include/glm/gtc/matrix_transform.inl"
 "delta.x > static_cast<T>(0) && delta.y > static_cast<T>(0)"
# 494 "../../include/glm/gtc/matrix_transform.inl" 3
 , "../../include/glm/gtc/matrix_transform.inl", 494))
# 494 "../../include/glm/gtc/matrix_transform.inl"
                                                                   ;
  tmat4x4<T, P> Result(static_cast<T>(1));

  if(!(delta.x > static_cast<T>(0) && delta.y > static_cast<T>(0)))
   return Result;

  tvec3<T, P> Temp(
   (static_cast<T>(viewport[2]) - static_cast<T>(2) * (center.x - static_cast<T>(viewport[0]))) / delta.x,
   (static_cast<T>(viewport[3]) - static_cast<T>(2) * (center.y - static_cast<T>(viewport[1]))) / delta.y,
   static_cast<T>(0));


  Result = translate(Result, Temp);
  return scale(Result, tvec3<T, P>(static_cast<T>(viewport[2]) / delta.x, static_cast<T>(viewport[3]) / delta.y, static_cast<T>(1)));
 }

 template <typename T, precision P>
 inline tmat4x4<T, P> lookAt(tvec3<T, P> const & eye, tvec3<T, P> const & center, tvec3<T, P> const & up)
 {



   return lookAtRH(eye, center, up);

 }

 template <typename T, precision P>
 inline tmat4x4<T, P> lookAtRH
 (
  tvec3<T, P> const & eye,
  tvec3<T, P> const & center,
  tvec3<T, P> const & up
 )
 {
  tvec3<T, P> const f(normalize(center - eye));
  tvec3<T, P> const s(normalize(cross(f, up)));
  tvec3<T, P> const u(cross(s, f));

  tmat4x4<T, P> Result(1);
  Result[0][0] = s.x;
  Result[1][0] = s.y;
  Result[2][0] = s.z;
  Result[0][1] = u.x;
  Result[1][1] = u.y;
  Result[2][1] = u.z;
  Result[0][2] =-f.x;
  Result[1][2] =-f.y;
  Result[2][2] =-f.z;
  Result[3][0] =-dot(s, eye);
  Result[3][1] =-dot(u, eye);
  Result[3][2] = dot(f, eye);
  return Result;
 }

 template <typename T, precision P>
 inline tmat4x4<T, P> lookAtLH
 (
  tvec3<T, P> const & eye,
  tvec3<T, P> const & center,
  tvec3<T, P> const & up
 )
 {
  tvec3<T, P> const f(normalize(center - eye));
  tvec3<T, P> const s(normalize(cross(up, f)));
  tvec3<T, P> const u(cross(f, s));

  tmat4x4<T, P> Result(1);
  Result[0][0] = s.x;
  Result[1][0] = s.y;
  Result[2][0] = s.z;
  Result[0][1] = u.x;
  Result[1][1] = u.y;
  Result[2][1] = u.z;
  Result[0][2] = f.x;
  Result[1][2] = f.y;
  Result[2][2] = f.z;
  Result[3][0] = -dot(s, eye);
  Result[3][1] = -dot(u, eye);
  Result[3][2] = -dot(f, eye);
  return Result;
 }
}
# 466 "../../include/glm/gtc/matrix_transform.hpp" 2
# 7 "../../include/utils/shader.h" 2
# 1 "../../include/glm/gtc/type_ptr.hpp" 1
# 34 "../../include/glm/gtc/type_ptr.hpp"
       


# 1 "../../include/glm/gtc/../gtc/quaternion.hpp" 1
# 15 "../../include/glm/gtc/../gtc/quaternion.hpp"
       
# 28 "../../include/glm/gtc/../gtc/quaternion.hpp"
namespace glm
{



 template <typename T, precision P = defaultp>
 struct tquat
 {


  typedef tquat<T, P> type;
  typedef T value_type;





#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wpedantic"







   union
   {
    struct { T x, y, z, w;};
    typename detail::storage<T, sizeof(T) * 4, detail::is_aligned<P>::value>::type data;
   };





#pragma GCC diagnostic pop







  typedef length_t length_type;

  static length_type length(){return 4;}

  T & operator[](length_type i);
  T const & operator[](length_type i) const;



  constexpr tquat() ;
  constexpr tquat(tquat<T, P> const & q) = default;
  template <precision Q>
  constexpr tquat(tquat<T, Q> const & q);



  constexpr explicit tquat(ctor);
  constexpr tquat(T const & s, tvec3<T, P> const & v);
  constexpr tquat(T const & w, T const & x, T const & y, T const & z);



  template <typename U, precision Q>
  constexpr tquat(tquat<U, Q> const & q);



   explicit operator tmat3x3<T, P>();
   explicit operator tmat4x4<T, P>();
# 109 "../../include/glm/gtc/../gtc/quaternion.hpp"
  tquat(tvec3<T, P> const & u, tvec3<T, P> const & v);


  tquat(tvec3<T, P> const & eulerAngles);
  tquat(tmat3x3<T, P> const & m);
  tquat(tmat4x4<T, P> const & m);



  tquat<T, P> & operator=(tquat<T, P> const & m) = default;

  template <typename U>
  tquat<T, P> & operator=(tquat<U, P> const & m);
  template <typename U>
  tquat<T, P> & operator+=(tquat<U, P> const & q);
  template <typename U>
  tquat<T, P> & operator-=(tquat<U, P> const & q);
  template <typename U>
  tquat<T, P> & operator*=(tquat<U, P> const & q);
  template <typename U>
  tquat<T, P> & operator*=(U s);
  template <typename U>
  tquat<T, P> & operator/=(U s);
 };



 template <typename T, precision P>
 tquat<T, P> operator+(tquat<T, P> const & q);

 template <typename T, precision P>
 tquat<T, P> operator-(tquat<T, P> const & q);



 template <typename T, precision P>
 tquat<T, P> operator+(tquat<T, P> const & q, tquat<T, P> const & p);

 template <typename T, precision P>
 tquat<T, P> operator*(tquat<T, P> const & q, tquat<T, P> const & p);

 template <typename T, precision P>
 tvec3<T, P> operator*(tquat<T, P> const & q, tvec3<T, P> const & v);

 template <typename T, precision P>
 tvec3<T, P> operator*(tvec3<T, P> const & v, tquat<T, P> const & q);

 template <typename T, precision P>
 tvec4<T, P> operator*(tquat<T, P> const & q, tvec4<T, P> const & v);

 template <typename T, precision P>
 tvec4<T, P> operator*(tvec4<T, P> const & v, tquat<T, P> const & q);

 template <typename T, precision P>
 tquat<T, P> operator*(tquat<T, P> const & q, T const & s);

 template <typename T, precision P>
 tquat<T, P> operator*(T const & s, tquat<T, P> const & q);

 template <typename T, precision P>
 tquat<T, P> operator/(tquat<T, P> const & q, T const & s);



 template <typename T, precision P>
 bool operator==(tquat<T, P> const & q1, tquat<T, P> const & q2);

 template <typename T, precision P>
 bool operator!=(tquat<T, P> const & q1, tquat<T, P> const & q2);




 template <typename T, precision P>
 T length(tquat<T, P> const & q);




 template <typename T, precision P>
 tquat<T, P> normalize(tquat<T, P> const & q);




 template <typename T, precision P, template <typename, precision> class quatType>
 T dot(quatType<T, P> const & x, quatType<T, P> const & y);
# 207 "../../include/glm/gtc/../gtc/quaternion.hpp"
 template <typename T, precision P>
 tquat<T, P> mix(tquat<T, P> const & x, tquat<T, P> const & y, T a);
# 218 "../../include/glm/gtc/../gtc/quaternion.hpp"
 template <typename T, precision P>
 tquat<T, P> lerp(tquat<T, P> const & x, tquat<T, P> const & y, T a);
# 229 "../../include/glm/gtc/../gtc/quaternion.hpp"
 template <typename T, precision P>
 tquat<T, P> slerp(tquat<T, P> const & x, tquat<T, P> const & y, T a);




 template <typename T, precision P>
 tquat<T, P> conjugate(tquat<T, P> const & q);




 template <typename T, precision P>
 tquat<T, P> inverse(tquat<T, P> const & q);
# 251 "../../include/glm/gtc/../gtc/quaternion.hpp"
 template <typename T, precision P>
 tquat<T, P> rotate(tquat<T, P> const & q, T const & angle, tvec3<T, P> const & axis);





 template <typename T, precision P>
 tvec3<T, P> eulerAngles(tquat<T, P> const & x);




 template <typename T, precision P>
 T roll(tquat<T, P> const & x);




 template <typename T, precision P>
 T pitch(tquat<T, P> const & x);




 template <typename T, precision P>
 T yaw(tquat<T, P> const & x);




 template <typename T, precision P>
 tmat3x3<T, P> mat3_cast(tquat<T, P> const & x);




 template <typename T, precision P>
 tmat4x4<T, P> mat4_cast(tquat<T, P> const & x);




 template <typename T, precision P>
 tquat<T, P> quat_cast(tmat3x3<T, P> const & x);




 template <typename T, precision P>
 tquat<T, P> quat_cast(tmat4x4<T, P> const & x);




 template <typename T, precision P>
 T angle(tquat<T, P> const & x);




 template <typename T, precision P>
 tvec3<T, P> axis(tquat<T, P> const & x);







 template <typename T, precision P>
 tquat<T, P> angleAxis(T const & angle, tvec3<T, P> const & axis);






 template <typename T, precision P>
 tvec4<bool, P> lessThan(tquat<T, P> const & x, tquat<T, P> const & y);






 template <typename T, precision P>
 tvec4<bool, P> lessThanEqual(tquat<T, P> const & x, tquat<T, P> const & y);






 template <typename T, precision P>
 tvec4<bool, P> greaterThan(tquat<T, P> const & x, tquat<T, P> const & y);






 template <typename T, precision P>
 tvec4<bool, P> greaterThanEqual(tquat<T, P> const & x, tquat<T, P> const & y);






 template <typename T, precision P>
 tvec4<bool, P> equal(tquat<T, P> const & x, tquat<T, P> const & y);






 template <typename T, precision P>
 tvec4<bool, P> notEqual(tquat<T, P> const & x, tquat<T, P> const & y);
# 381 "../../include/glm/gtc/../gtc/quaternion.hpp"
 template <typename T, precision P>
 tvec4<bool, P> isnan(tquat<T, P> const & x);
# 391 "../../include/glm/gtc/../gtc/quaternion.hpp"
 template <typename T, precision P>
 tvec4<bool, P> isinf(tquat<T, P> const & x);


}

# 1 "../../include/glm/gtc/../gtc/quaternion.inl" 1
# 9 "../../include/glm/gtc/../gtc/quaternion.inl"
namespace glm{
namespace detail
{
 template <typename T, precision P, bool Aligned>
 struct compute_dot<tquat, T, P, Aligned>
 {
  static inline T call(tquat<T, P> const& x, tquat<T, P> const& y)
  {
   tvec4<T, P> tmp(x.x * y.x, x.y * y.y, x.z * y.z, x.w * y.w);
   return (tmp.x + tmp.y) + (tmp.z + tmp.w);
  }
 };

 template <typename T, precision P, bool Aligned>
 struct compute_quat_add
 {
  static tquat<T, P> call(tquat<T, P> const& q, tquat<T, P> const& p)
  {
   return tquat<T, P>(q.w + p.w, q.x + p.x, q.y + p.y, q.z + p.z);
  }
 };

 template <typename T, precision P, bool Aligned>
 struct compute_quat_sub
 {
  static tquat<T, P> call(tquat<T, P> const& q, tquat<T, P> const& p)
  {
   return tquat<T, P>(q.w - p.w, q.x - p.x, q.y - p.y, q.z - p.z);
  }
 };

 template <typename T, precision P, bool Aligned>
 struct compute_quat_mul_scalar
 {
  static tquat<T, P> call(tquat<T, P> const& q, T s)
  {
   return tquat<T, P>(q.w * s, q.x * s, q.y * s, q.z * s);
  }
 };

 template <typename T, precision P, bool Aligned>
 struct compute_quat_div_scalar
 {
  static tquat<T, P> call(tquat<T, P> const& q, T s)
  {
   return tquat<T, P>(q.w / s, q.x / s, q.y / s, q.z / s);
  }
 };

 template <typename T, precision P, bool Aligned>
 struct compute_quat_mul_vec4
 {
  static tvec4<T, P> call(tquat<T, P> const & q, tvec4<T, P> const & v)
  {
   return tvec4<T, P>(q * tvec3<T, P>(v), v.w);
  }
 };
}



 template <typename T, precision P>
 inline T & tquat<T, P>::operator[](typename tquat<T, P>::length_type i)
 {
  
# 73 "../../include/glm/gtc/../gtc/quaternion.inl" 3
 ((
# 73 "../../include/glm/gtc/../gtc/quaternion.inl"
 i >= 0 && i < this->length()
# 73 "../../include/glm/gtc/../gtc/quaternion.inl" 3
 ) ? (void)0 : _assert(
# 73 "../../include/glm/gtc/../gtc/quaternion.inl"
 "i >= 0 && i < this->length()"
# 73 "../../include/glm/gtc/../gtc/quaternion.inl" 3
 , "../../include/glm/gtc/../gtc/quaternion.inl", 73))
# 73 "../../include/glm/gtc/../gtc/quaternion.inl"
                                     ;
  return (&x)[i];
 }

 template <typename T, precision P>
 inline T const & tquat<T, P>::operator[](typename tquat<T, P>::length_type i) const
 {
  
# 80 "../../include/glm/gtc/../gtc/quaternion.inl" 3
 ((
# 80 "../../include/glm/gtc/../gtc/quaternion.inl"
 i >= 0 && i < this->length()
# 80 "../../include/glm/gtc/../gtc/quaternion.inl" 3
 ) ? (void)0 : _assert(
# 80 "../../include/glm/gtc/../gtc/quaternion.inl"
 "i >= 0 && i < this->length()"
# 80 "../../include/glm/gtc/../gtc/quaternion.inl" 3
 , "../../include/glm/gtc/../gtc/quaternion.inl", 80))
# 80 "../../include/glm/gtc/../gtc/quaternion.inl"
                                     ;
  return (&x)[i];
 }




  template <typename T, precision P>
  inline constexpr tquat<T, P>::tquat()

    : x(0), y(0), z(0), w(1)

  {}
# 102 "../../include/glm/gtc/../gtc/quaternion.inl"
 template <typename T, precision P>
 template <precision Q>
 inline constexpr tquat<T, P>::tquat(tquat<T, Q> const & q)
  : x(q.x), y(q.y), z(q.z), w(q.w)
 {}



 template <typename T, precision P>
 inline constexpr tquat<T, P>::tquat(ctor)
 {}

 template <typename T, precision P>
 inline constexpr tquat<T, P>::tquat(T const & s, tvec3<T, P> const & v)
  : x(v.x), y(v.y), z(v.z), w(s)
 {}

 template <typename T, precision P>
 inline constexpr tquat<T, P>::tquat(T const & w, T const & x, T const & y, T const & z)
  : x(x), y(y), z(z), w(w)
 {}



 template <typename T, precision P>
 template <typename U, precision Q>
 inline constexpr tquat<T, P>::tquat(tquat<U, Q> const & q)
  : x(static_cast<T>(q.x))
  , y(static_cast<T>(q.y))
  , z(static_cast<T>(q.z))
  , w(static_cast<T>(q.w))
 {}
# 153 "../../include/glm/gtc/../gtc/quaternion.inl"
 template <typename T, precision P>
 inline tquat<T, P>::tquat(tvec3<T, P> const & u, tvec3<T, P> const & v)
 {
  tvec3<T, P> const LocalW(cross(u, v));
  T Dot = detail::compute_dot<tvec3, T, P, detail::is_aligned<P>::value>::call(u, v);
  tquat<T, P> q(T(1) + Dot, LocalW.x, LocalW.y, LocalW.z);

  *this = normalize(q);
 }

 template <typename T, precision P>
 inline tquat<T, P>::tquat(tvec3<T, P> const & eulerAngle)
 {
  tvec3<T, P> c = glm::cos(eulerAngle * T(0.5));
  tvec3<T, P> s = glm::sin(eulerAngle * T(0.5));

  this->w = c.x * c.y * c.z + s.x * s.y * s.z;
  this->x = s.x * c.y * c.z - c.x * s.y * s.z;
  this->y = c.x * s.y * c.z + s.x * c.y * s.z;
  this->z = c.x * c.y * s.z - s.x * s.y * c.z;
 }

 template <typename T, precision P>
 inline tquat<T, P>::tquat(tmat3x3<T, P> const & m)
 {
  *this = quat_cast(m);
 }

 template <typename T, precision P>
 inline tquat<T, P>::tquat(tmat4x4<T, P> const & m)
 {
  *this = quat_cast(m);
 }


 template <typename T, precision P>
 inline tquat<T, P>::operator tmat3x3<T, P>()
 {
  return mat3_cast(*this);
 }

 template <typename T, precision P>
 inline tquat<T, P>::operator tmat4x4<T, P>()
 {
  return mat4_cast(*this);
 }


 template <typename T, precision P>
 inline tquat<T, P> conjugate(tquat<T, P> const & q)
 {
  return tquat<T, P>(q.w, -q.x, -q.y, -q.z);
 }

 template <typename T, precision P>
 inline tquat<T, P> inverse(tquat<T, P> const & q)
 {
  return conjugate(q) / dot(q, q);
 }
# 227 "../../include/glm/gtc/../gtc/quaternion.inl"
 template <typename T, precision P>
 template <typename U>
 inline tquat<T, P> & tquat<T, P>::operator=(tquat<U, P> const & q)
 {
  this->w = static_cast<T>(q.w);
  this->x = static_cast<T>(q.x);
  this->y = static_cast<T>(q.y);
  this->z = static_cast<T>(q.z);
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tquat<T, P> & tquat<T, P>::operator+=(tquat<U, P> const& q)
 {
  return (*this = detail::compute_quat_add<T, P, detail::is_aligned<P>::value>::call(*this, tquat<T, P>(q)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tquat<T, P> & tquat<T, P>::operator-=(tquat<U, P> const& q)
 {
  return (*this = detail::compute_quat_sub<T, P, detail::is_aligned<P>::value>::call(*this, tquat<T, P>(q)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tquat<T, P> & tquat<T, P>::operator*=(tquat<U, P> const & r)
 {
  tquat<T, P> const p(*this);
  tquat<T, P> const q(r);

  this->w = p.w * q.w - p.x * q.x - p.y * q.y - p.z * q.z;
  this->x = p.w * q.x + p.x * q.w + p.y * q.z - p.z * q.y;
  this->y = p.w * q.y + p.y * q.w + p.z * q.x - p.x * q.z;
  this->z = p.w * q.z + p.z * q.w + p.x * q.y - p.y * q.x;
  return *this;
 }

 template <typename T, precision P>
 template <typename U>
 inline tquat<T, P> & tquat<T, P>::operator*=(U s)
 {
  return (*this = detail::compute_quat_mul_scalar<T, P, detail::is_aligned<P>::value>::call(*this, static_cast<U>(s)));
 }

 template <typename T, precision P>
 template <typename U>
 inline tquat<T, P> & tquat<T, P>::operator/=(U s)
 {
  return (*this = detail::compute_quat_div_scalar<T, P, detail::is_aligned<P>::value>::call(*this, static_cast<U>(s)));
 }



 template <typename T, precision P>
 inline tquat<T, P> operator+(tquat<T, P> const & q)
 {
  return q;
 }

 template <typename T, precision P>
 inline tquat<T, P> operator-(tquat<T, P> const & q)
 {
  return tquat<T, P>(-q.w, -q.x, -q.y, -q.z);
 }



 template <typename T, precision P>
 inline tquat<T, P> operator+(tquat<T, P> const & q, tquat<T, P> const & p)
 {
  return tquat<T, P>(q) += p;
 }

 template <typename T, precision P>
 inline tquat<T, P> operator*(tquat<T, P> const & q, tquat<T, P> const & p)
 {
  return tquat<T, P>(q) *= p;
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator*(tquat<T, P> const & q, tvec3<T, P> const & v)
 {
  tvec3<T, P> const QuatVector(q.x, q.y, q.z);
  tvec3<T, P> const uv(glm::cross(QuatVector, v));
  tvec3<T, P> const uuv(glm::cross(QuatVector, uv));

  return v + ((uv * q.w) + uuv) * static_cast<T>(2);
 }

 template <typename T, precision P>
 inline tvec3<T, P> operator*(tvec3<T, P> const & v, tquat<T, P> const & q)
 {
  return glm::inverse(q) * v;
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator*(tquat<T, P> const& q, tvec4<T, P> const& v)
 {
  return detail::compute_quat_mul_vec4<T, P, detail::is_aligned<P>::value>::call(q, v);
 }

 template <typename T, precision P>
 inline tvec4<T, P> operator*(tvec4<T, P> const & v, tquat<T, P> const & q)
 {
  return glm::inverse(q) * v;
 }

 template <typename T, precision P>
 inline tquat<T, P> operator*(tquat<T, P> const & q, T const & s)
 {
  return tquat<T, P>(
   q.w * s, q.x * s, q.y * s, q.z * s);
 }

 template <typename T, precision P>
 inline tquat<T, P> operator*(T const & s, tquat<T, P> const & q)
 {
  return q * s;
 }

 template <typename T, precision P>
 inline tquat<T, P> operator/(tquat<T, P> const & q, T const & s)
 {
  return tquat<T, P>(
   q.w / s, q.x / s, q.y / s, q.z / s);
 }



 template <typename T, precision P>
 inline bool operator==(tquat<T, P> const & q1, tquat<T, P> const & q2)
 {
  return (q1.x == q2.x) && (q1.y == q2.y) && (q1.z == q2.z) && (q1.w == q2.w);
 }

 template <typename T, precision P>
 inline bool operator!=(tquat<T, P> const & q1, tquat<T, P> const & q2)
 {
  return (q1.x != q2.x) || (q1.y != q2.y) || (q1.z != q2.z) || (q1.w != q2.w);
 }



 template <typename T, precision P>
 inline T length(tquat<T, P> const & q)
 {
  return glm::sqrt(dot(q, q));
 }

 template <typename T, precision P>
 inline tquat<T, P> normalize(tquat<T, P> const & q)
 {
  T len = length(q);
  if(len <= T(0))
   return tquat<T, P>(1, 0, 0, 0);
  T oneOverLen = T(1) / len;
  return tquat<T, P>(q.w * oneOverLen, q.x * oneOverLen, q.y * oneOverLen, q.z * oneOverLen);
 }

 template <typename T, precision P>
 inline tquat<T, P> cross(tquat<T, P> const & q1, tquat<T, P> const & q2)
 {
  return tquat<T, P>(
   q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z,
   q1.w * q2.x + q1.x * q2.w + q1.y * q2.z - q1.z * q2.y,
   q1.w * q2.y + q1.y * q2.w + q1.z * q2.x - q1.x * q2.z,
   q1.w * q2.z + q1.z * q2.w + q1.x * q2.y - q1.y * q2.x);
 }
# 474 "../../include/glm/gtc/../gtc/quaternion.inl"
 template <typename T, precision P>
 inline tquat<T, P> mix(tquat<T, P> const & x, tquat<T, P> const & y, T a)
 {
  T cosTheta = dot(x, y);


  if(cosTheta > T(1) - epsilon<T>())
  {

   return tquat<T, P>(
    mix(x.w, y.w, a),
    mix(x.x, y.x, a),
    mix(x.y, y.y, a),
    mix(x.z, y.z, a));
  }
  else
  {

   T angle = acos(cosTheta);
   return (sin((T(1) - a) * angle) * x + sin(a * angle) * y) / sin(angle);
  }
 }

 template <typename T, precision P>
 inline tquat<T, P> lerp(tquat<T, P> const & x, tquat<T, P> const & y, T a)
 {

  
# 501 "../../include/glm/gtc/../gtc/quaternion.inl" 3
 ((
# 501 "../../include/glm/gtc/../gtc/quaternion.inl"
 a >= static_cast<T>(0)
# 501 "../../include/glm/gtc/../gtc/quaternion.inl" 3
 ) ? (void)0 : _assert(
# 501 "../../include/glm/gtc/../gtc/quaternion.inl"
 "a >= static_cast<T>(0)"
# 501 "../../include/glm/gtc/../gtc/quaternion.inl" 3
 , "../../include/glm/gtc/../gtc/quaternion.inl", 501))
# 501 "../../include/glm/gtc/../gtc/quaternion.inl"
                               ;
  
# 502 "../../include/glm/gtc/../gtc/quaternion.inl" 3
 ((
# 502 "../../include/glm/gtc/../gtc/quaternion.inl"
 a <= static_cast<T>(1)
# 502 "../../include/glm/gtc/../gtc/quaternion.inl" 3
 ) ? (void)0 : _assert(
# 502 "../../include/glm/gtc/../gtc/quaternion.inl"
 "a <= static_cast<T>(1)"
# 502 "../../include/glm/gtc/../gtc/quaternion.inl" 3
 , "../../include/glm/gtc/../gtc/quaternion.inl", 502))
# 502 "../../include/glm/gtc/../gtc/quaternion.inl"
                               ;

  return x * (T(1) - a) + (y * a);
 }

 template <typename T, precision P>
 inline tquat<T, P> slerp(tquat<T, P> const & x, tquat<T, P> const & y, T a)
 {
  tquat<T, P> z = y;

  T cosTheta = dot(x, y);



  if (cosTheta < T(0))
  {
   z = -y;
   cosTheta = -cosTheta;
  }


  if(cosTheta > T(1) - epsilon<T>())
  {

   return tquat<T, P>(
    mix(x.w, z.w, a),
    mix(x.x, z.x, a),
    mix(x.y, z.y, a),
    mix(x.z, z.z, a));
  }
  else
  {

   T angle = acos(cosTheta);
   return (sin((T(1) - a) * angle) * x + sin(a * angle) * z) / sin(angle);
  }
 }

 template <typename T, precision P>
 inline tquat<T, P> rotate(tquat<T, P> const & q, T const & angle, tvec3<T, P> const & v)
 {
  tvec3<T, P> Tmp = v;


  T len = glm::length(Tmp);
  if(abs(len - T(1)) > T(0.001))
  {
   T oneOverLen = static_cast<T>(1) / len;
   Tmp.x *= oneOverLen;
   Tmp.y *= oneOverLen;
   Tmp.z *= oneOverLen;
  }

  T const AngleRad(angle);
  T const Sin = sin(AngleRad * T(0.5));

  return q * tquat<T, P>(cos(AngleRad * T(0.5)), Tmp.x * Sin, Tmp.y * Sin, Tmp.z * Sin);

 }

 template <typename T, precision P>
 inline tvec3<T, P> eulerAngles(tquat<T, P> const & x)
 {
  return tvec3<T, P>(pitch(x), yaw(x), roll(x));
 }

 template <typename T, precision P>
 inline T roll(tquat<T, P> const & q)
 {
  return T(atan(T(2) * (q.x * q.y + q.w * q.z), q.w * q.w + q.x * q.x - q.y * q.y - q.z * q.z));
 }

 template <typename T, precision P>
 inline T pitch(tquat<T, P> const & q)
 {
  return T(atan(T(2) * (q.y * q.z + q.w * q.x), q.w * q.w - q.x * q.x - q.y * q.y + q.z * q.z));
 }

 template <typename T, precision P>
 inline T yaw(tquat<T, P> const & q)
 {
  return asin(clamp(T(-2) * (q.x * q.z - q.w * q.y), T(-1), T(1)));
 }

 template <typename T, precision P>
 inline tmat3x3<T, P> mat3_cast(tquat<T, P> const & q)
 {
  tmat3x3<T, P> Result(T(1));
  T qxx(q.x * q.x);
  T qyy(q.y * q.y);
  T qzz(q.z * q.z);
  T qxz(q.x * q.z);
  T qxy(q.x * q.y);
  T qyz(q.y * q.z);
  T qwx(q.w * q.x);
  T qwy(q.w * q.y);
  T qwz(q.w * q.z);

  Result[0][0] = T(1) - T(2) * (qyy + qzz);
  Result[0][1] = T(2) * (qxy + qwz);
  Result[0][2] = T(2) * (qxz - qwy);

  Result[1][0] = T(2) * (qxy - qwz);
  Result[1][1] = T(1) - T(2) * (qxx + qzz);
  Result[1][2] = T(2) * (qyz + qwx);

  Result[2][0] = T(2) * (qxz + qwy);
  Result[2][1] = T(2) * (qyz - qwx);
  Result[2][2] = T(1) - T(2) * (qxx + qyy);
  return Result;
 }

 template <typename T, precision P>
 inline tmat4x4<T, P> mat4_cast(tquat<T, P> const & q)
 {
  return tmat4x4<T, P>(mat3_cast(q));
 }

 template <typename T, precision P>
 inline tquat<T, P> quat_cast(tmat3x3<T, P> const & m)
 {
  T fourXSquaredMinus1 = m[0][0] - m[1][1] - m[2][2];
  T fourYSquaredMinus1 = m[1][1] - m[0][0] - m[2][2];
  T fourZSquaredMinus1 = m[2][2] - m[0][0] - m[1][1];
  T fourWSquaredMinus1 = m[0][0] + m[1][1] + m[2][2];

  int biggestIndex = 0;
  T fourBiggestSquaredMinus1 = fourWSquaredMinus1;
  if(fourXSquaredMinus1 > fourBiggestSquaredMinus1)
  {
   fourBiggestSquaredMinus1 = fourXSquaredMinus1;
   biggestIndex = 1;
  }
  if(fourYSquaredMinus1 > fourBiggestSquaredMinus1)
  {
   fourBiggestSquaredMinus1 = fourYSquaredMinus1;
   biggestIndex = 2;
  }
  if(fourZSquaredMinus1 > fourBiggestSquaredMinus1)
  {
   fourBiggestSquaredMinus1 = fourZSquaredMinus1;
   biggestIndex = 3;
  }

  T biggestVal = sqrt(fourBiggestSquaredMinus1 + T(1)) * T(0.5);
  T mult = static_cast<T>(0.25) / biggestVal;

  tquat<T, P> Result(uninitialize);
  switch(biggestIndex)
  {
  case 0:
   Result.w = biggestVal;
   Result.x = (m[1][2] - m[2][1]) * mult;
   Result.y = (m[2][0] - m[0][2]) * mult;
   Result.z = (m[0][1] - m[1][0]) * mult;
   break;
  case 1:
   Result.w = (m[1][2] - m[2][1]) * mult;
   Result.x = biggestVal;
   Result.y = (m[0][1] + m[1][0]) * mult;
   Result.z = (m[2][0] + m[0][2]) * mult;
   break;
  case 2:
   Result.w = (m[2][0] - m[0][2]) * mult;
   Result.x = (m[0][1] + m[1][0]) * mult;
   Result.y = biggestVal;
   Result.z = (m[1][2] + m[2][1]) * mult;
   break;
  case 3:
   Result.w = (m[0][1] - m[1][0]) * mult;
   Result.x = (m[2][0] + m[0][2]) * mult;
   Result.y = (m[1][2] + m[2][1]) * mult;
   Result.z = biggestVal;
   break;

  default:
   
# 678 "../../include/glm/gtc/../gtc/quaternion.inl" 3
  ((
# 678 "../../include/glm/gtc/../gtc/quaternion.inl"
  false
# 678 "../../include/glm/gtc/../gtc/quaternion.inl" 3
  ) ? (void)0 : _assert(
# 678 "../../include/glm/gtc/../gtc/quaternion.inl"
  "false"
# 678 "../../include/glm/gtc/../gtc/quaternion.inl" 3
  , "../../include/glm/gtc/../gtc/quaternion.inl", 678))
# 678 "../../include/glm/gtc/../gtc/quaternion.inl"
               ;
   break;
  }
  return Result;
 }

 template <typename T, precision P>
 inline tquat<T, P> quat_cast(tmat4x4<T, P> const & m4)
 {
  return quat_cast(tmat3x3<T, P>(m4));
 }

 template <typename T, precision P>
 inline T angle(tquat<T, P> const & x)
 {
  return acos(x.w) * T(2);
 }

 template <typename T, precision P>
 inline tvec3<T, P> axis(tquat<T, P> const & x)
 {
  T tmp1 = static_cast<T>(1) - x.w * x.w;
  if(tmp1 <= static_cast<T>(0))
   return tvec3<T, P>(0, 0, 1);
  T tmp2 = static_cast<T>(1) / sqrt(tmp1);
  return tvec3<T, P>(x.x * tmp2, x.y * tmp2, x.z * tmp2);
 }

 template <typename T, precision P>
 inline tquat<T, P> angleAxis(T const & angle, tvec3<T, P> const & v)
 {
  tquat<T, P> Result(uninitialize);

  T const a(angle);
  T const s = glm::sin(a * static_cast<T>(0.5));

  Result.w = glm::cos(a * static_cast<T>(0.5));
  Result.x = v.x * s;
  Result.y = v.y * s;
  Result.z = v.z * s;
  return Result;
 }

 template <typename T, precision P>
 inline tvec4<bool, P> lessThan(tquat<T, P> const & x, tquat<T, P> const & y)
 {
  tvec4<bool, P> Result(uninitialize);
  for(length_t i = 0; i < x.length(); ++i)
   Result[i] = x[i] < y[i];
  return Result;
 }

 template <typename T, precision P>
 inline tvec4<bool, P> lessThanEqual(tquat<T, P> const & x, tquat<T, P> const & y)
 {
  tvec4<bool, P> Result(uninitialize);
  for(length_t i = 0; i < x.length(); ++i)
   Result[i] = x[i] <= y[i];
  return Result;
 }

 template <typename T, precision P>
 inline tvec4<bool, P> greaterThan(tquat<T, P> const & x, tquat<T, P> const & y)
 {
  tvec4<bool, P> Result(uninitialize);
  for(length_t i = 0; i < x.length(); ++i)
   Result[i] = x[i] > y[i];
  return Result;
 }

 template <typename T, precision P>
 inline tvec4<bool, P> greaterThanEqual(tquat<T, P> const & x, tquat<T, P> const & y)
 {
  tvec4<bool, P> Result(uninitialize);
  for(length_t i = 0; i < x.length(); ++i)
   Result[i] = x[i] >= y[i];
  return Result;
 }

 template <typename T, precision P>
 inline tvec4<bool, P> equal(tquat<T, P> const & x, tquat<T, P> const & y)
 {
  tvec4<bool, P> Result(uninitialize);
  for(length_t i = 0; i < x.length(); ++i)
   Result[i] = x[i] == y[i];
  return Result;
 }

 template <typename T, precision P>
 inline tvec4<bool, P> notEqual(tquat<T, P> const & x, tquat<T, P> const & y)
 {
  tvec4<bool, P> Result(uninitialize);
  for(length_t i = 0; i < x.length(); ++i)
   Result[i] = x[i] != y[i];
  return Result;
 }

 template <typename T, precision P>
 inline tvec4<bool, P> isnan(tquat<T, P> const& q)
 {
  static_assert(std::numeric_limits<T>::is_iec559, "'isnan' only accept floating-point inputs");

  return tvec4<bool, P>(isnan(q.x), isnan(q.y), isnan(q.z), isnan(q.w));
 }

 template <typename T, precision P>
 inline tvec4<bool, P> isinf(tquat<T, P> const& q)
 {
  static_assert(std::numeric_limits<T>::is_iec559, "'isinf' only accept floating-point inputs");

  return tvec4<bool, P>(isinf(q.x), isinf(q.y), isinf(q.z), isinf(q.w));
 }
}


# 1 "../../include/glm/gtc/../gtc/quaternion_simd.inl" 1
# 794 "../../include/glm/gtc/../gtc/quaternion.inl" 2
# 398 "../../include/glm/gtc/../gtc/quaternion.hpp" 2
# 38 "../../include/glm/gtc/type_ptr.hpp" 2
# 50 "../../include/glm/gtc/type_ptr.hpp"
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstring" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstring" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstring" 3
# 71 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstring" 3

# 71 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstring" 3
namespace std
{


  using ::memchr;
  using ::memcmp;
  using ::memcpy;
  using ::memmove;
  using ::memset;
  using ::strcat;
  using ::strcmp;
  using ::strcoll;
  using ::strcpy;
  using ::strcspn;
  using ::strerror;
  using ::strlen;
  using ::strncat;
  using ::strncmp;
  using ::strncpy;
  using ::strspn;
  using ::strtok;
  using ::strxfrm;
  using ::strchr;
  using ::strpbrk;
  using ::strrchr;
  using ::strstr;


  inline void*
  memchr(void* __s, int __c, size_t __n)
  { return __builtin_memchr(__s, __c, __n); }

  inline char*
  strchr(char* __s, int __n)
  { return __builtin_strchr(__s, __n); }

  inline char*
  strpbrk(char* __s1, const char* __s2)
  { return __builtin_strpbrk(__s1, __s2); }

  inline char*
  strrchr(char* __s, int __n)
  { return __builtin_strrchr(__s, __n); }

  inline char*
  strstr(char* __s1, const char* __s2)
  { return __builtin_strstr(__s1, __s2); }



}
# 51 "../../include/glm/gtc/type_ptr.hpp" 2






# 56 "../../include/glm/gtc/type_ptr.hpp"
namespace glm
{





 template<typename genType>
 typename genType::value_type const * value_ptr(genType const & vec);



 template<typename T>
 tvec2<T, defaultp> make_vec2(T const * const ptr);



 template<typename T>
 tvec3<T, defaultp> make_vec3(T const * const ptr);



 template<typename T>
 tvec4<T, defaultp> make_vec4(T const * const ptr);



 template<typename T>
 tmat2x2<T, defaultp> make_mat2x2(T const * const ptr);



 template<typename T>
 tmat2x3<T, defaultp> make_mat2x3(T const * const ptr);



 template<typename T>
 tmat2x4<T, defaultp> make_mat2x4(T const * const ptr);



 template<typename T>
 tmat3x2<T, defaultp> make_mat3x2(T const * const ptr);



 template<typename T>
 tmat3x3<T, defaultp> make_mat3x3(T const * const ptr);



 template<typename T>
 tmat3x4<T, defaultp> make_mat3x4(T const * const ptr);



 template<typename T>
 tmat4x2<T, defaultp> make_mat4x2(T const * const ptr);



 template<typename T>
 tmat4x3<T, defaultp> make_mat4x3(T const * const ptr);



 template<typename T>
 tmat4x4<T, defaultp> make_mat4x4(T const * const ptr);



 template<typename T>
 tmat2x2<T, defaultp> make_mat2(T const * const ptr);



 template<typename T>
 tmat3x3<T, defaultp> make_mat3(T const * const ptr);



 template<typename T>
 tmat4x4<T, defaultp> make_mat4(T const * const ptr);



 template<typename T>
 tquat<T, defaultp> make_quat(T const * const ptr);


}

# 1 "../../include/glm/gtc/type_ptr.inl" 1



# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstring" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstring" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstring" 3
# 5 "../../include/glm/gtc/type_ptr.inl" 2

namespace glm
{





 template<typename T, precision P>
 inline T const * value_ptr
 (
  tvec2<T, P> const & vec
 )
 {
  return &(vec.x);
 }



 template<typename T, precision P>
 inline T * value_ptr
 (
  tvec2<T, P> & vec
 )
 {
  return &(vec.x);
 }



 template<typename T, precision P>
 inline T const * value_ptr
 (
  tvec3<T, P> const & vec
 )
 {
  return &(vec.x);
 }



 template<typename T, precision P>
 inline T * value_ptr
 (
  tvec3<T, P> & vec
 )
 {
  return &(vec.x);
 }



 template<typename T, precision P>
 inline T const * value_ptr
 (
  tvec4<T, P> const & vec
 )
 {
  return &(vec.x);
 }



 template<typename T, precision P>
 inline T * value_ptr
 (
  tvec4<T, P> & vec
 )
 {
  return &(vec.x);
 }



 template<typename T, precision P>
 inline T const * value_ptr
 (
  tmat2x2<T, P> const & mat
 )
 {
  return &(mat[0].x);
 }



 template<typename T, precision P>
 inline T * value_ptr
 (
  tmat2x2<T, P> & mat
 )
 {
  return &(mat[0].x);
 }



 template<typename T, precision P>
 inline T const * value_ptr
 (
  tmat3x3<T, P> const & mat
 )
 {
  return &(mat[0].x);
 }



 template<typename T, precision P>
 inline T * value_ptr
 (
  tmat3x3<T, P> & mat
 )
 {
  return &(mat[0].x);
 }



 template<typename T, precision P>
 inline T const * value_ptr
 (
  tmat4x4<T, P> const & mat
 )
 {
  return &(mat[0].x);
 }



 template<typename T, precision P>
 inline T * value_ptr
 (
  tmat4x4<T, P> & mat
 )
 {
  return &(mat[0].x);
 }



 template<typename T, precision P>
 inline T const * value_ptr
 (
  tmat2x3<T, P> const & mat
 )
 {
  return &(mat[0].x);
 }



 template<typename T, precision P>
 inline T * value_ptr
 (
  tmat2x3<T, P> & mat
 )
 {
  return &(mat[0].x);
 }



 template<typename T, precision P>
 inline T const * value_ptr
 (
  tmat3x2<T, P> const & mat
 )
 {
  return &(mat[0].x);
 }



 template<typename T, precision P>
 inline T * value_ptr
 (
  tmat3x2<T, P> & mat
 )
 {
  return &(mat[0].x);
 }



 template<typename T, precision P>
 inline T const * value_ptr
 (
  tmat2x4<T, P> const & mat
 )
 {
  return &(mat[0].x);
 }



 template<typename T, precision P>
 inline T * value_ptr
 (
  tmat2x4<T, P> & mat
 )
 {
  return &(mat[0].x);
 }



 template<typename T, precision P>
 inline T const * value_ptr
 (
  tmat4x2<T, P> const & mat
 )
 {
  return &(mat[0].x);
 }



 template<typename T, precision P>
 inline T * value_ptr
 (
  tmat4x2<T, P> & mat
 )
 {
  return &(mat[0].x);
 }



 template<typename T, precision P>
 inline T const * value_ptr
 (
  tmat3x4<T, P> const & mat
 )
 {
  return &(mat[0].x);
 }



 template<typename T, precision P>
 inline T * value_ptr
 (
  tmat3x4<T, P> & mat
 )
 {
  return &(mat[0].x);
 }



 template<typename T, precision P>
 inline T const * value_ptr
 (
  tmat4x3<T, P> const & mat
 )
 {
  return &(mat[0].x);
 }



 template<typename T, precision P>
 inline T * value_ptr(tmat4x3<T, P> & mat)
 {
  return &(mat[0].x);
 }



 template<typename T, precision P>
 inline T const * value_ptr
 (
  tquat<T, P> const & q
 )
 {
  return &(q[0]);
 }



 template<typename T, precision P>
 inline T * value_ptr
 (
  tquat<T, P> & q
 )
 {
  return &(q[0]);
 }



 template <typename T>
 inline tvec2<T, defaultp> make_vec2(T const * const ptr)
 {
  tvec2<T, defaultp> Result;
  memcpy(value_ptr(Result), ptr, sizeof(tvec2<T, defaultp>));
  return Result;
 }



 template <typename T>
 inline tvec3<T, defaultp> make_vec3(T const * const ptr)
 {
  tvec3<T, defaultp> Result;
  memcpy(value_ptr(Result), ptr, sizeof(tvec3<T, defaultp>));
  return Result;
 }



 template <typename T>
 inline tvec4<T, defaultp> make_vec4(T const * const ptr)
 {
  tvec4<T, defaultp> Result;
  memcpy(value_ptr(Result), ptr, sizeof(tvec4<T, defaultp>));
  return Result;
 }



 template <typename T>
 inline tmat2x2<T, defaultp> make_mat2x2(T const * const ptr)
 {
  tmat2x2<T, defaultp> Result;
  memcpy(value_ptr(Result), ptr, sizeof(tmat2x2<T, defaultp>));
  return Result;
 }



 template <typename T>
 inline tmat2x3<T, defaultp> make_mat2x3(T const * const ptr)
 {
  tmat2x3<T, defaultp> Result;
  memcpy(value_ptr(Result), ptr, sizeof(tmat2x3<T, defaultp>));
  return Result;
 }



 template <typename T>
 inline tmat2x4<T, defaultp> make_mat2x4(T const * const ptr)
 {
  tmat2x4<T, defaultp> Result;
  memcpy(value_ptr(Result), ptr, sizeof(tmat2x4<T, defaultp>));
  return Result;
 }



 template <typename T>
 inline tmat3x2<T, defaultp> make_mat3x2(T const * const ptr)
 {
  tmat3x2<T, defaultp> Result;
  memcpy(value_ptr(Result), ptr, sizeof(tmat3x2<T, defaultp>));
  return Result;
 }



 template <typename T>
 inline tmat3x3<T, defaultp> make_mat3x3(T const * const ptr)
 {
  tmat3x3<T, defaultp> Result;
  memcpy(value_ptr(Result), ptr, sizeof(tmat3x3<T, defaultp>));
  return Result;
 }



 template <typename T>
 inline tmat3x4<T, defaultp> make_mat3x4(T const * const ptr)
 {
  tmat3x4<T, defaultp> Result;
  memcpy(value_ptr(Result), ptr, sizeof(tmat3x4<T, defaultp>));
  return Result;
 }



 template <typename T>
 inline tmat4x2<T, defaultp> make_mat4x2(T const * const ptr)
 {
  tmat4x2<T, defaultp> Result;
  memcpy(value_ptr(Result), ptr, sizeof(tmat4x2<T, defaultp>));
  return Result;
 }



 template <typename T>
 inline tmat4x3<T, defaultp> make_mat4x3(T const * const ptr)
 {
  tmat4x3<T, defaultp> Result;
  memcpy(value_ptr(Result), ptr, sizeof(tmat4x3<T, defaultp>));
  return Result;
 }



 template <typename T>
 inline tmat4x4<T, defaultp> make_mat4x4(T const * const ptr)
 {
  tmat4x4<T, defaultp> Result;
  memcpy(value_ptr(Result), ptr, sizeof(tmat4x4<T, defaultp>));
  return Result;
 }



 template <typename T>
 inline tmat2x2<T, defaultp> make_mat2(T const * const ptr)
 {
  return make_mat2x2(ptr);
 }



 template <typename T>
 inline tmat3x3<T, defaultp> make_mat3(T const * const ptr)
 {
  return make_mat3x3(ptr);
 }



 template <typename T>
 inline tmat4x4<T, defaultp> make_mat4(T const * const ptr)
 {
  return make_mat4x4(ptr);
 }



 template <typename T>
 inline tquat<T, defaultp> make_quat(T const * const ptr)
 {
  tquat<T, defaultp> Result;
  memcpy(value_ptr(Result), ptr, sizeof(tquat<T, defaultp>));
  return Result;
 }


}
# 150 "../../include/glm/gtc/type_ptr.hpp" 2
# 8 "../../include/utils/shader.h" 2

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\string" 1 3
# 36 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\string" 3
       
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\string" 3


# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stringfwd.h" 1 3
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stringfwd.h" 3
       
# 38 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stringfwd.h" 3


# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\memoryfwd.h" 1 3
# 46 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\memoryfwd.h" 3
       
# 47 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\memoryfwd.h" 3




# 50 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\memoryfwd.h" 3
namespace std
{

# 63 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\memoryfwd.h" 3
  template<typename>
    class allocator;

  template<>
    class allocator<void>;


  template<typename, typename>
    struct uses_allocator;




}
# 41 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stringfwd.h" 2 3

namespace std
{








  template<class _CharT>
    struct char_traits;

  template<> struct char_traits<char>;


  template<> struct char_traits<wchar_t>;




  template<> struct char_traits<char16_t>;
  template<> struct char_traits<char32_t>;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;


  typedef basic_string<char> string;



  typedef basic_string<wchar_t> wstring;





  typedef basic_string<char16_t> u16string;


  typedef basic_string<char32_t> u32string;


}




}
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\string" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\char_traits.h" 1 3
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\char_traits.h" 3
       
# 38 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\char_traits.h" 3

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 1 3
# 60 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\functexcept.h" 1 3
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\functexcept.h" 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\exception_defines.h" 1 3
# 41 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\functexcept.h" 2 3

namespace std
{



  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__))
    __attribute__((__format__(__gnu_printf__, 1, 2)));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_system_error(int) __attribute__((__noreturn__));

  void
  __throw_future_error(int) __attribute__((__noreturn__));


  void
  __throw_bad_function_call() __attribute__((__noreturn__));


}
# 61 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 2 3


# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\numeric_traits.h" 1 3
# 32 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\numeric_traits.h" 3
       
# 33 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\numeric_traits.h" 3




namespace __gnu_cxx
{

# 54 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_integer
    {

      static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);



      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 99 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 643L / 2136);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };


}
# 64 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_pair.h" 1 3
# 59 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_pair.h" 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\move.h" 1 3
# 34 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\move.h" 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\concept_check.h" 1 3
# 33 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\concept_check.h" 3
       
# 34 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\concept_check.h" 3
# 35 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\move.h" 2 3

namespace std
{







  template<typename _Tp>
    inline constexpr _Tp*
    __addressof(_Tp& __r) noexcept
    { return __builtin_addressof(__r); }




}



namespace std
{

# 72 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\move.h" 3
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    { return static_cast<_Tp&&>(__t); }







  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
    {
      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
      " substituting _Tp is an lvalue reference type");
      return static_cast<_Tp&&>(__t);
    }






  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }


  template<typename _Tp>
    struct __move_if_noexcept_cond
    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
                    is_copy_constructible<_Tp>>::type { };
# 116 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\move.h" 3
  template<typename _Tp>
    constexpr typename
    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
    move_if_noexcept(_Tp& __x) noexcept
    { return std::move(__x); }
# 136 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\move.h" 3
  template<typename _Tp>
    inline _Tp*
    addressof(_Tp& __r) noexcept
    { return std::__addressof(__r); }



  template<typename _Tp>
    const _Tp* addressof(const _Tp&&) = delete;


  template <typename _Tp, typename _Up = _Tp>
    inline _Tp
    __exchange(_Tp& __obj, _Up&& __new_val)
    {
      _Tp __old_val = std::move(__obj);
      __obj = std::forward<_Up>(__new_val);
      return __old_val;
    }
# 176 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\move.h" 3
  template<typename _Tp>
    inline

    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
         is_move_constructible<_Tp>,
         is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
             is_nothrow_move_assignable<_Tp>>::value)




    {

     

      _Tp __tmp = std::move(__a);
      __a = std::move(__b);
      __b = std::move(__tmp);
    }




  template<typename _Tp, size_t _Nm>
    inline

    typename enable_if<__is_swappable<_Tp>::value>::type
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    noexcept(__is_nothrow_swappable<_Tp>::value)




    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }



}
# 60 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_pair.h" 2 3





namespace std
{

# 76 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_pair.h" 3
  struct piecewise_construct_t { explicit piecewise_construct_t() = default; };


  constexpr piecewise_construct_t piecewise_construct =
    piecewise_construct_t();


  template<typename...>
    class tuple;

  template<std::size_t...>
    struct _Index_tuple;






  template <bool, typename _T1, typename _T2>
    struct _PCC
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, const _U2&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return __and_<is_convertible<const _U1&, _T1>,
        is_convertible<const _U2&, _T2>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, _U2&&>>::value;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return __and_<is_convertible<_U1&&, _T1>,
        is_convertible<_U2&&, _T2>>::value;
      }

      template <bool __implicit, typename _U1, typename _U2>
      static constexpr bool _CopyMovePair()
      {
 using __do_converts = __and_<is_convertible<const _U1&, _T1>,
      is_convertible<_U2&&, _T2>>;
 using __converts = typename conditional<__implicit,
           __do_converts,
           __not_<__do_converts>>::type;
 return __and_<is_constructible<_T1, const _U1&>,
        is_constructible<_T2, _U2&&>,
        __converts
        >::value;
      }

      template <bool __implicit, typename _U1, typename _U2>
      static constexpr bool _MoveCopyPair()
      {
 using __do_converts = __and_<is_convertible<_U1&&, _T1>,
      is_convertible<const _U2&, _T2>>;
 using __converts = typename conditional<__implicit,
           __do_converts,
           __not_<__do_converts>>::type;
 return __and_<is_constructible<_T1, _U1&&>,
        is_constructible<_T2, const _U2&&>,
        __converts
        >::value;
      }
  };

  template <typename _T1, typename _T2>
    struct _PCC<false, _T1, _T2>
    {
      template <typename _U1, typename _U2>
      static constexpr bool _ConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyConvertiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _MoveConstructiblePair()
      {
 return false;
      }

      template <typename _U1, typename _U2>
      static constexpr bool _ImplicitlyMoveConvertiblePair()
      {
 return false;
      }
  };




  struct __nonesuch_no_braces : std::__nonesuch {
    explicit __nonesuch_no_braces(const __nonesuch&) = delete;
  };
# 197 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_pair.h" 3
  template<typename _T1, typename _T2>
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;






      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                                     __is_implicitly_default_constructible<_U1>,
                                     __is_implicitly_default_constructible<_U2>>
                                   ::value, bool>::type = true>

      constexpr pair()
      : first(), second() { }


      template <typename _U1 = _T1,
                typename _U2 = _T2,
                typename enable_if<__and_<
                       is_default_constructible<_U1>,
                       is_default_constructible<_U2>,
                       __not_<
                         __and_<__is_implicitly_default_constructible<_U1>,
                                __is_implicitly_default_constructible<_U2>>>>
                                   ::value, bool>::type = false>
      explicit constexpr pair()
      : first(), second() { }
# 241 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_pair.h" 3
      using _PCCP = _PCC<true, _T1, _T2>;

      template<typename _U1 = _T1, typename _U2=_T2, typename
        enable_if<_PCCP::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCP::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
      constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }

       template<typename _U1 = _T1, typename _U2=_T2, typename
  enable_if<_PCCP::template
       _ConstructiblePair<_U1, _U2>()
                   && !_PCCP::template
       _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
      explicit constexpr pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }
# 269 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_pair.h" 3
      template <typename _U1, typename _U2>
        using _PCCFP = _PCC<!is_same<_T1, _U1>::value
       || !is_same<_T2, _U2>::value,
       _T1, _T2>;

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
                  && _PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
     bool>::type=true>
        constexpr pair(const pair<_U1, _U2>& __p)
        : first(__p.first), second(__p.second) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _ConstructiblePair<_U1, _U2>()
    && !_PCCFP<_U1, _U2>::template
      _ImplicitlyConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(const pair<_U1, _U2>& __p)
 : first(__p.first), second(__p.second) { }

      constexpr pair(const pair&) = default;
      constexpr pair(pair&&) = default;


      template<typename _U1, typename
        enable_if<_PCCP::template
      _MoveCopyPair<true, _U1, _T2>(),
                         bool>::type=true>
       constexpr pair(_U1&& __x, const _T2& __y)
       : first(std::forward<_U1>(__x)), second(__y) { }

      template<typename _U1, typename
        enable_if<_PCCP::template
      _MoveCopyPair<false, _U1, _T2>(),
                         bool>::type=false>
       explicit constexpr pair(_U1&& __x, const _T2& __y)
       : first(std::forward<_U1>(__x)), second(__y) { }

      template<typename _U2, typename
        enable_if<_PCCP::template
      _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }

      template<typename _U2, typename
        enable_if<_PCCP::template
      _CopyMovePair<false, _T1, _U2>(),
                         bool>::type=false>
       explicit pair(const _T1& __x, _U2&& __y)
       : first(__x), second(std::forward<_U2>(__y)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCP::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCP::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(_U1&& __x, _U2&& __y)
 : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }


      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && _PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
 constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename _U1, typename _U2, typename
        enable_if<_PCCFP<_U1, _U2>::template
      _MoveConstructiblePair<_U1, _U2>()
     && !_PCCFP<_U1, _U2>::template
      _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
 explicit constexpr pair(pair<_U1, _U2>&& __p)
 : first(std::forward<_U1>(__p.first)),
   second(std::forward<_U2>(__p.second)) { }

      template<typename... _Args1, typename... _Args2>
        pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);

      pair&
      operator=(typename conditional<
  __and_<is_copy_assignable<_T1>,
         is_copy_assignable<_T2>>::value,
  const pair&, const __nonesuch_no_braces&>::type __p)
      {
 first = __p.first;
 second = __p.second;
 return *this;
      }

      pair&
      operator=(typename conditional<
  __not_<__and_<is_copy_assignable<_T1>,
                is_copy_assignable<_T2>>>::value,
  const pair&, const __nonesuch_no_braces&>::type __p) = delete;

      pair&
      operator=(typename conditional<
  __and_<is_move_assignable<_T1>,
         is_move_assignable<_T2>>::value,
  pair&&, __nonesuch_no_braces&&>::type __p)
      noexcept(__and_<is_nothrow_move_assignable<_T1>,
               is_nothrow_move_assignable<_T2>>::value)
      {
 first = std::forward<first_type>(__p.first);
 second = std::forward<second_type>(__p.second);
 return *this;
      }

      template<typename _U1, typename _U2>
      typename enable_if<__and_<is_assignable<_T1&, const _U1&>,
    is_assignable<_T2&, const _U2&>>::value,
    pair&>::type
 operator=(const pair<_U1, _U2>& __p)
 {
   first = __p.first;
   second = __p.second;
   return *this;
 }

      template<typename _U1, typename _U2>
      typename enable_if<__and_<is_assignable<_T1&, _U1&&>,
    is_assignable<_T2&, _U2&&>>::value,
    pair&>::type
 operator=(pair<_U1, _U2>&& __p)
 {
   first = std::forward<_U1>(__p.first);
   second = std::forward<_U2>(__p.second);
   return *this;
 }

      void
      swap(pair& __p)
      noexcept(__and_<__is_nothrow_swappable<_T1>,
                      __is_nothrow_swappable<_T2>>::value)
      {
 using std::swap;
 swap(first, __p.first);
 swap(second, __p.second);
      }

    private:
      template<typename... _Args1, std::size_t... _Indexes1,
               typename... _Args2, std::size_t... _Indexes2>
        pair(tuple<_Args1...>&, tuple<_Args2...>&,
             _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>);

    };






  template<typename _T1, typename _T2>
    inline constexpr bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<typename _T1, typename _T2>
    inline constexpr bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }





  template<typename _T1, typename _T2>
    inline





    void

    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }
# 516 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_pair.h" 3
  template<typename _T1, typename _T2>
    constexpr pair<typename __decay_and_strip<_T1>::__type,
                   typename __decay_and_strip<_T2>::__type>
    make_pair(_T1&& __x, _T2&& __y)
    {
      typedef typename __decay_and_strip<_T1>::__type __ds_type1;
      typedef typename __decay_and_strip<_T2>::__type __ds_type2;
      typedef pair<__ds_type1, __ds_type2> __pair_type;
      return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
    }
# 535 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_pair.h" 3

}
# 65 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator_base_types.h" 1 3
# 62 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator_base_types.h" 3
       
# 63 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator_base_types.h" 3







namespace std
{

# 89 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator_base_types.h" 3
  struct input_iterator_tag { };


  struct output_iterator_tag { };


  struct forward_iterator_tag : public input_iterator_tag { };



  struct bidirectional_iterator_tag : public forward_iterator_tag { };



  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 116 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };
# 143 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator_base_types.h" 3
  template<typename _Iterator, typename = __void_t<>>
    struct __iterator_traits { };

  template<typename _Iterator>
    struct __iterator_traits<_Iterator,
        __void_t<typename _Iterator::iterator_category,
          typename _Iterator::value_type,
          typename _Iterator::difference_type,
          typename _Iterator::pointer,
          typename _Iterator::reference>>
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };

  template<typename _Iterator>
    struct iterator_traits
    : public __iterator_traits<_Iterator> { };
# 177 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator_base_types.h" 3
  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };


  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };





  template<typename _Iter>
    inline constexpr
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }
# 231 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator_base_types.h" 3
  template<typename _InIter>
    using _RequireInputIter = typename
      enable_if<is_convertible<typename
  iterator_traits<_InIter>::iterator_category,
          input_iterator_tag>::value>::type;



}
# 66 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator_base_funcs.h" 1 3
# 62 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator_base_funcs.h" 3
       
# 63 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator_base_funcs.h" 3


# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\debug\\assertions.h" 1 3
# 66 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator_base_funcs.h" 2 3

namespace std
{




  template <typename> struct _List_iterator;
  template <typename> struct _List_const_iterator;


  template<typename _InputIterator>
    inline
    typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {

     

      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline
    typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {

     

      return __last - __first;
    }



  template<typename _Tp>
    ptrdiff_t
    __distance(std::_List_iterator<_Tp>,
        std::_List_iterator<_Tp>,
        input_iterator_tag);

  template<typename _Tp>
    ptrdiff_t
    __distance(std::_List_const_iterator<_Tp>,
        std::_List_const_iterator<_Tp>,
        input_iterator_tag);
# 135 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {

     
      ;
      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {

     

      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {

     

      if (__builtin_constant_p(__n) && __n == 1)
 ++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
 --__i;
      else
 __i += __n;
    }
# 200 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }



  template<typename _InputIterator>
    inline _InputIterator
    next(_InputIterator __x, typename
  iterator_traits<_InputIterator>::difference_type __n = 1)
    {

     
      std::advance(__x, __n);
      return __x;
    }

  template<typename _BidirectionalIterator>
    inline _BidirectionalIterator
    prev(_BidirectionalIterator __x, typename
  iterator_traits<_BidirectionalIterator>::difference_type __n = 1)
    {

     

      std::advance(__x, -__n);
      return __x;
    }




}
# 67 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator.h" 1 3
# 66 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator.h" 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ptr_traits.h" 1 3
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ptr_traits.h" 3
namespace std
{


  class __undefined;


  template<typename _Tp>
    struct __get_first_arg
    { using type = __undefined; };

  template<template<typename, typename...> class _Template, typename _Tp,
           typename... _Types>
    struct __get_first_arg<_Template<_Tp, _Types...>>
    { using type = _Tp; };

  template<typename _Tp>
    using __get_first_arg_t = typename __get_first_arg<_Tp>::type;


  template<typename _Tp, typename _Up>
    struct __replace_first_arg
    { };

  template<template<typename, typename...> class _Template, typename _Up,
           typename _Tp, typename... _Types>
    struct __replace_first_arg<_Template<_Tp, _Types...>, _Up>
    { using type = _Template<_Up, _Types...>; };

  template<typename _Tp, typename _Up>
    using __replace_first_arg_t = typename __replace_first_arg<_Tp, _Up>::type;

  template<typename _Tp>
    using __make_not_void
      = typename conditional<is_void<_Tp>::value, __undefined, _Tp>::type;





  template<typename _Ptr>
    struct pointer_traits
    {
    private:
      template<typename _Tp>
 using __element_type = typename _Tp::element_type;

      template<typename _Tp>
 using __difference_type = typename _Tp::difference_type;

      template<typename _Tp, typename _Up, typename = void>
 struct __rebind : __replace_first_arg<_Tp, _Up> { };

      template<typename _Tp, typename _Up>
 struct __rebind<_Tp, _Up, __void_t<typename _Tp::template rebind<_Up>>>
 { using type = typename _Tp::template rebind<_Up>; };

    public:

      using pointer = _Ptr;


      using element_type
 = __detected_or_t<__get_first_arg_t<_Ptr>, __element_type, _Ptr>;


      using difference_type
 = __detected_or_t<ptrdiff_t, __difference_type, _Ptr>;


      template<typename _Up>
        using rebind = typename __rebind<_Ptr, _Up>::type;

      static _Ptr
      pointer_to(__make_not_void<element_type>& __e)
      { return _Ptr::pointer_to(__e); }

      static_assert(!is_same<element_type, __undefined>::value,
   "pointer type defines element_type or is like SomePointer<T, Args>");
    };





  template<typename _Tp>
    struct pointer_traits<_Tp*>
    {

      typedef _Tp* pointer;

      typedef _Tp element_type;

      typedef ptrdiff_t difference_type;

      template<typename _Up>
        using rebind = _Up*;






      static pointer
      pointer_to(__make_not_void<element_type>& __r) noexcept
      { return std::addressof(__r); }
    };


  template<typename _Ptr, typename _Tp>
    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;

  template<typename _Tp>
    constexpr _Tp*
    __to_address(_Tp* __ptr) noexcept
    {
      static_assert(!std::is_function<_Tp>::value, "not a function pointer");
      return __ptr;
    }


  template<typename _Ptr>
    constexpr typename std::pointer_traits<_Ptr>::element_type*
    __to_address(const _Ptr& __ptr)
    { return std::__to_address(__ptr.operator->()); }
# 198 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ptr_traits.h" 3

}
# 67 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator.h" 2 3





namespace std
{

# 100 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::pointer pointer;
      typedef typename __traits_type::reference reference;







     
      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




     
      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }





      template<typename _Iter>

        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




      iterator_type
      base() const
      { return current; }
# 167 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator.h" 3
      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      pointer
      operator->() const
      { return &(operator*()); }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }







      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }







      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
    };
# 297 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }
# 387 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    -> decltype(__y.base() - __x.base())
    { return __y.base() - __x.base(); }


  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    __make_reverse_iterator(_Iterator __i)
    { return reverse_iterator<_Iterator>(__i); }
# 422 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator.h" 3
  template<typename _Iterator>
    auto
    __niter_base(reverse_iterator<_Iterator> __it)
    -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
    { return __make_reverse_iterator(__niter_base(__it.base())); }

  template<typename _Iterator>
    struct __is_move_iterator<reverse_iterator<_Iterator> >
      : __is_move_iterator<_Iterator>
    { };

  template<typename _Iterator>
    auto
    __miter_base(reverse_iterator<_Iterator> __it)
    -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
    { return __make_reverse_iterator(__miter_base(__it.base())); }
# 451 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x)
      : container(std::__addressof(__x)) { }
# 486 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator.h" 3
      back_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_back(__value);
 return *this;
      }

      back_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_back(std::move(__value));
 return *this;
      }



      back_insert_iterator&
      operator*()
      { return *this; }


      back_insert_iterator&
      operator++()
      { return *this; }


      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 528 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator.h" 3
  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 543 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x)
      : container(std::__addressof(__x)) { }
# 577 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator.h" 3
      front_insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 container->push_front(__value);
 return *this;
      }

      front_insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 container->push_front(std::move(__value));
 return *this;
      }



      front_insert_iterator&
      operator*()
      { return *this; }


      front_insert_iterator&
      operator++()
      { return *this; }


      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 619 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator.h" 3
  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 638 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(std::__addressof(__x)), iter(__i) {}
# 689 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator.h" 3
      insert_iterator&
      operator=(const typename _Container::value_type& __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }

      insert_iterator&
      operator=(typename _Container::value_type&& __value)
      {
 iter = container->insert(iter, std::move(__value));
 ++iter;
 return *this;
      }



      insert_iterator&
      operator*()
      { return *this; }


      insert_iterator&
      operator++()
      { return *this; }


      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 734 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }




}

namespace __gnu_cxx
{

# 758 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator.h" 3
  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;
      typedef typename __traits_type::reference reference;
      typedef typename __traits_type::pointer pointer;

      constexpr __normal_iterator() noexcept
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) noexcept
      : _M_current(__i) { }


      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i) noexcept
        : _M_current(__i.base()) { }


      reference
      operator*() const noexcept
      { return *_M_current; }

      pointer
      operator->() const noexcept
      { return _M_current; }

      __normal_iterator&
      operator++() noexcept
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int) noexcept
      { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--() noexcept
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int) noexcept
      { return __normal_iterator(_M_current--); }


      reference
      operator[](difference_type __n) const noexcept
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(difference_type __n) noexcept
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(difference_type __n) const noexcept
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(difference_type __n) noexcept
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(difference_type __n) const noexcept
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const noexcept
      { return _M_current; }
    };
# 858 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>


    inline auto
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
    -> decltype(__lhs.base() - __rhs.base())





    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    noexcept
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    noexcept
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }


}

namespace std
{


  template<typename _Iterator, typename _Container>
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
    { return __it.base(); }
# 1003 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator.h" 3
  template<typename _Iterator>
    class move_iterator
    {
    protected:
      _Iterator _M_current;

      typedef iterator_traits<_Iterator> __traits_type;
      typedef typename __traits_type::reference __base_ref;

    public:
      typedef _Iterator iterator_type;
      typedef typename __traits_type::iterator_category iterator_category;
      typedef typename __traits_type::value_type value_type;
      typedef typename __traits_type::difference_type difference_type;

      typedef _Iterator pointer;


      typedef typename conditional<is_reference<__base_ref>::value,
    typename remove_reference<__base_ref>::type&&,
    __base_ref>::type reference;

     
      move_iterator()
      : _M_current() { }

      explicit
      move_iterator(iterator_type __i)
      : _M_current(__i) { }

      template<typename _Iter>

 move_iterator(const move_iterator<_Iter>& __i)
 : _M_current(__i.base()) { }

      iterator_type
      base() const
      { return _M_current; }

      reference
      operator*() const
      { return static_cast<reference>(*_M_current); }

      pointer
      operator->() const
      { return _M_current; }

      move_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      move_iterator
      operator++(int)
      {
 move_iterator __tmp = *this;
 ++_M_current;
 return __tmp;
      }

      move_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      move_iterator
      operator--(int)
      {
 move_iterator __tmp = *this;
 --_M_current;
 return __tmp;
      }

      move_iterator
      operator+(difference_type __n) const
      { return move_iterator(_M_current + __n); }

      move_iterator&
      operator+=(difference_type __n)
      {
 _M_current += __n;
 return *this;
      }

      move_iterator
      operator-(difference_type __n) const
      { return move_iterator(_M_current - __n); }

      move_iterator&
      operator-=(difference_type __n)
      {
 _M_current -= __n;
 return *this;
      }

      reference
      operator[](difference_type __n) const
      { return std::move(_M_current[__n]); }
    };




  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator==(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator!=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __x.base() < __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __x.base() < __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator<=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator>(const move_iterator<_Iterator>& __x,
       const move_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const move_iterator<_IteratorL>& __x,
        const move_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline bool
    operator>=(const move_iterator<_Iterator>& __x,
        const move_iterator<_Iterator>& __y)
    { return !(__x < __y); }


  template<typename _IteratorL, typename _IteratorR>
    inline auto
    operator-(const move_iterator<_IteratorL>& __x,
       const move_iterator<_IteratorR>& __y)
    -> decltype(__x.base() - __y.base())
    { return __x.base() - __y.base(); }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    operator+(typename move_iterator<_Iterator>::difference_type __n,
       const move_iterator<_Iterator>& __x)
    { return __x + __n; }

  template<typename _Iterator>
    inline move_iterator<_Iterator>
    make_move_iterator(_Iterator __i)
    { return move_iterator<_Iterator>(__i); }

  template<typename _Iterator, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond
      <typename iterator_traits<_Iterator>::value_type>::value,
                _Iterator, move_iterator<_Iterator>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Iterator __i)
    { return _ReturnType(__i); }



  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
      const _Tp*, move_iterator<_Tp*>>::type>
    inline _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
    { return _ReturnType(__i); }



  template<typename _Iterator>
    auto
    __niter_base(move_iterator<_Iterator> __it)
    -> decltype(make_move_iterator(__niter_base(__it.base())))
    { return make_move_iterator(__niter_base(__it.base())); }

  template<typename _Iterator>
    struct __is_move_iterator<move_iterator<_Iterator> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
# 1268 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_iterator.h" 3

}
# 68 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 2 3

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\debug\\debug.h" 1 3
# 48 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\debug\\debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;
}
# 70 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 2 3

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\predefined_ops.h" 1 3
# 33 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\predefined_ops.h" 3
namespace __gnu_cxx
{
namespace __ops
{
  struct _Iter_less_iter
  {
    template<typename _Iterator1, typename _Iterator2>
     
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 < *__it2; }
  };

 
  inline _Iter_less_iter
  __iter_less_iter()
  { return _Iter_less_iter(); }

  struct _Iter_less_val
  {

    constexpr _Iter_less_val() = default;




    explicit
    _Iter_less_val(_Iter_less_iter) { }

    template<typename _Iterator, typename _Value>
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it < __val; }
  };

  inline _Iter_less_val
  __iter_less_val()
  { return _Iter_less_val(); }

  inline _Iter_less_val
  __iter_comp_val(_Iter_less_iter)
  { return _Iter_less_val(); }

  struct _Val_less_iter
  {

    constexpr _Val_less_iter() = default;




    explicit
    _Val_less_iter(_Iter_less_iter) { }

    template<typename _Value, typename _Iterator>
      bool
      operator()(_Value& __val, _Iterator __it) const
      { return __val < *__it; }
  };

  inline _Val_less_iter
  __val_less_iter()
  { return _Val_less_iter(); }

  inline _Val_less_iter
  __val_comp_iter(_Iter_less_iter)
  { return _Val_less_iter(); }

  struct _Iter_equal_to_iter
  {
    template<typename _Iterator1, typename _Iterator2>
      bool
      operator()(_Iterator1 __it1, _Iterator2 __it2) const
      { return *__it1 == *__it2; }
  };

  inline _Iter_equal_to_iter
  __iter_equal_to_iter()
  { return _Iter_equal_to_iter(); }

  struct _Iter_equal_to_val
  {
    template<typename _Iterator, typename _Value>
      bool
      operator()(_Iterator __it, _Value& __val) const
      { return *__it == __val; }
  };

  inline _Iter_equal_to_val
  __iter_equal_to_val()
  { return _Iter_equal_to_val(); }

  inline _Iter_equal_to_val
  __iter_comp_val(_Iter_equal_to_iter)
  { return _Iter_equal_to_val(); }

  template<typename _Compare>
    struct _Iter_comp_iter
    {
      _Compare _M_comp;

      explicit
      _Iter_comp_iter(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

      template<typename _Iterator1, typename _Iterator2>
       
        bool
        operator()(_Iterator1 __it1, _Iterator2 __it2)
        { return bool(_M_comp(*__it1, *__it2)); }
    };

  template<typename _Compare>
   
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
    { return _Iter_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    struct _Iter_comp_val
    {
      _Compare _M_comp;

      explicit
      _Iter_comp_val(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

      explicit
      _Iter_comp_val(const _Iter_comp_iter<_Compare>& __comp)
 : _M_comp(__comp._M_comp)
      { }


      explicit
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 : _M_comp(std::move(__comp._M_comp))
      { }


      template<typename _Iterator, typename _Value>
 bool
 operator()(_Iterator __it, _Value& __val)
 { return bool(_M_comp(*__it, __val)); }
    };

  template<typename _Compare>
   inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Compare __comp)
    { return _Iter_comp_val<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    inline _Iter_comp_val<_Compare>
    __iter_comp_val(_Iter_comp_iter<_Compare> __comp)
    { return _Iter_comp_val<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    struct _Val_comp_iter
    {
      _Compare _M_comp;

      explicit
      _Val_comp_iter(_Compare __comp)
 : _M_comp(std::move(__comp))
      { }

      explicit
      _Val_comp_iter(const _Iter_comp_iter<_Compare>& __comp)
 : _M_comp(__comp._M_comp)
      { }


      explicit
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 : _M_comp(std::move(__comp._M_comp))
      { }


      template<typename _Value, typename _Iterator>
 bool
 operator()(_Value& __val, _Iterator __it)
 { return bool(_M_comp(__val, *__it)); }
    };

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Compare __comp)
    { return _Val_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
    { return _Val_comp_iter<_Compare>(std::move(__comp)); }

  template<typename _Value>
    struct _Iter_equals_val
    {
      _Value& _M_value;

      explicit
      _Iter_equals_val(_Value& __value)
 : _M_value(__value)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return *__it == _M_value; }
    };

  template<typename _Value>
    inline _Iter_equals_val<_Value>
    __iter_equals_val(_Value& __val)
    { return _Iter_equals_val<_Value>(__val); }

  template<typename _Iterator1>
    struct _Iter_equals_iter
    {
      _Iterator1 _M_it1;

      explicit
      _Iter_equals_iter(_Iterator1 __it1)
 : _M_it1(__it1)
      { }

      template<typename _Iterator2>
 bool
 operator()(_Iterator2 __it2)
 { return *__it2 == *_M_it1; }
    };

  template<typename _Iterator>
    inline _Iter_equals_iter<_Iterator>
    __iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)
    { return _Iter_equals_iter<_Iterator>(__it); }

  template<typename _Predicate>
    struct _Iter_pred
    {
      _Predicate _M_pred;

      explicit
      _Iter_pred(_Predicate __pred)
 : _M_pred(std::move(__pred))
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
    inline _Iter_pred<_Predicate>
    __pred_iter(_Predicate __pred)
    { return _Iter_pred<_Predicate>(std::move(__pred)); }

  template<typename _Compare, typename _Value>
    struct _Iter_comp_to_val
    {
      _Compare _M_comp;
      _Value& _M_value;

      _Iter_comp_to_val(_Compare __comp, _Value& __value)
 : _M_comp(std::move(__comp)), _M_value(__value)
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return bool(_M_comp(*__it, _M_value)); }
    };

  template<typename _Compare, typename _Value>
    _Iter_comp_to_val<_Compare, _Value>
    __iter_comp_val(_Compare __comp, _Value &__val)
    {
      return _Iter_comp_to_val<_Compare, _Value>(std::move(__comp), __val);
    }

  template<typename _Compare, typename _Iterator1>
    struct _Iter_comp_to_iter
    {
      _Compare _M_comp;
      _Iterator1 _M_it1;

      _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)
 : _M_comp(std::move(__comp)), _M_it1(__it1)
      { }

      template<typename _Iterator2>
 bool
 operator()(_Iterator2 __it2)
 { return bool(_M_comp(*__it2, *_M_it1)); }
    };

  template<typename _Compare, typename _Iterator>
    inline _Iter_comp_to_iter<_Compare, _Iterator>
    __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)
    {
      return _Iter_comp_to_iter<_Compare, _Iterator>(
   std::move(__comp._M_comp), __it);
    }

  template<typename _Predicate>
    struct _Iter_negate
    {
      _Predicate _M_pred;

      explicit
      _Iter_negate(_Predicate __pred)
 : _M_pred(std::move(__pred))
      { }

      template<typename _Iterator>
 bool
 operator()(_Iterator __it)
 { return !bool(_M_pred(*__it)); }
    };

  template<typename _Predicate>
    inline _Iter_negate<_Predicate>
    __negate(_Iter_pred<_Predicate> __pred)
    { return _Iter_negate<_Predicate>(std::move(__pred._M_pred)); }

}
}
# 72 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 2 3

namespace std
{

# 118 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {

     

     
# 148 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 3
      swap(*__a, *__b);

    }
# 164 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {

     

     

      ;

      for (; __first1 != __last1; ++__first1, (void)++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 192 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 3
  template<typename _Tp>
   
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {

     

      if (__b < __a)
 return __b;
      return __a;
    }
# 216 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 3
  template<typename _Tp>
   
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {

     

      if (__a < __b)
 return __b;
      return __a;
    }
# 240 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
   
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 262 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
   
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }



  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
    { return __it; }







  template<bool, bool, typename>
    struct __copy_move
    {
      template<typename _II, typename _OI>
 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   for (; __first != __last; ++__result, (void)++__first)
     *__result = *__first;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move<true, false, _Category>
    {
      template<typename _II, typename _OI>
 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   for (; __first != __last; ++__result, (void)++__first)
     *__result = std::move(*__first);
   return __result;
 }
    };


  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<>
    struct __copy_move<true, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
 static _OI
 __copy_m(_II __first, _II __last, _OI __result)
 {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = std::move(*__first);
       ++__first;
       ++__result;
     }
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
 static _Tp*
 __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 {

   using __assignable = conditional<_IsMove,
        is_move_assignable<_Tp>,
        is_copy_assignable<_Tp>>;

   static_assert( __assignable::type::value, "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   return __result + _Num;
 }
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueTypeI)
        && __is_pointer<_II>::__value
        && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
         _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
          std::__niter_base(__last),
          std::__niter_base(__result)));
    }
# 444 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {

     
     

      ;

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 477 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    move(_II __first, _II __last, _OI __result)
    {

     
     

      ;

      return std::__copy_move_a2<true>(std::__miter_base(__first),
           std::__miter_base(__last), __result);
    }






  template<bool, bool, typename>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>
 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };


  template<typename _Category>
    struct __copy_move_backward<true, false, _Category>
    {
      template<typename _BI1, typename _BI2>
 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   while (__first != __last)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };


  template<>
    struct __copy_move_backward<true, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
 static _BI2
 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = std::move(*--__last);
   return __result;
 }
    };


  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
 static _Tp*
 __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 {

   using __assignable = conditional<_IsMove,
        is_move_assignable<_Tp>,
        is_copy_assignable<_Tp>>;

   static_assert( __assignable::type::value, "type is not assignable" );

   const ptrdiff_t _Num = __last - __first;
   if (_Num)
     __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_trivial(_ValueType1)
        && __is_pointer<_BI1>::__value
        && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_move_backward<_IsMove, __simple,
           _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
    (std::__niter_base(__first), std::__niter_base(__last),
     std::__niter_base(__result)));
    }
# 620 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {

     
     
     


      ;

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
       (std::__miter_base(__first), std::__miter_base(__last),
        __result));
    }
# 656 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {

     
     
     


      ;

      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
      std::__miter_base(__last),
      __result);
    }






  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
      if (const size_t __len = __last - __first)
 __builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
    }
# 722 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {

     

      ;

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
      __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, (void) ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (__decltype(__n + 0) __niter = __n;
    __niter > 0; --__niter, (void) ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
    {
      std::__fill_a(__first, __first + __n, __c);
      return __first + __n;
    }
# 782 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {

     

      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>
 static bool
 equal(_II1 __first1, _II1 __last1, _II2 __first2)
 {
   for (; __first1 != __last1; ++__first1, (void) ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>
 static bool
 equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
 {
   if (const size_t __len = (__last1 - __first1))
     return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
   return true;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple = ((__is_integer<_ValueType1>::__value
         || __is_pointer<_ValueType1>::__value)
        && __is_pointer<_II1>::__value
        && __is_pointer<_II2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }

  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>
 static _II1
 __newlast1(_II1, _II1 __last1, _II2, _II2)
 { return __last1; }

      template<typename _II>
 static bool
 __cnd2(_II __first, _II __last)
 { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>
 static _RAI1
 __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
 {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
 static bool
 __cnd2(_RAI, _RAI)
 { return true; }
    };

  template<typename _II1, typename _II2, typename _Compare>
    bool
    __lexicographical_compare_impl(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2,
       _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, (void)++__first2)
 {
   if (__comp(__first1, __first2))
     return true;
   if (__comp(__first2, __first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>
 static bool __lc(_II1, _II1, _II2, _II2);
    };

  template<bool _BoolType>
    template<typename _II1, typename _II2>
      bool
      __lexicographical_compare<_BoolType>::
      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
      {
 return std::__lexicographical_compare_impl(__first1, __last1,
         __first2, __last2,
     __gnu_cxx::__ops::__iter_less_iter());
      }

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>
 static bool
 __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   if (const size_t __len = std::min(__len1, __len2))
     if (int __result = __builtin_memcmp(__first1, __first2, __len))
       return __result < 0;
   return __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value);

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 {
   _DistanceType __half = __len >> 1;
   _ForwardIterator __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 982 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {

     
     

      ;

      return std::__lower_bound(__first, __last, __val,
    __gnu_cxx::__ops::__iter_less_val());
    }



  inline constexpr int
  __lg(int __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr unsigned
  __lg(unsigned __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline constexpr long
  __lg(long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr unsigned long
  __lg(unsigned long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline constexpr long long
  __lg(long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }

  inline constexpr unsigned long long
  __lg(unsigned long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }


# 1037 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {

     
     
     


      ;

      return std::__equal_aux(std::__niter_base(__first1),
         std::__niter_base(__last1),
         std::__niter_base(__first2));
    }
# 1069 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      for (; __first1 != __last1; ++__first1, (void)++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }



  template<typename _II1, typename _II2>
    inline bool
    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
    {
      using _RATag = random_access_iterator_tag;
      using _Cat1 = typename iterator_traits<_II1>::iterator_category;
      using _Cat2 = typename iterator_traits<_II2>::iterator_category;
      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
      if (_RAIters())
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 != __d2)
     return false;
   return std::equal(__first1, __last1, __first2);
 }

      for (; __first1 != __last1 && __first2 != __last2;
   ++__first1, (void)++__first2)
 if (!(*__first1 == *__first2))
   return false;
      return __first1 == __last1 && __first2 == __last2;
    }


  template<typename _II1, typename _II2, typename _BinaryPredicate>
    inline bool
    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2,
      _BinaryPredicate __binary_pred)
    {
      using _RATag = random_access_iterator_tag;
      using _Cat1 = typename iterator_traits<_II1>::iterator_category;
      using _Cat2 = typename iterator_traits<_II2>::iterator_category;
      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
      if (_RAIters())
 {
   auto __d1 = std::distance(__first1, __last1);
   auto __d2 = std::distance(__first2, __last2);
   if (__d1 != __d2)
     return false;
   return std::equal(__first1, __last1, __first2,
           __binary_pred);
 }

      for (; __first1 != __last1 && __first2 != __last2;
   ++__first1, (void)++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return __first1 == __last1 && __first2 == __last2;
    }
# 1219 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {





     
     
     
     
      ;
      ;

      return std::__lexicographical_compare_aux(std::__niter_base(__first1),
      std::__niter_base(__last1),
      std::__niter_base(__first2),
      std::__niter_base(__last2));
    }
# 1255 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {

     
     
      ;
      ;

      return std::__lexicographical_compare_impl
 (__first1, __last1, __first2, __last2,
  __gnu_cxx::__ops::__iter_comp_iter(__comp));
    }

  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {
      while (__first1 != __last1 && __binary_pred(__first1, __first2))
 {
   ++__first1;
   ++__first2;
 }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1298 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {

     
     
     


      ;

      return std::__mismatch(__first1, __last1, __first2,
        __gnu_cxx::__ops::__iter_equal_to_iter());
    }
# 1331 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    inline pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      return std::__mismatch(__first1, __last1, __first2,
 __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
    }
# 1431 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_algobase.h" 3


}
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\char_traits.h" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\postypes.h" 1 3
# 38 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\postypes.h" 3
       
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\postypes.h" 3

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cwchar" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cwchar" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cwchar" 3




# 1 "c:\\mingw\\include\\wchar.h" 1 3
# 35 "c:\\mingw\\include\\wchar.h" 3
       
# 36 "c:\\mingw\\include\\wchar.h" 3
# 83 "c:\\mingw\\include\\wchar.h" 3
# 1 "c:\\mingw\\include\\stdio.h" 1 3
# 38 "c:\\mingw\\include\\stdio.h" 3
       
# 39 "c:\\mingw\\include\\stdio.h" 3
# 68 "c:\\mingw\\include\\stdio.h" 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 1 3 4
# 69 "c:\\mingw\\include\\stdio.h" 2 3
# 95 "c:\\mingw\\include\\stdio.h" 3
# 1 "c:\\mingw\\include\\sys/types.h" 1 3
# 34 "c:\\mingw\\include\\sys/types.h" 3
       
# 35 "c:\\mingw\\include\\sys/types.h" 3
# 91 "c:\\mingw\\include\\sys/types.h" 3
  typedef long long __off64_t;
# 96 "c:\\mingw\\include\\stdio.h" 2 3
# 210 "c:\\mingw\\include\\stdio.h" 3
typedef struct _iobuf
{
  char *_ptr;
  int _cnt;
  char *_base;
  int _flag;
  int _file;
  int _charbuf;
  int _bufsiz;
  char *_tmpfname;
} FILE;
# 252 "c:\\mingw\\include\\stdio.h" 3
extern "C" {
# 1006 "c:\\mingw\\include\\stdio.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int fwprintf (FILE *, const wchar_t *, ...);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int wprintf (const wchar_t *, ...);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int vfwprintf (FILE *, const wchar_t *, __builtin_va_list);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int vwprintf (const wchar_t *, __builtin_va_list);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int _snwprintf (wchar_t *, size_t, const wchar_t *, ...);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int _vscwprintf (const wchar_t *, __builtin_va_list);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int _vsnwprintf (wchar_t *, size_t, const wchar_t *, __builtin_va_list);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int fwscanf (FILE *, const wchar_t *, ...);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int wscanf (const wchar_t *, ...);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int swscanf (const wchar_t *, const wchar_t *, ...);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wint_t fgetwc (FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wint_t fputwc (wchar_t, FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wint_t ungetwc (wchar_t, FILE *);
# 1028 "c:\\mingw\\include\\stdio.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wchar_t * fgetws (wchar_t *, int, FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int fputws (const wchar_t *, FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wint_t getwc (FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wint_t getwchar (void);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wint_t putwc (wint_t, FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wint_t putwchar (wint_t);
# 1053 "c:\\mingw\\include\\stdio.h" 3

__attribute__((__cdecl__)) __attribute__((__nothrow__)) int snwprintf (wchar_t *, size_t, const wchar_t *, ...);
__attribute__((__cdecl__)) __attribute__((__nothrow__)) int vsnwprintf (wchar_t *, size_t, const wchar_t *, __builtin_va_list);
# 1064 "c:\\mingw\\include\\stdio.h" 3
__attribute__((__cdecl__)) __attribute__((__nothrow__)) int vwscanf (const wchar_t *__restrict__, __builtin_va_list);
__attribute__((__cdecl__)) __attribute__((__nothrow__))
int vfwscanf (FILE *__restrict__, const wchar_t *__restrict__, __builtin_va_list);
__attribute__((__cdecl__)) __attribute__((__nothrow__))
int vswscanf (const wchar_t *__restrict__, const wchar_t * __restrict__, __builtin_va_list);
# 1096 "c:\\mingw\\include\\stdio.h" 3
}
# 84 "c:\\mingw\\include\\wchar.h" 2 3
# 147 "c:\\mingw\\include\\wchar.h" 3
# 1 "c:\\mingw\\include\\stdlib.h" 1 3
# 148 "c:\\mingw\\include\\wchar.h" 2 3
# 307 "c:\\mingw\\include\\wchar.h" 3
# 1 "c:\\mingw\\include\\time.h" 1 3
# 33 "c:\\mingw\\include\\time.h" 3
       
# 34 "c:\\mingw\\include\\time.h" 3
# 45 "c:\\mingw\\include\\time.h" 3
# 1 "c:\\mingw\\include\\sys\\types.h" 1 3
# 34 "c:\\mingw\\include\\sys\\types.h" 3
       
# 35 "c:\\mingw\\include\\sys\\types.h" 3
# 139 "c:\\mingw\\include\\sys\\types.h" 3
  typedef long __time32_t;
  typedef long long __time64_t;
# 149 "c:\\mingw\\include\\sys\\types.h" 3
   typedef __time32_t time_t;
# 46 "c:\\mingw\\include\\time.h" 2 3
# 80 "c:\\mingw\\include\\time.h" 3
struct tm;
# 482 "c:\\mingw\\include\\time.h" 3
extern "C" {
# 537 "c:\\mingw\\include\\time.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__))
size_t wcsftime (wchar_t *, size_t, const wchar_t *, const struct tm *);

}
# 308 "c:\\mingw\\include\\wchar.h" 2 3
# 387 "c:\\mingw\\include\\wchar.h" 3
extern "C" {
# 409 "c:\\mingw\\include\\wchar.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wchar_t *wcscat (wchar_t *, const wchar_t *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wchar_t *wcschr (const wchar_t *, wchar_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int wcscmp (const wchar_t *, const wchar_t *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int wcscoll (const wchar_t *, const wchar_t *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wchar_t *wcscpy (wchar_t *, const wchar_t *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) size_t wcscspn (const wchar_t *, const wchar_t *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) size_t wcslen (const wchar_t *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wchar_t *wcsncat (wchar_t *, const wchar_t *, size_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int wcsncmp (const wchar_t *, const wchar_t *, size_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wchar_t *wcsncpy (wchar_t *, const wchar_t *, size_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wchar_t *wcspbrk (const wchar_t *, const wchar_t *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wchar_t *wcsrchr (const wchar_t *, wchar_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) size_t wcsspn (const wchar_t *, const wchar_t *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wchar_t *wcsstr (const wchar_t *, const wchar_t *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wchar_t *wcstok (wchar_t *, const wchar_t *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) size_t wcsxfrm (wchar_t *, const wchar_t *, size_t);
# 529 "c:\\mingw\\include\\wchar.h" 3
typedef int mbstate_t;





__attribute__((__cdecl__)) __attribute__((__nothrow__)) wint_t btowc (int);
__attribute__((__cdecl__)) __attribute__((__nothrow__)) int wctob (wint_t);

__attribute__((__cdecl__)) __attribute__((__nothrow__))
size_t mbrlen (const char *__restrict__, size_t, mbstate_t *__restrict__);

__attribute__((__cdecl__)) __attribute__((__nothrow__)) size_t mbrtowc
(wchar_t *__restrict__, const char *__restrict__, size_t, mbstate_t *__restrict__);

__attribute__((__cdecl__)) __attribute__((__nothrow__)) size_t mbsrtowcs
(wchar_t *__restrict__, const char **__restrict__, size_t, mbstate_t *__restrict__);

__attribute__((__cdecl__)) __attribute__((__nothrow__))
size_t wcrtomb (char * __restrict__, wchar_t, mbstate_t *__restrict__);

__attribute__((__cdecl__)) __attribute__((__nothrow__)) size_t wcsrtombs
(char *__restrict__, const wchar_t **__restrict__, size_t, mbstate_t *__restrict__);







__attribute__((__cdecl__)) __attribute__((__nothrow__)) int fwide (FILE *, int);
__attribute__((__cdecl__)) __attribute__((__nothrow__)) int mbsinit (const mbstate_t *);
# 572 "c:\\mingw\\include\\wchar.h" 3
__attribute__((__cdecl__)) __attribute__((__nothrow__)) wchar_t *wmemset (wchar_t *, wchar_t, size_t);
__attribute__((__cdecl__)) __attribute__((__nothrow__)) wchar_t *wmemchr (const wchar_t *, wchar_t, size_t);





int wmemcmp (const wchar_t *, const wchar_t *, size_t);

__attribute__((__cdecl__)) __attribute__((__nothrow__))
wchar_t *wmemcpy (wchar_t *__restrict__, const wchar_t *__restrict__, size_t);

__attribute__((__cdecl__)) __attribute__((__nothrow__)) wchar_t *wmemmove (wchar_t *, const wchar_t *, size_t);

__attribute__((__cdecl__)) __attribute__((__nothrow__))
long long wcstoll (const wchar_t *__restrict__, wchar_t **__restrict__, int);

__attribute__((__cdecl__)) __attribute__((__nothrow__)) unsigned long long wcstoull
(const wchar_t *__restrict__, wchar_t **__restrict__, int);


}
# 45 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cwchar" 2 3
# 62 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cwchar" 3
namespace std
{
  using ::mbstate_t;
}
# 135 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cwchar" 3
namespace std
{


  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;



  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;





  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;


  inline wchar_t*
  wcschr(wchar_t* __p, wchar_t __c)
  { return wcschr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcspbrk(wchar_t* __s1, const wchar_t* __s2)
  { return wcspbrk(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wcsrchr(wchar_t* __p, wchar_t __c)
  { return wcsrchr(const_cast<const wchar_t*>(__p), __c); }

  inline wchar_t*
  wcsstr(wchar_t* __s1, const wchar_t* __s2)
  { return wcsstr(const_cast<const wchar_t*>(__s1), __s2); }

  inline wchar_t*
  wmemchr(wchar_t* __p, wchar_t __c, size_t __n)
  { return wmemchr(const_cast<const wchar_t*>(__p), __c, __n); }



}







namespace __gnu_cxx
{





  using ::wcstold;
# 257 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cwchar" 3
  using ::wcstoll;
  using ::wcstoull;

}

namespace std
{
  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;
}
# 277 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cwchar" 3
namespace std
{

  using std::wcstof;


  using std::vfwscanf;


  using std::vswscanf;


  using std::vwscanf;



  using std::wcstold;
  using std::wcstoll;
  using std::wcstoull;

}
# 41 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\postypes.h" 2 3
# 68 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\postypes.h" 3
namespace std
{

# 90 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\postypes.h" 3
  typedef long long streamoff;







  typedef ptrdiff_t streamsize;
# 111 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 133 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;



  typedef fpos<mbstate_t> u16streampos;

  typedef fpos<mbstate_t> u32streampos;



}
# 41 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\char_traits.h" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cwchar" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cwchar" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cwchar" 3
# 42 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\char_traits.h" 2 3





namespace __gnu_cxx
{

# 61 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 86 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static std::size_t
      length(const char_type* __s);

      static const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static constexpr char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static constexpr int_type
      eof()
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {

      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {

      std::fill_n(__s, __n, __a);
      return __s;
    }


}

namespace std
{

# 268 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\char_traits.h" 3
  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      {

 return (static_cast<unsigned char>(__c1)
  < static_cast<unsigned char>(__c2));
      }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {






 if (__n == 0)
   return 0;
 return __builtin_memcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      {




 return __builtin_strlen(__s);
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {






 if (__n == 0)
   return 0;
 return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 if (__n == 0)
   return __s;
 return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return static_cast<char_type>(__c); }



      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {






 if (__n == 0)
   return 0;
 else
   return wmemcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      {





   return wcslen(__s);
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {






 if (__n == 0)
   return 0;
 else
   return wmemchr(__s, __a, __n);
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return wmemmove(__s1, __s2, __n);
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return wmemcpy(__s1, __s2, __n);
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 if (__n == 0)
   return __s;
 return wmemset(__s, __a, __n);
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>((wchar_t)(0xffff)); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };



}






namespace std
{


  template<>
    struct char_traits<char16_t>
    {
      typedef char16_t char_type;
      typedef uint_least16_t int_type;
      typedef streamoff off_type;
      typedef u16streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return __c == eof() ? int_type(0xfffd) : int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };

  template<>
    struct char_traits<char32_t>
    {
      typedef char32_t char_type;
      typedef uint_least32_t int_type;
      typedef streamoff off_type;
      typedef u32streampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) noexcept
      { __c1 = __c2; }

      static constexpr bool
      eq(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr bool
      lt(const char_type& __c1, const char_type& __c2) noexcept
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (lt(__s1[__i], __s2[__i]))
     return -1;
   else if (lt(__s2[__i], __s1[__i]))
     return 1;
 return 0;
      }

      static size_t
      length(const char_type* __s)
      {
 size_t __i = 0;
 while (!eq(__s[__i], char_type()))
   ++__i;
 return __i;
      }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   if (eq(__s[__i], __a))
     return __s + __i;
 return 0;
      }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      {
 if (__n == 0)
   return __s1;
 return (static_cast<char_type*>
  (__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      {
 for (size_t __i = 0; __i < __n; ++__i)
   assign(__s[__i], __a);
 return __s;
      }

      static constexpr char_type
      to_char_type(const int_type& __c) noexcept
      { return char_type(__c); }

      static constexpr int_type
      to_int_type(const char_type& __c) noexcept
      { return int_type(__c); }

      static constexpr bool
      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept
      { return __c1 == __c2; }

      static constexpr int_type
      eof() noexcept
      { return static_cast<int_type>(-1); }

      static constexpr int_type
      not_eof(const int_type& __c) noexcept
      { return eq_int_type(__c, eof()) ? 0 : __c; }
    };


}
# 41 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\string" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\allocator.h" 1 3
# 46 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\allocator.h" 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\c++allocator.h" 1 3
# 33 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\c++allocator.h" 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\new_allocator.h" 1 3
# 33 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\new_allocator.h" 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\new" 1 3
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\new" 3
       
# 38 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\new" 3


# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\exception" 1 3
# 33 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\exception" 3
       
# 34 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\exception" 3

#pragma GCC visibility push(default)


# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\exception.h" 1 3
# 34 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\exception.h" 3
       
# 35 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\exception.h" 3

#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 60 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\exception.h" 3
  class exception
  {
  public:
    exception() noexcept { }
    virtual ~exception() noexcept;



    virtual const char*
    what() const noexcept;
  };

}

}

#pragma GCC visibility pop
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\exception" 2 3

extern "C++" {

namespace std
{


  class bad_exception : public exception
  {
  public:
    bad_exception() noexcept { }



    virtual ~bad_exception() noexcept;


    virtual const char*
    what() const noexcept;
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) noexcept;



  terminate_handler get_terminate() noexcept;




  void terminate() noexcept __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) noexcept;



  unexpected_handler get_unexpected() noexcept;




  void unexpected() __attribute__ ((__noreturn__));
# 101 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\exception" 3
 
  bool uncaught_exception() noexcept __attribute__ ((__pure__));
# 111 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\exception" 3
}

namespace __gnu_cxx
{

# 133 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\exception" 3
  void __verbose_terminate_handler();


}

}

#pragma GCC visibility pop


# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\exception_ptr.h" 1 3
# 34 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\exception_ptr.h" 3
#pragma GCC visibility push(default)



# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\cxxabi_init_exception.h" 1 3
# 34 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\cxxabi_init_exception.h" 3
       
# 35 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\cxxabi_init_exception.h" 3

#pragma GCC visibility push(default)

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 1 3 4
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\cxxabi_init_exception.h" 2 3
# 50 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\cxxabi_init_exception.h" 3
namespace std
{
  class type_info;
}

namespace __cxxabiv1
{
  struct __cxa_refcounted_exception;

  extern "C"
    {

      void*
      __cxa_allocate_exception(size_t) noexcept;

      void
      __cxa_free_exception(void*) noexcept;


      __cxa_refcounted_exception*
      __cxa_init_primary_exception(void *object, std::type_info *tinfo,
                void (__attribute__((__thiscall__)) *dest) (void *)) noexcept;

    }
}



#pragma GCC visibility pop
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\exception_ptr.h" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\typeinfo" 1 3
# 32 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\typeinfo" 3
       
# 33 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\typeinfo" 3



# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\hash_bytes.h" 1 3
# 33 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\hash_bytes.h" 3
       
# 34 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\hash_bytes.h" 3



namespace std
{







  size_t
  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);





  size_t
  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);


}
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\typeinfo" 2 3


#pragma GCC visibility push(default)

extern "C++" {

namespace __cxxabiv1
{
  class __class_type_info;
}
# 80 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\typeinfo" 3
namespace std
{






  class type_info
  {
  public:




    virtual ~type_info();



    const char* name() const noexcept
    { return __name[0] == '*' ? __name + 1 : __name; }





    bool before(const type_info& __arg) const noexcept;
    bool operator==(const type_info& __arg) const noexcept;
# 136 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\typeinfo" 3
    bool operator!=(const type_info& __arg) const noexcept
    { return !operator==(__arg); }


    size_t hash_code() const noexcept
    {

      return _Hash_bytes(name(), __builtin_strlen(name()),
    static_cast<size_t>(0xc70f6907UL));



    }



    virtual bool __is_pointer_p() const;


    virtual bool __is_function_p() const;







    virtual bool __do_catch(const type_info *__thr_type, void **__thr_obj,
       unsigned __outer) const;


    virtual bool __do_upcast(const __cxxabiv1::__class_type_info *__target,
        void **__obj_ptr) const;

  protected:
    const char *__name;

    explicit type_info(const char *__n): __name(__n) { }

  private:

    type_info& operator=(const type_info&);
    type_info(const type_info&);
  };







  class bad_cast : public exception
  {
  public:
    bad_cast() noexcept { }



    virtual ~bad_cast() noexcept;


    virtual const char* what() const noexcept;
  };





  class bad_typeid : public exception
  {
  public:
    bad_typeid () noexcept { }



    virtual ~bad_typeid() noexcept;


    virtual const char* what() const noexcept;
  };
}

}

#pragma GCC visibility pop
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\exception_ptr.h" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\new" 1 3
# 41 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\exception_ptr.h" 2 3

extern "C++" {

namespace std
{
  class type_info;





  namespace __exception_ptr
  {
    class exception_ptr;
  }

  using __exception_ptr::exception_ptr;





  exception_ptr current_exception() noexcept;

  template<typename _Ex>
  exception_ptr make_exception_ptr(_Ex) noexcept;


  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));

  namespace __exception_ptr
  {
    using std::rethrow_exception;





    class exception_ptr
    {
      void* _M_exception_object;

      explicit exception_ptr(void* __e) noexcept;

      void _M_addref() noexcept;
      void _M_release() noexcept;

      void *_M_get() const noexcept __attribute__ ((__pure__));

      friend exception_ptr std::current_exception() noexcept;
      friend void std::rethrow_exception(exception_ptr);
      template<typename _Ex>
      friend exception_ptr std::make_exception_ptr(_Ex) noexcept;

    public:
      exception_ptr() noexcept;

      exception_ptr(const exception_ptr&) noexcept;


      exception_ptr(nullptr_t) noexcept
      : _M_exception_object(0)
      { }

      exception_ptr(exception_ptr&& __o) noexcept
      : _M_exception_object(__o._M_exception_object)
      { __o._M_exception_object = 0; }
# 117 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\exception_ptr.h" 3
      exception_ptr&
      operator=(const exception_ptr&) noexcept;


      exception_ptr&
      operator=(exception_ptr&& __o) noexcept
      {
        exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
        return *this;
      }


      ~exception_ptr() noexcept;

      void
      swap(exception_ptr&) noexcept;
# 144 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\exception_ptr.h" 3
      explicit operator bool() const
      { return _M_exception_object; }


      friend bool
      operator==(const exception_ptr&, const exception_ptr&)
 noexcept __attribute__ ((__pure__));

      const class std::type_info*
      __cxa_exception_type() const noexcept
 __attribute__ ((__pure__));
    };

    bool
    operator==(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    bool
    operator!=(const exception_ptr&, const exception_ptr&)
      noexcept __attribute__ ((__pure__));

    inline void
    swap(exception_ptr& __lhs, exception_ptr& __rhs)
    { __lhs.swap(__rhs); }

    template<typename _Ex>
      inline void
      __dest_thunk(void* __x)
      { static_cast<_Ex*>(__x)->~_Ex(); }

  }


  template<typename _Ex>
    exception_ptr
    make_exception_ptr(_Ex __ex) noexcept
    {
# 197 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\exception_ptr.h" 3
      try
 {
          throw __ex;
 }
      catch(...)
 {
   return current_exception();
 }



    }


}

}

#pragma GCC visibility pop
# 144 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\exception" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\nested_exception.h" 1 3
# 33 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\nested_exception.h" 3
#pragma GCC visibility push(default)
# 42 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\nested_exception.h" 3
extern "C++" {

namespace std
{






  class nested_exception
  {
    exception_ptr _M_ptr;

  public:
    nested_exception() noexcept : _M_ptr(current_exception()) { }

    nested_exception(const nested_exception&) noexcept = default;

    nested_exception& operator=(const nested_exception&) noexcept = default;

    virtual ~nested_exception() noexcept;

    [[noreturn]]
    void
    rethrow_nested() const
    {
      if (_M_ptr)
 rethrow_exception(_M_ptr);
      std::terminate();
    }

    exception_ptr
    nested_ptr() const noexcept
    { return _M_ptr; }
  };

  template<typename _Except>
    struct _Nested_exception : public _Except, public nested_exception
    {
      explicit _Nested_exception(const _Except& __ex)
      : _Except(__ex)
      { }

      explicit _Nested_exception(_Except&& __ex)
      : _Except(static_cast<_Except&&>(__ex))
      { }
    };




  template<typename _Tp>
    [[noreturn]]
    inline void
    __throw_with_nested_impl(_Tp&& __t, true_type)
    {
      using _Up = typename remove_reference<_Tp>::type;
      throw _Nested_exception<_Up>{std::forward<_Tp>(__t)};
    }

  template<typename _Tp>
    [[noreturn]]
    inline void
    __throw_with_nested_impl(_Tp&& __t, false_type)
    { throw std::forward<_Tp>(__t); }



  template<typename _Tp>
    [[noreturn]]
    inline void
    throw_with_nested(_Tp&& __t)
    {
      using _Up = typename decay<_Tp>::type;
      using _CopyConstructible
 = __and_<is_copy_constructible<_Up>, is_move_constructible<_Up>>;
      static_assert(_CopyConstructible::value,
   "throw_with_nested argument must be CopyConstructible");
      using __nest = __and_<is_class<_Up>, __bool_constant<!__is_final(_Up)>,
       __not_<is_base_of<nested_exception, _Up>>>;
      std::__throw_with_nested_impl(std::forward<_Tp>(__t), __nest{});
    }


  template<typename _Tp>
    using __rethrow_if_nested_cond = typename enable_if<
      __and_<is_polymorphic<_Tp>,
      __or_<__not_<is_base_of<nested_exception, _Tp>>,
     is_convertible<_Tp*, nested_exception*>>>::value
    >::type;


  template<typename _Ex>
    inline __rethrow_if_nested_cond<_Ex>
    __rethrow_if_nested_impl(const _Ex* __ptr)
    {
      if (auto __ne_ptr = dynamic_cast<const nested_exception*>(__ptr))
 __ne_ptr->rethrow_nested();
    }


  inline void
  __rethrow_if_nested_impl(const void*)
  { }


  template<typename _Ex>
    inline void
    rethrow_if_nested(const _Ex& __ex)
    { std::__rethrow_if_nested_impl(std::__addressof(__ex)); }


}

}



#pragma GCC visibility pop
# 145 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\exception" 2 3
# 41 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };


  class bad_array_new_length : public bad_alloc
  {
  public:
    bad_array_new_length() throw() { }



    virtual ~bad_array_new_length() throw();


    virtual const char* what() const throw();
  };






  struct nothrow_t
  {

    explicit nothrow_t() = default;

  };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();



  new_handler get_new_handler() noexcept;

}
# 120 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\new" 3
void* operator new(std::size_t)
  __attribute__((__externally_visible__));
void* operator new[](std::size_t)
  __attribute__((__externally_visible__));
void operator delete(void*) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*) noexcept
  __attribute__((__externally_visible__));






void* operator new(std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void* operator new[](std::size_t, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete(void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) noexcept
  __attribute__((__externally_visible__));
# 168 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\new" 3
inline void* operator new(std::size_t, void* __p) noexcept
{ return __p; }
inline void* operator new[](std::size_t, void* __p) noexcept
{ return __p; }


inline void operator delete (void*, void*) noexcept { }
inline void operator delete[](void*, void*) noexcept { }

}
# 216 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\new" 3
#pragma GCC visibility pop
# 34 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\new_allocator.h" 2 3






namespace __gnu_cxx
{


  using std::size_t;
  using std::ptrdiff_t;
# 57 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
 struct rebind
 { typedef new_allocator<_Tp1> other; };




      typedef std::true_type propagate_on_container_move_assignment;


      new_allocator() noexcept { }

      new_allocator(const new_allocator&) noexcept { }

      template<typename _Tp1>
 new_allocator(const new_allocator<_Tp1>&) noexcept { }

      ~new_allocator() noexcept { }

      pointer
      address(reference __x) const noexcept
      { return std::__addressof(__x); }

      const_pointer
      address(const_reference __x) const noexcept
      { return std::__addressof(__x); }



      pointer
      allocate(size_type __n, const void* = static_cast<const void*>(0))
      {
 if (__n > this->max_size())
   std::__throw_bad_alloc();
# 111 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\new_allocator.h" 3
 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(pointer __p, size_type)
      {







 ::operator delete(__p);
      }

      size_type
      max_size() const noexcept
      { return size_t(-1) / sizeof(_Tp); }


      template<typename _Up, typename... _Args>
 void
 construct(_Up* __p, _Args&&... __args)
 { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
 void
 destroy(_Up* __p) { __p->~_Up(); }
# 151 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\new_allocator.h" 3
    };

  template<typename _Tp>
    inline bool
    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return false; }


}
# 34 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\c++allocator.h" 2 3


namespace std
{
# 47 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\c++allocator.h" 3
  template<typename _Tp>
    using __allocator_base = __gnu_cxx::new_allocator<_Tp>;
}
# 47 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\allocator.h" 2 3
# 57 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\allocator.h" 3
namespace std
{








  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
 struct rebind
 { typedef allocator<_Tp1> other; };




      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;

      template<typename _Up, typename... _Args>
 void
 construct(_Up* __p, _Args&&... __args)
 { ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
 void
 destroy(_Up* __p) { __p->~_Up(); }

    };
# 107 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\allocator.h" 3
  template<typename _Tp>
    class allocator : public __allocator_base<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
 struct rebind
 { typedef allocator<_Tp1> other; };




      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;


      allocator() throw() { }

      allocator(const allocator& __a) throw()
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
 allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }


    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return true; }

  template<typename _Tp>
    inline bool
    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
    noexcept
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    noexcept
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
    noexcept
    { return false; }



  template<typename _Tp>
    class allocator<const _Tp>
    {
    public:
      typedef _Tp value_type;
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };

  template<typename _Tp>
    class allocator<volatile _Tp>
    {
    public:
      typedef _Tp value_type;
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };

  template<typename _Tp>
    class allocator<const volatile _Tp>
    {
    public:
      typedef _Tp value_type;
      template<typename _Up> allocator(const allocator<_Up>&) { }
    };






  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) noexcept { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two) noexcept
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };


  template<typename _Tp, bool
    = __or_<is_copy_constructible<typename _Tp::value_type>,
            is_nothrow_move_constructible<typename _Tp::value_type>>::value>
    struct __shrink_to_fit_aux
    { static bool _S_do_it(_Tp&) noexcept { return false; } };

  template<typename _Tp>
    struct __shrink_to_fit_aux<_Tp, true>
    {
      static bool
      _S_do_it(_Tp& __c) noexcept
      {

 try
   {
     _Tp(__make_move_if_noexcept_iterator(__c.begin()),
  __make_move_if_noexcept_iterator(__c.end()),
  __c.get_allocator()).swap(__c);
     return true;
   }
 catch(...)
   { return false; }



      }
    };



}
# 42 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\string" 2 3

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\localefwd.h" 1 3
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\localefwd.h" 3
       
# 38 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\localefwd.h" 3


# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\c++locale.h" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\c++locale.h" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\c++locale.h" 3

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\clocale" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\clocale" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\clocale" 3


# 1 "c:\\mingw\\include\\locale.h" 1 3
# 34 "c:\\mingw\\include\\locale.h" 3
       
# 35 "c:\\mingw\\include\\locale.h" 3
# 97 "c:\\mingw\\include\\locale.h" 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 1 3 4
# 98 "c:\\mingw\\include\\locale.h" 2 3

struct lconv
{
# 110 "c:\\mingw\\include\\locale.h" 3
  char *decimal_point;
  char *thousands_sep;
  char *grouping;
  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;
  char p_cs_precedes;
  char p_sep_by_space;
  char n_cs_precedes;
  char n_sep_by_space;
  char p_sign_posn;
  char n_sign_posn;
};






extern "C" {






 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char *setlocale (int, const char *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) struct lconv *localeconv (void);







 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wchar_t *_wsetlocale (int, const wchar_t *);
# 178 "c:\\mingw\\include\\locale.h" 3
}
# 43 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\clocale" 2 3
# 51 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\clocale" 3
namespace std
{
  using ::lconv;
  using ::setlocale;
  using ::localeconv;
}
# 42 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\c++locale.h" 2 3



namespace std
{


  typedef int* __c_locale;





  inline int
  __convert_from_v(const __c_locale&, char* __out,
     const int __size __attribute__((__unused__)),
     const char* __fmt, ...)
  {
    char* __old = std::setlocale(4, 0);
    char* __sav = 0;
    if (__builtin_strcmp(__old, "C"))
      {
 const size_t __len = __builtin_strlen(__old) + 1;
 __sav = new char[__len];
 __builtin_memcpy(__sav, __old, __len);
 std::setlocale(4, "C");
      }

    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);

    if (__sav)
      {
 std::setlocale(4, __sav);
 delete [] __sav;
      }
    return __ret;
  }


}
# 41 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\localefwd.h" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\iosfwd" 1 3
# 36 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\iosfwd" 3
       
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\iosfwd" 3





namespace std
{

# 74 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\iosfwd" 3
  class ios_base;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;


namespace __cxx11 {

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

}

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  typedef basic_ios<char> ios;


  typedef basic_streambuf<char> streambuf;


  typedef basic_istream<char> istream;


  typedef basic_ostream<char> ostream;


  typedef basic_iostream<char> iostream;


  typedef basic_stringbuf<char> stringbuf;


  typedef basic_istringstream<char> istringstream;


  typedef basic_ostringstream<char> ostringstream;


  typedef basic_stringstream<char> stringstream;


  typedef basic_filebuf<char> filebuf;


  typedef basic_ifstream<char> ifstream;


  typedef basic_ofstream<char> ofstream;


  typedef basic_fstream<char> fstream;



  typedef basic_ios<wchar_t> wios;


  typedef basic_streambuf<wchar_t> wstreambuf;


  typedef basic_istream<wchar_t> wistream;


  typedef basic_ostream<wchar_t> wostream;


  typedef basic_iostream<wchar_t> wiostream;


  typedef basic_stringbuf<wchar_t> wstringbuf;


  typedef basic_istringstream<wchar_t> wistringstream;


  typedef basic_ostringstream<wchar_t> wostringstream;


  typedef basic_stringstream<wchar_t> wstringstream;


  typedef basic_filebuf<wchar_t> wfilebuf;


  typedef basic_ifstream<wchar_t> wifstream;


  typedef basic_ofstream<wchar_t> wofstream;


  typedef basic_fstream<wchar_t> wfstream;




}
# 42 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\localefwd.h" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cctype" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cctype" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cctype" 3


# 1 "c:\\mingw\\include\\ctype.h" 1 3
# 33 "c:\\mingw\\include\\ctype.h" 3
       
# 34 "c:\\mingw\\include\\ctype.h" 3
# 59 "c:\\mingw\\include\\ctype.h" 3
# 1 "c:\\mingw\\include\\wctype.h" 1 3
# 33 "c:\\mingw\\include\\wctype.h" 3
       
# 34 "c:\\mingw\\include\\wctype.h" 3
# 87 "c:\\mingw\\include\\wctype.h" 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 1 3 4
# 88 "c:\\mingw\\include\\wctype.h" 2 3

typedef wchar_t wctype_t;


extern "C" {







 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int iswalnum (wint_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int iswalpha (wint_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int iswascii (wint_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int iswcntrl (wint_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int iswctype (wint_t, wctype_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int iswdigit (wint_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int iswgraph (wint_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int iswlower (wint_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int iswprint (wint_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int iswpunct (wint_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int iswspace (wint_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int iswupper (wint_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int iswxdigit (wint_t);

__attribute__((__deprecated__))





 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int is_wctype (wint_t, wctype_t);


__attribute__((__cdecl__)) __attribute__((__nothrow__)) int iswblank (wint_t);







 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wint_t towlower (wint_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) wint_t towupper (wint_t);
# 182 "c:\\mingw\\include\\wctype.h" 3
}
# 60 "c:\\mingw\\include\\ctype.h" 2 3
# 68 "c:\\mingw\\include\\ctype.h" 3
extern "C" {

 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int isalnum(int);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int isalpha(int);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int iscntrl(int);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int isdigit(int);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int isgraph(int);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int islower(int);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int isleadbyte (int);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int isprint(int);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int ispunct(int);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int isspace(int);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int isupper(int);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int isxdigit(int);


__attribute__((__cdecl__)) __attribute__((__nothrow__)) int isblank (int);
# 95 "c:\\mingw\\include\\ctype.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int tolower (int);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int toupper (int);
# 140 "c:\\mingw\\include\\ctype.h" 3
  extern __attribute__((__dllimport__)) unsigned short _ctype[];



  extern __attribute__((__dllimport__)) unsigned short *_pctype;
# 240 "c:\\mingw\\include\\ctype.h" 3
inline __attribute__((__cdecl__)) __attribute__((__nothrow__)) int isleadbyte (int c)
{ return (_pctype[(unsigned char)(c)] & 0x8000); }
# 275 "c:\\mingw\\include\\ctype.h" 3
}
# 43 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cctype" 2 3
# 62 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cctype" 3
namespace std
{
  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;
}
# 43 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\localefwd.h" 2 3

namespace std
{

# 55 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\localefwd.h" 3
  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);


  template<typename _CharT>
    bool
    isblank(_CharT, const locale&);


  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;

  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

namespace __cxx11 {
  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;
}

namespace __cxx11 {

  template<typename _CharT>
    class collate;
  template<typename _CharT>
    class collate_byname;
}


  class time_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
}
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;
namespace __cxx11 {
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;
}
namespace __cxx11 {
  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;
}


  class messages_base;
namespace __cxx11 {
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;
}


}
# 44 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\string" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ostream_insert.h" 1 3
# 33 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ostream_insert.h" 3
       
# 34 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ostream_insert.h" 3


# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\cxxabi_forced.h" 1 3
# 34 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\cxxabi_forced.h" 3
       
# 35 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\cxxabi_forced.h" 3

#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();


    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ostream_insert.h" 2 3

namespace std
{


  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   try
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }




  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);




}
# 45 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\string" 2 3



# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_function.h" 1 3
# 63 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_function.h" 3
namespace std
{

# 104 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {

      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {

      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;


      typedef _Result result_type;
    };
# 166 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_function.h" 3
  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };
# 350 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_function.h" 3
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };


  template<typename _Tp>
    struct greater<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {
 if (__builtin_constant_p (__x > __y))
   return __x > __y;
 return (unsigned int)__x > (unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {
 if (__builtin_constant_p (__x < __y))
   return __x < __y;
 return (unsigned int)__x < (unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct greater_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {
 if (__builtin_constant_p (__x >= __y))
   return __x >= __y;
 return (unsigned int)__x >= (unsigned int)__y;
      }
    };


  template<typename _Tp>
    struct less_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      bool
      operator()(_Tp* __x, _Tp* __y) const noexcept
      {
 if (__builtin_constant_p (__x <= __y))
   return __x <= __y;
 return (unsigned int)__x <= (unsigned int)__y;
      }
    };
# 761 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_function.h" 3
  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
     
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };
# 854 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_function.h" 3
  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
     
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };

  template<typename _Tp>
    struct bit_not : public unary_function<_Tp, _Tp>
    {
   
      _Tp
      operator()(const _Tp& __x) const
      { return ~__x; }
    };
# 978 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
     
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

     
      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
   
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
     
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

     
      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
   
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 1055 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity
    : public unary_function<_Tp, _Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };


  template<typename _Tp> struct _Identity<const _Tp> : _Identity<_Tp> { };

  template<typename _Pair>
    struct _Select1st
    : public unary_function<_Pair, typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }


      template<typename _Pair2>
        typename _Pair2::first_type&
        operator()(_Pair2& __x) const
        { return __x.first; }

      template<typename _Pair2>
        const typename _Pair2::first_type&
        operator()(const _Pair2& __x) const
        { return __x.first; }

    };

  template<typename _Pair>
    struct _Select2nd
    : public unary_function<_Pair, typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 1178 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }




}


# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\backward\\binders.h" 1 3
# 60 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\backward\\binders.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"

namespace std
{

# 107 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\backward\\binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } __attribute__ ((__deprecated__));


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }



}

#pragma GCC diagnostic pop
# 1369 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_function.h" 2 3
# 49 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\string" 2 3


# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\range_access.h" 1 3
# 33 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\range_access.h" 3
       
# 34 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\range_access.h" 3


# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\initializer_list" 1 3
# 33 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\initializer_list" 3
       
# 34 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\initializer_list" 3





#pragma GCC visibility push(default)



namespace std
{

  template<class _E>
    class initializer_list
    {
    public:
      typedef _E value_type;
      typedef const _E& reference;
      typedef const _E& const_reference;
      typedef size_t size_type;
      typedef const _E* iterator;
      typedef const _E* const_iterator;

    private:
      iterator _M_array;
      size_type _M_len;


      constexpr initializer_list(const_iterator __a, size_type __l)
      : _M_array(__a), _M_len(__l) { }

    public:
      constexpr initializer_list() noexcept
      : _M_array(0), _M_len(0) { }


      constexpr size_type
      size() const noexcept { return _M_len; }


      constexpr const_iterator
      begin() const noexcept { return _M_array; }


      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
    };






  template<class _Tp>
    constexpr const _Tp*
    begin(initializer_list<_Tp> __ils) noexcept
    { return __ils.begin(); }






  template<class _Tp>
    constexpr const _Tp*
    end(initializer_list<_Tp> __ils) noexcept
    { return __ils.end(); }
}

#pragma GCC visibility pop
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\range_access.h" 2 3
namespace std
{







  template<typename _Container>
    inline auto
    begin(_Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<typename _Container>
    inline auto
    begin(const _Container& __cont) -> decltype(__cont.begin())
    { return __cont.begin(); }






  template<typename _Container>
    inline auto
    end(_Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }






  template<typename _Container>
    inline auto
    end(const _Container& __cont) -> decltype(__cont.end())
    { return __cont.end(); }





  template<typename _Tp, size_t _Nm>
    inline _Tp*
    begin(_Tp (&__arr)[_Nm])
    { return __arr; }






  template<typename _Tp, size_t _Nm>
    inline _Tp*
    end(_Tp (&__arr)[_Nm])
    { return __arr + _Nm; }
# 323 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\range_access.h" 3

}
# 52 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\string" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 1 3
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
       
# 38 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\atomicity.h" 1 3
# 32 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\atomicity.h" 3
       
# 33 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\atomicity.h" 3


# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\gthr.h" 1 3
# 30 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\gthr.h" 3
#pragma GCC visibility push(default)
# 148 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\gthr.h" 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\gthr-default.h" 1 3
# 69 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\gthr-default.h" 3
# 1 "c:\\mingw\\include\\errno.h" 1 3
# 103 "c:\\mingw\\include\\errno.h" 3
extern "C" {
# 112 "c:\\mingw\\include\\errno.h" 3
 int* __attribute__((__cdecl__)) __attribute__((__nothrow__)) _errno(void);



}
# 70 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\gthr-default.h" 2 3
# 339 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\gthr-default.h" 3
extern "C" {


typedef unsigned long __gthread_key_t;

typedef struct {
  int done;
  long started;
} __gthread_once_t;

typedef struct {
  long counter;
  void *sema;
} __gthread_mutex_t;

typedef struct {
  long counter;
  long depth;
  unsigned long owner;
  void *sema;
} __gthread_recursive_mutex_t;
# 373 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\gthr-default.h" 3
extern int _CRT_MT;
extern int __mingwthr_key_dtor (unsigned long, void (*) (void *));
# 400 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\gthr-default.h" 3
static inline int
__gthread_active_p (void)
{

  return _CRT_MT;



}







extern int __gthr_win32_once (__gthread_once_t *, void (*) (void));
extern int __gthr_win32_key_create (__gthread_key_t *, void (*) (void*));
extern int __gthr_win32_key_delete (__gthread_key_t);
extern void * __gthr_win32_getspecific (__gthread_key_t);
extern int __gthr_win32_setspecific (__gthread_key_t, const void *);
extern void __gthr_win32_mutex_init_function (__gthread_mutex_t *);
extern int __gthr_win32_mutex_lock (__gthread_mutex_t *);
extern int __gthr_win32_mutex_trylock (__gthread_mutex_t *);
extern int __gthr_win32_mutex_unlock (__gthread_mutex_t *);
extern void
  __gthr_win32_recursive_mutex_init_function (__gthread_recursive_mutex_t *);
extern int __gthr_win32_recursive_mutex_lock (__gthread_recursive_mutex_t *);
extern int
  __gthr_win32_recursive_mutex_trylock (__gthread_recursive_mutex_t *);
extern int __gthr_win32_recursive_mutex_unlock (__gthread_recursive_mutex_t *);
extern void __gthr_win32_mutex_destroy (__gthread_mutex_t *);
extern int
  __gthr_win32_recursive_mutex_destroy (__gthread_recursive_mutex_t *);

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return __gthr_win32_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return __gthr_win32_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return __gthr_win32_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return __gthr_win32_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return __gthr_win32_setspecific (__key, __ptr);
}

static inline void
__gthread_mutex_init_function (__gthread_mutex_t *__mutex)
{
  __gthr_win32_mutex_init_function (__mutex);
}

static inline void
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  __gthr_win32_mutex_destroy (__mutex);
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_mutex_trylock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_mutex_unlock (__mutex);
  else
    return 0;
}

static inline void
__gthread_recursive_mutex_init_function (__gthread_recursive_mutex_t *__mutex)
{
   __gthr_win32_recursive_mutex_init_function (__mutex);
}

static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_recursive_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_recursive_mutex_trylock (__mutex);
  else
    return 0;
}

static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthr_win32_recursive_mutex_unlock (__mutex);
  else
    return 0;
}

static inline int
__gthread_recursive_mutex_destroy (__gthread_recursive_mutex_t *__mutex)
{
  return __gthr_win32_recursive_mutex_destroy (__mutex);
}
# 782 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\gthr-default.h" 3
}
# 149 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\gthr.h" 2 3


#pragma GCC visibility pop
# 36 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\atomicity.h" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\atomic_word.h" 1 3
# 32 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\atomic_word.h" 3
typedef int _Atomic_word;
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\atomicity.h" 2 3

namespace __gnu_cxx
{







  static inline _Atomic_word
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __atomic_fetch_add(__mem, __val, 4); }

  static inline void
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __atomic_fetch_add(__mem, __val, 4); }
# 64 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\atomicity.h" 3
  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  static inline void
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);
    else
      return __exchange_and_add_single(__mem, __val);



  }

  static inline void
  __attribute__ ((__unused__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      __atomic_add(__mem, __val);
    else
      __atomic_add_single(__mem, __val);



  }


}
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\alloc_traits.h" 1 3
# 32 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\alloc_traits.h" 3
       
# 33 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\alloc_traits.h" 3



# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\alloc_traits.h" 1 3
# 41 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\alloc_traits.h" 3
namespace std
{


  struct __allocator_traits_base
  {
    template<typename _Tp, typename _Up, typename = void>
      struct __rebind : __replace_first_arg<_Tp, _Up> { };

    template<typename _Tp, typename _Up>
      struct __rebind<_Tp, _Up,
        __void_t<typename _Tp::template rebind<_Up>::other>>
      { using type = typename _Tp::template rebind<_Up>::other; };

  protected:
    template<typename _Tp>
      using __pointer = typename _Tp::pointer;
    template<typename _Tp>
      using __c_pointer = typename _Tp::const_pointer;
    template<typename _Tp>
      using __v_pointer = typename _Tp::void_pointer;
    template<typename _Tp>
      using __cv_pointer = typename _Tp::const_void_pointer;
    template<typename _Tp>
      using __pocca = typename _Tp::propagate_on_container_copy_assignment;
    template<typename _Tp>
      using __pocma = typename _Tp::propagate_on_container_move_assignment;
    template<typename _Tp>
      using __pocs = typename _Tp::propagate_on_container_swap;
    template<typename _Tp>
      using __equal = typename _Tp::is_always_equal;
  };

  template<typename _Alloc, typename _Up>
    using __alloc_rebind
      = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;





  template<typename _Alloc>
    struct allocator_traits : __allocator_traits_base
    {

      typedef _Alloc allocator_type;

      typedef typename _Alloc::value_type value_type;






      using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;

    private:

      template<template<typename> class _Func, typename _Tp, typename = void>
 struct _Ptr
 {
   using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 };

      template<template<typename> class _Func, typename _Tp>
 struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 {
   using type = _Func<_Alloc>;
 };


      template<typename _A2, typename _PtrT, typename = void>
 struct _Diff
 { using type = typename pointer_traits<_PtrT>::difference_type; };

      template<typename _A2, typename _PtrT>
 struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 { using type = typename _A2::difference_type; };


      template<typename _A2, typename _DiffT, typename = void>
 struct _Size : make_unsigned<_DiffT> { };

      template<typename _A2, typename _DiffT>
 struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 { using type = typename _A2::size_type; };

    public:






      using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;







      using void_pointer = typename _Ptr<__v_pointer, void>::type;







      using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;







      using difference_type = typename _Diff<_Alloc, pointer>::type;







      using size_type = typename _Size<_Alloc, difference_type>::type;







      using propagate_on_container_copy_assignment
 = __detected_or_t<false_type, __pocca, _Alloc>;







      using propagate_on_container_move_assignment
 = __detected_or_t<false_type, __pocma, _Alloc>;







      using propagate_on_container_swap
 = __detected_or_t<false_type, __pocs, _Alloc>;







      using is_always_equal
 = __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;

      template<typename _Tp>
 using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
      template<typename _Tp>
 using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;

    private:
      template<typename _Alloc2>
 static auto
 _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 -> decltype(__a.allocate(__n, __hint))
 { return __a.allocate(__n, __hint); }

      template<typename _Alloc2>
 static pointer
 _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 { return __a.allocate(__n); }

      template<typename _Tp, typename... _Args>
 struct __construct_helper
 {
   template<typename _Alloc2,
     typename = decltype(std::declval<_Alloc2*>()->construct(
    std::declval<_Tp*>(), std::declval<_Args>()...))>
     static true_type __test(int);

   template<typename>
     static false_type __test(...);

   using type = decltype(__test<_Alloc>(0));
 };

      template<typename _Tp, typename... _Args>
 using __has_construct
   = typename __construct_helper<_Tp, _Args...>::type;

      template<typename _Tp, typename... _Args>
 static _Require<__has_construct<_Tp, _Args...>>
 _S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 { __a.construct(__p, std::forward<_Args>(__args)...); }

      template<typename _Tp, typename... _Args>
 static
 _Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
          is_constructible<_Tp, _Args...>>>
 _S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 { ::new((void*)__p) _Tp(std::forward<_Args>(__args)...); }

      template<typename _Alloc2, typename _Tp>
 static auto
 _S_destroy(_Alloc2& __a, _Tp* __p, int)
 -> decltype(__a.destroy(__p))
 { __a.destroy(__p); }

      template<typename _Alloc2, typename _Tp>
 static void
 _S_destroy(_Alloc2&, _Tp* __p, ...)
 { __p->~_Tp(); }

      template<typename _Alloc2>
 static auto
 _S_max_size(_Alloc2& __a, int)
 -> decltype(__a.max_size())
 { return __a.max_size(); }

      template<typename _Alloc2>
 static size_type
 _S_max_size(_Alloc2&, ...)
 {


   return __gnu_cxx::__numeric_traits<size_type>::__max
     / sizeof(value_type);
 }

      template<typename _Alloc2>
 static auto
 _S_select(_Alloc2& __a, int)
 -> decltype(__a.select_on_container_copy_construction())
 { return __a.select_on_container_copy_construction(); }

      template<typename _Alloc2>
 static _Alloc2
 _S_select(_Alloc2& __a, ...)
 { return __a; }

    public:
# 299 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\alloc_traits.h" 3
      static pointer
      allocate(_Alloc& __a, size_type __n)
      { return __a.allocate(__n); }
# 314 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\alloc_traits.h" 3
      static pointer
      allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
      { return _S_allocate(__a, __n, __hint, 0); }
# 326 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\alloc_traits.h" 3
      static void
      deallocate(_Alloc& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 341 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\alloc_traits.h" 3
      template<typename _Tp, typename... _Args>
 static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 -> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 { _S_construct(__a, __p, std::forward<_Args>(__args)...); }
# 354 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\alloc_traits.h" 3
      template<typename _Tp>
 static void destroy(_Alloc& __a, _Tp* __p)
 { _S_destroy(__a, __p, 0); }
# 366 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\alloc_traits.h" 3
      static size_type max_size(const _Alloc& __a) noexcept
      { return _S_max_size(__a, 0); }
# 377 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\alloc_traits.h" 3
      static _Alloc
      select_on_container_copy_construction(const _Alloc& __rhs)
      { return _S_select(__rhs, 0); }
    };


  template<typename _Tp>
    struct allocator_traits<allocator<_Tp>>
    {

      using allocator_type = allocator<_Tp>;

      using value_type = _Tp;


      using pointer = _Tp*;


      using const_pointer = const _Tp*;


      using void_pointer = void*;


      using const_void_pointer = const void*;


      using difference_type = std::ptrdiff_t;


      using size_type = std::size_t;


      using propagate_on_container_copy_assignment = false_type;


      using propagate_on_container_move_assignment = true_type;


      using propagate_on_container_swap = false_type;


      using is_always_equal = true_type;

      template<typename _Up>
 using rebind_alloc = allocator<_Up>;

      template<typename _Up>
 using rebind_traits = allocator_traits<allocator<_Up>>;
# 434 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\alloc_traits.h" 3
      static pointer
      allocate(allocator_type& __a, size_type __n)
      { return __a.allocate(__n); }
# 448 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\alloc_traits.h" 3
      static pointer
      allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
      { return __a.allocate(__n, __hint); }
# 460 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\alloc_traits.h" 3
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
# 472 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\alloc_traits.h" 3
      template<typename _Up, typename... _Args>
 static void
 construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 { __a.construct(__p, std::forward<_Args>(__args)...); }
# 484 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\alloc_traits.h" 3
      template<typename _Up>
 static void
 destroy(allocator_type& __a, _Up* __p)
 { __a.destroy(__p); }






      static size_type
      max_size(const allocator_type& __a) noexcept
      { return __a.max_size(); }






      static allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
      { return __rhs; }
    };


  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
    { __one = __two; }

  template<typename _Alloc>
    inline void
    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_copy_assignment __pocca;
      __do_alloc_on_copy(__one, __two, __pocca());
    }

  template<typename _Alloc>
    inline _Alloc __alloc_on_copy(const _Alloc& __a)
    {
      typedef allocator_traits<_Alloc> __traits;
      return __traits::select_on_container_copy_construction(__a);
    }

  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
    { __one = std::move(__two); }

  template<typename _Alloc>
    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_move(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_move_assignment __pocma;
      __do_alloc_on_move(__one, __two, __pocma());
    }

  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
    {
      using std::swap;
      swap(__one, __two);
    }

  template<typename _Alloc>
    inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
    { }

  template<typename _Alloc>
    inline void __alloc_on_swap(_Alloc& __one, _Alloc& __two)
    {
      typedef allocator_traits<_Alloc> __traits;
      typedef typename __traits::propagate_on_container_swap __pocs;
      __do_alloc_on_swap(__one, __two, __pocs());
    }

  template<typename _Alloc>
    class __is_copy_insertable_impl
    {
      typedef allocator_traits<_Alloc> _Traits;

      template<typename _Up, typename
        = decltype(_Traits::construct(std::declval<_Alloc&>(),
          std::declval<_Up*>(),
          std::declval<const _Up&>()))>
 static true_type
 _M_select(int);

      template<typename _Up>
 static false_type
 _M_select(...);

    public:
      typedef decltype(_M_select<typename _Alloc::value_type>(0)) type;
    };


  template<typename _Alloc>
    struct __is_copy_insertable
    : __is_copy_insertable_impl<_Alloc>::type
    { };


  template<typename _Tp>
    struct __is_copy_insertable<allocator<_Tp>>
    : is_copy_constructible<_Tp>
    { };


  template<typename _Alloc, typename = void>
    struct __is_allocator : false_type { };

  template<typename _Alloc>
    struct __is_allocator<_Alloc,
      __void_t<typename _Alloc::value_type,
        decltype(std::declval<_Alloc&>().allocate(size_t{}))>>
    : true_type { };

  template<typename _Alloc>
    using _RequireAllocator
      = typename enable_if<__is_allocator<_Alloc>::value, _Alloc>::type;


}
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\alloc_traits.h" 2 3




namespace __gnu_cxx
{






template<typename _Alloc, typename = typename _Alloc::value_type>
  struct __alloc_traits

  : std::allocator_traits<_Alloc>

  {
    typedef _Alloc allocator_type;

    typedef std::allocator_traits<_Alloc> _Base_type;
    typedef typename _Base_type::value_type value_type;
    typedef typename _Base_type::pointer pointer;
    typedef typename _Base_type::const_pointer const_pointer;
    typedef typename _Base_type::size_type size_type;
    typedef typename _Base_type::difference_type difference_type;

    typedef value_type& reference;
    typedef const value_type& const_reference;
    using _Base_type::allocate;
    using _Base_type::deallocate;
    using _Base_type::construct;
    using _Base_type::destroy;
    using _Base_type::max_size;

  private:
    template<typename _Ptr>
      using __is_custom_pointer
 = std::__and_<std::is_same<pointer, _Ptr>,
        std::__not_<std::is_pointer<_Ptr>>>;

  public:

    template<typename _Ptr, typename... _Args>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
      {
 _Base_type::construct(__a, std::__to_address(__p),
         std::forward<_Args>(__args)...);
      }


    template<typename _Ptr>
      static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
      destroy(_Alloc& __a, _Ptr __p)
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static _Alloc _S_select_on_copy(const _Alloc& __a)
    { return _Base_type::select_on_container_copy_construction(__a); }

    static void _S_on_swap(_Alloc& __a, _Alloc& __b)
    { std::__alloc_on_swap(__a, __b); }

    static constexpr bool _S_propagate_on_copy_assign()
    { return _Base_type::propagate_on_container_copy_assignment::value; }

    static constexpr bool _S_propagate_on_move_assign()
    { return _Base_type::propagate_on_container_move_assignment::value; }

    static constexpr bool _S_propagate_on_swap()
    { return _Base_type::propagate_on_container_swap::value; }

    static constexpr bool _S_always_equal()
    { return _Base_type::is_always_equal::value; }

    static constexpr bool _S_nothrow_move()
    { return _S_propagate_on_move_assign() || _S_always_equal(); }

    template<typename _Tp>
      struct rebind
      { typedef typename _Base_type::template rebind_alloc<_Tp> other; };
# 158 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\alloc_traits.h" 3
  };


}
# 41 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 2 3
# 52 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
namespace std
{



namespace __cxx11 {
# 76 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Char_alloc_type allocator_type;
      typedef typename _Alloc_traits::size_type size_type;
      typedef typename _Alloc_traits::difference_type difference_type;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef typename _Alloc_traits::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
       const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;


      static const size_type npos = static_cast<size_type>(-1);

    private:




      typedef const_iterator __const_iterator;
# 139 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      struct _Alloc_hider : allocator_type
      {




 _Alloc_hider(pointer __dat, const _Alloc& __a)
 : allocator_type(__a), _M_p(__dat) { }

 _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc())
 : allocator_type(std::move(__a)), _M_p(__dat) { }


 pointer _M_p;
      };

      _Alloc_hider _M_dataplus;
      size_type _M_string_length;

      enum { _S_local_capacity = 15 / sizeof(_CharT) };

      union
      {
 _CharT _M_local_buf[_S_local_capacity + 1];
 size_type _M_allocated_capacity;
      };

      void
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

      void
      _M_length(size_type __length)
      { _M_string_length = __length; }

      pointer
      _M_data() const
      { return _M_dataplus._M_p; }

      pointer
      _M_local_data()
      {

 return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);



      }

      const_pointer
      _M_local_data() const
      {

 return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);



      }

      void
      _M_capacity(size_type __capacity)
      { _M_allocated_capacity = __capacity; }

      void
      _M_set_length(size_type __n)
      {
 _M_length(__n);
 traits_type::assign(_M_data()[__n], _CharT());
      }

      bool
      _M_is_local() const
      { return _M_data() == _M_local_data(); }


      pointer
      _M_create(size_type&, size_type);

      void
      _M_dispose()
      {
 if (!_M_is_local())
   _M_destroy(_M_allocated_capacity);
      }

      void
      _M_destroy(size_type __size) throw()
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }



      template<typename _InIterator>
        void
        _M_construct_aux(_InIterator __beg, _InIterator __end,
    std::__false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          _M_construct(__beg, __end, _Tag());
 }



      template<typename _Integer>
        void
        _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
 { _M_construct_aux_2(static_cast<size_type>(__beg), __end); }

      void
      _M_construct_aux_2(size_type __req, _CharT __c)
      { _M_construct(__req, __c); }

      template<typename _InIterator>
        void
        _M_construct(_InIterator __beg, _InIterator __end)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   _M_construct_aux(__beg, __end, _Integral());
        }


      template<typename _InIterator>
        void
        _M_construct(_InIterator __beg, _InIterator __end,
       std::input_iterator_tag);



      template<typename _FwdIterator>
        void
        _M_construct(_FwdIterator __beg, _FwdIterator __end,
       std::forward_iterator_tag);

      void
      _M_construct(size_type __req, _CharT __c);

      allocator_type&
      _M_get_allocator()
      { return _M_dataplus; }

      const allocator_type&
      _M_get_allocator() const
      { return _M_dataplus; }

    private:
# 298 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range_fmt(("%s: __pos (which is %zu) > " "this->size() (which is %zu)")
                                         ,
       __s, __pos, this->size());
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }



      size_type
      _M_limit(size_type __pos, size_type __off) const noexcept
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const noexcept
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _S_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _S_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
   for (; __k1 != __k2; ++__k1, (void)++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) noexcept
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      noexcept
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) noexcept
      { _S_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      noexcept
      { _S_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2) noexcept
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_assign(const basic_string&);

      void
      _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
  size_type __len2);

      void
      _M_erase(size_type __pos, size_type __n);

    public:







      basic_string()
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
      : _M_dataplus(_M_local_data())
      { _M_set_length(0); }




      explicit
      basic_string(const _Alloc& __a) noexcept
      : _M_dataplus(_M_local_data(), __a)
      { _M_set_length(0); }





      basic_string(const basic_string& __str)
      : _M_dataplus(_M_local_data(),
      _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
      { _M_construct(__str._M_data(), __str._M_data() + __str.length()); }
# 450 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string(const basic_string& __str, size_type __pos,
     const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      {
 const _CharT* __start = __str._M_data()
   + __str._M_check(__pos, "basic_string::basic_string");
 _M_construct(__start, __start + __str._M_limit(__pos, npos));
      }







      basic_string(const basic_string& __str, size_type __pos,
     size_type __n)
      : _M_dataplus(_M_local_data())
      {
 const _CharT* __start = __str._M_data()
   + __str._M_check(__pos, "basic_string::basic_string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n));
      }
# 481 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      {
 const _CharT* __start
   = __str._M_data() + __str._M_check(__pos, "string::string");
 _M_construct(__start, __start + __str._M_limit(__pos, __n));
      }
# 499 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s + __n); }
# 514 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
# 529 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__n, __c); }
# 541 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string(basic_string&& __str) noexcept
      : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
      {
 if (__str._M_is_local())
   {
     traits_type::copy(_M_local_buf, __str._M_local_buf,
         _S_local_capacity + 1);
   }
 else
   {
     _M_data(__str._M_data());
     _M_capacity(__str._M_allocated_capacity);
   }




 _M_length(__str.length());
 __str._M_data(__str._M_local_data());
 __str._M_set_length(0);
      }






      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__l.begin(), __l.end()); }

      basic_string(const basic_string& __str, const _Alloc& __a)
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__str.begin(), __str.end()); }

      basic_string(basic_string&& __str, const _Alloc& __a)
      noexcept(_Alloc_traits::_S_always_equal())
      : _M_dataplus(_M_local_data(), __a)
      {
 if (__str._M_is_local())
   {
     traits_type::copy(_M_local_buf, __str._M_local_buf,
         _S_local_capacity + 1);
     _M_length(__str.length());
     __str._M_set_length(0);
   }
 else if (_Alloc_traits::_S_always_equal()
     || __str.get_allocator() == __a)
   {
     _M_data(__str._M_data());
     _M_length(__str.length());
     _M_capacity(__str._M_allocated_capacity);
     __str._M_data(__str._M_local_buf);
     __str._M_set_length(0);
   }
 else
   _M_construct(__str.begin(), __str.end());
      }
# 609 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc())
 : _M_dataplus(_M_local_data(), __a)
 { _M_construct(__beg, __end); }
# 656 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      ~basic_string()
      { _M_dispose(); }





      basic_string&
      operator=(const basic_string& __str)
      {

 if (_Alloc_traits::_S_propagate_on_copy_assign())
   {
     if (!_Alloc_traits::_S_always_equal() && !_M_is_local()
  && _M_get_allocator() != __str._M_get_allocator())
       {


  if (__str.size() <= _S_local_capacity)
    {
      _M_destroy(_M_allocated_capacity);
      _M_data(_M_local_data());
      _M_set_length(0);
    }
  else
    {
      const auto __len = __str.size();
      auto __alloc = __str._M_get_allocator();

      auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1);
      _M_destroy(_M_allocated_capacity);
      _M_data(__ptr);
      _M_capacity(__len);
      _M_set_length(__len);
    }
       }
     std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
   }

 return this->assign(__str);
      }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 713 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 731 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      operator=(basic_string&& __str)
      noexcept(_Alloc_traits::_S_nothrow_move())
      {
 if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign()
     && !_Alloc_traits::_S_always_equal()
     && _M_get_allocator() != __str._M_get_allocator())
   {

     _M_destroy(_M_allocated_capacity);
     _M_data(_M_local_data());
     _M_set_length(0);
   }

 std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());

 if (!__str._M_is_local()
     && (_Alloc_traits::_S_propagate_on_move_assign()
       || _Alloc_traits::_S_always_equal()))
   {
     pointer __data = nullptr;
     size_type __capacity;
     if (!_M_is_local())
       {
  if (_Alloc_traits::_S_always_equal())
    {
      __data = _M_data();
      __capacity = _M_allocated_capacity;
    }
  else
    _M_destroy(_M_allocated_capacity);
       }

     _M_data(__str._M_data());
     _M_length(__str.length());
     _M_capacity(__str._M_allocated_capacity);
     if (__data)
       {
  __str._M_data(__data);
  __str._M_capacity(__capacity);
       }
     else
       __str._M_data(__str._M_local_buf);
   }
 else
     assign(__str);
 __str.clear();
 return *this;
      }





      basic_string&
      operator=(initializer_list<_CharT> __l)
      {
 this->assign(__l.begin(), __l.size());
 return *this;
      }
# 816 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      iterator
      begin() noexcept
      { return iterator(_M_data()); }





      const_iterator
      begin() const noexcept
      { return const_iterator(_M_data()); }





      iterator
      end() noexcept
      { return iterator(_M_data() + this->size()); }





      const_iterator
      end() const noexcept
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend() noexcept
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(this->begin()); }






      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_data()); }





      const_iterator
      cend() const noexcept
      { return const_iterator(this->_M_data() + this->size()); }






      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(this->end()); }






      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(this->begin()); }


    public:



      size_type
      size() const noexcept
      { return _M_string_length; }



      size_type
      length() const noexcept
      { return _M_string_length; }


      size_type
      max_size() const noexcept
      { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
# 945 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      void
      resize(size_type __n, _CharT __c);
# 958 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }



      void
      shrink_to_fit() noexcept
      {

 if (capacity() > size())
   {
     try
       { reserve(0); }
     catch(...)
       { }
   }

      }






      size_type
      capacity() const noexcept
      {
 return _M_is_local() ? size_type(_S_local_capacity)
                      : _M_allocated_capacity;
      }
# 1007 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      void
      reserve(size_type __res_arg = 0);




      void
      clear() noexcept
      { _M_set_length(0); }





      bool
      empty() const noexcept
      { return this->size() == 0; }
# 1036 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      const_reference
      operator[] (size_type __pos) const noexcept
      {
 ;
 return _M_data()[__pos];
      }
# 1053 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      reference
      operator[](size_type __pos)
      {


 ;

 ;
 return _M_data()[__pos];
      }
# 1074 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
 return _M_data()[__n];
      }
# 1095 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range_fmt(("basic_string::at: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
 return _M_data()[__n];
      }






      reference
      front() noexcept
      {
 ;
 return operator[](0);
      }





      const_reference
      front() const noexcept
      {
 ;
 return operator[](0);
      }





      reference
      back() noexcept
      {
 ;
 return operator[](this->size() - 1);
      }





      const_reference
      back() const noexcept
      {
 ;
 return operator[](this->size() - 1);
      }
# 1158 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }







      basic_string&
      operator+=(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1211 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      append(const basic_string& __str)
      { return _M_append(__str._M_data(), __str.size()); }
# 1228 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n = npos)
      { return _M_append(__str._M_data()
    + __str._M_check(__pos, "basic_string::append"),
    __str._M_limit(__pos, __n)); }







      basic_string&
      append(const _CharT* __s, size_type __n)
      {
 ;
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }






      basic_string&
      append(const _CharT* __s)
      {
 ;
 const size_type __n = traits_type::length(__s);
 _M_check_length(size_type(0), __n, "basic_string::append");
 return _M_append(__s, __n);
      }
# 1270 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      append(size_type __n, _CharT __c)
      { return _M_replace_aux(this->size(), size_type(0), __n, __c); }







      basic_string&
      append(initializer_list<_CharT> __l)
      { return this->append(__l.begin(), __l.size()); }
# 1294 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(end(), end(), __first, __last); }
# 1339 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      void
      push_back(_CharT __c)
      {
 const size_type __size = this->size();
 if (__size + 1 > this->capacity())
   this->_M_mutate(__size, size_type(0), 0, size_type(1));
 traits_type::assign(this->_M_data()[__size], __c);
 this->_M_set_length(__size + 1);
      }






      basic_string&
      assign(const basic_string& __str)
      {
 this->_M_assign(__str);
 return *this;
      }
# 1370 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      assign(basic_string&& __str)
      noexcept(_Alloc_traits::_S_nothrow_move())
      {


 return *this = std::move(__str);
      }
# 1393 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n = npos)
      { return _M_replace(size_type(0), this->size(), __str._M_data()
     + __str._M_check(__pos, "basic_string::assign"),
     __str._M_limit(__pos, __n)); }
# 1409 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      assign(const _CharT* __s, size_type __n)
      {
 ;
 return _M_replace(size_type(0), this->size(), __s, __n);
      }
# 1425 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      assign(const _CharT* __s)
      {
 ;
 return _M_replace(size_type(0), this->size(), __s,
     traits_type::length(__s));
      }
# 1442 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 1455 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>



        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(begin(), end(), __first, __last); }







      basic_string&
      assign(initializer_list<_CharT> __l)
      { return this->assign(__l.begin(), __l.size()); }
# 1523 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      iterator
      insert(const_iterator __p, size_type __n, _CharT __c)
      {
 ;
 const size_type __pos = __p - begin();
 this->replace(__p, __p, __n, __c);
 return iterator(this->_M_data() + __pos);
      }
# 1565 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 iterator
        insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
        {
   ;
   const size_type __pos = __p - begin();
   this->replace(__p, __p, __beg, __end);
   return iterator(this->_M_data() + __pos);
 }
# 1601 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      void
      insert(iterator __p, initializer_list<_CharT> __l)
      {
 ;
 this->insert(__p - begin(), __l.begin(), __l.size());
      }
# 1621 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->replace(__pos1, size_type(0),
        __str._M_data(), __str.size()); }
# 1644 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n = npos)
      { return this->replace(__pos1, size_type(0), __str._M_data()
        + __str._M_check(__pos2, "basic_string::insert"),
        __str._M_limit(__pos2, __n)); }
# 1667 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n)
      { return this->replace(__pos, size_type(0), __s, __n); }
# 1686 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
 ;
 return this->replace(__pos, size_type(0), __s,
        traits_type::length(__s));
      }
# 1710 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1728 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      iterator
      insert(__const_iterator __p, _CharT __c)
      {
 ;
 const size_type __pos = __p - begin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 return iterator(_M_data() + __pos);
      }
# 1788 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_check(__pos, "basic_string::erase");
 if (__n == npos)
   this->_M_set_length(__pos);
 else if (__n != 0)
   this->_M_erase(__pos, _M_limit(__pos, __n));
 return *this;
      }
# 1807 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      iterator
      erase(__const_iterator __position)
      {

                           ;
 const size_type __pos = __position - begin();
 this->_M_erase(__pos, size_type(1));
 return iterator(_M_data() + __pos);
      }
# 1826 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      iterator
      erase(__const_iterator __first, __const_iterator __last)
      {

                        ;
        const size_type __pos = __first - begin();
 if (__last == end())
   this->_M_set_length(__pos);
 else
   this->_M_erase(__pos, __last - __first);
 return iterator(this->_M_data() + __pos);
      }







      void
      pop_back() noexcept
      {
 ;
 _M_erase(size() - 1, 1);
      }
# 1870 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1892 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2 = npos)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1917 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2)
      {
 ;
 return _M_replace(_M_check(__pos, "basic_string::replace"),
     _M_limit(__pos, __n1), __s, __n2);
      }
# 1942 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
 ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1966 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 1984 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 2004 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __s, size_type __n)
      {

                      ;
 return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
      }
# 2026 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
      {
 ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 2047 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2, size_type __n,
       _CharT __c)
      {

                      ;
 return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
      }
# 2072 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      template<class _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
        basic_string&
        replace(const_iterator __i1, const_iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {
  
                        ;
   ;
   return this->_M_replace_dispatch(__i1, __i2, __k1, __k2,
        std::__false_type());
 }
# 2104 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       _CharT* __k1, _CharT* __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       iterator __k1, iterator __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(__const_iterator __i1, __const_iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {

                      ;
 ;
 return this->replace(__i1 - begin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 2163 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string& replace(const_iterator __i1, const_iterator __i2,
       initializer_list<_CharT> __l)
      { return this->replace(__i1, __i2, __l.begin(), __l.size()); }
# 2222 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _Integer __n, _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
       _InputIterator __k1, _InputIterator __k2,
       __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
   const size_type __len2);

      basic_string&
      _M_append(const _CharT* __s, size_type __n);

    public:
# 2260 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 2270 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      void
      swap(basic_string& __s) noexcept;
# 2280 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      const _CharT*
      c_str() const noexcept
      { return _M_data(); }
# 2292 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      const _CharT*
      data() const noexcept
      { return _M_data(); }
# 2311 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      allocator_type
      get_allocator() const noexcept
      { return _M_get_allocator(); }
# 2327 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2341 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      size_type
      find(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find(__str.data(), __pos, __str.size()); }
# 2373 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos = 0) const noexcept
      {
 ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 2390 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      size_type
      find(_CharT __c, size_type __pos = 0) const noexcept;
# 2403 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 2437 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2451 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 2468 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      size_type
      rfind(_CharT __c, size_type __pos = npos) const noexcept;
# 2482 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 2517 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2531 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      noexcept
      {
 ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 2551 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const noexcept
      { return this->find(__c, __pos); }
# 2566 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 2601 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
      noexcept;
# 2615 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      noexcept
      {
 ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 2635 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const noexcept
      { return this->rfind(__c, __pos); }
# 2649 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
      noexcept
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 2684 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const noexcept;
# 2698 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      noexcept
      {
 ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 2716 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const
      noexcept;
# 2731 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
      noexcept
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 2766 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const noexcept;
# 2780 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      noexcept
      {
 ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 2798 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const
      noexcept;
# 2814 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 2833 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 2926 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 2952 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2 = npos) const;
# 2970 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      int
      compare(const _CharT* __s) const noexcept;
# 2994 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 3021 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;


      template<typename, typename, typename> friend class basic_stringbuf;
    };
}
# 5916 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    {
      const auto __size = __lhs.size() + __rhs.size();
      const bool __cond = (__size > __lhs.capacity()
      && __size <= __rhs.capacity());
      return __cond ? std::move(__rhs.insert(0, __lhs))
             : std::move(__lhs.append(__rhs));
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs,
       basic_string<_CharT, _Traits, _Alloc>&& __rhs)
    { return std::move(__rhs.insert(0, 1, __lhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       const _CharT* __rhs)
    { return std::move(__lhs.append(__rhs)); }

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
       _CharT __rhs)
    { return std::move(__lhs.append(1, __rhs)); }
# 6037 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs) noexcept
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 6084 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 6122 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 6160 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 6198 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 6236 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 6274 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    noexcept(noexcept(__lhs.swap(__rhs)))
    { __lhs.swap(__rhs); }
# 6294 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 6312 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 6335 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 6352 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str, __is.widen('\n')); }



  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    { return std::getline(__is, __str, __delim); }


  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>&& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return std::getline(__is, __str); }


  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);



}



# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\string_conversions.h" 1 3
# 32 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\string_conversions.h" 3
       
# 33 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\string_conversions.h" 3
# 41 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\string_conversions.h" 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstdlib" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstdlib" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstdlib" 3
# 121 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstdlib" 3
extern "C++"
{
namespace std
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;



  using ::atexit;





  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;





  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }




}
# 195 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstdlib" 3
namespace __gnu_cxx
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 227 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 42 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\string_conversions.h" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cwchar" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cwchar" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cwchar" 3
# 43 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\string_conversions.h" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstdio" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstdio" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstdio" 3


# 1 "c:\\mingw\\include\\stdio.h" 1 3
# 38 "c:\\mingw\\include\\stdio.h" 3
       
# 39 "c:\\mingw\\include\\stdio.h" 3
# 68 "c:\\mingw\\include\\stdio.h" 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 1 3 4
# 69 "c:\\mingw\\include\\stdio.h" 2 3
# 95 "c:\\mingw\\include\\stdio.h" 3
# 1 "c:\\mingw\\include\\sys/types.h" 1 3
# 34 "c:\\mingw\\include\\sys/types.h" 3
       
# 35 "c:\\mingw\\include\\sys/types.h" 3
# 91 "c:\\mingw\\include\\sys/types.h" 3
  typedef long long __off64_t;
# 96 "c:\\mingw\\include\\stdio.h" 2 3
# 239 "c:\\mingw\\include\\stdio.h" 3
extern __attribute__((__dllimport__)) FILE _iob[];
# 252 "c:\\mingw\\include\\stdio.h" 3
extern "C" {







 __attribute__((__cdecl__)) __attribute__((__nothrow__)) FILE * fopen (const char *, const char *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) FILE * freopen (const char *, const char *, FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int fflush (FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int fclose (FILE *);






 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int remove (const char *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int rename (const char *, const char *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) FILE * tmpfile (void);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char * tmpnam (char *);
# 295 "c:\\mingw\\include\\stdio.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int setvbuf (FILE *, char *, int, size_t);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void setbuf (FILE *, char *);
# 342 "c:\\mingw\\include\\stdio.h" 3
extern int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__mingw_printf__,2,3))) __mingw_fprintf(FILE*, const char*, ...);
extern int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__mingw_printf__,1,2))) __mingw_printf(const char*, ...);
extern int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__mingw_printf__,2,3))) __mingw_sprintf(char*, const char*, ...);
extern int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__mingw_printf__,3,4))) __mingw_snprintf(char*, size_t, const char*, ...);
extern int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__mingw_printf__,2,0))) __mingw_vfprintf(FILE*, const char*, __builtin_va_list);
extern int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__mingw_printf__,1,0))) __mingw_vprintf(const char*, __builtin_va_list);
extern int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__mingw_printf__,2,0))) __mingw_vsprintf(char*, const char*, __builtin_va_list);
extern int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__mingw_printf__,3,0))) __mingw_vsnprintf(char*, size_t, const char*, __builtin_va_list);
# 376 "c:\\mingw\\include\\stdio.h" 3
extern unsigned int _mingw_output_format_control( unsigned int, unsigned int );
# 402 "c:\\mingw\\include\\stdio.h" 3
inline __attribute__((__cdecl__)) __attribute__((__nothrow__))
int fprintf (FILE *__stream, const char *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vfprintf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

inline __attribute__((__cdecl__)) __attribute__((__nothrow__))
int printf (const char *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vprintf( __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

inline __attribute__((__cdecl__)) __attribute__((__nothrow__))
int sprintf (char *__stream, const char *__format, ...)
{
  register int __retval;
  __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
  __retval = __mingw_vsprintf( __stream, __format, __local_argv );
  __builtin_va_end( __local_argv );
  return __retval;
}

inline __attribute__((__cdecl__)) __attribute__((__nothrow__))
int vfprintf (FILE *__stream, const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vfprintf( __stream, __format, __local_argv );
}

inline __attribute__((__cdecl__)) __attribute__((__nothrow__))
int vprintf (const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vprintf( __format, __local_argv );
}

inline __attribute__((__cdecl__)) __attribute__((__nothrow__))
int vsprintf (char *__stream, const char *__format, __builtin_va_list __local_argv)
{
  return __mingw_vsprintf( __stream, __format, __local_argv );
}
# 478 "c:\\mingw\\include\\stdio.h" 3
 int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__ms_printf__,2,3))) __msvcrt_fprintf(FILE *, const char *, ...);
 int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__ms_printf__,1,2))) __msvcrt_printf(const char *, ...);
 int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__ms_printf__,2,3))) __msvcrt_sprintf(char *, const char *, ...);
 int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__ms_printf__,2,0))) __msvcrt_vfprintf(FILE *, const char *, __builtin_va_list);
 int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__ms_printf__,1,0))) __msvcrt_vprintf(const char *, __builtin_va_list);
 int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__ms_printf__,2,0))) __msvcrt_vsprintf(char *, const char *, __builtin_va_list);






 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int _snprintf (char *, size_t, const char *, ...);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int _vsnprintf (char *, size_t, const char *, __builtin_va_list);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int _vscprintf (const char *, __builtin_va_list);
# 501 "c:\\mingw\\include\\stdio.h" 3
__attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__mingw_printf__,3,4)))
int snprintf (char *, size_t, const char *, ...);

__attribute__((__cdecl__)) __attribute__((__nothrow__)) __attribute__((__format__(__mingw_printf__,3,0)))
int vsnprintf (char *, size_t, const char *, __builtin_va_list);

__attribute__((__cdecl__)) __attribute__((__nothrow__))
int vscanf (const char * __restrict__, __builtin_va_list);

__attribute__((__cdecl__)) __attribute__((__nothrow__))
int vfscanf (FILE * __restrict__, const char * __restrict__, __builtin_va_list);

__attribute__((__cdecl__)) __attribute__((__nothrow__))
int vsscanf (const char * __restrict__, const char * __restrict__, __builtin_va_list);
# 664 "c:\\mingw\\include\\stdio.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int fscanf (FILE *, const char *, ...);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int scanf (const char *, ...);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int sscanf (const char *, const char *, ...);



 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int fgetc (FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char * fgets (char *, int, FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int fputc (int, FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int fputs (const char *, FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) char * gets (char *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int puts (const char *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int ungetc (int, FILE *);
# 685 "c:\\mingw\\include\\stdio.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int _filbuf (FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int _flsbuf (int, FILE *);



inline __attribute__((__cdecl__)) __attribute__((__nothrow__)) int getc (FILE *);
inline __attribute__((__cdecl__)) __attribute__((__nothrow__)) int getc (FILE * __F)
{
  return (--__F->_cnt >= 0)
    ? (int) (unsigned char) *__F->_ptr++
    : _filbuf (__F);
}

inline __attribute__((__cdecl__)) __attribute__((__nothrow__)) int putc (int, FILE *);
inline __attribute__((__cdecl__)) __attribute__((__nothrow__)) int putc (int __c, FILE * __F)
{
  return (--__F->_cnt >= 0)
    ? (int) (unsigned char) (*__F->_ptr++ = (char)__c)
    : _flsbuf (__c, __F);
}

inline __attribute__((__cdecl__)) __attribute__((__nothrow__)) int getchar (void);
inline __attribute__((__cdecl__)) __attribute__((__nothrow__)) int getchar (void)
{
  return (--(&_iob[0])->_cnt >= 0)
    ? (int) (unsigned char) *(&_iob[0])->_ptr++
    : _filbuf ((&_iob[0]));
}

inline __attribute__((__cdecl__)) __attribute__((__nothrow__)) int putchar(int);
inline __attribute__((__cdecl__)) __attribute__((__nothrow__)) int putchar(int __c)
{
  return (--(&_iob[1])->_cnt >= 0)
    ? (int) (unsigned char) (*(&_iob[1])->_ptr++ = (char)__c)
    : _flsbuf (__c, (&_iob[1]));}
# 732 "c:\\mingw\\include\\stdio.h" 3
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) size_t fread (void *, size_t, size_t, FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) size_t fwrite (const void *, size_t, size_t, FILE *);



 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int fseek (FILE *, long, int);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) long ftell (FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void rewind (FILE *);
# 786 "c:\\mingw\\include\\stdio.h" 3
typedef union { long long __value; __off64_t __offset; } fpos_t;




 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int fgetpos (FILE *, fpos_t *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int fsetpos (FILE *, const fpos_t *);
# 827 "c:\\mingw\\include\\stdio.h" 3
int __attribute__((__cdecl__)) __attribute__((__nothrow__)) __mingw_fseeki64 (FILE *, long long, int);
inline __attribute__((__always_inline__)) __attribute__((__cdecl__)) __attribute__((__nothrow__)) int _fseeki64 (FILE *__f, long long __o, int __w)
{ return __mingw_fseeki64 (__f, __o, __w); }


long long __attribute__((__cdecl__)) __attribute__((__nothrow__)) __mingw_ftelli64 (FILE *);
inline __attribute__((__always_inline__)) __attribute__((__cdecl__)) long long __attribute__((__nothrow__)) _ftelli64 (FILE *__file )
{ return __mingw_ftelli64 (__file); }





 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int feof (FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) int ferror (FILE *);


inline __attribute__((__cdecl__)) __attribute__((__nothrow__)) int feof (FILE * __F){ return __F->_flag & 0x0010; }
inline __attribute__((__cdecl__)) __attribute__((__nothrow__)) int ferror (FILE * __F){ return __F->_flag & 0x0020; }





 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void clearerr (FILE *);
 __attribute__((__cdecl__)) __attribute__((__nothrow__)) void perror (const char *);
# 1096 "c:\\mingw\\include\\stdio.h" 3
}
# 43 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstdio" 2 3
# 96 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstdio" 3
namespace std
{
  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;


  using ::gets;

  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;

  using ::tmpnam;

  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;
}
# 157 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstdio" 3
namespace __gnu_cxx
{
# 175 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;

}

namespace std
{
  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;
}
# 44 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\string_conversions.h" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cerrno" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cerrno" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cerrno" 3
# 45 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ext\\string_conversions.h" 2 3

namespace __gnu_cxx
{



  template<typename _TRet, typename _Ret = _TRet, typename _CharT,
    typename... _Base>
    _Ret
    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),
    const char* __name, const _CharT* __str, std::size_t* __idx,
    _Base... __base)
    {
      _Ret __ret;

      _CharT* __endptr;

      struct _Save_errno {
 _Save_errno() : _M_errno((*_errno())) { (*_errno()) = 0; }
 ~_Save_errno() { if ((*_errno()) == 0) (*_errno()) = _M_errno; }
 int _M_errno;
      } const __save_errno;

      struct _Range_chk {
   static bool
   _S_chk(_TRet, std::false_type) { return false; }

   static bool
   _S_chk(_TRet __val, std::true_type)
   {
     return __val < _TRet(__numeric_traits<int>::__min)
       || __val > _TRet(__numeric_traits<int>::__max);
   }
      };

      const _TRet __tmp = __convf(__str, &__endptr, __base...);

      if (__endptr == __str)
 std::__throw_invalid_argument(__name);
      else if ((*_errno()) == 34
   || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
 std::__throw_out_of_range(__name);
      else
 __ret = __tmp;

      if (__idx)
 *__idx = __endptr - __str;

      return __ret;
    }


  template<typename _String, typename _CharT = typename _String::value_type>
    _String
    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,
     __builtin_va_list), std::size_t __n,
   const _CharT* __fmt, ...)
    {


      _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
         * __n));

      __builtin_va_list __args;
      __builtin_va_start(__args, __fmt);

      const int __len = __convf(__s, __n, __fmt, __args);

      __builtin_va_end(__args);

      return _String(__s, __s + __len);
    }


}
# 6392 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 2 3

namespace std
{

namespace __cxx11 {



  inline int
  stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const string& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const string& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); }






  inline string
  to_string(int __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int),
        "%d", __val); }

  inline string
  to_string(unsigned __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned),
        "%u", __val); }

  inline string
  to_string(long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long),
        "%ld", __val); }

  inline string
  to_string(unsigned long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long),
        "%lu", __val); }

  inline string
  to_string(long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(long long),
        "%lld", __val); }

  inline string
  to_string(unsigned long long __val)
  { return __gnu_cxx::__to_xstring<string>(&std::vsnprintf,
        4 * sizeof(unsigned long long),
        "%llu", __val); }

  inline string
  to_string(float __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%f", __val);
  }

  inline string
  to_string(long double __val)
  {
    const int __n =
      __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n,
        "%Lf", __val);
  }



  inline int
  stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa<long, int>(&std::wcstol, "stoi", __str.c_str(),
     __idx, __base); }

  inline long
  stol(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstol, "stol", __str.c_str(),
        __idx, __base); }

  inline unsigned long
  stoul(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoul, "stoul", __str.c_str(),
        __idx, __base); }

  inline long long
  stoll(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoll, "stoll", __str.c_str(),
        __idx, __base); }

  inline unsigned long long
  stoull(const wstring& __str, size_t* __idx = 0, int __base = 10)
  { return __gnu_cxx::__stoa(&std::wcstoull, "stoull", __str.c_str(),
        __idx, __base); }


  inline float
  stof(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstof, "stof", __str.c_str(), __idx); }

  inline double
  stod(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstod, "stod", __str.c_str(), __idx); }

  inline long double
  stold(const wstring& __str, size_t* __idx = 0)
  { return __gnu_cxx::__stoa(&std::wcstold, "stold", __str.c_str(), __idx); }
# 6609 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3
}

}





# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\functional_hash.h" 1 3
# 33 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\functional_hash.h" 3
       
# 34 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\functional_hash.h" 3



namespace std
{

# 49 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\functional_hash.h" 3
  template<typename _Result, typename _Arg>
    struct __hash_base
    {
      typedef _Result result_type ;
      typedef _Arg argument_type ;
    };


  template<typename _Tp>
    struct hash;

  template<typename _Tp, typename = void>
    struct __poison_hash
    {
      static constexpr bool __enable_hash_call = false;
    private:

      __poison_hash(__poison_hash&&);
      ~__poison_hash();
    };

  template<typename _Tp>
    struct __poison_hash<_Tp, __void_t<decltype(hash<_Tp>()(declval<_Tp>()))>>
    {
      static constexpr bool __enable_hash_call = true;
    };


  template<typename _Tp, bool = is_enum<_Tp>::value>
    struct __hash_enum
    {
    private:

      __hash_enum(__hash_enum&&);
      ~__hash_enum();
    };


  template<typename _Tp>
    struct __hash_enum<_Tp, true> : public __hash_base<size_t, _Tp>
    {
      size_t
      operator()(_Tp __val) const noexcept
      {
       using __type = typename underlying_type<_Tp>::type;
       return hash<__type>{}(static_cast<__type>(__val));
      }
    };



  template<typename _Tp>
    struct hash : __hash_enum<_Tp>
    { };


  template<typename _Tp>
    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>
    {
      size_t
      operator()(_Tp* __p) const noexcept
      { return reinterpret_cast<size_t>(__p); }
    };
# 124 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\functional_hash.h" 3
  template<> struct hash<bool> : public __hash_base<size_t, bool> { size_t operator()(bool __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char> : public __hash_base<size_t, char> { size_t operator()(char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<signed char> : public __hash_base<size_t, signed char> { size_t operator()(signed char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned char> : public __hash_base<size_t, unsigned char> { size_t operator()(unsigned char __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<wchar_t> : public __hash_base<size_t, wchar_t> { size_t operator()(wchar_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char16_t> : public __hash_base<size_t, char16_t> { size_t operator()(char16_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<char32_t> : public __hash_base<size_t, char32_t> { size_t operator()(char32_t __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<short> : public __hash_base<size_t, short> { size_t operator()(short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<int> : public __hash_base<size_t, int> { size_t operator()(int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long> : public __hash_base<size_t, long> { size_t operator()(long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<long long> : public __hash_base<size_t, long long> { size_t operator()(long long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned short> : public __hash_base<size_t, unsigned short> { size_t operator()(unsigned short __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned int> : public __hash_base<size_t, unsigned int> { size_t operator()(unsigned int __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long> : public __hash_base<size_t, unsigned long> { size_t operator()(unsigned long __val) const noexcept { return static_cast<size_t>(__val); } };


  template<> struct hash<unsigned long long> : public __hash_base<size_t, unsigned long long> { size_t operator()(unsigned long long __val) const noexcept { return static_cast<size_t>(__val); } };
# 187 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\functional_hash.h" 3
  struct _Hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(0xc70f6907UL))
    { return _Hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  struct _Fnv_hash_impl
  {
    static size_t
    hash(const void* __ptr, size_t __clength,
  size_t __seed = static_cast<size_t>(2166136261UL))
    { return _Fnv_hash_bytes(__ptr, __clength, __seed); }

    template<typename _Tp>
      static size_t
      hash(const _Tp& __val)
      { return hash(&__val, sizeof(__val)); }

    template<typename _Tp>
      static size_t
      __hash_combine(const _Tp& __val, size_t __hash)
      { return hash(&__val, sizeof(__val), __hash); }
  };


  template<>
    struct hash<float> : public __hash_base<size_t, float>
    {
      size_t
      operator()(float __val) const noexcept
      {

 return __val != 0.0f ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<double> : public __hash_base<size_t, double>
    {
      size_t
      operator()(double __val) const noexcept
      {

 return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0;
      }
    };


  template<>
    struct hash<long double>
    : public __hash_base<size_t, long double>
    {
      __attribute__ ((__pure__)) size_t
      operator()(long double __val) const noexcept;
    };







  template<typename _Hash>
    struct __is_fast_hash : public std::true_type
    { };

  template<>
    struct __is_fast_hash<hash<long double>> : public std::false_type
    { };


}
# 6618 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 2 3

namespace std
{






  template<>
    struct hash<string>
    : public __hash_base<size_t, string>
    {
      size_t
      operator()(const string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(), __s.length()); }
    };

  template<>
    struct __is_fast_hash<hash<string>> : std::false_type
    { };



  template<>
    struct hash<wstring>
    : public __hash_base<size_t, wstring>
    {
      size_t
      operator()(const wstring& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(wchar_t)); }
    };

  template<>
    struct __is_fast_hash<hash<wstring>> : std::false_type
    { };





  template<>
    struct hash<u16string>
    : public __hash_base<size_t, u16string>
    {
      size_t
      operator()(const u16string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char16_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u16string>> : std::false_type
    { };


  template<>
    struct hash<u32string>
    : public __hash_base<size_t, u32string>
    {
      size_t
      operator()(const u32string& __s) const noexcept
      { return std::_Hash_impl::hash(__s.data(),
                                     __s.length() * sizeof(char32_t)); }
    };

  template<>
    struct __is_fast_hash<hash<u32string>> : std::false_type
    { };
# 6730 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.h" 3

}
# 53 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\string" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.tcc" 1 3
# 42 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.tcc" 3
       
# 43 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.tcc" 3



namespace std
{




  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s) noexcept
    {
      if (this == &__s)
 return;

      _Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator());

      if (_M_is_local())
 if (__s._M_is_local())
   {
     if (length() && __s.length())
       {
  _CharT __tmp_data[_S_local_capacity + 1];
  traits_type::copy(__tmp_data, __s._M_local_buf,
      _S_local_capacity + 1);
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      _S_local_capacity + 1);
  traits_type::copy(_M_local_buf, __tmp_data,
      _S_local_capacity + 1);
       }
     else if (__s.length())
       {
  traits_type::copy(_M_local_buf, __s._M_local_buf,
      _S_local_capacity + 1);
  _M_length(__s.length());
  __s._M_set_length(0);
  return;
       }
     else if (length())
       {
  traits_type::copy(__s._M_local_buf, _M_local_buf,
      _S_local_capacity + 1);
  __s._M_length(length());
  _M_set_length(0);
  return;
       }
   }
 else
   {
     const size_type __tmp_capacity = __s._M_allocated_capacity;
     traits_type::copy(__s._M_local_buf, _M_local_buf,
         _S_local_capacity + 1);
     _M_data(__s._M_data());
     __s._M_data(__s._M_local_buf);
     _M_capacity(__tmp_capacity);
   }
      else
 {
   const size_type __tmp_capacity = _M_allocated_capacity;
   if (__s._M_is_local())
     {
       traits_type::copy(_M_local_buf, __s._M_local_buf,
    _S_local_capacity + 1);
       __s._M_data(_M_data());
       _M_data(_M_local_buf);
     }
   else
     {
       pointer __tmp_ptr = _M_data();
       _M_data(__s._M_data());
       __s._M_data(__tmp_ptr);
       _M_capacity(__s._M_allocated_capacity);
     }
   __s._M_capacity(__tmp_capacity);
 }

      const size_type __tmp_length = length();
      _M_length(__s.length());
      __s._M_length(__tmp_length);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::pointer
    basic_string<_CharT, _Traits, _Alloc>::
    _M_create(size_type& __capacity, size_type __old_capacity)
    {


      if (__capacity > max_size())
 std::__throw_length_error(("basic_string::_M_create"));




      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 {
   __capacity = 2 * __old_capacity;

   if (__capacity > max_size())
     __capacity = max_size();
 }



      return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
    }





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::input_iterator_tag)
      {
 size_type __len = 0;
 size_type __capacity = size_type(_S_local_capacity);

 while (__beg != __end && __len < __capacity)
   {
     _M_data()[__len++] = *__beg;
     ++__beg;
   }

 try
   {
     while (__beg != __end)
       {
  if (__len == __capacity)
    {

      __capacity = __len + 1;
      pointer __another = _M_create(__capacity, __len);
      this->_S_copy(__another, _M_data(), __len);
      _M_dispose();
      _M_data(__another);
      _M_capacity(__capacity);
    }
  _M_data()[__len++] = *__beg;
  ++__beg;
       }
   }
 catch(...)
   {
     _M_dispose();
     throw;
   }

 _M_set_length(__len);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      void
      basic_string<_CharT, _Traits, _Alloc>::
      _M_construct(_InIterator __beg, _InIterator __end,
     std::forward_iterator_tag)
      {

 if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
   std::__throw_logic_error(("basic_string::" "_M_construct null not valid")
                                         );

 size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

 if (__dnew > size_type(_S_local_capacity))
   {
     _M_data(_M_create(__dnew, size_type(0)));
     _M_capacity(__dnew);
   }


 try
   { this->_S_copy_chars(_M_data(), __beg, __end); }
 catch(...)
   {
     _M_dispose();
     throw;
   }

 _M_set_length(__dnew);
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_construct(size_type __n, _CharT __c)
    {
      if (__n > size_type(_S_local_capacity))
 {
   _M_data(_M_create(__n, size_type(0)));
   _M_capacity(__n);
 }

      if (__n)
 this->_S_assign(_M_data(), __n, __c);

      _M_set_length(__n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_assign(const basic_string& __str)
    {
      if (this != &__str)
 {
   const size_type __rsize = __str.length();
   const size_type __capacity = capacity();

   if (__rsize > __capacity)
     {
       size_type __new_capacity = __rsize;
       pointer __tmp = _M_create(__new_capacity, __capacity);
       _M_dispose();
       _M_data(__tmp);
       _M_capacity(__new_capacity);
     }

   if (__rsize)
     this->_S_copy(_M_data(), __str._M_data(), __rsize);

   _M_set_length(__rsize);
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {

      if (__res < length())
 __res = length();

      const size_type __capacity = capacity();
      if (__res != __capacity)
 {
   if (__res > __capacity
       || __res > size_type(_S_local_capacity))
     {
       pointer __tmp = _M_create(__res, __capacity);
       this->_S_copy(__tmp, _M_data(), length() + 1);
       _M_dispose();
       _M_data(__tmp);
       _M_capacity(__res);
     }
   else if (!_M_is_local())
     {
       this->_S_copy(_M_local_data(), _M_data(), length() + 1);
       _M_destroy(__capacity);
       _M_data(_M_local_data());
     }
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,
       size_type __len2)
    {
      const size_type __how_much = length() - __pos - __len1;

      size_type __new_capacity = length() + __len2 - __len1;
      pointer __r = _M_create(__new_capacity, capacity());

      if (__pos)
 this->_S_copy(__r, _M_data(), __pos);
      if (__s && __len2)
 this->_S_copy(__r + __pos, __s, __len2);
      if (__how_much)
 this->_S_copy(__r + __pos + __len2,
        _M_data() + __pos + __len1, __how_much);

      _M_dispose();
      _M_data(__r);
      _M_capacity(__new_capacity);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_erase(size_type __pos, size_type __n)
    {
      const size_type __how_much = length() - __pos - __n;

      if (__how_much && __n)
 this->_S_move(_M_data() + __pos, _M_data() + __pos + __n, __how_much);

      _M_set_length(length() - __n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->_M_set_length(__n);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_append(const _CharT* __s, size_type __n)
    {
      const size_type __len = __n + this->size();

      if (__len <= this->capacity())
 {
   if (__n)
     this->_S_copy(this->_M_data() + this->size(), __s, __n);
 }
      else
 this->_M_mutate(this->size(), size_type(0), __s, __n);

      this->_M_set_length(__len);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(const_iterator __i1, const_iterator __i2,
     _InputIterator __k1, _InputIterator __k2,
     std::__false_type)
      {
 const basic_string __s(__k1, __k2);
 const size_type __n1 = __i2 - __i1;
 return _M_replace(__i1 - begin(), __n1, __s._M_data(),
     __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __n2 - __n1;

      if (__new_size <= this->capacity())
 {
   pointer __p = this->_M_data() + __pos1;

   const size_type __how_much = __old_size - __pos1 - __n1;
   if (__how_much && __n1 != __n2)
     this->_S_move(__p + __n2, __p + __n1, __how_much);
 }
      else
 this->_M_mutate(__pos1, __n1, 0, __n2);

      if (__n2)
 this->_S_assign(this->_M_data() + __pos1, __n2, __c);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace(size_type __pos, size_type __len1, const _CharT* __s,
        const size_type __len2)
    {
      _M_check_length(__len1, __len2, "basic_string::_M_replace");

      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;

      if (__new_size <= this->capacity())
 {
   pointer __p = this->_M_data() + __pos;

   const size_type __how_much = __old_size - __pos - __len1;
   if (_M_disjunct(__s))
     {
       if (__how_much && __len1 != __len2)
  this->_S_move(__p + __len2, __p + __len1, __how_much);
       if (__len2)
  this->_S_copy(__p, __s, __len2);
     }
   else
     {

       if (__len2 && __len2 <= __len1)
  this->_S_move(__p, __s, __len2);
       if (__how_much && __len1 != __len2)
  this->_S_move(__p + __len2, __p + __len1, __how_much);
       if (__len2 > __len1)
  {
    if (__s + __len2 <= __p + __len1)
      this->_S_move(__p, __s, __len2);
    else if (__s >= __p + __len1)
      this->_S_copy(__p, __s + __len2 - __len1, __len2);
    else
      {
        const size_type __nleft = (__p + __len1) - __s;
        this->_S_move(__p, __s, __nleft);
        this->_S_copy(__p + __nleft, __p + __len2,
        __len2 - __nleft);
      }
  }
     }
 }
      else
 this->_M_mutate(__pos, __len1, __s, __len2);

      this->_M_set_length(__new_size);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
      ;
      if (__n)
 _S_copy(__s, _M_data() + __pos, __n);

      return __n;
    }
# 1155 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.tcc" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      const size_type __size = this->size();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;
      if (__pos >= __size)
 return npos;

      const _CharT __elem0 = __s[0];
      const _CharT* const __data = data();
      const _CharT* __first = __data + __pos;
      const _CharT* const __last = __data + __size;
      size_type __len = __size - __pos;

      while (__len >= __n)
 {

   __first = traits_type::find(__first, __len - __n + 1, __elem0);
   if (!__first)
     return npos;



   if (traits_type::compare(__first, __s, __n) == 0)
     return __first - __data;
   __len = __last - ++__first;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const noexcept
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const noexcept
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    noexcept
    {
      ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const noexcept
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const noexcept
    {
      ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   try
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }
# 1607 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_string.tcc" 3
  extern template class basic_string<char>;







  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);



  extern template class basic_string<wchar_t>;





  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);




}
# 54 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\string" 2 3
# 10 "../../include/utils/shader.h" 2
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 1 3
# 36 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
       
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 1 3
# 36 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
       
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ios" 1 3
# 36 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ios" 3
       
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ios" 3





# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 1 3
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 3
       
# 38 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 3



# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 1 3
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
       
# 38 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3





namespace std
{

# 62 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
  class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;
# 98 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 117 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
    locale() throw();
# 126 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
    locale(const locale& __other) throw();
# 136 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
    explicit
    locale(const char* __s);
# 151 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
    locale(const locale& __base, const char* __s, category __cat);
# 162 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
    explicit
    locale(const std::string& __s) : locale(__s.c_str()) { }
# 177 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
    locale(const locale& __base, const std::string& __s, category __cat)
    : locale(__base, __s.c_str(), __cat) { }
# 192 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
    locale(const locale& __base, const locale& __add, category __cat);
# 205 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
    template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 219 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
    const locale&
    operator=(const locale& __other) throw();
# 234 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
    template<typename _Facet>
      locale
      combine(const locale& __other) const;






    __attribute ((__abi_tag__ ("cxx11")))
    string
    name() const;
# 254 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
    bool
    operator==(const locale& __other) const throw();







    bool
    operator!=(const locale& __other) const throw()
    { return !(this->operator==(__other)); }
# 282 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
    template<typename _Char, typename _Traits, typename _Alloc>
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 298 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
    static locale
    global(const locale& __loc);




    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 333 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
    enum { _S_categories_size = 6 + 0 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once() throw();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);


    static const id* const _S_twinned_facets[];

  };
# 371 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 402 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
    explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc) throw();

    static void
    _S_destroy_c_locale(__c_locale& __cloc);

    static __c_locale
    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);



    static __c_locale
    _S_get_c_locale();

    __attribute__ ((__const__)) static const char*
    _S_get_c_name() throw();
# 438 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
    facet(const facet&) = delete;

    facet&
    operator=(const facet&) = delete;


  private:
    void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() const throw()
    {

      ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
          ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    const facet* _M_sso_shim(const id*) const;
    const facet* _M_cow_shim(const id*) const;

  protected:
    class __shim;
  };
# 483 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const throw();
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() throw()
    {

      ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
          ;
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    template<typename _Facet>
      void
      _M_init_facet_unchecked(_Facet* __facet)
      {
 __facet->_M_add_reference();
 _M_facets[_Facet::id._M_id()] = __facet;
      }

    void
    _M_install_cache(const facet*, size_t);

    void _M_init_extra(facet**);
    void _M_init_extra(void*, void*, const char*, const char*);
  };
# 641 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
  template<typename _CharT>
    class __cxx11:: collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 668 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
      explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 682 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
      explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 699 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
      int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 718 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
      string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 732 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
      long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const throw();

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const throw();

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 761 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
      virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 775 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
      virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 788 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 3
      virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const throw();

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const throw();


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();



  template<typename _CharT>
    class __cxx11:: collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }


      explicit
      collate_byname(const string& __s, size_t __refs = 0)
      : collate_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~collate_byname() { }
    };


}

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.tcc" 1 3
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.tcc" 3
       
# 38 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.tcc" 3

namespace std
{


  template<typename _Facet>
    locale::
    locale(const locale& __other, _Facet* __f)
    {
      _M_impl = new _Impl(*__other._M_impl, 1);

      try
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      catch(...)
 {
   _M_impl->_M_remove_reference();
   throw;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }

  template<typename _Facet>
    locale
    locale::
    combine(const locale& __other) const
    {
      _Impl* __tmp = new _Impl(*_M_impl, 1);
      try
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      catch(...)
 {
   __tmp->_M_remove_reference();
   throw;
 }
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::
    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
        const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }
# 102 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.tcc" 3
  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw()
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      return (__i < __loc._M_impl->_M_facets_size

       && dynamic_cast<const _Facet*>(__facets[__i]));



    }
# 130 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.tcc" 3
  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc)
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
        __throw_bad_cast();

      return dynamic_cast<const _Facet&>(*__facets[__i]);



    }



  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw ()
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw ()
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {
      string_type __ret;


      const string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      _CharT* __c = new _CharT[__len];

      try
 {



   for (;;)
     {

       size_t __res = _M_transform(__c, __p, __len);


       if (__res >= __len)
  {
    __len = __res + 1;
    delete [] __c, __c = 0;
    __c = new _CharT[__len];
    __res = _M_transform(__c, __p, __len);
  }

       __ret.append(__c, __res);
       __p += char_traits<_CharT>::length(__p);
       if (__p == __pend)
  break;

       __p++;
       __ret.push_back(_CharT());
     }
 }
      catch(...)
 {
   delete [] __c;
   throw;
 }

      delete [] __c;

      return __ret;
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val =
   *__lo + ((__val << 7)
     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::
    __digits - 7)));
      return static_cast<long>(__val);
    }




  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);


  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);




}
# 852 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_classes.h" 2 3
# 42 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 2 3




# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\system_error" 1 3
# 32 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\system_error" 3
       
# 33 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\system_error" 3






# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\error_constants.h" 1 3
# 34 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\error_constants.h" 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cerrno" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cerrno" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cerrno" 3
# 35 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\error_constants.h" 2 3

namespace std
{




  enum class errc
    {




      argument_list_too_long = 7,
      argument_out_of_domain = 33,
      bad_address = 14,
      bad_file_descriptor = 9,

      broken_pipe = 32,






      device_or_resource_busy = 16,
      directory_not_empty = 41,
      executable_format_error = 8,
      file_exists = 17,
      file_too_large = 27,
      filename_too_long = 38,
      function_not_supported = 40,


      illegal_byte_sequence = 42,
      inappropriate_io_control_operation = 25,
      interrupted = 4,
      invalid_argument = 22,
      invalid_seek = 29,
      io_error = 5,
      is_a_directory = 21,






      no_child_process = 10,


      no_lock_available = 39,




      no_space_on_device = 28,


      no_such_device_or_address = 6,
      no_such_device = 19,
      no_such_file_or_directory = 2,
      no_such_process = 3,
      not_a_directory = 20,



      not_enough_memory = 12,






      operation_not_permitted = 1,






      permission_denied = 13,


      read_only_file_system = 30,
      resource_deadlock_would_occur = 36,
      resource_unavailable_try_again = 11,
      result_out_of_range = 34,






      too_many_files_open_in_system = 23,
      too_many_files_open = 24,
      too_many_links = 31






   };


}
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\system_error" 2 3

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\stdexcept" 1 3
# 36 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\stdexcept" 3
       
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\stdexcept" 3




namespace std
{





  struct __cow_string
  {
    union {
      const char* _M_p;
      char _M_bytes[sizeof(const char*)];
    };

    __cow_string();
    __cow_string(const std::string&);
    __cow_string(const char*, size_t);
    __cow_string(const __cow_string&) noexcept;
    __cow_string& operator=(const __cow_string&) noexcept;
    ~__cow_string();

    __cow_string(__cow_string&&) noexcept;
    __cow_string& operator=(__cow_string&&) noexcept;

  };

  typedef basic_string<char> __sso_string;
# 113 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\stdexcept" 3
  class logic_error : public exception
  {
    __cow_string _M_msg;

  public:

    explicit
    logic_error(const string& __arg) ;


    explicit
    logic_error(const char*) ;



    logic_error(const logic_error&) noexcept;
    logic_error& operator=(const logic_error&) noexcept;


    virtual ~logic_error() noexcept;



    virtual const char*
    what() const noexcept;





  };



  class domain_error : public logic_error
  {
  public:
    explicit domain_error(const string& __arg) ;

    explicit domain_error(const char*) ;

    virtual ~domain_error() noexcept;
  };


  class invalid_argument : public logic_error
  {
  public:
    explicit invalid_argument(const string& __arg) ;

    explicit invalid_argument(const char*) ;

    virtual ~invalid_argument() noexcept;
  };



  class length_error : public logic_error
  {
  public:
    explicit length_error(const string& __arg) ;

    explicit length_error(const char*) ;

    virtual ~length_error() noexcept;
  };



  class out_of_range : public logic_error
  {
  public:
    explicit out_of_range(const string& __arg) ;

    explicit out_of_range(const char*) ;

    virtual ~out_of_range() noexcept;
  };






  class runtime_error : public exception
  {
    __cow_string _M_msg;

  public:

    explicit
    runtime_error(const string& __arg) ;


    explicit
    runtime_error(const char*) ;



    runtime_error(const runtime_error&) noexcept;
    runtime_error& operator=(const runtime_error&) noexcept;


    virtual ~runtime_error() noexcept;



    virtual const char*
    what() const noexcept;





  };


  class range_error : public runtime_error
  {
  public:
    explicit range_error(const string& __arg) ;

    explicit range_error(const char*) ;

    virtual ~range_error() noexcept;
  };


  class overflow_error : public runtime_error
  {
  public:
    explicit overflow_error(const string& __arg) ;

    explicit overflow_error(const char*) ;

    virtual ~overflow_error() noexcept;
  };


  class underflow_error : public runtime_error
  {
  public:
    explicit underflow_error(const string& __arg) ;

    explicit underflow_error(const char*) ;

    virtual ~underflow_error() noexcept;
  };




}
# 42 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\system_error" 2 3

namespace std
{


  class error_code;
  class error_condition;
  class system_error;


  template<typename _Tp>
    struct is_error_code_enum : public false_type { };


  template<typename _Tp>
    struct is_error_condition_enum : public false_type { };

  template<>
    struct is_error_condition_enum<errc>
    : public true_type { };
# 71 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\system_error" 3
  inline namespace _V2 {


  class error_category
  {
  public:
    constexpr error_category() noexcept = default;

    virtual ~error_category();

    error_category(const error_category&) = delete;
    error_category& operator=(const error_category&) = delete;

    virtual const char*
    name() const noexcept = 0;






  private:
    __attribute ((__abi_tag__ ("cxx11")))
    virtual __cow_string
    _M_message(int) const;

  public:
    __attribute ((__abi_tag__ ("cxx11")))
    virtual string
    message(int) const = 0;
# 110 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\system_error" 3
  public:
    virtual error_condition
    default_error_condition(int __i) const noexcept;

    virtual bool
    equivalent(int __i, const error_condition& __cond) const noexcept;

    virtual bool
    equivalent(const error_code& __code, int __i) const noexcept;

    bool
    operator<(const error_category& __other) const noexcept
    { return less<const error_category*>()(this, &__other); }

    bool
    operator==(const error_category& __other) const noexcept
    { return this == &__other; }

    bool
    operator!=(const error_category& __other) const noexcept
    { return this != &__other; }
  };


  __attribute__ ((__const__)) const error_category& system_category() noexcept;
  __attribute__ ((__const__)) const error_category& generic_category() noexcept;

  }

  error_code make_error_code(errc) noexcept;

  template<typename _Tp>
    struct hash;



  struct error_code
  {
    error_code() noexcept
    : _M_value(0), _M_cat(&system_category()) { }

    error_code(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }

    template<typename _ErrorCodeEnum, typename = typename
      enable_if<is_error_code_enum<_ErrorCodeEnum>::value>::type>
      error_code(_ErrorCodeEnum __e) noexcept
      { *this = make_error_code(__e); }

    void
    assign(int __v, const error_category& __cat) noexcept
    {
      _M_value = __v;
      _M_cat = &__cat;
    }

    void
    clear() noexcept
    { assign(0, system_category()); }


    template<typename _ErrorCodeEnum>
      typename enable_if<is_error_code_enum<_ErrorCodeEnum>::value,
    error_code&>::type
      operator=(_ErrorCodeEnum __e) noexcept
      { return *this = make_error_code(__e); }

    int
    value() const noexcept { return _M_value; }

    const error_category&
    category() const noexcept { return *_M_cat; }

    error_condition
    default_error_condition() const noexcept;

    __attribute ((__abi_tag__ ("cxx11")))
    string
    message() const
    { return category().message(value()); }

    explicit operator bool() const noexcept
    { return _M_value != 0; }


  private:
    friend class hash<error_code>;

    int _M_value;
    const error_category* _M_cat;
  };


  inline error_code
  make_error_code(errc __e) noexcept
  { return error_code(static_cast<int>(__e), generic_category()); }

  inline bool
  operator<(const error_code& __lhs, const error_code& __rhs) noexcept
  {
    return (__lhs.category() < __rhs.category()
     || (__lhs.category() == __rhs.category()
  && __lhs.value() < __rhs.value()));
  }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)
    { return (__os << __e.category().name() << ':' << __e.value()); }

  error_condition make_error_condition(errc) noexcept;



  struct error_condition
  {
    error_condition() noexcept
    : _M_value(0), _M_cat(&generic_category()) { }

    error_condition(int __v, const error_category& __cat) noexcept
    : _M_value(__v), _M_cat(&__cat) { }

    template<typename _ErrorConditionEnum, typename = typename
  enable_if<is_error_condition_enum<_ErrorConditionEnum>::value>::type>
      error_condition(_ErrorConditionEnum __e) noexcept
      { *this = make_error_condition(__e); }

    void
    assign(int __v, const error_category& __cat) noexcept
    {
      _M_value = __v;
      _M_cat = &__cat;
    }


    template<typename _ErrorConditionEnum>
      typename enable_if<is_error_condition_enum
    <_ErrorConditionEnum>::value, error_condition&>::type
      operator=(_ErrorConditionEnum __e) noexcept
      { return *this = make_error_condition(__e); }

    void
    clear() noexcept
    { assign(0, generic_category()); }


    int
    value() const noexcept { return _M_value; }

    const error_category&
    category() const noexcept { return *_M_cat; }

    __attribute ((__abi_tag__ ("cxx11")))
    string
    message() const
    { return category().message(value()); }

    explicit operator bool() const noexcept
    { return _M_value != 0; }


  private:
    int _M_value;
    const error_category* _M_cat;
  };


  inline error_condition
  make_error_condition(errc __e) noexcept
  { return error_condition(static_cast<int>(__e), generic_category()); }

  inline bool
  operator<(const error_condition& __lhs,
     const error_condition& __rhs) noexcept
  {
    return (__lhs.category() < __rhs.category()
     || (__lhs.category() == __rhs.category()
  && __lhs.value() < __rhs.value()));
  }


  inline bool
  operator==(const error_code& __lhs, const error_code& __rhs) noexcept
  { return (__lhs.category() == __rhs.category()
     && __lhs.value() == __rhs.value()); }

  inline bool
  operator==(const error_code& __lhs, const error_condition& __rhs) noexcept
  {
    return (__lhs.category().equivalent(__lhs.value(), __rhs)
     || __rhs.category().equivalent(__lhs, __rhs.value()));
  }

  inline bool
  operator==(const error_condition& __lhs, const error_code& __rhs) noexcept
  {
    return (__rhs.category().equivalent(__rhs.value(), __lhs)
     || __lhs.category().equivalent(__rhs, __lhs.value()));
  }

  inline bool
  operator==(const error_condition& __lhs,
      const error_condition& __rhs) noexcept
  {
    return (__lhs.category() == __rhs.category()
     && __lhs.value() == __rhs.value());
  }

  inline bool
  operator!=(const error_code& __lhs, const error_code& __rhs) noexcept
  { return !(__lhs == __rhs); }

  inline bool
  operator!=(const error_code& __lhs, const error_condition& __rhs) noexcept
  { return !(__lhs == __rhs); }

  inline bool
  operator!=(const error_condition& __lhs, const error_code& __rhs) noexcept
  { return !(__lhs == __rhs); }

  inline bool
  operator!=(const error_condition& __lhs,
      const error_condition& __rhs) noexcept
  { return !(__lhs == __rhs); }







  class system_error : public std::runtime_error
  {
  private:
    error_code _M_code;

  public:
    system_error(error_code __ec = error_code())
    : runtime_error(__ec.message()), _M_code(__ec) { }

    system_error(error_code __ec, const string& __what)
    : runtime_error(__what + ": " + __ec.message()), _M_code(__ec) { }

    system_error(error_code __ec, const char* __what)
    : runtime_error(__what + (": " + __ec.message())), _M_code(__ec) { }

    system_error(int __v, const error_category& __ecat, const char* __what)
    : system_error(error_code(__v, __ecat), __what) { }

    system_error(int __v, const error_category& __ecat)
    : runtime_error(error_code(__v, __ecat).message()),
      _M_code(__v, __ecat) { }

    system_error(int __v, const error_category& __ecat, const string& __what)
    : runtime_error(__what + ": " + error_code(__v, __ecat).message()),
      _M_code(__v, __ecat) { }

    virtual ~system_error() noexcept;

    const error_code&
    code() const noexcept { return _M_code; }
  };


}



namespace std
{





  template<>
    struct hash<error_code>
    : public __hash_base<size_t, error_code>
    {
      size_t
      operator()(const error_code& __e) const noexcept
      {
 const size_t __tmp = std::_Hash_impl::hash(__e._M_value);
 return std::_Hash_impl::__hash_combine(__e._M_cat, __tmp);
      }
    };
# 414 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\system_error" 3

}
# 47 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 2 3


namespace std
{






  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16,
      _S_ios_fmtflags_max = 0x7fffffff,
      _S_ios_fmtflags_min = ~0x7fffffff
    };

  inline constexpr _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }

  inline const _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }

  inline const _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }

  inline const _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a ^ __b; }


  enum _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_ios_openmode_end = 1L << 16,
      _S_ios_openmode_max = 0x7fffffff,
      _S_ios_openmode_min = ~0x7fffffff
    };

  inline constexpr _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Openmode
  operator~(_Ios_Openmode __a)
  { return _Ios_Openmode(~static_cast<int>(__a)); }

  inline const _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a | __b; }

  inline const _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a & __b; }

  inline const _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a ^ __b; }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16,
      _S_ios_iostate_max = 0x7fffffff,
      _S_ios_iostate_min = ~0x7fffffff
    };

  inline constexpr _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline constexpr _Ios_Iostate
  operator~(_Ios_Iostate __a)
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  inline const _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a | __b; }

  inline const _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a & __b; }

  inline const _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a ^ __b; }


  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };



  enum class io_errc { stream = 1 };

  template <> struct is_error_code_enum<io_errc> : public true_type { };

  const error_category& iostream_category() noexcept;

  inline error_code
  make_error_code(io_errc __e) noexcept
  { return error_code(static_cast<int>(__e), iostream_category()); }

  inline error_condition
  make_error_condition(io_errc __e) noexcept
  { return error_condition(static_cast<int>(__e), iostream_category()); }
# 228 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 3
  class ios_base
  {
# 246 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 3
  public:
# 255 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 3
    class __attribute ((__abi_tag__ ("cxx11"))) failure : public system_error
    {
    public:
      explicit
      failure(const string& __str);


      explicit
      failure(const string&, const error_code&);

      explicit
      failure(const char*, const error_code& = io_errc::stream);


      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();
    };
# 323 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 3
    typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 398 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 3
    typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 429 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 3
    typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;




    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;
# 461 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 3
    typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;



    typedef int io_state;
    typedef int open_mode;
    typedef int seek_dir;

    typedef std::streampos streampos;
    typedef std::streamoff streamoff;
# 489 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 3
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 506 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 3
    typedef void (*event_callback) (event __e, ios_base& __b, int __i);
# 518 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 3
    void
    register_callback(event_callback __fn, int __index);

  protected:
    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;



    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }


      int
      _M_remove_reference()
      {

        ;
        int __res = __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1);
        if (__res == 0)
          {
            ;
          }
        return __res;
      }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void) throw();


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init() throw();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();

    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    fmtflags
    flags() const
    { return _M_flags; }
# 631 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 3
    fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 647 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 664 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    void
    unsetf(fmtflags __mask)
    { _M_flags &= ~__mask; }
# 690 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 3
    streamsize
    precision() const
    { return _M_precision; }






    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    streamsize
    width() const
    { return _M_width; }






    streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 741 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 3
    static bool
    sync_with_stdio(bool __sync = true);
# 753 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 3
    locale
    imbue(const locale& __loc) throw();
# 764 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 3
    locale
    getloc() const
    { return _M_ios_locale; }
# 775 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 3
    const locale&
    _M_getloc() const
    { return _M_ios_locale; }
# 794 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 3
    static int
    xalloc() throw();
# 810 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 3
    long&
    iword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 831 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 3
    void*&
    pword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 848 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 3
    virtual ~ios_base();

  protected:
    ios_base() throw ();
# 862 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ios_base.h" 3
  public:
    ios_base(const ios_base&) = delete;

    ios_base&
    operator=(const ios_base&) = delete;

  protected:
    void
    _M_move(ios_base&) noexcept;

    void
    _M_swap(ios_base& __rhs) noexcept;

  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }






  inline ios_base&
  hexfloat(ios_base& __base)
  {
    __base.setf(ios_base::fixed | ios_base::scientific, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  defaultfloat(ios_base& __base)
  {
    __base.unsetf(ios_base::floatfield);
    return __base;
  }



}
# 43 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ios" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 1 3
# 36 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
       
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
# 45 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
namespace std
{




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
     basic_streambuf<_CharT, _Traits>*, bool&);
# 121 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
  template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;




      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs_eof<>(basic_streambuf*, basic_streambuf*, bool&);

      template<bool _IsMove, typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
        __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
      istreambuf_iterator<_CharT2> >::__type
        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Distance>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            void>::__type
        advance(istreambuf_iterator<_CharT2>&, _Distance);

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:







      char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;


      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 215 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      locale
      pubimbue(const locale& __loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 232 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      locale
      getloc() const
      { return _M_buf_locale; }
# 245 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      basic_streambuf*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }
# 257 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }
# 269 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }




      int
      pubsync() { return this->sync(); }
# 290 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 304 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 322 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 344 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 363 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 378 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 403 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 430 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 456 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 470 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 488 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 504 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      void
      gbump(int __n) { _M_in_cur += __n; }
# 515 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 535 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 551 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      void
      pbump(int __n) { _M_out_cur += __n; }
# 561 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 582 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      virtual void
      imbue(const locale& __loc __attribute__ ((__unused__)))
      { }
# 597 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 608 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 620 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 633 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      virtual int
      sync() { return 0; }
# 655 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      virtual streamsize
      showmanyc() { return 0; }
# 671 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 693 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      virtual int_type
      underflow()
      { return traits_type::eof(); }
# 706 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 730 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      virtual int_type
      pbackfail(int_type __c __attribute__ ((__unused__)) = traits_type::eof())
      { return traits_type::eof(); }
# 748 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 774 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      virtual int_type
      overflow(int_type __c __attribute__ ((__unused__)) = traits_type::eof())
      { return traits_type::eof(); }



    public:
# 790 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 3
      [[__deprecated__("stossc is deprecated, use sbumpc instead")]]

      void
      stossc()
      {
 if (this->gptr() < this->egptr())
   this->gbump(1);
 else
   this->uflow();
      }



      void
      __safe_gbump(streamsize __n) { _M_in_cur += __n; }

      void
      __safe_pbump(streamsize __n) { _M_out_cur += __n; }




    protected:

      basic_streambuf(const basic_streambuf&);

      basic_streambuf&
      operator=(const basic_streambuf&);


      void
      swap(basic_streambuf& __sb)
      {
 std::swap(_M_in_beg, __sb._M_in_beg);
 std::swap(_M_in_cur, __sb._M_in_cur);
 std::swap(_M_in_end, __sb._M_in_end);
 std::swap(_M_out_beg, __sb._M_out_beg);
 std::swap(_M_out_cur, __sb._M_out_cur);
 std::swap(_M_out_end, __sb._M_out_end);
 std::swap(_M_buf_locale, __sb._M_buf_locale);
      }

    };


  template<typename _CharT, typename _Traits>
    std::basic_streambuf<_CharT, _Traits>::
    basic_streambuf(const basic_streambuf&) = default;

  template<typename _CharT, typename _Traits>
    std::basic_streambuf<_CharT, _Traits>&
    std::basic_streambuf<_CharT, _Traits>::
    operator=(const basic_streambuf&) = default;



  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>* __sbin,
     basic_streambuf<char>* __sbout, bool& __ineof);

  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,
     basic_streambuf<wchar_t>* __sbout, bool& __ineof);





}

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\streambuf.tcc" 1 3
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\streambuf.tcc" 3
       
# 38 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\streambuf.tcc" 3

namespace std
{


  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->__safe_gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->__safe_pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,
     basic_streambuf<_CharT, _Traits>* __sbout,
     bool& __ineof)
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     {
       __ineof = false;
       break;
     }
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    inline streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      bool __ineof;
      return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }




  extern template class basic_streambuf<char>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*,
        basic_streambuf<char>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>*,
     basic_streambuf<char>*, bool&);


  extern template class basic_streambuf<wchar_t>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*,
        basic_streambuf<wchar_t>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>*,
     basic_streambuf<wchar_t>*, bool&);




}
# 863 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\streambuf" 2 3
# 44 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ios" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_ios.h" 1 3
# 33 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_ios.h" 3
       
# 34 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_ios.h" 3



# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 1 3
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
       
# 38 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cwctype" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cwctype" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cwctype" 3
# 50 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cwctype" 3
# 1 "c:\\mingw\\include\\wctype.h" 1 3
# 33 "c:\\mingw\\include\\wctype.h" 3
       
# 34 "c:\\mingw\\include\\wctype.h" 3
# 191 "c:\\mingw\\include\\wctype.h" 3
typedef wchar_t wctrans_t;

extern "C" {
# 202 "c:\\mingw\\include\\wctype.h" 3
__attribute__((__cdecl__)) __attribute__((__nothrow__)) wint_t towctrans (wint_t, wctrans_t);
__attribute__((__cdecl__)) __attribute__((__nothrow__)) wctrans_t wctrans (const char*);
__attribute__((__cdecl__)) __attribute__((__nothrow__)) wctype_t wctype (const char*);

}
# 51 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cwctype" 2 3
# 80 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cwctype" 3
namespace std
{
  using ::wctrans_t;
  using ::wctype_t;
  using ::wint_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;
}
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cctype" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cctype" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cctype" 3
# 41 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\ctype_base.h" 1 3
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\ctype_base.h" 3
namespace std
{



  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = 1 << 0;
    static const mask lower = 1 << 1;
    static const mask alpha = 1 << 2;
    static const mask digit = 1 << 3;
    static const mask xdigit = 1 << 4;
    static const mask space = 1 << 5;
    static const mask print = 1 << 6;
    static const mask graph = (1 << 2) | (1 << 3) | (1 << 9);
    static const mask cntrl = 1 << 8;
    static const mask punct = 1 << 9;
    static const mask alnum = (1 << 2) | (1 << 3);

    static const mask blank = 1 << 10;

  };


}
# 42 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 2 3






# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\streambuf_iterator.h" 1 3
# 33 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\streambuf_iterator.h" 3
       
# 34 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\streambuf_iterator.h" 3




namespace std
{

# 49 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\streambuf_iterator.h" 3
  template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
        _CharT*,


        _CharT>



    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
        ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

      template<bool _IsMove, typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
        istreambuf_iterator<_CharT2> >::__type
 find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Distance>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            void>::__type
 advance(istreambuf_iterator<_CharT2>&, _Distance);

    private:







      mutable streambuf_type* _M_sbuf;
      int_type _M_c;

    public:

      constexpr istreambuf_iterator() noexcept
      : _M_sbuf(0), _M_c(traits_type::eof()) { }


      istreambuf_iterator(const istreambuf_iterator&) noexcept = default;

      ~istreambuf_iterator() = default;



      istreambuf_iterator(istream_type& __s) noexcept
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) noexcept
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }




      char_type
      operator*() const
      {
 int_type __c = _M_get();
# 139 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\streambuf_iterator.h" 3
 return traits_type::to_char_type(__c);
      }


      istreambuf_iterator&
      operator++()
      {



                        ;

 _M_sbuf->sbumpc();
 _M_c = traits_type::eof();
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {



                        ;

 istreambuf_iterator __old = *this;
 __old._M_c = _M_sbuf->sbumpc();
 _M_c = traits_type::eof();
 return __old;
      }





      bool
      equal(const istreambuf_iterator& __b) const
      { return _M_at_eof() == __b._M_at_eof(); }

    private:
      int_type
      _M_get() const
      {
 int_type __ret = _M_c;
 if (_M_sbuf && _S_is_eof(__ret) && _S_is_eof(__ret = _M_sbuf->sgetc()))
   _M_sbuf = 0;
 return __ret;
      }

      bool
      _M_at_eof() const
      { return _S_is_eof(_M_get()); }

      static bool
      _S_is_eof(int_type __c)
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(__c, __eof);
      }
    };

  template<typename _CharT, typename _Traits>
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }

  template<typename _CharT, typename _Traits>
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }


  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
        ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:

      ostreambuf_iterator(ostream_type& __s) noexcept
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) noexcept
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      bool
      failed() const noexcept
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    copy(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last,
  ostreambuf_iterator<_CharT> __result)
    {
      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
 {
   bool __ineof;
   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
   if (!__ineof)
     __result._M_failed = true;
 }
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(_CharT* __first, _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(const _CharT* __first, const _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT> __first,
     istreambuf_iterator<_CharT> __last, _CharT* __result)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof()))
     {
       const streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    traits_type::copy(__result, __sb->gptr(), __n);
    __sb->__safe_gbump(__n);
    __result += __n;
    __c = __sb->underflow();
  }
       else
  {
    *__result++ = traits_type::to_char_type(__c);
    __c = __sb->snextc();
  }
     }
 }
      return __result;
    }

  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
          istreambuf_iterator<_CharT> >::__type
    find(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last, const _CharT& __val)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;
      const int_type __eof = traits_type::eof();

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   const int_type __ival = traits_type::to_int_type(__val);
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, __eof)
   && !traits_type::eq_int_type(__c, __ival))
     {
       streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    const _CharT* __p = traits_type::find(__sb->gptr(),
       __n, __val);
    if (__p)
      __n = __p - __sb->gptr();
    __sb->__safe_gbump(__n);
    __c = __sb->sgetc();
  }
       else
  __c = __sb->snextc();
     }

   __first._M_c = __eof;
 }

      return __first;
    }

  template<typename _CharT, typename _Distance>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        void>::__type
    advance(istreambuf_iterator<_CharT>& __i, _Distance __n)
    {
      if (__n == 0)
 return;

      ;
     

                           ;

      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;
      const int_type __eof = traits_type::eof();

      streambuf_type* __sb = __i._M_sbuf;
      while (__n > 0)
 {
   streamsize __size = __sb->egptr() - __sb->gptr();
   if (__size > __n)
     {
       __sb->__safe_gbump(__n);
       break;
     }

   __sb->__safe_gbump(__size);
   __n -= __size;
   if (traits_type::eq_int_type(__sb->underflow(), __eof))
     {
      

                      ;
       break;
     }
 }

      __i._M_c = __eof;
    }




}
# 49 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 2 3

namespace std
{

# 71 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
  template<typename _Tp>
    void
    __convert_to_v(const char*, _Tp&, ios_base::iostate&,
     const __c_locale&) throw();


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&) throw();

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&) throw();



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }
# 149 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
  template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 168 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 185 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 201 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 217 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 231 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 246 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 260 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 275 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 292 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 311 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 330 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 352 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char* __to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 377 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 396 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 415 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 434 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 452 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const = 0;
# 469 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 485 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const = 0;
# 502 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 521 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const = 0;
# 542 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const = 0;
# 563 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const = 0;
# 588 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const = 0;
    };
# 611 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
  template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;
# 680 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
  template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 717 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 730 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 743 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      inline bool
      is(mask __m, char __c) const;
# 758 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 772 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 786 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 801 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 818 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 834 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 851 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 871 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 898 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 929 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 962 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char* __to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }





      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();
    protected:







      virtual
      ~ctype();
# 1011 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1028 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1044 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1061 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1081 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1104 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }
# 1130 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault __attribute__((__unused__))) const
      { return __c; }
# 1156 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault __attribute__((__unused__)), char* __to) const
      {
 __builtin_memcpy(__to, __lo, __hi - __lo);
 return __hi;
      }

    private:
      void _M_narrow_init() const;
      void _M_widen_init() const;
    };
# 1181 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
  template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1214 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      explicit
      ctype(size_t __refs = 0);
# 1225 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const throw();


      virtual
      ~ctype();
# 1249 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const;
# 1268 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1286 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1304 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1321 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual char_type
      do_toupper(char_type __c) const;
# 1338 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1354 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual char_type
      do_tolower(char_type __c) const;
# 1371 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1391 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const;
# 1413 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __to) const;
# 1436 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char __dfault) const;
# 1462 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __to) const;


      void
      _M_initialize_ctype() throw();
    };



  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef typename ctype<_CharT>::mask mask;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0)
      : ctype_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~ctype_byname() { }
    };


  template<>
    class ctype_byname<char> : public ctype<char>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0);


    protected:
      virtual
      ~ctype_byname();
    };


  template<>
    class ctype_byname<wchar_t> : public ctype<wchar_t>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);


      explicit
      ctype_byname(const string& __s, size_t __refs = 0);


    protected:
      virtual
      ~ctype_byname();
    };



}


# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\ctype_inline.h" 1 3
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\ctype_inline.h" 3
namespace std
{


  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return (_M_table[static_cast<unsigned char>(__c) ] & __m); }


  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high && !this->is(__m, *__low))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high && this->is(__m, *__low) != 0)
      ++__low;
    return __low;
  }


}
# 1535 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 2 3

namespace std
{



  class __num_base
  {
  public:


    enum
      {
 _S_ominus,
 _S_oplus,
 _S_ox,
 _S_oX,
 _S_odigits,
 _S_odigits_end = _S_odigits + 16,
 _S_oudigits = _S_odigits_end,
 _S_oudigits_end = _S_oudigits + 16,
 _S_oe = _S_odigits + 14,
 _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0)
      : facet(__refs), _M_grouping(0), _M_grouping_size(0),
 _M_use_grouping(false),
 _M_truename(0), _M_truename_size(0), _M_falsename(0),
 _M_falsename_size(0), _M_decimal_point(_CharT()),
 _M_thousands_sep(_CharT()), _M_allocated(false)
 { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }

namespace __cxx11 {
# 1665 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
  template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(); }
# 1703 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1717 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(0)
      { _M_initialize_numpunct(__cloc); }
# 1731 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1744 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1775 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1788 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      string_type
      truename() const
      { return this->do_truename(); }
# 1801 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1818 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1830 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1843 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1856 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1869 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = 0);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }


      explicit
      numpunct_byname(const string& __s, size_t __refs = 0)
      : numpunct_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~numpunct_byname() { }
    };

}


# 1947 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1968 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 1994 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2031 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2091 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2134 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      __attribute ((__abi_tag__ ("cxx11")))
      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string&) const;

      template<typename _ValueT>
 __attribute ((__abi_tag__ ("cxx11")))
 iter_type
 _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT&) const;

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type
 _M_find(const _CharT2*, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   if (__len <= 10)
     {
       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
  __ret = __c - _CharT2('0');
     }
   else
     {
       if (__c >= _CharT2('0') && __c <= _CharT2('9'))
  __ret = __c - _CharT2('0');
       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
  __ret = 10 + (__c - _CharT2('a'));
       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
  __ret = 10 + (__c - _CharT2('A'));
     }
   return __ret;
 }

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,
          int>::__type
 _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const
 {
   int __ret = -1;
   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
   if (__q)
     {
       __ret = __q - __zero;
       if (__ret > 15)
  __ret -= 6;
     }
   return __ret;
 }
# 2207 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned short& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned int& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      double&) const;







      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,
      long double&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, void*&) const;
# 2270 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
    };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2288 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2309 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2327 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2369 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __io, __fill, __v); }


      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2432 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
      { return this->do_put(__s, __io, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __io, __fill, __v); }
# 2457 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __io, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __io, __fill, __v); }

    protected:
      template<typename _ValueT>
 iter_type
 _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
 iter_type
 _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { }
# 2505 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 3
      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, double) const;






      virtual iter_type
      do_put(iter_type, ios_base&, char_type, long double) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type, const void*) const;







    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;









  template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }



  template<typename _CharT>
    inline bool
    isblank(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::blank, __c); }



  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }


}

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.tcc" 1 3
# 33 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.tcc" 3
       
# 34 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.tcc" 3

namespace std
{




  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = 0;
     try
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     catch(...)
       {
  delete __tmp;
  throw;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      char* __grouping = 0;
      _CharT* __truename = 0;
      _CharT* __falsename = 0;
      try
 {
   const string& __g = __np.grouping();
   _M_grouping_size = __g.size();
   __grouping = new char[_M_grouping_size];
   __g.copy(__grouping, _M_grouping_size);
   _M_use_grouping = (_M_grouping_size
        && static_cast<signed char>(__grouping[0]) > 0
        && (__grouping[0]
     != __gnu_cxx::__numeric_traits<char>::__max));

   const basic_string<_CharT>& __tn = __np.truename();
   _M_truename_size = __tn.size();
   __truename = new _CharT[_M_truename_size];
   __tn.copy(__truename, _M_truename_size);

   const basic_string<_CharT>& __fn = __np.falsename();
   _M_falsename_size = __fn.size();
   __falsename = new _CharT[_M_falsename_size];
   __fn.copy(__falsename, _M_falsename_size);

   _M_decimal_point = __np.decimal_point();
   _M_thousands_sep = __np.thousands_sep();

   const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
   __ct.widen(__num_base::_S_atoms_out,
       __num_base::_S_atoms_out
       + __num_base::_S_oend, _M_atoms_out);
   __ct.widen(__num_base::_S_atoms_in,
       __num_base::_S_atoms_in
       + __num_base::_S_iend, _M_atoms_in);

   _M_grouping = __grouping;
   _M_truename = __truename;
   _M_falsename = __falsename;
   _M_allocated = true;
 }
      catch(...)
 {
   delete [] __grouping;
   delete [] __truename;
   delete [] __falsename;
   throw;
 }
    }
# 139 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.tcc" 3
  __attribute__ ((__pure__)) bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp) throw ();



  template<typename _CharT, typename _InIter>
    __attribute ((__abi_tag__ ("cxx11")))
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __lit_zero = __lit + __num_base::_S_izero;

      if (!__lc->_M_allocated)

 while (!__testeof)
   {
     const int __digit = _M_find(__lit_zero, 10, __c);
     if (__digit != -1)
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if (__c == __lc->_M_decimal_point
       && !__found_dec && !__found_sci)
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ((__c == __lit[__num_base::_S_ie]
        || __c == __lit[__num_base::_S_iE])
       && !__found_sci && __found_mantissa)
       {

  __xtrc += 'e';
  __found_sci = true;


  if (++__beg != __end)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if (__plus || __c == __lit[__num_base::_S_iminus])
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }
      else
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {
  if (!__found_dec && !__found_sci)
    {


      if (__sep_pos)
        {
   __found_grouping += static_cast<char>(__sep_pos);
   __sep_pos = 0;
        }
      else
        {


   __xtrc.clear();
   break;
        }
    }
  else
    break;
       }
     else if (__c == __lc->_M_decimal_point)
       {
  if (!__found_dec && !__found_sci)
    {



      if (__found_grouping.size())
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type* __q =
    __traits_type::find(__lit_zero, 10, __c);
  if (__q)
    {
      __xtrc += '0' + (__q - __lit_zero);
      __found_mantissa = true;
      ++__sep_pos;
    }
  else if ((__c == __lit[__num_base::_S_ie]
     || __c == __lit[__num_base::_S_iE])
    && !__found_sci && __found_mantissa)
    {

      if (__found_grouping.size() && !__found_dec)
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += 'e';
      __found_sci = true;


      if (++__beg != __end)
        {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping
     && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err = ios_base::failbit;
        }

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      __attribute ((__abi_tag__ ("cxx11")))
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 typedef __gnu_cxx::__numeric_traits<_ValueT> __num_traits;
 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   (__negative && __num_traits::__is_signed)
   ? -static_cast<__unsigned_type>(__num_traits::__min)
   : __num_traits::__max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;

 if (!__lc->_M_allocated)

   while (!__testeof)
     {
       __digit = _M_find(__lit_zero, __len, __c);
       if (__digit == -1)
  break;

       if (__result > __smax)
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++__sep_pos;
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 else
   while (!__testeof)
     {


       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if (__c == __lc->_M_decimal_point)
  break;
       else
  {
    const char_type* __q =
      __traits_type::find(__lit_zero, __len, __c);
    if (!__q)
      break;

    __digit = __q - __lit_zero;
    if (__digit > 15)
      __digit -= 6;
    if (__result > __smax)
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++__sep_pos;
      }
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err = ios_base::failbit;
   }



 if ((!__sep_pos && !__found_zero && !__found_grouping.size())
     || __testfail)
   {
     __v = 0;
     __err = ios_base::failbit;
   }
 else if (__testoverflow)
   {
     if (__negative && __num_traits::__is_signed)
       __v = __num_traits::__min;
     else
       __v = __num_traits::__max;
     __err = ios_base::failbit;
   }
 else
   __v = __negative ? -__result : __result;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = bool(__l);
   else
     {


       __v = true;
       __err = ios_base::failbit;
       if (__beg == __end)
  __err |= ios_base::eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc->_M_falsename_size == 0;
   bool __donet = __lc->_M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while (!__donef || !__donet)
     {
       if (__beg == __end)
  {
    __testeof = true;
    break;
  }

       const char_type __c = *__beg;

       if (!__donef)
  __testf = __c == __lc->_M_falsename[__n];

       if (!__testf && __donet)
  break;

       if (!__donet)
  __testt = __c == __lc->_M_truename[__n];

       if (!__testt && __donef)
  break;

       if (!__testt && !__testf)
  break;

       ++__n;
       ++__beg;

       __donef = !__testf || __n >= __lc->_M_falsename_size;
       __donet = !__testt || __n >= __lc->_M_truename_size;
     }
   if (__testf && __n == __lc->_M_falsename_size && __n)
     {
       __v = false;
       if (__testt && __n == __lc->_M_truename_size)
  __err = ios_base::failbit;
       else
  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else if (__testt && __n == __lc->_M_truename_size && __n)
     {
       __v = true;
       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base::failbit;
       if (__testeof)
  __err |= ios_base::eofbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }
# 735 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);

      typedef __gnu_cxx::__conditional_type<(sizeof(void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,
        __cs, __w, __len);
      __len = static_cast<int>(__w);
    }



  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool __dec)
    {
      _CharT* __buf = __bufend;
      if (__builtin_expect(__dec, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if ((__flags & ios_base::basefield) == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 const bool __dec = (__basefield != ios_base::oct
       && __basefield != ios_base::hex);
 const __unsigned_type __u = ((__v > 0 || !__dec)
         ? __unsigned_type(__v)
         : -__unsigned_type(__v));
  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 if (__builtin_expect(__dec, true))
   {

     if (__v >= 0)
       {
  if (bool(__flags & ios_base::showpos)
      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (bool(__flags & ios_base::showbase) && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 971 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();

 const int __max_digits =
   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;


 int __len;

 char __fbuf[16];
 __num_base::_S_format_float(__io, __fbuf, __mod);



 const bool __use_prec =
   (__io.flags() & ios_base::floatfield) != ios_base::floatfield;



 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
 if (__use_prec)
   __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
     __fbuf, __prec, __v);
 else
   __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
     __fbuf, __v);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     if (__use_prec)
       __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
         __fbuf, __prec, __v);
     else
       __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
         __fbuf, __v);
   }
# 1044 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 _CharT* __wp = 0;
 const char* __p = char_traits<char>::find(__cs, __len, '.');
 if (__p)
   {
     __wp = __ws + (__p - __cs);
     *__wp = __lc->_M_decimal_point;
   }




 if (__lc->_M_use_grouping
     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
          && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       const streamsize __plen = __w - __len;
       _CharT* __ps
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __plen));

       char_traits<_CharT>::assign(__ps, __plen, __fill);
       __io.width(0);

       if ((__flags & ios_base::adjustfield) == ios_base::left)
  {
    __s = std::__write(__s, __name, __len);
    __s = std::__write(__s, __ps, __plen);
  }
       else
  {
    __s = std::__write(__s, __ps, __plen);
    __s = std::__write(__s, __name, __len);
  }
       return __s;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }
# 1169 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase);
      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));

      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<_UIntPtrType>(__v));
      __io.flags(__flags);
      return __s;
    }


# 1206 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.tcc" 3
  template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       streamsize __newlen, streamsize __oldlen)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, __olds, __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   if (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0])
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }
   else if (__ctype.widen('0') == __olds[0]
     && __oldlen > 1
     && (__ctype.widen('x') == __olds[1]
         || __ctype.widen('X') == __olds[1]))
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
      && static_cast<signed char>(__gbeg[__idx]) > 0
      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
 {
   __last -= __gbeg[__idx];
   __idx < __gsize - 1 ? ++__idx : ++__ctr;
 }

      while (__first != __last)
 *__s++ = *__first++;

      while (__ctr--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      while (__idx--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      return __s;
    }




  extern template class __cxx11:: numpunct<char>;
  extern template class __cxx11:: numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class ctype_byname<char>;

  extern template
    const ctype<char>&
    use_facet<ctype<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);


  extern template class __cxx11:: numpunct<wchar_t>;
  extern template class __cxx11:: numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;

  extern template
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

 extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);




}
# 2652 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\locale_facets.h" 2 3
# 38 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_ios.h" 2 3



namespace std
{


  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
# 66 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_ios.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {
    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;






      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:
# 117 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_ios.h" 3
      explicit operator bool() const
      { return !this->fail(); }





      bool
      operator!() const
      { return this->fail(); }
# 136 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_ios.h" 3
      iostate
      rdstate() const
      { return _M_streambuf_state; }
# 147 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_ios.h" 3
      void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
   throw;
      }







      bool
      good() const
      { return this->rdstate() == 0; }







      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 200 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_ios.h" 3
      bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 221 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_ios.h" 3
      iostate
      exceptions() const
      { return _M_exception; }
# 256 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_ios.h" 3
      void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 294 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 306 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 346 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_ios.h" 3
      basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 360 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_ios.h" 3
      basic_ios&
      copyfmt(const basic_ios& __rhs);







      char_type
      fill() const
      {
 if (!_M_fill_init)
   {
     _M_fill = this->widen(' ');
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 389 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_ios.h" 3
      char_type
      fill(char_type __ch)
      {
 char_type __old = this->fill();
 _M_fill = __ch;
 return __old;
      }
# 409 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_ios.h" 3
      locale
      imbue(const locale& __loc);
# 429 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_ios.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return __check_facet(_M_ctype).narrow(__c, __dfault); }
# 448 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_ios.h" 3
      char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
 _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);


      basic_ios(const basic_ios&) = delete;
      basic_ios& operator=(const basic_ios&) = delete;

      void
      move(basic_ios& __rhs)
      {
 ios_base::_M_move(__rhs);
 _M_cache_locale(_M_ios_locale);
 this->tie(__rhs.tie(nullptr));
 _M_fill = __rhs._M_fill;
 _M_fill_init = __rhs._M_fill_init;
 _M_streambuf = nullptr;
      }

      void
      move(basic_ios&& __rhs)
      { this->move(__rhs); }

      void
      swap(basic_ios& __rhs) noexcept
      {
 ios_base::_M_swap(__rhs);
 _M_cache_locale(_M_ios_locale);
 __rhs._M_cache_locale(__rhs._M_ios_locale);
 std::swap(_M_tie, __rhs._M_tie);
 std::swap(_M_fill, __rhs._M_fill);
 std::swap(_M_fill_init, __rhs._M_fill_init);
      }

      void
      set_rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
      { _M_streambuf = __sb; }


      void
      _M_cache_locale(const locale& __loc);
    };


}

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_ios.tcc" 1 3
# 33 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_ios.tcc" 3
       
# 34 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_ios.tcc" 3

namespace std
{


  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != &__rhs)
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 146 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_ios.tcc" 3
      _M_fill = _CharT();
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))
 _M_ctype = std::__addressof(use_facet<__ctype_type>(__loc));
      else
 _M_ctype = 0;

      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))
 _M_num_put = std::__addressof(use_facet<__num_put_type>(__loc));
      else
 _M_num_put = 0;

      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))
 _M_num_get = std::__addressof(use_facet<__num_get_type>(__loc));
      else
 _M_num_get = 0;
    }




  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;




}
# 517 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\basic_ios.h" 2 3
# 45 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ios" 2 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ostream" 1 3
# 36 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ostream" 3
       
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ostream" 3




namespace std
{

# 57 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ostream" 3
  template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
             __num_put_type;
      typedef ctype<_CharT> __ctype_type;
# 83 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ostream" 3
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 107 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ostream" 3
      __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      {



 return __pf(*this);
      }

      __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&))
      {



 __pf(*this);
 return *this;
      }

      __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&))
      {



 __pf(*this);
 return *this;
      }
# 165 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ostream" 3
      __ostream_type&
      operator<<(long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(bool __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }


      __ostream_type&
      operator<<(long long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long long __n)
      { return _M_insert(__n); }
# 219 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ostream" 3
      __ostream_type&
      operator<<(double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(float __f)
      {


 return _M_insert(static_cast<double>(__f));
      }

      __ostream_type&
      operator<<(long double __f)
      { return _M_insert(__f); }
# 244 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ostream" 3
      __ostream_type&
      operator<<(const void* __p)
      { return _M_insert(__p); }
# 269 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ostream" 3
      __ostream_type&
      operator<<(__streambuf_type* __sb);
# 302 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ostream" 3
      __ostream_type&
      put(char_type __c);






      void
      _M_write(const char_type* __s, streamsize __n)
      {
 const streamsize __put = this->rdbuf()->sputn(__s, __n);
 if (__put != __n)
   this->setstate(ios_base::badbit);
      }
# 334 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ostream" 3
      __ostream_type&
      write(const char_type* __s, streamsize __n);
# 347 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ostream" 3
      __ostream_type&
      flush();
# 357 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ostream" 3
      pos_type
      tellp();
# 368 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ostream" 3
      __ostream_type&
      seekp(pos_type);
# 380 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ostream" 3
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }



      basic_ostream(basic_iostream<_CharT, _Traits>&) { }

      basic_ostream(const basic_ostream&) = delete;

      basic_ostream(basic_ostream&& __rhs)
      : __ios_type()
      { __ios_type::move(__rhs); }



      basic_ostream& operator=(const basic_ostream&) = delete;

      basic_ostream&
      operator=(basic_ostream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_ostream& __rhs)
      { __ios_type::swap(__rhs); }


      template<typename _ValueT>
 __ostream_type&
 _M_insert(_ValueT __v);
    };
# 425 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ostream" 3
  template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT, _Traits>& _M_os;

    public:
# 444 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ostream" 3
      explicit
      sentry(basic_ostream<_CharT, _Traits>& __os);
# 454 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ostream" 3
      ~sentry()
      {

 if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
   {

     if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
       _M_os.setstate(ios_base::badbit);
   }
      }
# 473 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ostream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 495 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    { return __ostream_insert(__out, &__c, 1); }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template <class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    { return __ostream_insert(__out, &__c, 1); }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 537 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 588 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }
# 600 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }


  template<typename _Ch, typename _Up>
    basic_ostream<_Ch, _Up>&
    __is_convertible_to_basic_ostream_test(basic_ostream<_Ch, _Up>*);

  template<typename _Tp, typename = void>
    struct __is_convertible_to_basic_ostream_impl
    {
      using __ostream_type = void;
    };

  template<typename _Tp>
    using __do_is_convertible_to_basic_ostream_impl =
    decltype(__is_convertible_to_basic_ostream_test
      (declval<typename remove_reference<_Tp>::type*>()));

  template<typename _Tp>
    struct __is_convertible_to_basic_ostream_impl
    <_Tp,
     __void_t<__do_is_convertible_to_basic_ostream_impl<_Tp>>>
    {
      using __ostream_type =
 __do_is_convertible_to_basic_ostream_impl<_Tp>;
    };

  template<typename _Tp>
    struct __is_convertible_to_basic_ostream
    : __is_convertible_to_basic_ostream_impl<_Tp>
    {
    public:
      using type = __not_<is_void<
        typename __is_convertible_to_basic_ostream_impl<_Tp>::__ostream_type>>;
      constexpr static bool value = type::value;
    };

  template<typename _Ostream, typename _Tp, typename = void>
    struct __is_insertable : false_type {};

  template<typename _Ostream, typename _Tp>
    struct __is_insertable<_Ostream, _Tp,
      __void_t<decltype(declval<_Ostream&>()
          << declval<const _Tp&>())>>
        : true_type {};

  template<typename _Ostream>
    using __rvalue_ostream_type =
      typename __is_convertible_to_basic_ostream<
 _Ostream>::__ostream_type;
# 674 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ostream" 3
  template<typename _Ostream, typename _Tp>
    inline
    typename enable_if<__and_<__not_<is_lvalue_reference<_Ostream>>,
         __is_convertible_to_basic_ostream<_Ostream>,
         __is_insertable<
    __rvalue_ostream_type<_Ostream>,
    const _Tp&>>::value,
         __rvalue_ostream_type<_Ostream>>::type
    operator<<(_Ostream&& __os, const _Tp& __x)
    {
      __rvalue_ostream_type<_Ostream> __ret_os = __os;
      __ret_os << __x;
      return __ret_os;
    }



}

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ostream.tcc" 1 3
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ostream.tcc" 3
       
# 38 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\ostream.tcc" 3



namespace std
{


  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_ostream<_CharT, _Traits>&
      basic_ostream<_CharT, _Traits>::
      _M_insert(_ValueT __v)
      {
 sentry __cerb(*this);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {
  const __num_put_type& __np = __check_facet(this->_M_num_put);
  if (__np.put(*this, *this, this->fill(), __v).failed())
    __err |= ios_base::badbit;
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   try
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   try
     { _M_write(__s, __n); }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {



      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
     __err |= ios_base::badbit;
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      pos_type __ret = pos_type(-1);
      try
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 {


   const size_t __clen = char_traits<char>::length(__s);
   try
     {
       struct __ptr_guard
       {
  _CharT *__p;
  __ptr_guard (_CharT *__ip): __p(__ip) { }
  ~__ptr_guard() { delete[] __p; }
  _CharT* __get() { return __p; }
       } __pg (new _CharT[__clen]);

       _CharT *__ws = __pg.__get();
       for (size_t __i = 0; __i < __clen; ++__i)
  __ws[__i] = __out.widen(__s[__i]);
       __ostream_insert(__out, __ws, __clen);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }




  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);

  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);

  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);

  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);

  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);

  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);

  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);




}
# 694 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\ostream" 2 3
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 2 3

namespace std
{

# 57 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

    protected:





      streamsize _M_gcount;

    public:







      explicit
      basic_istream(__streambuf_type* __sb)
      : _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 119 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
      __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&))
      { return __pf(*this); }

      __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&))
      {
 __pf(*this);
 return *this;
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
 __pf(*this);
 return *this;
      }
# 167 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
      __istream_type&
      operator>>(bool& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(long long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long long& __n)
      { return _M_extract(__n); }
# 213 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(long double& __f)
      { return _M_extract(__f); }
# 234 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
      __istream_type&
      operator>>(void*& __p)
      { return _M_extract(__p); }
# 258 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
      __istream_type&
      operator>>(__streambuf_type* __sb);
# 268 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
      streamsize
      gcount() const
      { return _M_gcount; }
# 301 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
      int_type
      get();
# 315 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
      __istream_type&
      get(char_type& __c);
# 342 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 353 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 376 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
      __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 386 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
      __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 415 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 426 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 450 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
      __istream_type&
      ignore(streamsize __n, int_type __delim);

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore();
# 467 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
      int_type
      peek();
# 485 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
      __istream_type&
      read(char_type* __s, streamsize __n);
# 504 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
      streamsize
      readsome(char_type* __s, streamsize __n);
# 521 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
      __istream_type&
      putback(char_type __c);
# 537 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
      __istream_type&
      unget();
# 555 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
      int
      sync();
# 570 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
      pos_type
      tellg();
# 585 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
      __istream_type&
      seekg(pos_type);
# 601 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
      __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      basic_istream()
      : _M_gcount(streamsize(0))
      { this->init(0); }


      basic_istream(const basic_istream&) = delete;

      basic_istream(basic_istream&& __rhs)
      : __ios_type(), _M_gcount(__rhs._M_gcount)
      {
 __ios_type::move(__rhs);
 __rhs._M_gcount = 0;
      }



      basic_istream& operator=(const basic_istream&) = delete;

      basic_istream&
      operator=(basic_istream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_istream& __rhs)
      {
 __ios_type::swap(__rhs);
 std::swap(_M_gcount, __rhs._M_gcount);
      }


      template<typename _ValueT>
 __istream_type&
 _M_extract(_ValueT& __v);
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 685 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {

      bool _M_ok;

    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 721 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
      explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 732 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
      explicit

      operator bool() const
      { return _M_ok; }
    };
# 750 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }
# 792 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);


  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __in, char* __s);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }
# 823 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
  template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(__sb), __ostream_type(__sb) { }




      virtual
      ~basic_iostream() { }

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }


      basic_iostream(const basic_iostream&) = delete;

      basic_iostream(basic_iostream&& __rhs)
      : __istream_type(std::move(__rhs)), __ostream_type(*this)
      { }



      basic_iostream& operator=(const basic_iostream&) = delete;

      basic_iostream&
      operator=(basic_iostream&& __rhs)
      {
 swap(__rhs);
 return *this;
      }

      void
      swap(basic_iostream& __rhs)
      { __istream_type::swap(__rhs); }

    };
# 906 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);


  template<typename _Ch, typename _Up>
    basic_istream<_Ch, _Up>&
    __is_convertible_to_basic_istream_test(basic_istream<_Ch, _Up>*);

  template<typename _Tp, typename = void>
    struct __is_convertible_to_basic_istream_impl
    {
      using __istream_type = void;
    };

  template<typename _Tp>
    using __do_is_convertible_to_basic_istream_impl =
    decltype(__is_convertible_to_basic_istream_test
      (declval<typename remove_reference<_Tp>::type*>()));

  template<typename _Tp>
    struct __is_convertible_to_basic_istream_impl
    <_Tp,
     __void_t<__do_is_convertible_to_basic_istream_impl<_Tp>>>
    {
      using __istream_type =
 __do_is_convertible_to_basic_istream_impl<_Tp>;
    };

  template<typename _Tp>
    struct __is_convertible_to_basic_istream
    : __is_convertible_to_basic_istream_impl<_Tp>
    {
    public:
      using type = __not_<is_void<
        typename __is_convertible_to_basic_istream_impl<_Tp>::__istream_type>>;
      constexpr static bool value = type::value;
    };

  template<typename _Istream, typename _Tp, typename = void>
    struct __is_extractable : false_type {};

  template<typename _Istream, typename _Tp>
    struct __is_extractable<_Istream, _Tp,
       __void_t<decltype(declval<_Istream&>()
           >> declval<_Tp>())>>
    : true_type {};

  template<typename _Istream>
    using __rvalue_istream_type =
      typename __is_convertible_to_basic_istream<
 _Istream>::__istream_type;
# 972 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 3
  template<typename _Istream, typename _Tp>
    inline
    typename enable_if<__and_<__not_<is_lvalue_reference<_Istream>>,
         __is_convertible_to_basic_istream<_Istream>,
         __is_extractable<
    __rvalue_istream_type<_Istream>,
    _Tp&&>>::value,
         __rvalue_istream_type<_Istream>>::type
    operator>>(_Istream&& __is, _Tp&& __x)
    {
      __rvalue_istream_type<_Istream> __ret_is = __is;
      __ret_is >> std::forward<_Tp>(__x);
      return __ret_is;
    }



}

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\istream.tcc" 1 3
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\istream.tcc" 3
       
# 38 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\istream.tcc" 3



namespace std
{


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::goodbit;
      if (__in.good())
 try
   {
     if (__in.tie())
       __in.tie()->flush();
     if (!__noskip && bool(__in.flags() & ios_base::skipws))
       {
  const __int_type __eof = traits_type::eof();
  __streambuf_type* __sb = __in.rdbuf();
  __int_type __c = __sb->sgetc();

  const __ctype_type& __ct = __check_facet(__in._M_ctype);
  while (!traits_type::eq_int_type(__c, __eof)
         && __ct.is(ctype_base::space,
      traits_type::to_char_type(__c)))
    __c = __sb->snextc();




  if (traits_type::eq_int_type(__c, __eof))
    __err |= ios_base::eofbit;
       }
   }
 catch(__cxxabiv1::__forced_unwind&)
   {
     __in._M_setstate(ios_base::badbit);
     throw;
   }
 catch(...)
   { __in._M_setstate(ios_base::badbit); }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_istream<_CharT, _Traits>&
      basic_istream<_CharT, _Traits>::
      _M_extract(_ValueT& __v)
      {
 sentry __cerb(*this, false);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::goodbit;
     try
       {
  const __num_get_type& __ng = __check_facet(this->_M_num_get);
  __ng.get(*this, 0, *this, __err, __v);
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<short>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<short>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<short>::__max;
  }
       else
  __n = short(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {


      sentry __cerb(*this, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       long __l;
       const __num_get_type& __ng = __check_facet(this->_M_num_get);
       __ng.get(*this, 0, *this, __err, __l);



       if (__l < __gnu_cxx::__numeric_traits<int>::__min)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__min;
  }
       else if (__l > __gnu_cxx::__numeric_traits<int>::__max)
  {
    __err |= ios_base::failbit;
    __n = __gnu_cxx::__numeric_traits<int>::__max;
  }
       else
  __n = int(__l);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   try
     {
       bool __ineof;
       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
  __err |= ios_base::failbit;
       if (__ineof)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::failbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++_M_gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::goodbit;
      sentry __cerb(*this, true);
      if (__cerb)
        {
          try
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 521 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\istream.tcc" 3
       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

       if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::goodbit;
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
       else if (traits_type::eq_int_type(__c, __delim))
  {
    if (_M_gcount
        < __gnu_cxx::__numeric_traits<streamsize>::__max)
      ++_M_gcount;
    __sb->sbumpc();
  }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;

      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       if (!this->fail())
  __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,
        ios_base::in);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekpos(__pos,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {



      this->clear(this->rdstate() & ~ios_base::eofbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       if (!this->fail())
  {

    const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
         ios_base::in);


    if (__p == pos_type(off_type(-1)))
      __err |= ios_base::failbit;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::goodbit;
   try
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       streamsize __num = __in.width();
       if (__num <= 0)
  __num = __gnu_cxx::__numeric_traits<streamsize>::__max;

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }
       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename __istream_type::int_type __int_type;
      typedef ctype<_CharT> __ctype_type;

      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
      const __int_type __eof = _Traits::eof();
      __streambuf_type* __sb = __in.rdbuf();
      __int_type __c = __sb->sgetc();

      while (!_Traits::eq_int_type(__c, __eof)
      && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
 __c = __sb->snextc();

       if (_Traits::eq_int_type(__c, __eof))
  __in.setstate(ios_base::eofbit);
      return __in;
    }




  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, char*);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);
  extern template istream& operator>>(istream&, unsigned char*);
  extern template istream& operator>>(istream&, signed char*);

  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);

  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);

  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template wistream& operator>>(wistream&, wchar_t*);

  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);

  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);

  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);

  extern template class basic_iostream<wchar_t>;




}
# 992 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\istream" 2 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 2 3

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\codecvt.h" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\codecvt.h" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\codecvt.h" 3

namespace std
{



  class codecvt_base
  {
  public:
    enum result
    {
      ok,
      partial,
      error,
      noconv
    };
  };
# 67 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\codecvt.h" 3
  template<typename _InternT, typename _ExternT, typename _StateT>
    class __codecvt_abstract_base
    : public locale::facet, public codecvt_base
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;
# 115 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\codecvt.h" 3
      result
      out(state_type& __state, const intern_type* __from,
   const intern_type* __from_end, const intern_type*& __from_next,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const
      {
 return this->do_out(__state, __from, __from_end, __from_next,
       __to, __to_end, __to_next);
      }
# 154 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\codecvt.h" 3
      result
      unshift(state_type& __state, extern_type* __to, extern_type* __to_end,
       extern_type*& __to_next) const
      { return this->do_unshift(__state, __to,__to_end,__to_next); }
# 195 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\codecvt.h" 3
      result
      in(state_type& __state, const extern_type* __from,
  const extern_type* __from_end, const extern_type*& __from_next,
  intern_type* __to, intern_type* __to_end,
  intern_type*& __to_next) const
      {
 return this->do_in(__state, __from, __from_end, __from_next,
      __to, __to_end, __to_next);
      }

      int
      encoding() const throw()
      { return this->do_encoding(); }

      bool
      always_noconv() const throw()
      { return this->do_always_noconv(); }

      int
      length(state_type& __state, const extern_type* __from,
      const extern_type* __end, size_t __max) const
      { return this->do_length(__state, __from, __end, __max); }

      int
      max_length() const throw()
      { return this->do_max_length(); }

    protected:
      explicit
      __codecvt_abstract_base(size_t __refs = 0) : locale::facet(__refs) { }

      virtual
      ~__codecvt_abstract_base() { }
# 236 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\codecvt.h" 3
      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const = 0;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const = 0;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const = 0;

      virtual int
      do_encoding() const throw() = 0;

      virtual bool
      do_always_noconv() const throw() = 0;

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const = 0;

      virtual int
      do_max_length() const throw() = 0;
    };
# 273 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\codecvt.h" 3
   template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt
    : public __codecvt_abstract_base<_InternT, _ExternT, _StateT>
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0)
      : __codecvt_abstract_base<_InternT, _ExternT, _StateT> (__refs),
 _M_c_locale_codecvt(0)
      { }

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt() { }

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };

  template<typename _InternT, typename _ExternT, typename _StateT>
    locale::id codecvt<_InternT, _ExternT, _StateT>::id;


  template<>
    class codecvt<char, char, mbstate_t>
    : public __codecvt_abstract_base<char, char, mbstate_t>
    {
      friend class messages<char>;

    public:

      typedef char intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
  };






  template<>
    class codecvt<wchar_t, char, mbstate_t>
    : public __codecvt_abstract_base<wchar_t, char, mbstate_t>
    {
      friend class messages<wchar_t>;

    public:

      typedef wchar_t intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state,
      const extern_type* __from, const extern_type* __from_end,
      const extern_type*& __from_next,
      intern_type* __to, intern_type* __to_end,
      intern_type*& __to_next) const;

      virtual
      int do_encoding() const throw();

      virtual
      bool do_always_noconv() const throw();

      virtual
      int do_length(state_type&, const extern_type* __from,
      const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };
# 467 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\codecvt.h" 3
  template<>
    class codecvt<char16_t, char, mbstate_t>
    : public __codecvt_abstract_base<char16_t, char, mbstate_t>
    {
    public:

      typedef char16_t intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0)
      : __codecvt_abstract_base<char16_t, char, mbstate_t>(__refs) { }

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state,
      const extern_type* __from, const extern_type* __from_end,
      const extern_type*& __from_next,
      intern_type* __to, intern_type* __to_end,
      intern_type*& __to_next) const;

      virtual
      int do_encoding() const throw();

      virtual
      bool do_always_noconv() const throw();

      virtual
      int do_length(state_type&, const extern_type* __from,
      const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };





  template<>
    class codecvt<char32_t, char, mbstate_t>
    : public __codecvt_abstract_base<char32_t, char, mbstate_t>
    {
    public:

      typedef char32_t intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0)
      : __codecvt_abstract_base<char32_t, char, mbstate_t>(__refs) { }

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state,
      const extern_type* __from, const extern_type* __from_end,
      const extern_type*& __from_next,
      intern_type* __to, intern_type* __to_end,
      intern_type*& __to_next) const;

      virtual
      int do_encoding() const throw();

      virtual
      bool do_always_noconv() const throw();

      virtual
      int do_length(state_type&, const extern_type* __from,
      const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };





  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname : public codecvt<_InternT, _ExternT, _StateT>
    {
    public:
      explicit
      codecvt_byname(const char* __s, size_t __refs = 0)
      : codecvt<_InternT, _ExternT, _StateT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_codecvt);
     this->_S_create_c_locale(this->_M_c_locale_codecvt, __s);
   }
      }


      explicit
      codecvt_byname(const string& __s, size_t __refs = 0)
      : codecvt_byname(__s.c_str(), __refs) { }


    protected:
      virtual
      ~codecvt_byname() { }
    };


  template<>
    class codecvt_byname<char16_t, char, mbstate_t>
    : public codecvt<char16_t, char, mbstate_t>
    {
    public:
      explicit
      codecvt_byname(const char*, size_t __refs = 0)
      : codecvt<char16_t, char, mbstate_t>(__refs) { }

      explicit
      codecvt_byname(const string& __s, size_t __refs = 0)
      : codecvt_byname(__s.c_str(), __refs) { }

    protected:
      virtual
      ~codecvt_byname() { }
    };

  template<>
    class codecvt_byname<char32_t, char, mbstate_t>
    : public codecvt<char32_t, char, mbstate_t>
    {
    public:
      explicit
      codecvt_byname(const char*, size_t __refs = 0)
      : codecvt<char32_t, char, mbstate_t>(__refs) { }

      explicit
      codecvt_byname(const string& __s, size_t __refs = 0)
      : codecvt_byname(__s.c_str(), __refs) { }

    protected:
      virtual
      ~codecvt_byname() { }
    };





  extern template class codecvt_byname<char, char, mbstate_t>;

  extern template
    const codecvt<char, char, mbstate_t>&
    use_facet<codecvt<char, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<char, char, mbstate_t> >(const locale&);


  extern template class codecvt_byname<wchar_t, char, mbstate_t>;

  extern template
    const codecvt<wchar_t, char, mbstate_t>&
    use_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);



  extern template class codecvt_byname<char16_t, char, mbstate_t>;
  extern template class codecvt_byname<char32_t, char, mbstate_t>;





}
# 41 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstdio" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstdio" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstdio" 3
# 42 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\basic_file.h" 1 3
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\basic_file.h" 3
       
# 38 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\basic_file.h" 3


# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\c++io.h" 1 3
# 35 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\c++io.h" 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstdio" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstdio" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstdio" 3
# 36 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\c++io.h" 2 3


namespace std
{


  typedef __gthread_mutex_t __c_lock;


  typedef FILE __c_file;


}
# 41 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\mingw32\\bits\\basic_file.h" 2 3



namespace std
{



  template<typename _CharT>
    class __basic_file;


  template<>
    class __basic_file<char>
    {

      __c_file* _M_cfile;


      bool _M_cfile_created;

    public:
      __basic_file(__c_lock* __lock = 0) throw ();


      __basic_file(__basic_file&& __rv, __c_lock* = 0) noexcept
      : _M_cfile(__rv._M_cfile), _M_cfile_created(__rv._M_cfile_created)
      {
 __rv._M_cfile = nullptr;
 __rv._M_cfile_created = false;
      }

      __basic_file& operator=(const __basic_file&) = delete;
      __basic_file& operator=(__basic_file&&) = delete;

      void
      swap(__basic_file& __f) noexcept
      {
 std::swap(_M_cfile, __f._M_cfile);
 std::swap(_M_cfile_created, __f._M_cfile_created);
      }


      __basic_file*
      open(const char* __name, ios_base::openmode __mode, int __prot = 0664);

      __basic_file*
      sys_open(__c_file* __file, ios_base::openmode);

      __basic_file*
      sys_open(int __fd, ios_base::openmode __mode) throw ();

      __basic_file*
      close();

      __attribute__ ((__pure__)) bool
      is_open() const throw ();

      __attribute__ ((__pure__)) int
      fd() throw ();

      __attribute__ ((__pure__)) __c_file*
      file() throw ();

      ~__basic_file();

      streamsize
      xsputn(const char* __s, streamsize __n);

      streamsize
      xsputn_2(const char* __s1, streamsize __n1,
        const char* __s2, streamsize __n2);

      streamsize
      xsgetn(char* __s, streamsize __n);

      streamoff
      seekoff(streamoff __off, ios_base::seekdir __way) throw ();

      int
      sync();

      streamsize
      showmanyc();
    };


}
# 43 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 2 3




namespace std
{

# 79 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_filebuf : public basic_streambuf<_CharT, _Traits>
    {

      template<typename _Tp>
 using __chk_state = __and_<is_copy_assignable<_Tp>,
       is_copy_constructible<_Tp>,
       is_default_constructible<_Tp>>;

      static_assert(__chk_state<typename _Traits::state_type>::value,
      "state_type must be CopyAssignable, CopyConstructible"
      " and DefaultConstructible");

      static_assert(is_same<typename _Traits::pos_type,
       fpos<typename _Traits::state_type>>::value,
      "pos_type must be fpos<state_type>");

    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;

      typedef basic_streambuf<char_type, traits_type> __streambuf_type;
      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef __basic_file<char> __file_type;
      typedef typename traits_type::state_type __state_type;
      typedef codecvt<char_type, char, __state_type> __codecvt_type;

      friend class ios_base;

    protected:


      __c_lock _M_lock;


      __file_type _M_file;


      ios_base::openmode _M_mode;


      __state_type _M_state_beg;




      __state_type _M_state_cur;



      __state_type _M_state_last;


      char_type* _M_buf;






      size_t _M_buf_size;


      bool _M_buf_allocated;
# 155 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      bool _M_reading;
      bool _M_writing;







      char_type _M_pback;
      char_type* _M_pback_cur_save;
      char_type* _M_pback_end_save;
      bool _M_pback_init;



      const __codecvt_type* _M_codecvt;






      char* _M_ext_buf;




      streamsize _M_ext_buf_size;






      const char* _M_ext_next;
      char* _M_ext_end;






      void
      _M_create_pback()
      {
 if (!_M_pback_init)
   {
     _M_pback_cur_save = this->gptr();
     _M_pback_end_save = this->egptr();
     this->setg(&_M_pback, &_M_pback, &_M_pback + 1);
     _M_pback_init = true;
   }
      }






      void
      _M_destroy_pback() throw()
      {
 if (_M_pback_init)
   {

     _M_pback_cur_save += this->gptr() != this->eback();
     this->setg(_M_buf, _M_pback_cur_save, _M_pback_end_save);
     _M_pback_init = false;
   }
      }

    public:







      basic_filebuf();


      basic_filebuf(const basic_filebuf&) = delete;
      basic_filebuf(basic_filebuf&&);





      virtual
      ~basic_filebuf()
      { this->close(); }


      basic_filebuf& operator=(const basic_filebuf&) = delete;
      basic_filebuf& operator=(basic_filebuf&&);
      void swap(basic_filebuf&);






      bool
      is_open() const throw()
      { return _M_file.is_open(); }
# 304 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      __filebuf_type*
      open(const char* __s, ios_base::openmode __mode);
# 314 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      __filebuf_type*
      open(const std::string& __s, ios_base::openmode __mode)
      { return open(__s.c_str(), __mode); }
# 344 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      __filebuf_type*
      close();

    protected:
      void
      _M_allocate_internal_buffer();

      void
      _M_destroy_internal_buffer() throw();


      virtual streamsize
      showmanyc();






      virtual int_type
      underflow();

      virtual int_type
      pbackfail(int_type __c = _Traits::eof());
# 376 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      virtual int_type
      overflow(int_type __c = _Traits::eof());



      bool
      _M_convert_to_external(char_type*, streamsize);
# 396 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      virtual __streambuf_type*
      setbuf(char_type* __s, streamsize __n);

      virtual pos_type
      seekoff(off_type __off, ios_base::seekdir __way,
       ios_base::openmode __mode = ios_base::in | ios_base::out);

      virtual pos_type
      seekpos(pos_type __pos,
       ios_base::openmode __mode = ios_base::in | ios_base::out);


      pos_type
      _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state);

      int
      _M_get_ext_pos(__state_type &__state);

      virtual int
      sync();

      virtual void
      imbue(const locale& __loc);

      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);

      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);


      bool
      _M_terminate_output();
# 442 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      void
      _M_set_buffer(streamsize __off)
      {
 const bool __testin = _M_mode & ios_base::in;
 const bool __testout = (_M_mode & ios_base::out
    || _M_mode & ios_base::app);

 if (__testin && __off > 0)
   this->setg(_M_buf, _M_buf, _M_buf + __off);
 else
   this->setg(_M_buf, _M_buf, _M_buf);

 if (__testout && __off == 0 && _M_buf_size > 1 )
   this->setp(_M_buf, _M_buf + _M_buf_size - 1);
 else
   this->setp(0, 0);
      }
    };
# 475 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_ifstream : public basic_istream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_istream<char_type, traits_type> __istream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 502 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      basic_ifstream() : __istream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 512 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      explicit
      basic_ifstream(const char* __s, ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 528 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      explicit
      basic_ifstream(const std::string& __s,
       ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 552 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      basic_ifstream(const basic_ifstream&) = delete;

      basic_ifstream(basic_ifstream&& __rhs)
      : __istream_type(std::move(__rhs)),
      _M_filebuf(std::move(__rhs._M_filebuf))
      { __istream_type::set_rdbuf(&_M_filebuf); }
# 566 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      ~basic_ifstream()
      { }




      basic_ifstream&
      operator=(const basic_ifstream&) = delete;

      basic_ifstream&
      operator=(basic_ifstream&& __rhs)
      {
 __istream_type::operator=(std::move(__rhs));
 _M_filebuf = std::move(__rhs._M_filebuf);
 return *this;
      }

      void
      swap(basic_ifstream& __rhs)
      {
 __istream_type::swap(__rhs);
 _M_filebuf.swap(__rhs._M_filebuf);
      }
# 598 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 624 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      void
      open(const char* __s, ios_base::openmode __mode = ios_base::in)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::in))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 644 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      void
      open(const std::string& __s, ios_base::openmode __mode = ios_base::in)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::in))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 677 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };
# 700 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_ofstream : public basic_ostream<_CharT,_Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_ostream<char_type, traits_type> __ostream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 727 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      basic_ofstream(): __ostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 737 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      explicit
      basic_ofstream(const char* __s,
       ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 754 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      explicit
      basic_ofstream(const std::string& __s,
       ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 778 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      basic_ofstream(const basic_ofstream&) = delete;

      basic_ofstream(basic_ofstream&& __rhs)
      : __ostream_type(std::move(__rhs)),
      _M_filebuf(std::move(__rhs._M_filebuf))
      { __ostream_type::set_rdbuf(&_M_filebuf); }
# 792 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      ~basic_ofstream()
      { }




      basic_ofstream&
      operator=(const basic_ofstream&) = delete;

      basic_ofstream&
      operator=(basic_ofstream&& __rhs)
      {
 __ostream_type::operator=(std::move(__rhs));
 _M_filebuf = std::move(__rhs._M_filebuf);
 return *this;
      }

      void
      swap(basic_ofstream& __rhs)
      {
 __ostream_type::swap(__rhs);
 _M_filebuf.swap(__rhs._M_filebuf);
      }
# 824 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 850 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      void
      open(const char* __s, ios_base::openmode __mode = ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::out))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 870 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      void
      open(const std::string& __s, ios_base::openmode __mode = ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::out))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 903 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };
# 926 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_fstream : public basic_iostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_ios<char_type, traits_type> __ios_type;
      typedef basic_iostream<char_type, traits_type> __iostream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 954 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      basic_fstream()
      : __iostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }






      explicit
      basic_fstream(const char* __s,
      ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __iostream_type(0), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }







      explicit
      basic_fstream(const std::string& __s,
      ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __iostream_type(0), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 1000 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      basic_fstream(const basic_fstream&) = delete;

      basic_fstream(basic_fstream&& __rhs)
      : __iostream_type(std::move(__rhs)),
      _M_filebuf(std::move(__rhs._M_filebuf))
      { __iostream_type::set_rdbuf(&_M_filebuf); }
# 1014 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      ~basic_fstream()
      { }




      basic_fstream&
      operator=(const basic_fstream&) = delete;

      basic_fstream&
      operator=(basic_fstream&& __rhs)
      {
 __iostream_type::operator=(std::move(__rhs));
 _M_filebuf = std::move(__rhs._M_filebuf);
 return *this;
      }

      void
      swap(basic_fstream& __rhs)
      {
 __iostream_type::swap(__rhs);
 _M_filebuf.swap(__rhs._M_filebuf);
      }
# 1046 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 1072 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      void
      open(const char* __s,
    ios_base::openmode __mode = ios_base::in | ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 1093 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      void
      open(const std::string& __s,
    ios_base::openmode __mode = ios_base::in | ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 1128 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };



  template <class _CharT, class _Traits>
    inline void
    swap(basic_filebuf<_CharT, _Traits>& __x,
  basic_filebuf<_CharT, _Traits>& __y)
    { __x.swap(__y); }


  template <class _CharT, class _Traits>
    inline void
    swap(basic_ifstream<_CharT, _Traits>& __x,
  basic_ifstream<_CharT, _Traits>& __y)
    { __x.swap(__y); }


  template <class _CharT, class _Traits>
    inline void
    swap(basic_ofstream<_CharT, _Traits>& __x,
  basic_ofstream<_CharT, _Traits>& __y)
    { __x.swap(__y); }


  template <class _CharT, class _Traits>
    inline void
    swap(basic_fstream<_CharT, _Traits>& __x,
  basic_fstream<_CharT, _Traits>& __y)
    { __x.swap(__y); }



}

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\fstream.tcc" 1 3
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\fstream.tcc" 3
       
# 38 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\fstream.tcc" 3




namespace std
{


  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    _M_allocate_internal_buffer()
    {


      if (!_M_buf_allocated && !_M_buf)
 {
   _M_buf = new char_type[_M_buf_size];
   _M_buf_allocated = true;
 }
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    _M_destroy_internal_buffer() throw()
    {
      if (_M_buf_allocated)
 {
   delete [] _M_buf;
   _M_buf = 0;
   _M_buf_allocated = false;
 }
      delete [] _M_ext_buf;
      _M_ext_buf = 0;
      _M_ext_buf_size = 0;
      _M_ext_next = 0;
      _M_ext_end = 0;
    }

  template<typename _CharT, typename _Traits>
    basic_filebuf<_CharT, _Traits>::
    basic_filebuf() : __streambuf_type(), _M_lock(), _M_file(&_M_lock),
    _M_mode(ios_base::openmode(0)), _M_state_beg(), _M_state_cur(),
    _M_state_last(), _M_buf(0), _M_buf_size(512),
    _M_buf_allocated(false), _M_reading(false), _M_writing(false), _M_pback(),
    _M_pback_cur_save(0), _M_pback_end_save(0), _M_pback_init(false),
    _M_codecvt(0), _M_ext_buf(0), _M_ext_buf_size(0), _M_ext_next(0),
    _M_ext_end(0)
    {
      if (has_facet<__codecvt_type>(this->_M_buf_locale))
 _M_codecvt = &use_facet<__codecvt_type>(this->_M_buf_locale);
    }


  template<typename _CharT, typename _Traits>
    basic_filebuf<_CharT, _Traits>::
    basic_filebuf(basic_filebuf&& __rhs)
    : __streambuf_type(__rhs),
    _M_lock(), _M_file(std::move(__rhs._M_file), &_M_lock),
    _M_mode(std::__exchange(__rhs._M_mode, ios_base::openmode(0))),
    _M_state_beg(std::move(__rhs._M_state_beg)),
    _M_state_cur(std::move(__rhs._M_state_cur)),
    _M_state_last(std::move(__rhs._M_state_last)),
    _M_buf(std::__exchange(__rhs._M_buf, nullptr)),
    _M_buf_size(std::__exchange(__rhs._M_buf_size, 1)),
    _M_buf_allocated(std::__exchange(__rhs._M_buf_allocated, false)),
    _M_reading(std::__exchange(__rhs._M_reading, false)),
    _M_writing(std::__exchange(__rhs._M_writing, false)),
    _M_pback(__rhs._M_pback),
    _M_pback_cur_save(std::__exchange(__rhs._M_pback_cur_save, nullptr)),
    _M_pback_end_save(std::__exchange(__rhs._M_pback_end_save, nullptr)),
    _M_pback_init(std::__exchange(__rhs._M_pback_init, false)),
    _M_codecvt(__rhs._M_codecvt),
    _M_ext_buf(std::__exchange(__rhs._M_ext_buf, nullptr)),
    _M_ext_buf_size(std::__exchange(__rhs._M_ext_buf_size, 0)),
    _M_ext_next(std::__exchange(__rhs._M_ext_next, nullptr)),
    _M_ext_end(std::__exchange(__rhs._M_ext_end, nullptr))
    {
      __rhs._M_set_buffer(-1);
      __rhs._M_state_last = __rhs._M_state_cur = __rhs._M_state_beg;
    }

  template<typename _CharT, typename _Traits>
    basic_filebuf<_CharT, _Traits>&
    basic_filebuf<_CharT, _Traits>::
    operator=(basic_filebuf&& __rhs)
    {
      this->close();
      __streambuf_type::operator=(__rhs);
      _M_file.swap(__rhs._M_file);
      _M_mode = std::__exchange(__rhs._M_mode, ios_base::openmode(0));
      _M_state_beg = std::move(__rhs._M_state_beg);
      _M_state_cur = std::move(__rhs._M_state_cur);
      _M_state_last = std::move(__rhs._M_state_last);
      _M_buf = std::__exchange(__rhs._M_buf, nullptr);
      _M_buf_size = std::__exchange(__rhs._M_buf_size, 1);
      _M_buf_allocated = std::__exchange(__rhs._M_buf_allocated, false);
      _M_ext_buf = std::__exchange(__rhs._M_ext_buf, nullptr);
      _M_ext_buf_size = std::__exchange(__rhs._M_ext_buf_size, 0);
      _M_ext_next = std::__exchange(__rhs._M_ext_next, nullptr);
      _M_ext_end = std::__exchange(__rhs._M_ext_end, nullptr);
      _M_reading = std::__exchange(__rhs._M_reading, false);
      _M_writing = std::__exchange(__rhs._M_writing, false);
      _M_pback_cur_save = std::__exchange(__rhs._M_pback_cur_save, nullptr);
      _M_pback_end_save = std::__exchange(__rhs._M_pback_end_save, nullptr);
      _M_pback_init = std::__exchange(__rhs._M_pback_init, false);
      __rhs._M_set_buffer(-1);
      __rhs._M_state_last = __rhs._M_state_cur = __rhs._M_state_beg;
      return *this;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    swap(basic_filebuf& __rhs)
    {
      __streambuf_type::swap(__rhs);
      _M_file.swap(__rhs._M_file);
      std::swap(_M_mode, __rhs._M_mode);
      std::swap(_M_state_beg, __rhs._M_state_beg);
      std::swap(_M_state_cur, __rhs._M_state_cur);
      std::swap(_M_state_last, __rhs._M_state_last);
      std::swap(_M_buf, __rhs._M_buf);
      std::swap(_M_buf_size, __rhs._M_buf_size);
      std::swap(_M_buf_allocated, __rhs._M_buf_allocated);
      std::swap(_M_ext_buf, __rhs._M_ext_buf);
      std::swap(_M_ext_buf_size, __rhs._M_ext_buf_size);
      std::swap(_M_ext_next, __rhs._M_ext_next);
      std::swap(_M_ext_end, __rhs._M_ext_end);
      std::swap(_M_reading, __rhs._M_reading);
      std::swap(_M_writing, __rhs._M_writing);
      std::swap(_M_pback_cur_save, __rhs._M_pback_cur_save);
      std::swap(_M_pback_end_save, __rhs._M_pback_end_save);
      std::swap(_M_pback_init, __rhs._M_pback_init);
    }


  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__filebuf_type*
    basic_filebuf<_CharT, _Traits>::
    open(const char* __s, ios_base::openmode __mode)
    {
      __filebuf_type *__ret = 0;
      if (!this->is_open())
 {
   _M_file.open(__s, __mode);
   if (this->is_open())
     {
       _M_allocate_internal_buffer();
       _M_mode = __mode;


       _M_reading = false;
       _M_writing = false;
       _M_set_buffer(-1);


       _M_state_last = _M_state_cur = _M_state_beg;


       if ((__mode & ios_base::ate)
    && this->seekoff(0, ios_base::end, __mode)
    == pos_type(off_type(-1)))
  this->close();
       else
  __ret = this;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__filebuf_type*
    basic_filebuf<_CharT, _Traits>::
    close()
    {
      if (!this->is_open())
 return 0;

      bool __testfail = false;
      {

 struct __close_sentry
 {
   basic_filebuf *__fb;
   __close_sentry (basic_filebuf *__fbi): __fb(__fbi) { }
   ~__close_sentry ()
   {
     __fb->_M_mode = ios_base::openmode(0);
     __fb->_M_pback_init = false;
     __fb->_M_destroy_internal_buffer();
     __fb->_M_reading = false;
     __fb->_M_writing = false;
     __fb->_M_set_buffer(-1);
     __fb->_M_state_last = __fb->_M_state_cur = __fb->_M_state_beg;
   }
 } __cs (this);

 try
   {
     if (!_M_terminate_output())
       __testfail = true;
   }
 catch(__cxxabiv1::__forced_unwind&)
   {
     _M_file.close();
     throw;
   }
 catch(...)
   { __testfail = true; }
      }

      if (!_M_file.close())
 __testfail = true;

      if (__testfail)
 return 0;
      else
 return this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    showmanyc()
    {
      streamsize __ret = -1;
      const bool __testin = _M_mode & ios_base::in;
      if (__testin && this->is_open())
 {


   __ret = this->egptr() - this->gptr();



   const bool __testbinary = _M_mode & ios_base::binary;
   if (__check_facet(_M_codecvt).encoding() >= 0
       && __testbinary)



     __ret += _M_file.showmanyc() / _M_codecvt->max_length();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    underflow()
    {
      int_type __ret = traits_type::eof();
      const bool __testin = _M_mode & ios_base::in;
      if (__testin)
 {
   if (_M_writing)
     {
       if (overflow() == traits_type::eof())
  return __ret;
       _M_set_buffer(-1);
       _M_writing = false;
     }



   _M_destroy_pback();

   if (this->gptr() < this->egptr())
     return traits_type::to_int_type(*this->gptr());


   const size_t __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;


   bool __got_eof = false;

   streamsize __ilen = 0;
   codecvt_base::result __r = codecvt_base::ok;
   if (__check_facet(_M_codecvt).always_noconv())
     {
       __ilen = _M_file.xsgetn(reinterpret_cast<char*>(this->eback()),
          __buflen);
       if (__ilen == 0)
  __got_eof = true;
     }
   else
     {


       const int __enc = _M_codecvt->encoding();
       streamsize __blen;
       streamsize __rlen;
       if (__enc > 0)
  __blen = __rlen = __buflen * __enc;
       else
  {
    __blen = __buflen + _M_codecvt->max_length() - 1;
    __rlen = __buflen;
  }
       const streamsize __remainder = _M_ext_end - _M_ext_next;
       __rlen = __rlen > __remainder ? __rlen - __remainder : 0;



       if (_M_reading && this->egptr() == this->eback() && __remainder)
  __rlen = 0;



       if (_M_ext_buf_size < __blen)
  {
    char* __buf = new char[__blen];
    if (__remainder)
      __builtin_memcpy(__buf, _M_ext_next, __remainder);

    delete [] _M_ext_buf;
    _M_ext_buf = __buf;
    _M_ext_buf_size = __blen;
  }
       else if (__remainder)
  __builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);

       _M_ext_next = _M_ext_buf;
       _M_ext_end = _M_ext_buf + __remainder;
       _M_state_last = _M_state_cur;

       do
  {
    if (__rlen > 0)
      {



        if (_M_ext_end - _M_ext_buf + __rlen > _M_ext_buf_size)
   {
     __throw_ios_failure(("basic_filebuf::underflow " "codecvt::max_length() " "is not valid")

                          );
   }
        streamsize __elen = _M_file.xsgetn(_M_ext_end, __rlen);
        if (__elen == 0)
   __got_eof = true;
        else if (__elen == -1)
   break;
        _M_ext_end += __elen;
      }

    char_type* __iend = this->eback();
    if (_M_ext_next < _M_ext_end)
      __r = _M_codecvt->in(_M_state_cur, _M_ext_next,
      _M_ext_end, _M_ext_next,
      this->eback(),
      this->eback() + __buflen, __iend);
    if (__r == codecvt_base::noconv)
      {
        size_t __avail = _M_ext_end - _M_ext_buf;
        __ilen = std::min(__avail, __buflen);
        traits_type::copy(this->eback(),
     reinterpret_cast<char_type*>
     (_M_ext_buf), __ilen);
        _M_ext_next = _M_ext_buf + __ilen;
      }
    else
      __ilen = __iend - this->eback();




    if (__r == codecvt_base::error)
      break;

    __rlen = 1;
  }
       while (__ilen == 0 && !__got_eof);
     }

   if (__ilen > 0)
     {
       _M_set_buffer(__ilen);
       _M_reading = true;
       __ret = traits_type::to_int_type(*this->gptr());
     }
   else if (__got_eof)
     {



       _M_set_buffer(-1);
       _M_reading = false;


       if (__r == codecvt_base::partial)
  __throw_ios_failure(("basic_filebuf::underflow " "incomplete character in file")
                                       );
     }
   else if (__r == codecvt_base::error)
     __throw_ios_failure(("basic_filebuf::underflow " "invalid byte sequence in file")
                                    );
   else
     __throw_ios_failure(("basic_filebuf::underflow " "error reading the file")
                             );
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    pbackfail(int_type __i)
    {
      int_type __ret = traits_type::eof();
      const bool __testin = _M_mode & ios_base::in;
      if (__testin)
 {
   if (_M_writing)
     {
       if (overflow() == traits_type::eof())
  return __ret;
       _M_set_buffer(-1);
       _M_writing = false;
     }


   const bool __testpb = _M_pback_init;
   const bool __testeof = traits_type::eq_int_type(__i, __ret);
   int_type __tmp;
   if (this->eback() < this->gptr())
     {
       this->gbump(-1);
       __tmp = traits_type::to_int_type(*this->gptr());
     }
   else if (this->seekoff(-1, ios_base::cur) != pos_type(off_type(-1)))
     {
       __tmp = this->underflow();
       if (traits_type::eq_int_type(__tmp, __ret))
  return __ret;
     }
   else
     {





       return __ret;
     }



   if (!__testeof && traits_type::eq_int_type(__i, __tmp))
     __ret = __i;
   else if (__testeof)
     __ret = traits_type::not_eof(__i);
   else if (!__testpb)
     {
       _M_create_pback();
       _M_reading = true;
       *this->gptr() = traits_type::to_char_type(__i);
       __ret = __i;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    overflow(int_type __c)
    {
      int_type __ret = traits_type::eof();
      const bool __testeof = traits_type::eq_int_type(__c, __ret);
      const bool __testout = (_M_mode & ios_base::out
         || _M_mode & ios_base::app);
      if (__testout)
 {
          if (_M_reading)
            {
              _M_destroy_pback();
              const int __gptr_off = _M_get_ext_pos(_M_state_last);
              if (_M_seek(__gptr_off, ios_base::cur, _M_state_last)
                  == pos_type(off_type(-1)))
                return __ret;
            }
   if (this->pbase() < this->pptr())
     {

       if (!__testeof)
  {
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }



       if (_M_convert_to_external(this->pbase(),
      this->pptr() - this->pbase()))
  {
    _M_set_buffer(0);
    __ret = traits_type::not_eof(__c);
  }
     }
   else if (_M_buf_size > 1)
     {



       _M_set_buffer(0);
       _M_writing = true;
       if (!__testeof)
  {
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }
       __ret = traits_type::not_eof(__c);
     }
   else
     {

       char_type __conv = traits_type::to_char_type(__c);
       if (__testeof || _M_convert_to_external(&__conv, 1))
  {
    _M_writing = true;
    __ret = traits_type::not_eof(__c);
  }
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    bool
    basic_filebuf<_CharT, _Traits>::
    _M_convert_to_external(_CharT* __ibuf, streamsize __ilen)
    {

      streamsize __elen;
      streamsize __plen;
      if (__check_facet(_M_codecvt).always_noconv())
 {
   __elen = _M_file.xsputn(reinterpret_cast<char*>(__ibuf), __ilen);
   __plen = __ilen;
 }
      else
 {


   streamsize __blen = __ilen * _M_codecvt->max_length();
   char* __buf = static_cast<char*>(__builtin_alloca(__blen));

   char* __bend;
   const char_type* __iend;
   codecvt_base::result __r;
   __r = _M_codecvt->out(_M_state_cur, __ibuf, __ibuf + __ilen,
    __iend, __buf, __buf + __blen, __bend);

   if (__r == codecvt_base::ok || __r == codecvt_base::partial)
     __blen = __bend - __buf;
   else if (__r == codecvt_base::noconv)
     {

       __buf = reinterpret_cast<char*>(__ibuf);
       __blen = __ilen;
     }
   else
     __throw_ios_failure(("basic_filebuf::_M_convert_to_external " "conversion error")
                           );

   __elen = _M_file.xsputn(__buf, __blen);
   __plen = __blen;


   if (__r == codecvt_base::partial && __elen == __plen)
     {
       const char_type* __iresume = __iend;
       streamsize __rlen = this->pptr() - __iend;
       __r = _M_codecvt->out(_M_state_cur, __iresume,
        __iresume + __rlen, __iend, __buf,
        __buf + __blen, __bend);
       if (__r != codecvt_base::error)
  {
    __rlen = __bend - __buf;
    __elen = _M_file.xsputn(__buf, __rlen);
    __plen = __rlen;
  }
       else
  __throw_ios_failure(("basic_filebuf::_M_convert_to_external " "conversion error")
                        );
     }
 }
      return __elen == __plen;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    xsgetn(_CharT* __s, streamsize __n)
    {

      streamsize __ret = 0;
      if (_M_pback_init)
 {
   if (__n > 0 && this->gptr() == this->eback())
     {
       *__s++ = *this->gptr();
       this->gbump(1);
       __ret = 1;
       --__n;
     }
   _M_destroy_pback();
 }
      else if (_M_writing)
 {
   if (overflow() == traits_type::eof())
     return __ret;
   _M_set_buffer(-1);
   _M_writing = false;
 }




      const bool __testin = _M_mode & ios_base::in;
      const streamsize __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;

      if (__n > __buflen && __check_facet(_M_codecvt).always_noconv()
   && __testin)
 {

   const streamsize __avail = this->egptr() - this->gptr();
   if (__avail != 0)
     {
       traits_type::copy(__s, this->gptr(), __avail);
       __s += __avail;
       this->setg(this->eback(), this->gptr() + __avail, this->egptr());
       __ret += __avail;
       __n -= __avail;
     }



   streamsize __len;
   for (;;)
     {
       __len = _M_file.xsgetn(reinterpret_cast<char*>(__s), __n);
       if (__len == -1)
  __throw_ios_failure(("basic_filebuf::xsgetn " "error reading the file")
                              );
       if (__len == 0)
  break;

       __n -= __len;
       __ret += __len;
       if (__n == 0)
  break;

       __s += __len;
     }

   if (__n == 0)
     {

       _M_reading = true;
     }
   else if (__len == 0)
     {



       _M_set_buffer(-1);
       _M_reading = false;
     }
 }
      else
 __ret += __streambuf_type::xsgetn(__s, __n);

      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    xsputn(const _CharT* __s, streamsize __n)
    {
      streamsize __ret = 0;



      const bool __testout = (_M_mode & ios_base::out
         || _M_mode & ios_base::app);
      if (__check_facet(_M_codecvt).always_noconv()
   && __testout && !_M_reading)
 {

   const streamsize __chunk = 1ul << 10;
   streamsize __bufavail = this->epptr() - this->pptr();


   if (!_M_writing && _M_buf_size > 1)
     __bufavail = _M_buf_size - 1;

   const streamsize __limit = std::min(__chunk, __bufavail);
   if (__n >= __limit)
     {
       const streamsize __buffill = this->pptr() - this->pbase();
       const char* __buf = reinterpret_cast<const char*>(this->pbase());
       __ret = _M_file.xsputn_2(__buf, __buffill,
           reinterpret_cast<const char*>(__s),
           __n);
       if (__ret == __buffill + __n)
  {
    _M_set_buffer(0);
    _M_writing = true;
  }
       if (__ret > __buffill)
  __ret -= __buffill;
       else
  __ret = 0;
     }
   else
     __ret = __streambuf_type::xsputn(__s, __n);
 }
       else
  __ret = __streambuf_type::xsputn(__s, __n);
       return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__streambuf_type*
    basic_filebuf<_CharT, _Traits>::
    setbuf(char_type* __s, streamsize __n)
    {
      if (!this->is_open())
 {
   if (__s == 0 && __n == 0)
     _M_buf_size = 1;
   else if (__s && __n > 0)
     {
# 785 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\fstream.tcc" 3
       _M_buf = __s;
       _M_buf_size = __n;
     }
 }
      return this;
    }




  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode)
    {
      int __width = 0;
      if (_M_codecvt)
 __width = _M_codecvt->encoding();
      if (__width < 0)
 __width = 0;

      pos_type __ret = pos_type(off_type(-1));
      const bool __testfail = __off != 0 && __width <= 0;
      if (this->is_open() && !__testfail)
 {




   bool __no_movement = __way == ios_base::cur && __off == 0
     && (!_M_writing || _M_codecvt->always_noconv());


   if (!__no_movement)
     _M_destroy_pback();






   __state_type __state = _M_state_beg;
   off_type __computed_off = __off * __width;
   if (_M_reading && __way == ios_base::cur)
     {
       __state = _M_state_last;
       __computed_off += _M_get_ext_pos(__state);
     }
   if (!__no_movement)
     __ret = _M_seek(__computed_off, __way, __state);
   else
     {
       if (_M_writing)
  __computed_off = this->pptr() - this->pbase();

       off_type __file_off = _M_file.seekoff(0, ios_base::cur);
       if (__file_off != off_type(-1))
  {
    __ret = __file_off + __computed_off;
    __ret.state(__state);
  }
     }
 }
      return __ret;
    }





  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    seekpos(pos_type __pos, ios_base::openmode)
    {
      pos_type __ret = pos_type(off_type(-1));
      if (this->is_open())
 {

   _M_destroy_pback();
   __ret = _M_seek(off_type(__pos), ios_base::beg, __pos.state());
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state)
    {
      pos_type __ret = pos_type(off_type(-1));
      if (_M_terminate_output())
 {
   off_type __file_off = _M_file.seekoff(__off, __way);
   if (__file_off != off_type(-1))
     {
       _M_reading = false;
       _M_writing = false;
       _M_ext_next = _M_ext_end = _M_ext_buf;
       _M_set_buffer(-1);
       _M_state_cur = __state;
       __ret = __file_off;
       __ret.state(_M_state_cur);
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    int basic_filebuf<_CharT, _Traits>::
    _M_get_ext_pos(__state_type& __state)
    {
      if (_M_codecvt->always_noconv())
        return this->gptr() - this->egptr();
      else
        {



          const int __gptr_off =
            _M_codecvt->length(__state, _M_ext_buf, _M_ext_next,
                               this->gptr() - this->eback());
          return _M_ext_buf + __gptr_off - _M_ext_end;
        }
    }

  template<typename _CharT, typename _Traits>
    bool
    basic_filebuf<_CharT, _Traits>::
    _M_terminate_output()
    {

      bool __testvalid = true;
      if (this->pbase() < this->pptr())
 {
   const int_type __tmp = this->overflow();
   if (traits_type::eq_int_type(__tmp, traits_type::eof()))
     __testvalid = false;
 }


      if (_M_writing && !__check_facet(_M_codecvt).always_noconv()
   && __testvalid)
 {



   const size_t __blen = 128;
   char __buf[__blen];
   codecvt_base::result __r;
   streamsize __ilen = 0;

   do
     {
       char* __next;
       __r = _M_codecvt->unshift(_M_state_cur, __buf,
     __buf + __blen, __next);
       if (__r == codecvt_base::error)
  __testvalid = false;
       else if (__r == codecvt_base::ok ||
         __r == codecvt_base::partial)
  {
    __ilen = __next - __buf;
    if (__ilen > 0)
      {
        const streamsize __elen = _M_file.xsputn(__buf, __ilen);
        if (__elen != __ilen)
   __testvalid = false;
      }
  }
     }
   while (__r == codecvt_base::partial && __ilen > 0 && __testvalid);

   if (__testvalid)
     {




       const int_type __tmp = this->overflow();
       if (traits_type::eq_int_type(__tmp, traits_type::eof()))
  __testvalid = false;
     }
 }
      return __testvalid;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_filebuf<_CharT, _Traits>::
    sync()
    {


      int __ret = 0;
      if (this->pbase() < this->pptr())
 {
   const int_type __tmp = this->overflow();
   if (traits_type::eq_int_type(__tmp, traits_type::eof()))
     __ret = -1;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    imbue(const locale& __loc)
    {
      bool __testvalid = true;

      const __codecvt_type* _M_codecvt_tmp = 0;
      if (__builtin_expect(has_facet<__codecvt_type>(__loc), true))
 _M_codecvt_tmp = &use_facet<__codecvt_type>(__loc);

      if (this->is_open())
 {

   if ((_M_reading || _M_writing)
       && __check_facet(_M_codecvt).encoding() == -1)
     __testvalid = false;
   else
     {
       if (_M_reading)
  {
    if (__check_facet(_M_codecvt).always_noconv())
      {
        if (_M_codecvt_tmp
     && !__check_facet(_M_codecvt_tmp).always_noconv())
   __testvalid = this->seekoff(0, ios_base::cur, _M_mode)
                 != pos_type(off_type(-1));
      }
    else
      {

        _M_ext_next = _M_ext_buf
   + _M_codecvt->length(_M_state_last, _M_ext_buf,
          _M_ext_next,
          this->gptr() - this->eback());
        const streamsize __remainder = _M_ext_end - _M_ext_next;
        if (__remainder)
   __builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);

        _M_ext_next = _M_ext_buf;
        _M_ext_end = _M_ext_buf + __remainder;
        _M_set_buffer(-1);
        _M_state_last = _M_state_cur = _M_state_beg;
      }
  }
       else if (_M_writing && (__testvalid = _M_terminate_output()))
  _M_set_buffer(-1);
     }
 }

      if (__testvalid)
 _M_codecvt = _M_codecvt_tmp;
      else
 _M_codecvt = 0;
    }




  extern template class basic_filebuf<char>;
  extern template class basic_ifstream<char>;
  extern template class basic_ofstream<char>;
  extern template class basic_fstream<char>;


  extern template class basic_filebuf<wchar_t>;
  extern template class basic_ifstream<wchar_t>;
  extern template class basic_ofstream<wchar_t>;
  extern template class basic_fstream<wchar_t>;




}
# 1170 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\fstream" 2 3
# 11 "../../include/utils/shader.h" 2
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\sstream" 1 3
# 36 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\sstream" 3
       
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\sstream" 3




namespace std
{

namespace __cxx11 {
# 64 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\sstream" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    {
      struct __xfer_bufptrs;
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;

      typedef basic_streambuf<char_type, traits_type> __streambuf_type;
      typedef basic_string<char_type, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;

    protected:

      ios_base::openmode _M_mode;


      __string_type _M_string;

    public:
# 99 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\sstream" 3
      explicit
      basic_stringbuf(ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __streambuf_type(), _M_mode(__mode), _M_string()
      { }
# 112 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\sstream" 3
      explicit
      basic_stringbuf(const __string_type& __str,
        ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __streambuf_type(), _M_mode(),
 _M_string(__str.data(), __str.size(), __str.get_allocator())
      { _M_stringbuf_init(__mode); }


      basic_stringbuf(const basic_stringbuf&) = delete;

      basic_stringbuf(basic_stringbuf&& __rhs)
      : basic_stringbuf(std::move(__rhs), __xfer_bufptrs(__rhs, this))
      { __rhs._M_sync(const_cast<char_type*>(__rhs._M_string.data()), 0, 0); }



      basic_stringbuf&
      operator=(const basic_stringbuf&) = delete;

      basic_stringbuf&
      operator=(basic_stringbuf&& __rhs)
      {
 __xfer_bufptrs __st{__rhs, this};
 const __streambuf_type& __base = __rhs;
 __streambuf_type::operator=(__base);
 this->pubimbue(__rhs.getloc());
 _M_mode = __rhs._M_mode;
 _M_string = std::move(__rhs._M_string);
 __rhs._M_sync(const_cast<char_type*>(__rhs._M_string.data()), 0, 0);
 return *this;
      }

      void
      swap(basic_stringbuf& __rhs)
      {
 __xfer_bufptrs __l_st{*this, std::__addressof(__rhs)};
 __xfer_bufptrs __r_st{__rhs, this};
 __streambuf_type& __base = __rhs;
 __streambuf_type::swap(__base);
 __rhs.pubimbue(this->pubimbue(__rhs.getloc()));
 std::swap(_M_mode, __rhs._M_mode);
 std::swap(_M_string, __rhs._M_string);
      }
# 166 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\sstream" 3
      __string_type
      str() const
      {
 __string_type __ret(_M_string.get_allocator());
 if (this->pptr())
   {

     if (this->pptr() > this->egptr())
       __ret.assign(this->pbase(), this->pptr());
     else
       __ret.assign(this->pbase(), this->egptr());
   }
 else
   __ret = _M_string;
 return __ret;
      }
# 190 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\sstream" 3
      void
      str(const __string_type& __s)
      {


 _M_string.assign(__s.data(), __s.size());
 _M_stringbuf_init(_M_mode);
      }

    protected:

      void
      _M_stringbuf_init(ios_base::openmode __mode)
      {
 _M_mode = __mode;
 __size_type __len = 0;
 if (_M_mode & (ios_base::ate | ios_base::app))
   __len = _M_string.size();
 _M_sync(const_cast<char_type*>(_M_string.data()), 0, __len);
      }

      virtual streamsize
      showmanyc()
      {
 streamsize __ret = -1;
 if (_M_mode & ios_base::in)
   {
     _M_update_egptr();
     __ret = this->egptr() - this->gptr();
   }
 return __ret;
      }

      virtual int_type
      underflow();

      virtual int_type
      pbackfail(int_type __c = traits_type::eof());

      virtual int_type
      overflow(int_type __c = traits_type::eof());
# 243 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\sstream" 3
      virtual __streambuf_type*
      setbuf(char_type* __s, streamsize __n)
      {
 if (__s && __n >= 0)
   {






     _M_string.clear();


     _M_sync(__s, __n, 0);
   }
 return this;
      }

      virtual pos_type
      seekoff(off_type __off, ios_base::seekdir __way,
       ios_base::openmode __mode = ios_base::in | ios_base::out);

      virtual pos_type
      seekpos(pos_type __sp,
       ios_base::openmode __mode = ios_base::in | ios_base::out);




      void
      _M_sync(char_type* __base, __size_type __i, __size_type __o);



      void
      _M_update_egptr()
      {
 const bool __testin = _M_mode & ios_base::in;
 if (this->pptr() && this->pptr() > this->egptr())
   {
     if (__testin)
       this->setg(this->eback(), this->gptr(), this->pptr());
     else
       this->setg(this->pptr(), this->pptr(), this->pptr());
   }
      }



      void
      _M_pbump(char_type* __pbeg, char_type* __pend, off_type __off);

    private:




      struct __xfer_bufptrs
      {
 __xfer_bufptrs(const basic_stringbuf& __from, basic_stringbuf* __to)
 : _M_to{__to}, _M_goff{-1, -1, -1}, _M_poff{-1, -1, -1}
 {
   const _CharT* const __str = __from._M_string.data();
   const _CharT* __end = nullptr;
   if (__from.eback())
     {
       _M_goff[0] = __from.eback() - __str;
       _M_goff[1] = __from.gptr() - __str;
       _M_goff[2] = __from.egptr() - __str;
       __end = __from.egptr();
     }
   if (__from.pbase())
     {
       _M_poff[0] = __from.pbase() - __str;
       _M_poff[1] = __from.pptr() - __from.pbase();
       _M_poff[2] = __from.epptr() - __str;
       if (__from.pptr() > __end)
  __end = __from.pptr();
     }


   if (__end)
     {


       auto& __mut_from = const_cast<basic_stringbuf&>(__from);
       __mut_from._M_string._M_length(__end - __str);
     }
 }

 ~__xfer_bufptrs()
 {
   char_type* __str = const_cast<char_type*>(_M_to->_M_string.data());
   if (_M_goff[0] != -1)
     _M_to->setg(__str+_M_goff[0], __str+_M_goff[1], __str+_M_goff[2]);
   if (_M_poff[0] != -1)
     _M_to->_M_pbump(__str+_M_poff[0], __str+_M_poff[2], _M_poff[1]);
 }

 basic_stringbuf* _M_to;
 off_type _M_goff[3];
 off_type _M_poff[3];
      };
# 357 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\sstream" 3
      basic_stringbuf(basic_stringbuf&& __rhs, __xfer_bufptrs&&)
      : __streambuf_type(static_cast<const __streambuf_type&>(__rhs)),
      _M_mode(__rhs._M_mode), _M_string(std::move(__rhs._M_string))
      { }

    };
# 380 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\sstream" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_istringstream : public basic_istream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_istream<char_type, traits_type> __istream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 416 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\sstream" 3
      explicit
      basic_istringstream(ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_stringbuf(__mode | ios_base::in)
      { this->init(&_M_stringbuf); }
# 434 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\sstream" 3
      explicit
      basic_istringstream(const __string_type& __str,
     ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_stringbuf(__str, __mode | ios_base::in)
      { this->init(&_M_stringbuf); }







      ~basic_istringstream()
      { }


      basic_istringstream(const basic_istringstream&) = delete;

      basic_istringstream(basic_istringstream&& __rhs)
      : __istream_type(std::move(__rhs)),
      _M_stringbuf(std::move(__rhs._M_stringbuf))
      { __istream_type::set_rdbuf(&_M_stringbuf); }



      basic_istringstream&
      operator=(const basic_istringstream&) = delete;

      basic_istringstream&
      operator=(basic_istringstream&& __rhs)
      {
 __istream_type::operator=(std::move(__rhs));
 _M_stringbuf = std::move(__rhs._M_stringbuf);
 return *this;
      }

      void
      swap(basic_istringstream& __rhs)
      {
 __istream_type::swap(__rhs);
 _M_stringbuf.swap(__rhs._M_stringbuf);
      }
# 485 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };
# 524 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\sstream" 3
  template <typename _CharT, typename _Traits, typename _Alloc>
    class basic_ostringstream : public basic_ostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_ostream<char_type, traits_type> __ostream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 560 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\sstream" 3
      explicit
      basic_ostringstream(ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
      { this->init(&_M_stringbuf); }
# 578 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\sstream" 3
      explicit
      basic_ostringstream(const __string_type& __str,
     ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_stringbuf(__str, __mode | ios_base::out)
      { this->init(&_M_stringbuf); }







      ~basic_ostringstream()
      { }


      basic_ostringstream(const basic_ostringstream&) = delete;

      basic_ostringstream(basic_ostringstream&& __rhs)
      : __ostream_type(std::move(__rhs)),
      _M_stringbuf(std::move(__rhs._M_stringbuf))
      { __ostream_type::set_rdbuf(&_M_stringbuf); }



      basic_ostringstream&
      operator=(const basic_ostringstream&) = delete;

      basic_ostringstream&
      operator=(basic_ostringstream&& __rhs)
      {
 __ostream_type::operator=(std::move(__rhs));
 _M_stringbuf = std::move(__rhs._M_stringbuf);
 return *this;
      }

      void
      swap(basic_ostringstream& __rhs)
      {
 __ostream_type::swap(__rhs);
 _M_stringbuf.swap(__rhs._M_stringbuf);
      }
# 629 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };
# 668 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\sstream" 3
  template <typename _CharT, typename _Traits, typename _Alloc>
    class basic_stringstream : public basic_iostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_iostream<char_type, traits_type> __iostream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 703 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\sstream" 3
      explicit
      basic_stringstream(ios_base::openmode __m = ios_base::out | ios_base::in)
      : __iostream_type(), _M_stringbuf(__m)
      { this->init(&_M_stringbuf); }
# 719 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\sstream" 3
      explicit
      basic_stringstream(const __string_type& __str,
    ios_base::openmode __m = ios_base::out | ios_base::in)
      : __iostream_type(), _M_stringbuf(__str, __m)
      { this->init(&_M_stringbuf); }







      ~basic_stringstream()
      { }


      basic_stringstream(const basic_stringstream&) = delete;

      basic_stringstream(basic_stringstream&& __rhs)
      : __iostream_type(std::move(__rhs)),
      _M_stringbuf(std::move(__rhs._M_stringbuf))
      { __iostream_type::set_rdbuf(&_M_stringbuf); }



      basic_stringstream&
      operator=(const basic_stringstream&) = delete;

      basic_stringstream&
      operator=(basic_stringstream&& __rhs)
      {
 __iostream_type::operator=(std::move(__rhs));
 _M_stringbuf = std::move(__rhs._M_stringbuf);
 return *this;
      }

      void
      swap(basic_stringstream& __rhs)
      {
 __iostream_type::swap(__rhs);
 _M_stringbuf.swap(__rhs._M_stringbuf);
      }
# 770 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };



  template <class _CharT, class _Traits, class _Allocator>
    inline void
    swap(basic_stringbuf<_CharT, _Traits, _Allocator>& __x,
  basic_stringbuf<_CharT, _Traits, _Allocator>& __y)
    { __x.swap(__y); }


  template <class _CharT, class _Traits, class _Allocator>
    inline void
    swap(basic_istringstream<_CharT, _Traits, _Allocator>& __x,
  basic_istringstream<_CharT, _Traits, _Allocator>& __y)
    { __x.swap(__y); }


  template <class _CharT, class _Traits, class _Allocator>
    inline void
    swap(basic_ostringstream<_CharT, _Traits, _Allocator>& __x,
  basic_ostringstream<_CharT, _Traits, _Allocator>& __y)
    { __x.swap(__y); }


  template <class _CharT, class _Traits, class _Allocator>
    inline void
    swap(basic_stringstream<_CharT, _Traits, _Allocator>& __x,
  basic_stringstream<_CharT, _Traits, _Allocator>& __y)
    { __x.swap(__y); }


}

}

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\sstream.tcc" 1 3
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\sstream.tcc" 3
       
# 38 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\sstream.tcc" 3

namespace std
{


  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    pbackfail(int_type __c)
    {
      int_type __ret = traits_type::eof();
      if (this->eback() < this->gptr())
 {


   const bool __testeof = traits_type::eq_int_type(__c, __ret);
   if (!__testeof)
     {
       const bool __testeq = traits_type::eq(traits_type::
          to_char_type(__c),
          this->gptr()[-1]);
       const bool __testout = this->_M_mode & ios_base::out;
       if (__testeq || __testout)
  {
    this->gbump(-1);
    if (!__testeq)
      *this->gptr() = traits_type::to_char_type(__c);
    __ret = __c;
  }
     }
   else
     {
       this->gbump(-1);
       __ret = traits_type::not_eof(__c);
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    overflow(int_type __c)
    {
      const bool __testout = this->_M_mode & ios_base::out;
      if (__builtin_expect(!__testout, false))
 return traits_type::eof();

      const bool __testeof = traits_type::eq_int_type(__c, traits_type::eof());
      if (__builtin_expect(__testeof, false))
 return traits_type::not_eof(__c);

      const __size_type __capacity = _M_string.capacity();


      if ((this->epptr() - this->pbase()) < __capacity)
 {

   char_type* __base = const_cast<char_type*>(_M_string.data());
   _M_pbump(__base, __base + __capacity, this->pptr() - this->pbase());
   if (_M_mode & ios_base::in)
     {
       const __size_type __nget = this->gptr() - this->eback();
       const __size_type __eget = this->egptr() - this->eback();
       this->setg(__base, __base + __nget, __base + __eget + 1);
     }
   *this->pptr() = traits_type::to_char_type(__c);
   this->pbump(1);
   return __c;
 }


      const __size_type __max_size = _M_string.max_size();
      const bool __testput = this->pptr() < this->epptr();
      if (__builtin_expect(!__testput && __capacity == __max_size, false))
 return traits_type::eof();



      const char_type __conv = traits_type::to_char_type(__c);
      if (!__testput)
 {
# 129 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\sstream.tcc" 3
   const __size_type __opt_len = std::max(__size_type(2 * __capacity),
       __size_type(512));
   const __size_type __len = std::min(__opt_len, __max_size);
   __string_type __tmp(_M_string.get_allocator());
   __tmp.reserve(__len);
   if (this->pbase())
     __tmp.assign(this->pbase(), this->epptr() - this->pbase());
   __tmp.push_back(__conv);
   _M_string.swap(__tmp);
   _M_sync(const_cast<char_type*>(_M_string.data()),
    this->gptr() - this->eback(), this->pptr() - this->pbase());
 }
      else
 *this->pptr() = __conv;
      this->pbump(1);
      return __c;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    underflow()
    {
      int_type __ret = traits_type::eof();
      const bool __testin = this->_M_mode & ios_base::in;
      if (__testin)
 {

   _M_update_egptr();

   if (this->gptr() < this->egptr())
     __ret = traits_type::to_int_type(*this->gptr());
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode __mode)
    {
      pos_type __ret = pos_type(off_type(-1));
      bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;
      bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;
      const bool __testboth = __testin && __testout && __way != ios_base::cur;
      __testin &= !(__mode & ios_base::out);
      __testout &= !(__mode & ios_base::in);



      const char_type* __beg = __testin ? this->eback() : this->pbase();
      if ((__beg || !__off) && (__testin || __testout || __testboth))
 {
   _M_update_egptr();

   off_type __newoffi = __off;
   off_type __newoffo = __newoffi;
   if (__way == ios_base::cur)
     {
       __newoffi += this->gptr() - __beg;
       __newoffo += this->pptr() - __beg;
     }
   else if (__way == ios_base::end)
     __newoffo = __newoffi += this->egptr() - __beg;

   if ((__testin || __testboth)
       && __newoffi >= 0
       && this->egptr() - __beg >= __newoffi)
     {
       this->setg(this->eback(), this->eback() + __newoffi,
    this->egptr());
       __ret = pos_type(__newoffi);
     }
   if ((__testout || __testboth)
       && __newoffo >= 0
       && this->egptr() - __beg >= __newoffo)
     {
       _M_pbump(this->pbase(), this->epptr(), __newoffo);
       __ret = pos_type(__newoffo);
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    seekpos(pos_type __sp, ios_base::openmode __mode)
    {
      pos_type __ret = pos_type(off_type(-1));
      const bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;
      const bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;

      const char_type* __beg = __testin ? this->eback() : this->pbase();
      if ((__beg || !off_type(__sp)) && (__testin || __testout))
 {
   _M_update_egptr();

   const off_type __pos(__sp);
   const bool __testpos = (0 <= __pos
      && __pos <= this->egptr() - __beg);
   if (__testpos)
     {
       if (__testin)
  this->setg(this->eback(), this->eback() + __pos,
      this->egptr());
       if (__testout)
  _M_pbump(this->pbase(), this->epptr(), __pos);
       __ret = __sp;
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    void
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    _M_sync(char_type* __base, __size_type __i, __size_type __o)
    {
      const bool __testin = _M_mode & ios_base::in;
      const bool __testout = _M_mode & ios_base::out;
      char_type* __endg = __base + _M_string.size();
      char_type* __endp = __base + _M_string.capacity();

      if (__base != _M_string.data())
 {

   __endg += __i;
   __i = 0;
   __endp = __endg;
 }

      if (__testin)
 this->setg(__base, __base + __i, __endg);
      if (__testout)
 {
   _M_pbump(__base, __endp, __o);



   if (!__testin)
     this->setg(__endg, __endg, __endg);
 }
    }

  template <class _CharT, class _Traits, class _Alloc>
    void
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    _M_pbump(char_type* __pbeg, char_type* __pend, off_type __off)
    {
      this->setp(__pbeg, __pend);
      while (__off > __gnu_cxx::__numeric_traits<int>::__max)
 {
   this->pbump(__gnu_cxx::__numeric_traits<int>::__max);
   __off -= __gnu_cxx::__numeric_traits<int>::__max;
 }
      this->pbump(__off);
    }




  extern template class basic_stringbuf<char>;
  extern template class basic_istringstream<char>;
  extern template class basic_ostringstream<char>;
  extern template class basic_stringstream<char>;


  extern template class basic_stringbuf<wchar_t>;
  extern template class basic_istringstream<wchar_t>;
  extern template class basic_ostringstream<wchar_t>;
  extern template class basic_stringstream<wchar_t>;




}
# 828 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\sstream" 2 3
# 12 "../../include/utils/shader.h" 2
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\iostream" 1 3
# 36 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\iostream" 3
       
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\iostream" 3





namespace std
{

# 60 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\iostream" 3
  extern istream cin;
  extern ostream cout;
  extern ostream cerr;
  extern ostream clog;


  extern wistream wcin;
  extern wostream wcout;
  extern wostream wcerr;
  extern wostream wclog;




  static ios_base::Init __ioinit;


}
# 13 "../../include/utils/shader.h" 2


# 14 "../../include/utils/shader.h"
class Shader
{
public:
    unsigned int ID;


    Shader(const char* vertexPath, const char* fragmentPath)
    {

        std::string vertexCode;
        std::string fragmentCode;
        std::ifstream vShaderFile;
        std::ifstream fShaderFile;

        vShaderFile.exceptions (std::ifstream::failbit | std::ifstream::badbit);
        fShaderFile.exceptions (std::ifstream::failbit | std::ifstream::badbit);

        char path[] = "C:\\Users\\Alessio\\Documents\\GitHub\\Progetto_RTGP\\work\\test\\shaders\\";

        char vPath[strlen(path) + strlen(vertexPath)] = "";
        strcat(vPath, path);
        strcat(vPath, vertexPath);

        char fPath[strlen(path) + strlen(fragmentPath)] = "";
        strcat(fPath, path);
        strcat(fPath, fragmentPath);




        try
        {

            vShaderFile.open(vPath);
            fShaderFile.open(fPath);
            std::stringstream vShaderStream, fShaderStream;

            vShaderStream << vShaderFile.rdbuf();
            fShaderStream << fShaderFile.rdbuf();

            vShaderFile.close();
            fShaderFile.close();

            vertexCode = vShaderStream.str();
            fragmentCode = fShaderStream.str();
        }
        catch (std::ifstream::failure e)
        {
            std::cout << "ERROR::SHADER::FILE_NOT_SUCCESFULLY_READ" << std::endl;
        }
        const char* vShaderCode = vertexCode.c_str();
        const char * fShaderCode = fragmentCode.c_str();

        unsigned int vertex, fragment;

        vertex = glad_glCreateShader(0x8B31);
        glad_glShaderSource(vertex, 1, &vShaderCode, 
# 70 "../../include/utils/shader.h" 3 4
                                               __null
# 70 "../../include/utils/shader.h"
                                                   );
        glad_glCompileShader(vertex);
        checkCompileErrors(vertex, "VERTEX");

        fragment = glad_glCreateShader(0x8B30);
        glad_glShaderSource(fragment, 1, &fShaderCode, 
# 75 "../../include/utils/shader.h" 3 4
                                                 __null
# 75 "../../include/utils/shader.h"
                                                     );
        glad_glCompileShader(fragment);
        checkCompileErrors(fragment, "FRAGMENT");

        ID = glad_glCreateProgram();
        glad_glAttachShader(ID, vertex);
        glad_glAttachShader(ID, fragment);
        glad_glLinkProgram(ID);
        checkCompileErrors(ID, "PROGRAM");

        glad_glDeleteShader(vertex);
        glad_glDeleteShader(fragment);
    }


    void use()
    {
        glad_glUseProgram(ID);
    }


    void setBool(const std::string &name, bool value) const
    {
        glad_glUniform1i(glad_glGetUniformLocation(ID, name.c_str()), (int)value);
    }

    void setInt(const std::string &name, int value) const
    {
        glad_glUniform1i(glad_glGetUniformLocation(ID, name.c_str()), value);
    }

    void setFloat(const std::string &name, float value) const
    {
        glad_glUniform1f(glad_glGetUniformLocation(ID, name.c_str()), value);
    }

    void setUniform4f(const std::string &name, float x, float y, float z, float w) const
    {
        glad_glUniform4f(glad_glGetUniformLocation(ID, name.c_str()), x, y, z, w);
    }

    void setMat4(const std::string &name, glm::mat4 mat) const
    {
        glad_glUniformMatrix4fv(glad_glGetUniformLocation(ID, name.c_str()), 1, 0, glm::value_ptr(mat));
    }

private:


    void checkCompileErrors(unsigned int shader, std::string type)
    {
        int success;
        char infoLog[1024];
        if (type != "PROGRAM")
        {
            glad_glGetShaderiv(shader, 0x8B81, &success);
            if (!success)
            {
                glad_glGetShaderInfoLog(shader, 1024, 
# 133 "../../include/utils/shader.h" 3 4
                                                __null
# 133 "../../include/utils/shader.h"
                                                    , infoLog);
                std::cout << "ERROR::SHADER_COMPILATION_ERROR of type: " << type << "\n" << infoLog << "\n -- --------------------------------------------------- -- " << std::endl;
            }
        }
        else
        {
            glad_glGetProgramiv(shader, 0x8B82, &success);
            if (!success)
            {
                glad_glGetProgramInfoLog(shader, 1024, 
# 142 "../../include/utils/shader.h" 3 4
                                                 __null
# 142 "../../include/utils/shader.h"
                                                     , infoLog);
                std::cout << "ERROR::PROGRAM_LINKING_ERROR of type: " << type << "\n" << infoLog << "\n -- --------------------------------------------------- -- " << std::endl;
            }
        }
    }
};
# 4 "main.cpp" 2




# 1 "../../include/utils/camera.h" 1







# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\vector" 1 3
# 58 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\vector" 3
       
# 59 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\vector" 3



# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_construct.h" 1 3
# 63 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_construct.h" 3

# 63 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_construct.h" 3
namespace std
{







  template<typename _T1, typename... _Args>
    inline void
    _Construct(_T1* __p, _Args&&... __args)
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
# 87 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_construct.h" 3
  template<typename _T1>
    inline void
    _Construct_novalue(_T1* __p)
    { ::new(static_cast<void*>(__p)) _T1; }




  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
    { __pointer->~_Tp(); }

  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 {
   for (; __first != __last; ++__first)
     std::_Destroy(std::__addressof(*__first));
 }
    };

  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
    };






  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;


      static_assert(is_destructible<_Value_type>::value,
      "value type is destructible");

      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 __destroy(__first, __last);
    }

  template<bool>
    struct _Destroy_n_aux
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __destroy_n(_ForwardIterator __first, _Size __count)
 {
   for (; __count > 0; (void)++__first, --__count)
     std::_Destroy(std::__addressof(*__first));
   return __first;
 }
    };

  template<>
    struct _Destroy_n_aux<true>
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __destroy_n(_ForwardIterator __first, _Size __count)
 {
   std::advance(__first, __count);
   return __first;
 }
    };






  template<typename _ForwardIterator, typename _Size>
    inline _ForwardIterator
    _Destroy_n(_ForwardIterator __first, _Size __count)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;


      static_assert(is_destructible<_Value_type>::value,
      "value type is destructible");

      return std::_Destroy_n_aux<__has_trivial_destructor(_Value_type)>::
 __destroy_n(__first, __count);
    }







  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      _Allocator& __alloc)
    {
      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
      for (; __first != __last; ++__first)
 __traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    }
# 232 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_construct.h" 3

}
# 63 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\vector" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_uninitialized.h" 1 3
# 67 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_uninitialized.h" 3
namespace std
{


  template<bool _TrivialValueTypes>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        {
   _ForwardIterator __cur = __result;
   try
     {
       for (; __first != __last; ++__first, (void)++__cur)
  std::_Construct(std::__addressof(*__cur), *__first);
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__result, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        __uninit_copy(_InputIterator __first, _InputIterator __last,
        _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
    };
# 113 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_uninitialized.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
         _ForwardIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType2;




      typedef typename iterator_traits<_InputIterator>::reference _RefType1;
      typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;


      return std::__uninitialized_copy<__is_trivial(_ValueType1)
           && __is_trivial(_ValueType2)
           && __assignable>::
 __uninit_copy(__first, __last, __result);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
        const _Tp& __x)
        { std::fill(__first, __last, __x); }
    };
# 179 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
         const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;




      const bool __assignable = is_copy_assignable<_ValueType>::value;


      std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::
 __uninit_fill(__first, __last, __x);
    }


  template<bool _TrivialValueType>
    struct __uninitialized_fill_n
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static _ForwardIterator
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; --__n, (void) ++__cur)
  std::_Construct(std::__addressof(*__cur), __x);
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill_n<true>
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static _ForwardIterator
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
   const _Tp& __x)
        { return std::fill_n(__first, __n, __x); }
    };
# 242 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;




      const bool __assignable = is_copy_assignable<_ValueType>::value;

      return __uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::
 __uninit_fill_n(__first, __n, __x);
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __result;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __first != __last; ++__first, (void)++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), *__first);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__result, __cur, __alloc);
   throw;
 }
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a(std::make_move_iterator(__first),
      std::make_move_iterator(__last),
      __result, __alloc);
    }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
           _InputIterator __last,
           _ForwardIterator __result,
           _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
 (std::__make_move_if_noexcept_iterator(__first),
  std::__make_move_if_noexcept_iterator(__last), __result, __alloc);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Allocator>
    void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __cur != __last; ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), __x);
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill(__first, __last, __x); }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __n > 0; --__n, (void) ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur), __x);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2>
    inline _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, allocator<_Tp2>&)
    { return std::uninitialized_fill_n(__first, __n, __x); }
# 378 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_uninitialized.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_copy_move(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }





  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
         const _Tp& __x, _InputIterator __first,
         _InputIterator __last, _Allocator& __alloc)
    {
      std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
      try
 {
   return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator>
    inline void
    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp& __x,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
           __first2,
           __alloc);
      try
 {
   std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__first2, __mid2, __alloc);
   throw;
 }
    }





  template<bool _TrivialValueType>
    struct __uninitialized_default_1
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(std::__addressof(*__cur));
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_default_1<true>
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   std::fill(__first, __last, _ValueType());
 }
    };

  template<bool _TrivialValueType>
    struct __uninitialized_default_n_1
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; --__n, (void) ++__cur)
  std::_Construct(std::__addressof(*__cur));
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_default_n_1<true>
    {
      template<typename _ForwardIterator, typename _Size>
        static _ForwardIterator
        __uninit_default_n(_ForwardIterator __first, _Size __n)
        {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;

   return std::fill_n(__first, __n, _ValueType());
 }
    };




  template<typename _ForwardIterator>
    inline void
    __uninitialized_default(_ForwardIterator __first,
       _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      const bool __assignable = is_copy_assignable<_ValueType>::value;

      std::__uninitialized_default_1<__is_trivial(_ValueType)
         && __assignable>::
 __uninit_default(__first, __last);
    }



  template<typename _ForwardIterator, typename _Size>
    inline _ForwardIterator
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      const bool __assignable = is_copy_assignable<_ValueType>::value;

      return __uninitialized_default_n_1<__is_trivial(_ValueType)
           && __assignable>::
 __uninit_default_n(__first, __n);
    }





  template<typename _ForwardIterator, typename _Allocator>
    void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __cur != __last; ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur));
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    __uninitialized_default_a(_ForwardIterator __first,
         _ForwardIterator __last,
         allocator<_Tp>&)
    { std::__uninitialized_default(__first, __last); }





  template<typename _ForwardIterator, typename _Size, typename _Allocator>
    _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
   for (; __n > 0; --__n, (void) ++__cur)
     __traits::construct(__alloc, std::__addressof(*__cur));
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
    allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }

  template<bool _TrivialValueType>
    struct __uninitialized_default_novalue_1
    {
      template<typename _ForwardIterator>
 static void
 __uninit_default_novalue(_ForwardIterator __first,
     _ForwardIterator __last)
 {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++__cur)
  std::_Construct_novalue(std::__addressof(*__cur));
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_default_novalue_1<true>
    {
      template<typename _ForwardIterator>
        static void
        __uninit_default_novalue(_ForwardIterator __first,
     _ForwardIterator __last)
 {
 }
    };

  template<bool _TrivialValueType>
    struct __uninitialized_default_novalue_n_1
    {
      template<typename _ForwardIterator, typename _Size>
 static _ForwardIterator
 __uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; --__n, (void) ++__cur)
  std::_Construct_novalue(std::__addressof(*__cur));
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_default_novalue_n_1<true>
    {
      template<typename _ForwardIterator, typename _Size>
 static _ForwardIterator
 __uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 { return std::next(__first, __n); }
    };




  template<typename _ForwardIterator>
    inline void
    __uninitialized_default_novalue(_ForwardIterator __first,
        _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_default_novalue_1<
 is_trivially_default_constructible<_ValueType>::value>::
 __uninit_default_novalue(__first, __last);
    }



  template<typename _ForwardIterator, typename _Size>
    inline _ForwardIterator
    __uninitialized_default_novalue_n(_ForwardIterator __first, _Size __n)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      return __uninitialized_default_novalue_n_1<
 is_trivially_default_constructible<_ValueType>::value>::
 __uninit_default_novalue_n(__first, __n);
    }

  template<typename _InputIterator, typename _Size,
    typename _ForwardIterator>
    _ForwardIterator
    __uninitialized_copy_n(_InputIterator __first, _Size __n,
      _ForwardIterator __result, input_iterator_tag)
    {
      _ForwardIterator __cur = __result;
      try
 {
   for (; __n > 0; --__n, (void) ++__first, ++__cur)
     std::_Construct(std::__addressof(*__cur), *__first);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__result, __cur);
   throw;
 }
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _ForwardIterator>
    inline _ForwardIterator
    __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,
      _ForwardIterator __result,
      random_access_iterator_tag)
    { return std::uninitialized_copy(__first, __first + __n, __result); }

  template<typename _InputIterator, typename _Size,
    typename _ForwardIterator>
    pair<_InputIterator, _ForwardIterator>
    __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
      _ForwardIterator __result, input_iterator_tag)
    {
      _ForwardIterator __cur = __result;
      try
 {
   for (; __n > 0; --__n, (void) ++__first, ++__cur)
     std::_Construct(std::__addressof(*__cur), *__first);
   return {__first, __cur};
 }
      catch(...)
 {
   std::_Destroy(__result, __cur);
   throw;
 }
    }

  template<typename _RandomAccessIterator, typename _Size,
    typename _ForwardIterator>
    inline pair<_RandomAccessIterator, _ForwardIterator>
    __uninitialized_copy_n_pair(_RandomAccessIterator __first, _Size __n,
      _ForwardIterator __result,
      random_access_iterator_tag)
    {
      auto __second_res = uninitialized_copy(__first, __first + __n, __result);
      auto __first_res = std::next(__first, __n);
      return {__first_res, __second_res};
    }
# 810 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_uninitialized.h" 3
  template<typename _InputIterator, typename _Size, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy_n(_InputIterator __first, _Size __n,
    _ForwardIterator __result)
    { return std::__uninitialized_copy_n(__first, __n, __result,
      std::__iterator_category(__first)); }

  template<typename _InputIterator, typename _Size, typename _ForwardIterator>
    inline pair<_InputIterator, _ForwardIterator>
    __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
         _ForwardIterator __result)
    {
      return
 std::__uninitialized_copy_n_pair(__first, __n, __result,
      std::__iterator_category(__first));
    }
# 882 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_uninitialized.h" 3

}
# 64 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\vector" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 1 3
# 74 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
namespace std
{




  template<typename _Tp, typename _Alloc>
    struct _Vector_base
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 rebind<_Tp>::other _Tp_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
        pointer;

      struct _Vector_impl
      : public _Tp_alloc_type
      {
 pointer _M_start;
 pointer _M_finish;
 pointer _M_end_of_storage;

 _Vector_impl()
 : _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 { }

 _Vector_impl(_Tp_alloc_type const& __a) noexcept
 : _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 { }


 _Vector_impl(_Tp_alloc_type&& __a) noexcept
 : _Tp_alloc_type(std::move(__a)),
   _M_start(), _M_finish(), _M_end_of_storage()
 { }


 void _M_swap_data(_Vector_impl& __x) noexcept
 {
   std::swap(_M_start, __x._M_start);
   std::swap(_M_finish, __x._M_finish);
   std::swap(_M_end_of_storage, __x._M_end_of_storage);
 }
# 231 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      };

    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator() noexcept
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const noexcept
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
      : _M_impl() { }

      _Vector_base(const allocator_type& __a) noexcept
      : _M_impl(__a) { }

      _Vector_base(size_t __n)
      : _M_impl()
      { _M_create_storage(__n); }

      _Vector_base(size_t __n, const allocator_type& __a)
      : _M_impl(__a)
      { _M_create_storage(__n); }


      _Vector_base(_Tp_alloc_type&& __a) noexcept
      : _M_impl(std::move(__a)) { }

      _Vector_base(_Vector_base&& __x) noexcept
      : _M_impl(std::move(__x._M_get_Tp_allocator()))
      { this->_M_impl._M_swap_data(__x._M_impl); }

      _Vector_base(_Vector_base&& __x, const allocator_type& __a)
      : _M_impl(__a)
      {
 if (__x.get_allocator() == __a)
   this->_M_impl._M_swap_data(__x._M_impl);
 else
   {
     size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
     _M_create_storage(__n);
   }
      }


      ~_Vector_base() noexcept
      {
 _M_deallocate(_M_impl._M_start,
        _M_impl._M_end_of_storage - _M_impl._M_start);
      }

    public:
      _Vector_impl _M_impl;

      pointer
      _M_allocate(size_t __n)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
      }

      void
      _M_deallocate(pointer __p, size_t __n)
      {
 typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 if (__p)
   _Tr::deallocate(_M_impl, __p, __n);
      }

    private:
      void
      _M_create_storage(size_t __n)
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }
    };
# 338 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class vector : protected _Vector_base<_Tp, _Alloc>
    {
# 351 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,
   "std::vector must have a non-const, non-volatile value_type");

      static_assert(is_same<typename _Alloc::value_type, _Tp>::value,
   "std::vector must have the same value_type as its allocator");



      typedef _Vector_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Alloc_traits;

    public:
      typedef _Tp value_type;
      typedef typename _Base::pointer pointer;
      typedef typename _Alloc_traits::const_pointer const_pointer;
      typedef typename _Alloc_traits::reference reference;
      typedef typename _Alloc_traits::const_reference const_reference;
      typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
      const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_M_impl;
      using _Base::_M_get_Tp_allocator;

    public:






      vector()

      noexcept(is_nothrow_default_constructible<_Alloc>::value)

      : _Base() { }





      explicit
      vector(const allocator_type& __a) noexcept
      : _Base(__a) { }
# 414 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_default_initialize(__n); }
# 427 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      vector(size_type __n, const value_type& __value,
      const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_fill_initialize(__n, __value); }
# 458 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      vector(const vector& __x)
      : _Base(__x.size(),
 _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
      {
 this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }
# 476 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      vector(vector&& __x) noexcept
      : _Base(std::move(__x)) { }


      vector(const vector& __x, const allocator_type& __a)
      : _Base(__x.size(), __a)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }


      vector(vector&& __rv, const allocator_type& __m)
      noexcept(_Alloc_traits::_S_always_equal())
      : _Base(std::move(__rv), __m)
      {
 if (__rv.get_allocator() != __m)
   {
     this->_M_impl._M_finish =
       std::__uninitialized_move_a(__rv.begin(), __rv.end(),
       this->_M_impl._M_start,
       _M_get_Tp_allocator());
     __rv.clear();
   }
      }
# 515 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      vector(initializer_list<value_type> __l,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 _M_range_initialize(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }
# 541 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
 { _M_initialize_dispatch(__first, __last, __false_type()); }
# 565 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      ~vector() noexcept
      {
 std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator());
 ;
      }
# 581 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      vector&
      operator=(const vector& __x);
# 595 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      vector&
      operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
      {
 constexpr bool __move_storage =
   _Alloc_traits::_S_propagate_on_move_assign()
   || _Alloc_traits::_S_always_equal();
 _M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 return *this;
      }
# 616 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      vector&
      operator=(initializer_list<value_type> __l)
      {
 this->_M_assign_aux(__l.begin(), __l.end(),
       random_access_iterator_tag());
 return *this;
      }
# 635 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 652 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 void
 assign(_InputIterator __first, _InputIterator __last)
 { _M_assign_dispatch(__first, __last, __false_type()); }
# 680 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      void
      assign(initializer_list<value_type> __l)
      {
 this->_M_assign_aux(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }



      using _Base::get_allocator;







      iterator
      begin() noexcept
      { return iterator(this->_M_impl._M_start); }






      const_iterator
      begin() const noexcept
      { return const_iterator(this->_M_impl._M_start); }






      iterator
      end() noexcept
      { return iterator(this->_M_impl._M_finish); }






      const_iterator
      end() const noexcept
      { return const_iterator(this->_M_impl._M_finish); }






      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }






      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }






      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }






      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }







      const_iterator
      cbegin() const noexcept
      { return const_iterator(this->_M_impl._M_start); }






      const_iterator
      cend() const noexcept
      { return const_iterator(this->_M_impl._M_finish); }






      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }






      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }




      size_type
      size() const noexcept
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }


      size_type
      max_size() const noexcept
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
# 823 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      void
      resize(size_type __new_size)
      {
 if (__new_size > size())
   _M_default_append(__new_size - size());
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 843 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      void
      resize(size_type __new_size, const value_type& __x)
      {
 if (__new_size > size())
   _M_fill_insert(end(), __new_size - size(), __x);
 else if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
# 875 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      void
      shrink_to_fit()
      { _M_shrink_to_fit(); }






      size_type
      capacity() const noexcept
      { return size_type(this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start); }





      bool
      empty() const noexcept
      { return begin() == end(); }
# 914 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      void
      reserve(size_type __n);
# 929 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      reference
      operator[](size_type __n) noexcept
      {
 ;
 return *(this->_M_impl._M_start + __n);
      }
# 947 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      const_reference
      operator[](size_type __n) const noexcept
      {
 ;
 return *(this->_M_impl._M_start + __n);
      }

    protected:

      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("vector::_M_range_check: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
      }

    public:
# 978 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }
# 996 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }





      reference
      front() noexcept
      {
 ;
 return *begin();
      }





      const_reference
      front() const noexcept
      {
 ;
 return *begin();
      }





      reference
      back() noexcept
      {
 ;
 return *(end() - 1);
      }





      const_reference
      back() const noexcept
      {
 ;
 return *(end() - 1);
      }
# 1054 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      _Tp*
      data() noexcept
      { return _M_data_ptr(this->_M_impl._M_start); }

      const _Tp*
      data() const noexcept
      { return _M_data_ptr(this->_M_impl._M_start); }
# 1073 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     ;
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         __x);
     ++this->_M_impl._M_finish;
     ;
   }
 else
   _M_realloc_insert(end(), __x);
      }


      void
      push_back(value_type&& __x)
      { emplace_back(std::move(__x)); }

      template<typename... _Args>



 void

 emplace_back(_Args&&... __args);
# 1111 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      void
      pop_back() noexcept
      {
 ;
 --this->_M_impl._M_finish;
 _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 ;
      }
# 1133 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      template<typename... _Args>
 iterator
 emplace(const_iterator __position, _Args&&... __args)
 { return _M_emplace_aux(__position, std::forward<_Args>(__args)...); }
# 1149 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      iterator
      insert(const_iterator __position, const value_type& __x);
# 1179 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      iterator
      insert(const_iterator __position, value_type&& __x)
      { return _M_insert_rval(__position, std::move(__x)); }
# 1196 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      iterator
      insert(const_iterator __position, initializer_list<value_type> __l)
      {
 auto __offset = __position - cbegin();
 _M_range_insert(begin() + __offset, __l.begin(), __l.end(),
   std::random_access_iterator_tag());
 return begin() + __offset;
      }
# 1221 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      iterator
      insert(const_iterator __position, size_type __n, const value_type& __x)
      {
 difference_type __offset = __position - cbegin();
 _M_fill_insert(begin() + __offset, __n, __x);
 return begin() + __offset;
      }
# 1263 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 iterator
 insert(const_iterator __position, _InputIterator __first,
        _InputIterator __last)
 {
   difference_type __offset = __position - cbegin();
   _M_insert_dispatch(begin() + __offset,
        __first, __last, __false_type());
   return begin() + __offset;
 }
# 1315 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      iterator

      erase(const_iterator __position)
      { return _M_erase(begin() + (__position - cbegin())); }
# 1342 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      iterator

      erase(const_iterator __first, const_iterator __last)
      {
 const auto __beg = begin();
 const auto __cbeg = cbegin();
 return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
      }
# 1366 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      void
      swap(vector& __x) noexcept
      {


                                                          ;

 this->_M_impl._M_swap_data(__x._M_impl);
 _Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
      __x._M_get_Tp_allocator());
      }







      void
      clear() noexcept
      { _M_erase_at_end(this->_M_impl._M_start); }

    protected:




      template<typename _ForwardIterator>
 pointer
 _M_allocate_and_copy(size_type __n,
        _ForwardIterator __first, _ForwardIterator __last)
 {
   pointer __result = this->_M_allocate(__n);
   try
     {
       std::__uninitialized_copy_a(__first, __last, __result,
       _M_get_Tp_allocator());
       return __result;
     }
   catch(...)
     {
       _M_deallocate(__result, __n);
       throw;
     }
 }
# 1419 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      template<typename _Integer>
 void
 _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
 {
   this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
   this->_M_impl._M_end_of_storage =
     this->_M_impl._M_start + static_cast<size_type>(__n);
   _M_fill_initialize(static_cast<size_type>(__n), __value);
 }


      template<typename _InputIterator>
 void
 _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
 {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_initialize(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
 void
 _M_range_initialize(_InputIterator __first, _InputIterator __last,
       std::input_iterator_tag)
 {
   try {
     for (; __first != __last; ++__first)

       emplace_back(*__first);



   } catch(...) {
     clear();
     throw;
   }
 }


      template<typename _ForwardIterator>
 void
 _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
       std::forward_iterator_tag)
 {
   const size_type __n = std::distance(__first, __last);
   this->_M_impl._M_start = this->_M_allocate(__n);
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   this->_M_impl._M_finish =
     std::__uninitialized_copy_a(__first, __last,
     this->_M_impl._M_start,
     _M_get_Tp_allocator());
 }



      void
      _M_fill_initialize(size_type __n, const value_type& __value)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
     _M_get_Tp_allocator());
      }



      void
      _M_default_initialize(size_type __n)
      {
 this->_M_impl._M_finish =
   std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
        _M_get_Tp_allocator());
      }
# 1502 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      template<typename _Integer>
 void
 _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
 { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
 void
 _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type)
 { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }


      template<typename _InputIterator>
 void
 _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);


      template<typename _ForwardIterator>
 void
 _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag);



      void
      _M_fill_assign(size_type __n, const value_type& __val);







      template<typename _Integer>
 void
 _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
      __true_type)
 { _M_fill_insert(__pos, __n, __val); }


      template<typename _InputIterator>
 void
 _M_insert_dispatch(iterator __pos, _InputIterator __first,
      _InputIterator __last, __false_type)
 {
   _M_range_insert(__pos, __first, __last,
     std::__iterator_category(__first));
 }


      template<typename _InputIterator>
 void
 _M_range_insert(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag);


      template<typename _ForwardIterator>
 void
 _M_range_insert(iterator __pos, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);



      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);



      void
      _M_default_append(size_type __n);

      bool
      _M_shrink_to_fit();
# 1589 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
      struct _Temporary_value
      {
 template<typename... _Args>
   explicit
   _Temporary_value(vector* __vec, _Args&&... __args) : _M_this(__vec)
   {
     _Alloc_traits::construct(_M_this->_M_impl, _M_ptr(),
         std::forward<_Args>(__args)...);
   }

 ~_Temporary_value()
 { _Alloc_traits::destroy(_M_this->_M_impl, _M_ptr()); }

 value_type&
 _M_val() { return *reinterpret_cast<_Tp*>(&__buf); }

      private:
 pointer
 _M_ptr() { return pointer_traits<pointer>::pointer_to(_M_val()); }

 vector* _M_this;
 typename aligned_storage<sizeof(_Tp), alignof(_Tp)>::type __buf;
      };



      template<typename _Arg>
 void
 _M_insert_aux(iterator __position, _Arg&& __arg);

      template<typename... _Args>
 void
 _M_realloc_insert(iterator __position, _Args&&... __args);


      iterator
      _M_insert_rval(const_iterator __position, value_type&& __v);


      template<typename... _Args>
 iterator
 _M_emplace_aux(const_iterator __position, _Args&&... __args);


      iterator
      _M_emplace_aux(const_iterator __position, value_type&& __v)
      { return _M_insert_rval(__position, std::move(__v)); }



      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + std::max(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }





      void
      _M_erase_at_end(pointer __pos) noexcept
      {
 if (size_type __n = this->_M_impl._M_finish - __pos)
   {
     std::_Destroy(__pos, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     this->_M_impl._M_finish = __pos;
     ;
   }
      }

      iterator
      _M_erase(iterator __position);

      iterator
      _M_erase(iterator __first, iterator __last);


    private:



      void
      _M_move_assign(vector&& __x, std::true_type) noexcept
      {
 vector __tmp(get_allocator());
 this->_M_impl._M_swap_data(__tmp._M_impl);
 this->_M_impl._M_swap_data(__x._M_impl);
 std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
      }



      void
      _M_move_assign(vector&& __x, std::false_type)
      {
 if (__x._M_get_Tp_allocator() == this->_M_get_Tp_allocator())
   _M_move_assign(std::move(__x), std::true_type());
 else
   {


     this->assign(std::__make_move_if_noexcept_iterator(__x.begin()),
    std::__make_move_if_noexcept_iterator(__x.end()));
     __x.clear();
   }
      }


      template<typename _Up>
 _Up*
 _M_data_ptr(_Up* __ptr) const noexcept
 { return __ptr; }


      template<typename _Ptr>
 typename std::pointer_traits<_Ptr>::element_type*
 _M_data_ptr(_Ptr __ptr) const
 { return empty() ? nullptr : std::__to_address(__ptr); }
# 1729 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
    };
# 1751 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return (__x.size() == __y.size()
       && std::equal(__x.begin(), __x.end(), __y.begin())); }
# 1768 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
    noexcept(noexcept(__x.swap(__y)))
    { __x.swap(__y); }



}
# 65 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\vector" 2 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_bvector.h" 1 3
# 64 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_bvector.h" 3
namespace std
{



  typedef unsigned long _Bit_type;
  enum { _S_word_bit = int(8 * sizeof(_Bit_type)) };

  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
    : _M_p(__x), _M_mask(__y) { }

    _Bit_reference() noexcept : _M_p(0), _M_mask(0) { }

    operator bool() const noexcept
    { return !!(*_M_p & _M_mask); }

    _Bit_reference&
    operator=(bool __x) noexcept
    {
      if (__x)
 *_M_p |= _M_mask;
      else
 *_M_p &= ~_M_mask;
      return *this;
    }

    _Bit_reference&
    operator=(const _Bit_reference& __x) noexcept
    { return *this = bool(__x); }

    bool
    operator==(const _Bit_reference& __x) const
    { return bool(*this) == bool(__x); }

    bool
    operator<(const _Bit_reference& __x) const
    { return !bool(*this) && bool(__x); }

    void
    flip() noexcept
    { *_M_p ^= _M_mask; }
  };


  inline void
  swap(_Bit_reference __x, _Bit_reference __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }

  inline void
  swap(_Bit_reference __x, bool& __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }

  inline void
  swap(bool& __x, _Bit_reference __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }


  struct _Bit_iterator_base
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
    : _M_p(__x), _M_offset(__y) { }

    void
    _M_bump_up()
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 {
   _M_offset = 0;
   ++_M_p;
 }
    }

    void
    _M_bump_down()
    {
      if (_M_offset-- == 0)
 {
   _M_offset = int(_S_word_bit) - 1;
   --_M_p;
 }
    }

    void
    _M_incr(ptrdiff_t __i)
    {
      difference_type __n = __i + _M_offset;
      _M_p += __n / int(_S_word_bit);
      __n = __n % int(_S_word_bit);
      if (__n < 0)
 {
   __n += int(_S_word_bit);
   --_M_p;
 }
      _M_offset = static_cast<unsigned int>(__n);
    }

    bool
    operator==(const _Bit_iterator_base& __i) const
    { return _M_p == __i._M_p && _M_offset == __i._M_offset; }

    bool
    operator<(const _Bit_iterator_base& __i) const
    {
      return _M_p < __i._M_p
     || (_M_p == __i._M_p && _M_offset < __i._M_offset);
    }

    bool
    operator!=(const _Bit_iterator_base& __i) const
    { return !(*this == __i); }

    bool
    operator>(const _Bit_iterator_base& __i) const
    { return __i < *this; }

    bool
    operator<=(const _Bit_iterator_base& __i) const
    { return !(__i < *this); }

    bool
    operator>=(const _Bit_iterator_base& __i) const
    { return !(*this < __i); }
  };

  inline ptrdiff_t
  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
  {
    return (int(_S_word_bit) * (__x._M_p - __y._M_p)
     + __x._M_offset - __y._M_offset);
  }

  struct _Bit_iterator : public _Bit_iterator_base
  {
    typedef _Bit_reference reference;
    typedef _Bit_reference* pointer;
    typedef _Bit_iterator iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    iterator
    _M_const_cast() const
    { return *this; }

    reference
    operator*() const
    { return reference(_M_p, 1UL << _M_offset); }

    iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    iterator
    operator++(int)
    {
      iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    iterator
    operator--(int)
    {
      iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    iterator
    operator+(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp += __i;
    }

    iterator
    operator-(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp -= __i;
    }

    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_iterator
  operator+(ptrdiff_t __n, const _Bit_iterator& __x)
  { return __x + __n; }

  struct _Bit_const_iterator : public _Bit_iterator_base
  {
    typedef bool reference;
    typedef bool const_reference;
    typedef const bool* pointer;
    typedef _Bit_const_iterator const_iterator;

    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    _Bit_const_iterator(const _Bit_iterator& __x)
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }

    _Bit_iterator
    _M_const_cast() const
    { return _Bit_iterator(_M_p, _M_offset); }

    const_reference
    operator*() const
    { return _Bit_reference(_M_p, 1UL << _M_offset); }

    const_iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    const_iterator
    operator++(int)
    {
      const_iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    const_iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    const_iterator
    operator--(int)
    {
      const_iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    const_iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    const_iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    const_iterator
    operator+(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp += __i;
    }

    const_iterator
    operator-(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp -= __i;
    }

    const_reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_const_iterator
  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)
  { return __x + __n; }

  inline void
  __fill_bvector(_Bit_type * __v,
   unsigned int __first, unsigned int __last, bool __x)
  {
    const _Bit_type __fmask = ~0ul << __first;
    const _Bit_type __lmask = ~0ul >> (_S_word_bit - __last);
    const _Bit_type __mask = __fmask & __lmask;

    if (__x)
      *__v |= __mask;
    else
      *__v &= ~__mask;
  }

  inline void
  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)
  {
    if (__first._M_p != __last._M_p)
      {
 _Bit_type* __first_p = __first._M_p;
 if (__first._M_offset != 0)
   __fill_bvector(__first_p++, __first._M_offset, _S_word_bit, __x);

 __builtin_memset(__first_p, __x ? ~0 : 0,
    (__last._M_p - __first_p) * sizeof(_Bit_type));

 if (__last._M_offset != 0)
   __fill_bvector(__last._M_p, 0, __last._M_offset, __x);
      }
    else if (__first._M_offset != __last._M_offset)
      __fill_bvector(__first._M_p, __first._M_offset, __last._M_offset, __x);
  }

  template<typename _Alloc>
    struct _Bvector_base
    {
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
        rebind<_Bit_type>::other _Bit_alloc_type;
      typedef typename __gnu_cxx::__alloc_traits<_Bit_alloc_type>
 _Bit_alloc_traits;
      typedef typename _Bit_alloc_traits::pointer _Bit_pointer;

      struct _Bvector_impl_data
      {
 _Bit_iterator _M_start;
 _Bit_iterator _M_finish;
 _Bit_pointer _M_end_of_storage;

 _Bvector_impl_data() noexcept
 : _M_start(), _M_finish(), _M_end_of_storage()
 { }


 _Bvector_impl_data(_Bvector_impl_data&& __x) noexcept
 : _M_start(__x._M_start), _M_finish(__x._M_finish)
 , _M_end_of_storage(__x._M_end_of_storage)
 { __x._M_reset(); }

 void
 _M_move_data(_Bvector_impl_data&& __x) noexcept
 {
   this->_M_start = __x._M_start;
   this->_M_finish = __x._M_finish;
   this->_M_end_of_storage = __x._M_end_of_storage;
   __x._M_reset();
 }


 void
 _M_reset() noexcept
 {
   _M_start = _M_finish = _Bit_iterator();
   _M_end_of_storage = _Bit_pointer();
 }
      };

      struct _Bvector_impl
 : public _Bit_alloc_type, public _Bvector_impl_data
 {
 public:
   _Bvector_impl()
     noexcept(noexcept(_Bit_alloc_type()))
   : _Bit_alloc_type()
   { }

   _Bvector_impl(const _Bit_alloc_type& __a) noexcept
   : _Bit_alloc_type(__a)
   { }


 _Bvector_impl(_Bvector_impl&&) = default;


 _Bit_type*
 _M_end_addr() const noexcept
 {
   if (this->_M_end_of_storage)
     return std::__addressof(this->_M_end_of_storage[-1]) + 1;
   return 0;
 }
      };

    public:
      typedef _Alloc allocator_type;

      _Bit_alloc_type&
      _M_get_Bit_allocator() noexcept
      { return this->_M_impl; }

      const _Bit_alloc_type&
      _M_get_Bit_allocator() const noexcept
      { return this->_M_impl; }

      allocator_type
      get_allocator() const noexcept
      { return allocator_type(_M_get_Bit_allocator()); }


      _Bvector_base() = default;




      _Bvector_base(const allocator_type& __a)
      : _M_impl(__a) { }


      _Bvector_base(_Bvector_base&&) = default;


      ~_Bvector_base()
      { this->_M_deallocate(); }

    protected:
      _Bvector_impl _M_impl;

      _Bit_pointer
      _M_allocate(size_t __n)
      { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }

      void
      _M_deallocate()
      {
 if (_M_impl._M_start._M_p)
   {
     const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
     _Bit_alloc_traits::deallocate(_M_impl,
       _M_impl._M_end_of_storage - __n,
       __n);
     _M_impl._M_reset();
   }
      }


      void
      _M_move_data(_Bvector_base&& __x) noexcept
      { _M_impl._M_move_data(std::move(__x._M_impl)); }


      static size_t
      _S_nword(size_t __n)
      { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
    };



}




namespace std
{


# 587 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_bvector.h" 3
  template<typename _Alloc>
    class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>
    {
      typedef _Bvector_base<_Alloc> _Base;
      typedef typename _Base::_Bit_pointer _Bit_pointer;
      typedef typename _Base::_Bit_alloc_traits _Bit_alloc_traits;


      friend struct std::hash<vector>;


    public:
      typedef bool value_type;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Bit_reference reference;
      typedef bool const_reference;
      typedef _Bit_reference* pointer;
      typedef const bool* const_pointer;
      typedef _Bit_iterator iterator;
      typedef _Bit_const_iterator const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef _Alloc allocator_type;

      allocator_type
      get_allocator() const
      { return _Base::get_allocator(); }

    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_S_nword;
      using _Base::_M_get_Bit_allocator;

    public:

      vector() = default;




      explicit
      vector(const allocator_type& __a)
      : _Base(__a) { }


      explicit
      vector(size_type __n, const allocator_type& __a = allocator_type())
      : vector(__n, false, __a)
      { }

      vector(size_type __n, const bool& __value,
      const allocator_type& __a = allocator_type())





      : _Base(__a)
      {
 _M_initialize(__n);
 _M_initialize_value(__value);
      }

      vector(const vector& __x)
      : _Base(_Bit_alloc_traits::_S_select_on_copy(__x._M_get_Bit_allocator()))
      {
 _M_initialize(__x.size());
 _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
      }


      vector(vector&&) = default;

      vector(vector&& __x, const allocator_type& __a)
      noexcept(_Bit_alloc_traits::_S_always_equal())
      : _Base(__a)
      {
 if (__x.get_allocator() == __a)
   this->_M_move_data(std::move(__x));
 else
   {
     _M_initialize(__x.size());
     _M_copy_aligned(__x.begin(), __x.end(), begin());
     __x.clear();
   }
      }

      vector(const vector& __x, const allocator_type& __a)
      : _Base(__a)
      {
 _M_initialize(__x.size());
 _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
      }

      vector(initializer_list<bool> __l,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 _M_initialize_range(__l.begin(), __l.end(),
       random_access_iterator_tag());
      }



      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
 { _M_initialize_dispatch(__first, __last, __false_type()); }
# 710 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_bvector.h" 3
      ~vector() noexcept { }

      vector&
      operator=(const vector& __x)
      {
 if (&__x == this)
   return *this;

 if (_Bit_alloc_traits::_S_propagate_on_copy_assign())
   {
     if (this->_M_get_Bit_allocator() != __x._M_get_Bit_allocator())
       {
  this->_M_deallocate();
  std::__alloc_on_copy(_M_get_Bit_allocator(),
         __x._M_get_Bit_allocator());
  _M_initialize(__x.size());
       }
     else
       std::__alloc_on_copy(_M_get_Bit_allocator(),
       __x._M_get_Bit_allocator());
   }

 if (__x.size() > capacity())
   {
     this->_M_deallocate();
     _M_initialize(__x.size());
   }
 this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
        begin());
 return *this;
      }


      vector&
      operator=(vector&& __x) noexcept(_Bit_alloc_traits::_S_nothrow_move())
      {
 if (_Bit_alloc_traits::_S_propagate_on_move_assign()
     || this->_M_get_Bit_allocator() == __x._M_get_Bit_allocator())
   {
     this->_M_deallocate();
     this->_M_move_data(std::move(__x));
     std::__alloc_on_move(_M_get_Bit_allocator(),
     __x._M_get_Bit_allocator());
   }
 else
   {
     if (__x.size() > capacity())
       {
  this->_M_deallocate();
  _M_initialize(__x.size());
       }
     this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
            begin());
     __x.clear();
   }
 return *this;
      }

      vector&
      operator=(initializer_list<bool> __l)
      {
 this->assign (__l.begin(), __l.end());
 return *this;
      }






      void
      assign(size_type __n, const bool& __x)
      { _M_fill_assign(__n, __x); }


      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 void
 assign(_InputIterator __first, _InputIterator __last)
 { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
# 801 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_bvector.h" 3
      void
      assign(initializer_list<bool> __l)
      { _M_assign_aux(__l.begin(), __l.end(), random_access_iterator_tag()); }


      iterator
      begin() noexcept
      { return this->_M_impl._M_start; }

      const_iterator
      begin() const noexcept
      { return this->_M_impl._M_start; }

      iterator
      end() noexcept
      { return this->_M_impl._M_finish; }

      const_iterator
      end() const noexcept
      { return this->_M_impl._M_finish; }

      reverse_iterator
      rbegin() noexcept
      { return reverse_iterator(end()); }

      const_reverse_iterator
      rbegin() const noexcept
      { return const_reverse_iterator(end()); }

      reverse_iterator
      rend() noexcept
      { return reverse_iterator(begin()); }

      const_reverse_iterator
      rend() const noexcept
      { return const_reverse_iterator(begin()); }


      const_iterator
      cbegin() const noexcept
      { return this->_M_impl._M_start; }

      const_iterator
      cend() const noexcept
      { return this->_M_impl._M_finish; }

      const_reverse_iterator
      crbegin() const noexcept
      { return const_reverse_iterator(end()); }

      const_reverse_iterator
      crend() const noexcept
      { return const_reverse_iterator(begin()); }


      size_type
      size() const noexcept
      { return size_type(end() - begin()); }

      size_type
      max_size() const noexcept
      {
 const size_type __isize =
   __gnu_cxx::__numeric_traits<difference_type>::__max
   - int(_S_word_bit) + 1;
 const size_type __asize
   = _Bit_alloc_traits::max_size(_M_get_Bit_allocator());
 return (__asize <= __isize / int(_S_word_bit)
  ? __asize * int(_S_word_bit) : __isize);
      }

      size_type
      capacity() const noexcept
      { return size_type(const_iterator(this->_M_impl._M_end_addr(), 0)
    - begin()); }

      bool
      empty() const noexcept
      { return begin() == end(); }

      reference
      operator[](size_type __n)
      {
 return *iterator(this->_M_impl._M_start._M_p
    + __n / int(_S_word_bit), __n % int(_S_word_bit));
      }

      const_reference
      operator[](size_type __n) const
      {
 return *const_iterator(this->_M_impl._M_start._M_p
        + __n / int(_S_word_bit), __n % int(_S_word_bit));
      }

    protected:
      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range_fmt(("vector<bool>::_M_range_check: __n " "(which is %zu) >= this->size() " "(which is %zu)")

                            ,
       __n, this->size());
      }

    public:
      reference
      at(size_type __n)
      { _M_range_check(__n); return (*this)[__n]; }

      const_reference
      at(size_type __n) const
      { _M_range_check(__n); return (*this)[__n]; }

      void
      reserve(size_type __n)
      {
 if (__n > max_size())
   __throw_length_error(("vector::reserve"));
 if (capacity() < __n)
   _M_reallocate(__n);
      }

      reference
      front()
      { return *begin(); }

      const_reference
      front() const
      { return *begin(); }

      reference
      back()
      { return *(end() - 1); }

      const_reference
      back() const
      { return *(end() - 1); }






      void
      data() noexcept { }

      void
      push_back(bool __x)
      {
 if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr())
   *this->_M_impl._M_finish++ = __x;
 else
   _M_insert_aux(end(), __x);
      }

      void
      swap(vector& __x) noexcept
      {
 std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
 std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
 std::swap(this->_M_impl._M_end_of_storage,
    __x._M_impl._M_end_of_storage);
 _Bit_alloc_traits::_S_on_swap(_M_get_Bit_allocator(),
          __x._M_get_Bit_allocator());
      }


      static void
      swap(reference __x, reference __y) noexcept
      {
 bool __tmp = __x;
 __x = __y;
 __y = __tmp;
      }

      iterator

      insert(const_iterator __position, const bool& __x = bool())



      {
 const difference_type __n = __position - begin();
 if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr()
     && __position == end())
   *this->_M_impl._M_finish++ = __x;
 else
   _M_insert_aux(__position._M_const_cast(), __x);
 return begin() + __n;
      }


      template<typename _InputIterator,
        typename = std::_RequireInputIter<_InputIterator>>
 iterator
 insert(const_iterator __position,
        _InputIterator __first, _InputIterator __last)
 {
   difference_type __offset = __position - cbegin();
   _M_insert_dispatch(__position._M_const_cast(),
        __first, __last, __false_type());
   return begin() + __offset;
 }
# 1017 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_bvector.h" 3
      iterator
      insert(const_iterator __position, size_type __n, const bool& __x)
      {
 difference_type __offset = __position - cbegin();
 _M_fill_insert(__position._M_const_cast(), __n, __x);
 return begin() + __offset;
      }







      iterator
      insert(const_iterator __p, initializer_list<bool> __l)
      { return this->insert(__p, __l.begin(), __l.end()); }


      void
      pop_back()
      { --this->_M_impl._M_finish; }

      iterator

      erase(const_iterator __position)



      { return _M_erase(__position._M_const_cast()); }

      iterator

      erase(const_iterator __first, const_iterator __last)



      { return _M_erase(__first._M_const_cast(), __last._M_const_cast()); }

      void
      resize(size_type __new_size, bool __x = bool())
      {
 if (__new_size < size())
   _M_erase_at_end(begin() + difference_type(__new_size));
 else
   insert(end(), __new_size - size(), __x);
      }


      void
      shrink_to_fit()
      { _M_shrink_to_fit(); }


      void
      flip() noexcept
      {
 _Bit_type * const __end = this->_M_impl._M_end_addr();
 for (_Bit_type * __p = this->_M_impl._M_start._M_p; __p != __end; ++__p)
   *__p = ~*__p;
      }

      void
      clear() noexcept
      { _M_erase_at_end(begin()); }


      template<typename... _Args>



 void

 emplace_back(_Args&&... __args)
 {
   push_back(bool(__args...));



 }

      template<typename... _Args>
 iterator
 emplace(const_iterator __pos, _Args&&... __args)
 { return insert(__pos, bool(__args...)); }


    protected:

      iterator
      _M_copy_aligned(const_iterator __first, const_iterator __last,
        iterator __result)
      {
 _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
 return std::copy(const_iterator(__last._M_p, 0), __last,
    iterator(__q, 0));
      }

      void
      _M_initialize(size_type __n)
      {
 if (__n)
   {
     _Bit_pointer __q = this->_M_allocate(__n);
     this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
     this->_M_impl._M_start = iterator(std::__addressof(*__q), 0);
   }
 else
   {
     this->_M_impl._M_end_of_storage = _Bit_pointer();
     this->_M_impl._M_start = iterator(0, 0);
   }
 this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);

      }

      void
      _M_initialize_value(bool __x)
      {
 if (_Bit_type* __p = this->_M_impl._M_start._M_p)
   __builtin_memset(__p, __x ? ~0 : 0,
      (this->_M_impl._M_end_addr() - __p)
      * sizeof(_Bit_type));
      }

      void
      _M_reallocate(size_type __n);


      bool
      _M_shrink_to_fit();






      template<typename _Integer>
 void
 _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
 {
   _M_initialize(static_cast<size_type>(__n));
   _M_initialize_value(__x);
 }

      template<typename _InputIterator>
 void
 _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
 { _M_initialize_range(__first, __last,
         std::__iterator_category(__first)); }

      template<typename _InputIterator>
 void
 _M_initialize_range(_InputIterator __first, _InputIterator __last,
       std::input_iterator_tag)
 {
   for (; __first != __last; ++__first)
     push_back(*__first);
 }

      template<typename _ForwardIterator>
 void
 _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
       std::forward_iterator_tag)
 {
   const size_type __n = std::distance(__first, __last);
   _M_initialize(__n);
   std::copy(__first, __last, this->_M_impl._M_start);
 }
# 1203 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\stl_bvector.h" 3
      void
      _M_fill_assign(size_t __n, bool __x)
      {
 if (__n > size())
   {
     _M_initialize_value(__x);
     insert(end(), __n - size(), __x);
   }
 else
   {
     _M_erase_at_end(begin() + __n);
     _M_initialize_value(__x);
   }
      }

      template<typename _InputIterator>
 void
 _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag)
 {
   iterator __cur = begin();
   for (; __first != __last && __cur != end(); ++__cur, ++__first)
     *__cur = *__first;
   if (__first == __last)
     _M_erase_at_end(__cur);
   else
     insert(end(), __first, __last);
 }

      template<typename _ForwardIterator>
 void
 _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag)
 {
   const size_type __len = std::distance(__first, __last);
   if (__len < size())
     _M_erase_at_end(std::copy(__first, __last, begin()));
   else
     {
       _ForwardIterator __mid = __first;
       std::advance(__mid, size());
       std::copy(__first, __mid, begin());
       insert(end(), __mid, __last);
     }
 }





      template<typename _Integer>
 void
 _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,
      __true_type)
 { _M_fill_insert(__pos, __n, __x); }

      template<typename _InputIterator>
 void
 _M_insert_dispatch(iterator __pos,
      _InputIterator __first, _InputIterator __last,
      __false_type)
 { _M_insert_range(__pos, __first, __last,
     std::__iterator_category(__first)); }

      void
      _M_fill_insert(iterator __position, size_type __n, bool __x);

      template<typename _InputIterator>
 void
 _M_insert_range(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag)
 {
   for (; __first != __last; ++__first)
     {
       __pos = insert(__pos, *__first);
       ++__pos;
     }
 }

      template<typename _ForwardIterator>
 void
 _M_insert_range(iterator __position, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);

      void
      _M_insert_aux(iterator __position, bool __x);

      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + std::max(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }

      void
      _M_erase_at_end(iterator __pos)
      { this->_M_impl._M_finish = __pos; }

      iterator
      _M_erase(iterator __pos);

      iterator
      _M_erase(iterator __first, iterator __last);
  };



}



namespace std
{




  template<typename _Alloc>
    struct hash<std::vector<bool, _Alloc>>
    : public __hash_base<size_t, std::vector<bool, _Alloc>>
    {
      size_t
      operator()(const std::vector<bool, _Alloc>&) const noexcept;
    };


}
# 66 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\vector" 2 3



# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\vector.tcc" 1 3
# 59 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\bits\\vector.tcc" 3
namespace std
{



  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   const size_type __old_size = size();
   pointer __tmp = _M_allocate_and_copy(__n,
     std::__make_move_if_noexcept_iterator(this->_M_impl._M_start),
     std::__make_move_if_noexcept_iterator(this->_M_impl._M_finish));
   ;
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __tmp;
   this->_M_impl._M_finish = __tmp + __old_size;
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 }
    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>



      void

      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     ;
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         std::forward<_Args>(__args)...);
     ++this->_M_impl._M_finish;
     ;
   }
 else
   _M_realloc_insert(end(), std::forward<_Args>(__args)...);



      }


  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::

    insert(const_iterator __position, const value_type& __x)



    {
      const size_type __n = __position - begin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 if (__position == end())
   {
     ;
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         __x);
     ++this->_M_impl._M_finish;
     ;
   }
 else
   {

     const auto __pos = begin() + (__position - cbegin());


     _Temporary_value __x_copy(this, __x);
     _M_insert_aux(__pos, std::move(__x_copy._M_val()));



   }
      else

 _M_realloc_insert(begin() + (__position - cbegin()), __x);




      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
 std::move(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
      ;
      return __position;
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 {
   if (__last != end())
     std::move(__last, end(), __first);
   _M_erase_at_end(__first.base() + (end() - __last));
 }
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 {
   ;

   if (_Alloc_traits::_S_propagate_on_copy_assign())
     {
       if (!_Alloc_traits::_S_always_equal()
           && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
         {

    this->clear();
    _M_deallocate(this->_M_impl._M_start,
    this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start);
    this->_M_impl._M_start = nullptr;
    this->_M_impl._M_finish = nullptr;
    this->_M_impl._M_end_of_storage = nullptr;
  }
       std::__alloc_on_copy(_M_get_Tp_allocator(),
       __x._M_get_Tp_allocator());
     }

   const size_type __xlen = __x.size();
   if (__xlen > capacity())
     {
       pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
         __x.end());
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __tmp;
       this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
     }
   else if (size() >= __xlen)
     {
       std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
       end(), _M_get_Tp_allocator());
     }
   else
     {
       std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
   this->_M_impl._M_start);
       std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
       __x._M_impl._M_finish,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     }
   this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_assign(size_t __n, const value_type& __val)
    {
      if (__n > capacity())
 {
   vector __tmp(__n, __val, _M_get_Tp_allocator());
   __tmp._M_impl._M_swap_data(this->_M_impl);
 }
      else if (__n > size())
 {
   std::fill(begin(), end(), __val);
   const size_type __add = __n - size();
   ;
   this->_M_impl._M_finish =
     std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
       __add, __val, _M_get_Tp_allocator());
   ;
 }
      else
        _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 pointer __cur(this->_M_impl._M_start);
 for (; __first != __last && __cur != this->_M_impl._M_finish;
      ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   _M_range_insert(end(), __first, __last,
     std::__iterator_category(__first));
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);

 if (__len > capacity())
   {
     pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
     ;
     std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     _M_deallocate(this->_M_impl._M_start,
     this->_M_impl._M_end_of_storage
     - this->_M_impl._M_start);
     this->_M_impl._M_start = __tmp;
     this->_M_impl._M_finish = this->_M_impl._M_start + __len;
     this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   }
 else if (size() >= __len)
   _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, this->_M_impl._M_start);
     const size_type __attribute__((__unused__)) __n = __len - size();
     ;
     this->_M_impl._M_finish =
       std::__uninitialized_copy_a(__mid, __last,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     ;
   }
      }


  template<typename _Tp, typename _Alloc>
    auto
    vector<_Tp, _Alloc>::
    _M_insert_rval(const_iterator __position, value_type&& __v) -> iterator
    {
      const auto __n = __position - cbegin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 if (__position == cend())
   {
     ;
     _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
         std::move(__v));
     ++this->_M_impl._M_finish;
     ;
   }
 else
   _M_insert_aux(begin() + __n, std::move(__v));
      else
 _M_realloc_insert(begin() + __n, std::move(__v));

      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      auto
      vector<_Tp, _Alloc>::
      _M_emplace_aux(const_iterator __position, _Args&&... __args)
      -> iterator
      {
 const auto __n = __position - cbegin();
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   if (__position == cend())
     {
       ;
       _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
           std::forward<_Args>(__args)...);
       ++this->_M_impl._M_finish;
       ;
     }
   else
     {



       _Temporary_value __tmp(this, std::forward<_Args>(__args)...);
       _M_insert_aux(begin() + __n, std::move(__tmp._M_val()));
     }
 else
   _M_realloc_insert(begin() + __n, std::forward<_Args>(__args)...);

 return iterator(this->_M_impl._M_start + __n);
      }

  template<typename _Tp, typename _Alloc>
    template<typename _Arg>
      void
      vector<_Tp, _Alloc>::
      _M_insert_aux(iterator __position, _Arg&& __arg)






    {
      ;
      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
          std::move(*(this->_M_impl._M_finish - 1)));
      ++this->_M_impl._M_finish;
      ;



      std::move_backward(__position.base(), this->_M_impl._M_finish - 2, this->_M_impl._M_finish - 1)

                                     ;



      *__position = std::forward<_Arg>(__arg);

    }


  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      _M_realloc_insert(iterator __position, _Args&&... __args)






    {
      const size_type __len =
 _M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
      pointer __old_finish = this->_M_impl._M_finish;
      const size_type __elems_before = __position - begin();
      pointer __new_start(this->_M_allocate(__len));
      pointer __new_finish(__new_start);
      try
 {





   _Alloc_traits::construct(this->_M_impl,
       __new_start + __elems_before,

       std::forward<_Args>(__args)...);



   __new_finish = pointer();

   __new_finish
     = std::__uninitialized_move_if_noexcept_a
     (__old_start, __position.base(),
      __new_start, _M_get_Tp_allocator());

   ++__new_finish;

   __new_finish
     = std::__uninitialized_move_if_noexcept_a
     (__position.base(), __old_finish,
      __new_finish, _M_get_Tp_allocator());
 }
      catch(...)
 {
   if (!__new_finish)
     _Alloc_traits::destroy(this->_M_impl,
       __new_start + __elems_before);
   else
     std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
   _M_deallocate(__new_start, __len);
   throw;
 }
      ;
      std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _M_deallocate(__old_start,
      this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {



       _Temporary_value __tmp(this, __x);
       value_type& __x_copy = __tmp._M_val();

       const size_type __elems_after = end() - __position;
       pointer __old_finish(this->_M_impl._M_finish);
       if (__elems_after > __n)
  {
    ;
    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n;
    ;
    std::move_backward(__position.base(), __old_finish - __n, __old_finish)
                                        ;
    std::fill(__position.base(), __position.base() + __n,
       __x_copy);
  }
       else
  {
    ;
    this->_M_impl._M_finish =
      std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
        __n - __elems_after,
        __x_copy,
        _M_get_Tp_allocator());
    ;
    std::__uninitialized_move_a(__position.base(), __old_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __elems_after;
    ;
    std::fill(__position.base(), __old_finish, __x_copy);
  }
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_fill_insert");
       const size_type __elems_before = __position - begin();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       try
  {

    std::__uninitialized_fill_n_a(__new_start + __elems_before,
      __n, __x,
      _M_get_Tp_allocator());
    __new_finish = pointer();

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (this->_M_impl._M_start, __position.base(),
       __new_start, _M_get_Tp_allocator());

    __new_finish += __n;

    __new_finish
      = std::__uninitialized_move_if_noexcept_a
      (__position.base(), this->_M_impl._M_finish,
       __new_finish, _M_get_Tp_allocator());
  }
       catch(...)
  {
    if (!__new_finish)
      std::_Destroy(__new_start + __elems_before,
      __new_start + __elems_before + __n,
      _M_get_Tp_allocator());
    else
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
    throw;
  }
       ;
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }


  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_default_append(size_type __n)
    {
      if (__n != 0)
 {
   const size_type __size = size();
   size_type __navail = size_type(this->_M_impl._M_end_of_storage
      - this->_M_impl._M_finish);

   if (__size > max_size() || __navail > max_size() - __size)
     __builtin_unreachable();

   if (__navail >= __n)
     {
       ;
       this->_M_impl._M_finish =
  std::__uninitialized_default_n_a(this->_M_impl._M_finish,
       __n, _M_get_Tp_allocator());
       ;
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_default_append");
       pointer __new_start(this->_M_allocate(__len));
       pointer __destroy_from = pointer();
       try
  {
    std::__uninitialized_default_n_a(__new_start + __size,
         __n, _M_get_Tp_allocator());
    __destroy_from = __new_start + __size;
    std::__uninitialized_move_if_noexcept_a(
        this->_M_impl._M_start, this->_M_impl._M_finish,
        __new_start, _M_get_Tp_allocator());
  }
       catch(...)
  {
    if (__destroy_from)
      std::_Destroy(__destroy_from, __destroy_from + __n,
      _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
    throw;
  }
       ;
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_start + __size + __n;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }

  template<typename _Tp, typename _Alloc>
    bool
    vector<_Tp, _Alloc>::
    _M_shrink_to_fit()
    {
      if (capacity() == size())
 return false;
      ;
      return std::__shrink_to_fit_aux<vector>::_S_do_it(*this);
    }


  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 if (__pos == end())
   {
     for (; __first != __last; ++__first)
       insert(end(), *__first);
   }
 else if (__first != __last)
   {
     vector __tmp(__first, __last, _M_get_Tp_allocator());
     insert(__pos,
     std::make_move_iterator(__tmp.begin()),
     std::make_move_iterator(__tmp.end()));
   }
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     const size_type __n = std::distance(__first, __last);
     if (size_type(this->_M_impl._M_end_of_storage
     - this->_M_impl._M_finish) >= __n)
       {
  const size_type __elems_after = end() - __position;
  pointer __old_finish(this->_M_impl._M_finish);
  if (__elems_after > __n)
    {
      ;
      std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
      this->_M_impl._M_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n;
      ;
      std::move_backward(__position.base(), __old_finish - __n, __old_finish)
                                          ;
      std::copy(__first, __last, __position);
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, __elems_after);
      ;
      std::__uninitialized_copy_a(__mid, __last,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n - __elems_after;
      ;
      std::__uninitialized_move_a(__position.base(),
      __old_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __elems_after;
      ;
      std::copy(__first, __mid, __position);
    }
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector::_M_range_insert");
  pointer __new_start(this->_M_allocate(__len));
  pointer __new_finish(__new_start);
  try
    {
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (this->_M_impl._M_start, __position.base(),
         __new_start, _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_copy_a(__first, __last,
          __new_finish,
          _M_get_Tp_allocator());
      __new_finish
        = std::__uninitialized_move_if_noexcept_a
        (__position.base(), this->_M_impl._M_finish,
         __new_finish, _M_get_Tp_allocator());
    }
  catch(...)
    {
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
      _M_deallocate(__new_start, __len);
      throw;
    }
  ;
  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         _M_get_Tp_allocator());
  _M_deallocate(this->_M_impl._M_start,
         this->_M_impl._M_end_of_storage
         - this->_M_impl._M_start);
  this->_M_impl._M_start = __new_start;
  this->_M_impl._M_finish = __new_finish;
  this->_M_impl._M_end_of_storage = __new_start + __len;
       }
   }
      }



  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_reallocate(size_type __n)
    {
      _Bit_pointer __q = this->_M_allocate(__n);
      iterator __start(std::__addressof(*__q), 0);
      iterator __finish(_M_copy_aligned(begin(), end(), __start));
      this->_M_deallocate();
      this->_M_impl._M_start = __start;
      this->_M_impl._M_finish = __finish;
      this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
    }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, bool __x)
    {
      if (__n == 0)
 return;
      if (capacity() - size() >= __n)
 {
   std::copy_backward(__position, end(),
        this->_M_impl._M_finish + difference_type(__n));
   std::fill(__position, __position + difference_type(__n), __x);
   this->_M_impl._M_finish += difference_type(__n);
 }
      else
 {
   const size_type __len =
     _M_check_len(__n, "vector<bool>::_M_fill_insert");
   _Bit_pointer __q = this->_M_allocate(__len);
   iterator __start(std::__addressof(*__q), 0);
   iterator __i = _M_copy_aligned(begin(), __position, __start);
   std::fill(__i, __i + difference_type(__n), __x);
   iterator __finish = std::copy(__position, end(),
     __i + difference_type(__n));
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = __start;
   this->_M_impl._M_finish = __finish;
 }
    }

  template<typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<bool, _Alloc>::
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     size_type __n = std::distance(__first, __last);
     if (capacity() - size() >= __n)
       {
  std::copy_backward(__position, end(),
       this->_M_impl._M_finish
       + difference_type(__n));
  std::copy(__first, __last, __position);
  this->_M_impl._M_finish += difference_type(__n);
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector<bool>::_M_insert_range");
  _Bit_pointer __q = this->_M_allocate(__len);
  iterator __start(std::__addressof(*__q), 0);
  iterator __i = _M_copy_aligned(begin(), __position, __start);
  __i = std::copy(__first, __last, __i);
  iterator __finish = std::copy(__position, end(), __i);
  this->_M_deallocate();
  this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
  this->_M_impl._M_start = __start;
  this->_M_impl._M_finish = __finish;
       }
   }
      }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_insert_aux(iterator __position, bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr())
 {
   std::copy_backward(__position, this->_M_impl._M_finish,
        this->_M_impl._M_finish + 1);
   *__position = __x;
   ++this->_M_impl._M_finish;
 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector<bool>::_M_insert_aux");
   _Bit_pointer __q = this->_M_allocate(__len);
   iterator __start(std::__addressof(*__q), 0);
   iterator __i = _M_copy_aligned(begin(), __position, __start);
   *__i++ = __x;
   iterator __finish = std::copy(__position, end(), __i);
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
   this->_M_impl._M_start = __start;
   this->_M_impl._M_finish = __finish;
 }
    }

  template<typename _Alloc>
    typename vector<bool, _Alloc>::iterator
    vector<bool, _Alloc>::
    _M_erase(iterator __position)
    {
      if (__position + 1 != end())
        std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      return __position;
    }

  template<typename _Alloc>
    typename vector<bool, _Alloc>::iterator
    vector<bool, _Alloc>::
    _M_erase(iterator __first, iterator __last)
    {
      if (__first != __last)
 _M_erase_at_end(std::copy(__last, end(), __first));
      return __first;
    }


  template<typename _Alloc>
    bool
    vector<bool, _Alloc>::
    _M_shrink_to_fit()
    {
      if (capacity() - size() < int(_S_word_bit))
 return false;
      try
 {
   _M_reallocate(size());
   return true;
 }
      catch(...)
 { return false; }
    }




}



namespace std
{


  template<typename _Alloc>
    size_t
    hash<std::vector<bool, _Alloc>>::
    operator()(const std::vector<bool, _Alloc>& __b) const noexcept
    {
      size_t __hash = 0;
      using std::_S_word_bit;
      using std::_Bit_type;

      const size_t __words = __b.size() / _S_word_bit;
      if (__words)
 {
   const size_t __clength = __words * sizeof(_Bit_type);
   __hash = std::_Hash_impl::hash(__b._M_impl._M_start._M_p, __clength);
 }

      const size_t __extrabits = __b.size() % _S_word_bit;
      if (__extrabits)
 {
   _Bit_type __hiword = *__b._M_impl._M_finish._M_p;
   __hiword &= ~((~static_cast<_Bit_type>(0)) << __extrabits);

   const size_t __clength
     = (__extrabits + 8 - 1) / 8;
   if (__words)
     __hash = std::_Hash_impl::hash(&__hiword, __clength, __hash);
   else
     __hash = std::_Hash_impl::hash(&__hiword, __clength);
 }

      return __hash;
    }


}
# 70 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\vector" 2 3
# 9 "../../include/utils/camera.h" 2



# 11 "../../include/utils/camera.h"
enum Camera_Movement {
    FORWARD,
    BACKWARD,
    LEFT,
    RIGHT
};


const float YAW = -90.0f;
const float PITCH = 0.0f;
const float SPEED = 10.0f;
const float SENSITIVITY = 0.1f;
const float ZOOM = 45.0f;



class Camera
{
public:

    glm::vec3 Position;
    glm::vec3 Front;
    glm::vec3 Up;
    glm::vec3 Right;
    glm::vec3 WorldUp;

    float Yaw;
    float Pitch;

    float MovementSpeed;
    float MouseSensitivity;
    float Zoom;


    Camera(glm::vec3 position = glm::vec3(0.0f, 0.0f, 0.0f), glm::vec3 up = glm::vec3(0.0f, 1.0f, 0.0f), float yaw = YAW, float pitch = PITCH) : Front(glm::vec3(0.0f, 0.0f, -1.0f)), MovementSpeed(SPEED), MouseSensitivity(SENSITIVITY), Zoom(ZOOM)
    {
        Position = position;
        WorldUp = up;
        Yaw = yaw;
        Pitch = pitch;
        updateCameraVectors();
    }

    Camera(float posX, float posY, float posZ, float upX, float upY, float upZ, float yaw, float pitch) : Front(glm::vec3(0.0f, 0.0f, -1.0f)), MovementSpeed(SPEED), MouseSensitivity(SENSITIVITY), Zoom(ZOOM)
    {
        Position = glm::vec3(posX, posY, posZ);
        WorldUp = glm::vec3(upX, upY, upZ);
        Yaw = yaw;
        Pitch = pitch;
        updateCameraVectors();
    }


    glm::mat4 GetViewMatrix()
    {
        return glm::lookAt(Position, Position + Front, Up);
    }


    void ProcessKeyboard(Camera_Movement direction, float deltaTime)
    {
        float velocity = MovementSpeed * deltaTime;
        if (direction == FORWARD)
            Position += Front * velocity;
        if (direction == BACKWARD)
            Position -= Front * velocity;
        if (direction == LEFT)
            Position -= Right * velocity;
        if (direction == RIGHT)
            Position += Right * velocity;

        Position.y = 0.0f;
    }


    void ProcessMouseMovement(float xoffset, float yoffset, GLboolean constrainPitch = true)
    {
        xoffset *= MouseSensitivity;
        yoffset *= MouseSensitivity;

        Yaw += xoffset;
        Pitch += yoffset;


        if (constrainPitch)
        {
            if (Pitch > 89.0f)
                Pitch = 89.0f;
            if (Pitch < -89.0f)
                Pitch = -89.0f;
        }


        updateCameraVectors();
    }


    void ProcessMouseScroll(float yoffset)
    {
        if (Zoom >= 1.0f && Zoom <= 45.0f)
            Zoom -= yoffset;
        if (Zoom <= 1.0f)
            Zoom = 1.0f;
        if (Zoom >= 45.0f)
            Zoom = 45.0f;
    }

private:

    void updateCameraVectors()
    {

        glm::vec3 front;
        front.x = cos(glm::radians(Yaw)) * cos(glm::radians(Pitch));
        front.y = sin(glm::radians(Pitch));
        front.z = sin(glm::radians(Yaw)) * cos(glm::radians(Pitch));
        Front = glm::normalize(front);

        Right = glm::normalize(glm::cross(Front, WorldUp));
        Up = glm::normalize(glm::cross(Right, Front));
    }
};
# 9 "main.cpp" 2



# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 3
# 13 "main.cpp" 2


# 1 "../../include/stb_image/stb_image.h" 1
# 325 "../../include/stb_image/stb_image.h"
enum
{
   STBI_default = 0,

   STBI_grey = 1,
   STBI_grey_alpha = 2,
   STBI_rgb = 3,
   STBI_rgb_alpha = 4
};

# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\stdlib.h" 1 3
# 36 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\stdlib.h" 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstdlib" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstdlib" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cstdlib" 3
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\stdlib.h" 2 3


# 38 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\stdlib.h" 3
using std::abort;
using std::atexit;
using std::exit;
# 51 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\stdlib.h" 3
using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 336 "../../include/stb_image/stb_image.h" 2

# 336 "../../include/stb_image/stb_image.h"
typedef unsigned char stbi_uc;
typedef unsigned short stbi_us;


extern "C" {
# 360 "../../include/stb_image/stb_image.h"
typedef struct
{
   int (*read) (void *user,char *data,int size);
   void (*skip) (void *user,int n);
   int (*eof) (void *user);
} stbi_io_callbacks;






extern stbi_uc *stbi_load_from_memory (stbi_uc const *buffer, int len , int *x, int *y, int *channels_in_file, int desired_channels);
extern stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk , void *user, int *x, int *y, int *channels_in_file, int desired_channels);


extern stbi_uc *stbi_load (char const *filename, int *x, int *y, int *channels_in_file, int desired_channels);
extern stbi_uc *stbi_load_from_file (FILE *f, int *x, int *y, int *channels_in_file, int desired_channels);




extern stbi_uc *stbi_load_gif_from_memory(stbi_uc const *buffer, int len, int **delays, int *x, int *y, int *z, int *comp, int req_comp);
# 394 "../../include/stb_image/stb_image.h"
extern stbi_us *stbi_load_16_from_memory (stbi_uc const *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels);
extern stbi_us *stbi_load_16_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels);


extern stbi_us *stbi_load_16 (char const *filename, int *x, int *y, int *channels_in_file, int desired_channels);
extern stbi_us *stbi_load_from_file_16(FILE *f, int *x, int *y, int *channels_in_file, int desired_channels);







   extern float *stbi_loadf_from_memory (stbi_uc const *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels);
   extern float *stbi_loadf_from_callbacks (stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels);


   extern float *stbi_loadf (char const *filename, int *x, int *y, int *channels_in_file, int desired_channels);
   extern float *stbi_loadf_from_file (FILE *f, int *x, int *y, int *channels_in_file, int desired_channels);




   extern void stbi_hdr_to_ldr_gamma(float gamma);
   extern void stbi_hdr_to_ldr_scale(float scale);



   extern void stbi_ldr_to_hdr_gamma(float gamma);
   extern void stbi_ldr_to_hdr_scale(float scale);



extern int stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user);
extern int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len);

extern int stbi_is_hdr (char const *filename);
extern int stbi_is_hdr_from_file(FILE *f);





extern const char *stbi_failure_reason (void);


extern void stbi_image_free (void *retval_from_stbi_load);


extern int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp);
extern int stbi_info_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp);
extern int stbi_is_16_bit_from_memory(stbi_uc const *buffer, int len);
extern int stbi_is_16_bit_from_callbacks(stbi_io_callbacks const *clbk, void *user);


extern int stbi_info (char const *filename, int *x, int *y, int *comp);
extern int stbi_info_from_file (FILE *f, int *x, int *y, int *comp);
extern int stbi_is_16_bit (char const *filename);
extern int stbi_is_16_bit_from_file(FILE *f);







extern void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply);



extern void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert);


extern void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip);



extern char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen);
extern char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header);
extern char *stbi_zlib_decode_malloc(const char *buffer, int len, int *outlen);
extern int stbi_zlib_decode_buffer(char *obuffer, int olen, const char *ibuffer, int ilen);

extern char *stbi_zlib_decode_noheader_malloc(const char *buffer, int len, int *outlen);
extern int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen);



}
# 530 "../../include/stb_image/stb_image.h"
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\stddef.h" 1 3 4
# 531 "../../include/stb_image/stb_image.h" 2
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\stdlib.h" 1 3
# 532 "../../include/stb_image/stb_image.h" 2




# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\math.h" 1 3
# 36 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\math.h" 3
# 1 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 1 3
# 39 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 3
       
# 40 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\cmath" 3
# 37 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\math.h" 2 3


# 38 "c:\\mingw\\lib\\gcc\\mingw32\\8.2.0\\include\\c++\\math.h" 3
using std::abs;
using std::acos;
using std::asin;
using std::atan;
using std::atan2;
using std::cos;
using std::sin;
using std::tan;
using std::cosh;
using std::sinh;
using std::tanh;
using std::exp;
using std::frexp;
using std::ldexp;
using std::log;
using std::log10;
using std::modf;
using std::pow;
using std::sqrt;
using std::ceil;
using std::fabs;
using std::floor;
using std::fmod;


using std::fpclassify;
using std::isfinite;
using std::isinf;
using std::isnan;
using std::isnormal;
using std::signbit;
using std::isgreater;
using std::isgreaterequal;
using std::isless;
using std::islessequal;
using std::islessgreater;
using std::isunordered;



using std::acosh;
using std::asinh;
using std::atanh;
using std::cbrt;
using std::copysign;
using std::erf;
using std::erfc;
using std::exp2;
using std::expm1;
using std::fdim;
using std::fma;
using std::fmax;
using std::fmin;
using std::hypot;
using std::ilogb;
using std::lgamma;
using std::llrint;
using std::llround;
using std::log1p;
using std::log2;
using std::logb;
using std::lrint;
using std::lround;
using std::nearbyint;
using std::nextafter;
using std::nexttoward;
using std::remainder;
using std::remquo;
using std::rint;
using std::round;
using std::scalbln;
using std::scalbn;
using std::tgamma;
using std::trunc;
# 537 "../../include/stb_image/stb_image.h" 2







# 1 "c:\\mingw\\include\\assert.h" 1 3
# 23 "c:\\mingw\\include\\assert.h" 3
extern "C" {
# 38 "c:\\mingw\\include\\assert.h" 3
 void __attribute__((__cdecl__)) __attribute__((__nothrow__)) _assert (const char*, const char*, int) __attribute__((__noreturn__));
# 48 "c:\\mingw\\include\\assert.h" 3
}
# 545 "../../include/stb_image/stb_image.h" 2
# 573 "../../include/stb_image/stb_image.h"

# 573 "../../include/stb_image/stb_image.h"
typedef uint16_t stbi__uint16;
typedef int16_t stbi__int16;
typedef uint32_t stbi__uint32;
typedef int32_t stbi__int32;



typedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 : -1];
# 723 "../../include/stb_image/stb_image.h"
typedef struct
{
   stbi__uint32 img_x, img_y;
   int img_n, img_out_n;

   stbi_io_callbacks io;
   void *io_user_data;

   int read_from_callbacks;
   int buflen;
   stbi_uc buffer_start[128];

   stbi_uc *img_buffer, *img_buffer_end;
   stbi_uc *img_buffer_original, *img_buffer_original_end;
} stbi__context;


static void stbi__refill_buffer(stbi__context *s);


static void stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len)
{
   s->io.read = 
# 745 "../../include/stb_image/stb_image.h" 3 4
               __null
# 745 "../../include/stb_image/stb_image.h"
                   ;
   s->read_from_callbacks = 0;
   s->img_buffer = s->img_buffer_original = (stbi_uc *) buffer;
   s->img_buffer_end = s->img_buffer_original_end = (stbi_uc *) buffer+len;
}


static void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user)
{
   s->io = *c;
   s->io_user_data = user;
   s->buflen = sizeof(s->buffer_start);
   s->read_from_callbacks = 1;
   s->img_buffer_original = s->buffer_start;
   stbi__refill_buffer(s);
   s->img_buffer_original_end = s->img_buffer_end;
}



static int stbi__stdio_read(void *user, char *data, int size)
{
   return (int) fread(data,1,size,(FILE*) user);
}

static void stbi__stdio_skip(void *user, int n)
{
   fseek((FILE*) user, n, 
# 772 "../../include/stb_image/stb_image.h" 3
                         1
# 772 "../../include/stb_image/stb_image.h"
                                 );
}

static int stbi__stdio_eof(void *user)
{
   return feof((FILE*) user);
}

static stbi_io_callbacks stbi__stdio_callbacks =
{
   stbi__stdio_read,
   stbi__stdio_skip,
   stbi__stdio_eof,
};

static void stbi__start_file(stbi__context *s, FILE *f)
{
   stbi__start_callbacks(s, &stbi__stdio_callbacks, (void *) f);
}





static void stbi__rewind(stbi__context *s)
{



   s->img_buffer = s->img_buffer_original;
   s->img_buffer_end = s->img_buffer_original_end;
}

enum
{
   STBI_ORDER_RGB,
   STBI_ORDER_BGR
};

typedef struct
{
   int bits_per_channel;
   int num_channels;
   int channel_order;
} stbi__result_info;


static int stbi__jpeg_test(stbi__context *s);
static void *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri);
static int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp);



static int stbi__png_test(stbi__context *s);
static void *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri);
static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp);
static int stbi__png_is16(stbi__context *s);



static int stbi__bmp_test(stbi__context *s);
static void *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri);
static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp);



static int stbi__tga_test(stbi__context *s);
static void *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri);
static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp);



static int stbi__psd_test(stbi__context *s);
static void *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri, int bpc);
static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp);
static int stbi__psd_is16(stbi__context *s);



static int stbi__hdr_test(stbi__context *s);
static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri);
static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp);



static int stbi__pic_test(stbi__context *s);
static void *stbi__pic_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri);
static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp);



static int stbi__gif_test(stbi__context *s);
static void *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri);
static void *stbi__load_gif_main(stbi__context *s, int **delays, int *x, int *y, int *z, int *comp, int req_comp);
static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp);



static int stbi__pnm_test(stbi__context *s);
static void *stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri);
static int stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp);



static const char *stbi__g_failure_reason;

extern const char *stbi_failure_reason(void)
{
   return stbi__g_failure_reason;
}

static int stbi__err(const char *str)
{
   stbi__g_failure_reason = str;
   return 0;
}

static void *stbi__malloc(size_t size)
{
    return malloc(size);
}
# 906 "../../include/stb_image/stb_image.h"
static int stbi__addsizes_valid(int a, int b)
{
   if (b < 0) return 0;




   return a <= 
# 913 "../../include/stb_image/stb_image.h" 3
              2147483647 
# 913 "../../include/stb_image/stb_image.h"
                      - b;
}



static int stbi__mul2sizes_valid(int a, int b)
{
   if (a < 0 || b < 0) return 0;
   if (b == 0) return 1;

   return a <= 
# 923 "../../include/stb_image/stb_image.h" 3
              2147483647
# 923 "../../include/stb_image/stb_image.h"
                     /b;
}


static int stbi__mad2sizes_valid(int a, int b, int add)
{
   return stbi__mul2sizes_valid(a, b) && stbi__addsizes_valid(a*b, add);
}


static int stbi__mad3sizes_valid(int a, int b, int c, int add)
{
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
      stbi__addsizes_valid(a*b*c, add);
}



static int stbi__mad4sizes_valid(int a, int b, int c, int d, int add)
{
   return stbi__mul2sizes_valid(a, b) && stbi__mul2sizes_valid(a*b, c) &&
      stbi__mul2sizes_valid(a*b*c, d) && stbi__addsizes_valid(a*b*c*d, add);
}



static void *stbi__malloc_mad2(int a, int b, int add)
{
   if (!stbi__mad2sizes_valid(a, b, add)) return 
# 951 "../../include/stb_image/stb_image.h" 3 4
                                                __null
# 951 "../../include/stb_image/stb_image.h"
                                                    ;
   return stbi__malloc(a*b + add);
}

static void *stbi__malloc_mad3(int a, int b, int c, int add)
{
   if (!stbi__mad3sizes_valid(a, b, c, add)) return 
# 957 "../../include/stb_image/stb_image.h" 3 4
                                                   __null
# 957 "../../include/stb_image/stb_image.h"
                                                       ;
   return stbi__malloc(a*b*c + add);
}


static void *stbi__malloc_mad4(int a, int b, int c, int d, int add)
{
   if (!stbi__mad4sizes_valid(a, b, c, d, add)) return 
# 964 "../../include/stb_image/stb_image.h" 3 4
                                                      __null
# 964 "../../include/stb_image/stb_image.h"
                                                          ;
   return stbi__malloc(a*b*c*d + add);
}
# 984 "../../include/stb_image/stb_image.h"
extern void stbi_image_free(void *retval_from_stbi_load)
{
   free(retval_from_stbi_load);
}


static float *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp);



static stbi_uc *stbi__hdr_to_ldr(float *data, int x, int y, int comp);


static int stbi__vertically_flip_on_load = 0;

extern void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip)
{
    stbi__vertically_flip_on_load = flag_true_if_should_flip;
}

static void *stbi__load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri, int bpc)
{
   memset(ri, 0, sizeof(*ri));
   ri->bits_per_channel = 8;
   ri->channel_order = STBI_ORDER_RGB;
   ri->num_channels = 0;


   if (stbi__jpeg_test(s)) return stbi__jpeg_load(s,x,y,comp,req_comp, ri);


   if (stbi__png_test(s)) return stbi__png_load(s,x,y,comp,req_comp, ri);


   if (stbi__bmp_test(s)) return stbi__bmp_load(s,x,y,comp,req_comp, ri);


   if (stbi__gif_test(s)) return stbi__gif_load(s,x,y,comp,req_comp, ri);


   if (stbi__psd_test(s)) return stbi__psd_load(s,x,y,comp,req_comp, ri, bpc);


   if (stbi__pic_test(s)) return stbi__pic_load(s,x,y,comp,req_comp, ri);


   if (stbi__pnm_test(s)) return stbi__pnm_load(s,x,y,comp,req_comp, ri);



   if (stbi__hdr_test(s)) {
      float *hdr = stbi__hdr_load(s, x,y,comp,req_comp, ri);
      return stbi__hdr_to_ldr(hdr, *x, *y, req_comp ? req_comp : *comp);
   }




   if (stbi__tga_test(s))
      return stbi__tga_load(s,x,y,comp,req_comp, ri);


   return ((unsigned char *)(size_t) (stbi__err("unknown image type")?
# 1046 "../../include/stb_image/stb_image.h" 3 4
         __null
# 1046 "../../include/stb_image/stb_image.h"
         :
# 1046 "../../include/stb_image/stb_image.h" 3 4
         __null
# 1046 "../../include/stb_image/stb_image.h"
         ));
}

static stbi_uc *stbi__convert_16_to_8(stbi__uint16 *orig, int w, int h, int channels)
{
   int i;
   int img_len = w * h * channels;
   stbi_uc *reduced;

   reduced = (stbi_uc *) stbi__malloc(img_len);
   if (reduced == 
# 1056 "../../include/stb_image/stb_image.h" 3 4
                 __null
# 1056 "../../include/stb_image/stb_image.h"
                     ) return ((unsigned char *)(size_t) (stbi__err("outofmem")?
# 1056 "../../include/stb_image/stb_image.h" 3 4
                              __null
# 1056 "../../include/stb_image/stb_image.h"
                              :
# 1056 "../../include/stb_image/stb_image.h" 3 4
                              __null
# 1056 "../../include/stb_image/stb_image.h"
                              ));

   for (i = 0; i < img_len; ++i)
      reduced[i] = (stbi_uc)((orig[i] >> 8) & 0xFF);

   free(orig);
   return reduced;
}

static stbi__uint16 *stbi__convert_8_to_16(stbi_uc *orig, int w, int h, int channels)
{
   int i;
   int img_len = w * h * channels;
   stbi__uint16 *enlarged;

   enlarged = (stbi__uint16 *) stbi__malloc(img_len*2);
   if (enlarged == 
# 1072 "../../include/stb_image/stb_image.h" 3 4
                  __null
# 1072 "../../include/stb_image/stb_image.h"
                      ) return (stbi__uint16 *) ((unsigned char *)(size_t) (stbi__err("outofmem")?
# 1072 "../../include/stb_image/stb_image.h" 3 4
                                                __null
# 1072 "../../include/stb_image/stb_image.h"
                                                :
# 1072 "../../include/stb_image/stb_image.h" 3 4
                                                __null
# 1072 "../../include/stb_image/stb_image.h"
                                                ));

   for (i = 0; i < img_len; ++i)
      enlarged[i] = (stbi__uint16)((orig[i] << 8) + orig[i]);

   free(orig);
   return enlarged;
}

static void stbi__vertical_flip(void *image, int w, int h, int bytes_per_pixel)
{
   int row;
   size_t bytes_per_row = (size_t)w * bytes_per_pixel;
   stbi_uc temp[2048];
   stbi_uc *bytes = (stbi_uc *)image;

   for (row = 0; row < (h>>1); row++) {
      stbi_uc *row0 = bytes + row*bytes_per_row;
      stbi_uc *row1 = bytes + (h - row - 1)*bytes_per_row;

      size_t bytes_left = bytes_per_row;
      while (bytes_left) {
         size_t bytes_copy = (bytes_left < sizeof(temp)) ? bytes_left : sizeof(temp);
         memcpy(temp, row0, bytes_copy);
         memcpy(row0, row1, bytes_copy);
         memcpy(row1, temp, bytes_copy);
         row0 += bytes_copy;
         row1 += bytes_copy;
         bytes_left -= bytes_copy;
      }
   }
}


static void stbi__vertical_flip_slices(void *image, int w, int h, int z, int bytes_per_pixel)
{
   int slice;
   int slice_size = w * h * bytes_per_pixel;

   stbi_uc *bytes = (stbi_uc *)image;
   for (slice = 0; slice < z; ++slice) {
      stbi__vertical_flip(bytes, w, h, bytes_per_pixel);
      bytes += slice_size;
   }
}


static unsigned char *stbi__load_and_postprocess_8bit(stbi__context *s, int *x, int *y, int *comp, int req_comp)
{
   stbi__result_info ri;
   void *result = stbi__load_main(s, x, y, comp, req_comp, &ri, 8);

   if (result == 
# 1124 "../../include/stb_image/stb_image.h" 3 4
                __null
# 1124 "../../include/stb_image/stb_image.h"
                    )
      return 
# 1125 "../../include/stb_image/stb_image.h" 3 4
            __null
# 1125 "../../include/stb_image/stb_image.h"
                ;

   if (ri.bits_per_channel != 8) {
      
# 1128 "../../include/stb_image/stb_image.h" 3
     ((
# 1128 "../../include/stb_image/stb_image.h"
     ri.bits_per_channel == 16
# 1128 "../../include/stb_image/stb_image.h" 3
     ) ? (void)0 : _assert(
# 1128 "../../include/stb_image/stb_image.h"
     "ri.bits_per_channel == 16"
# 1128 "../../include/stb_image/stb_image.h" 3
     , "../../include/stb_image/stb_image.h", 1128))
# 1128 "../../include/stb_image/stb_image.h"
                                           ;
      result = stbi__convert_16_to_8((stbi__uint16 *) result, *x, *y, req_comp == 0 ? *comp : req_comp);
      ri.bits_per_channel = 8;
   }



   if (stbi__vertically_flip_on_load) {
      int channels = req_comp ? req_comp : *comp;
      stbi__vertical_flip(result, *x, *y, channels * sizeof(stbi_uc));
   }

   return (unsigned char *) result;
}

static stbi__uint16 *stbi__load_and_postprocess_16bit(stbi__context *s, int *x, int *y, int *comp, int req_comp)
{
   stbi__result_info ri;
   void *result = stbi__load_main(s, x, y, comp, req_comp, &ri, 16);

   if (result == 
# 1148 "../../include/stb_image/stb_image.h" 3 4
                __null
# 1148 "../../include/stb_image/stb_image.h"
                    )
      return 
# 1149 "../../include/stb_image/stb_image.h" 3 4
            __null
# 1149 "../../include/stb_image/stb_image.h"
                ;

   if (ri.bits_per_channel != 16) {
      
# 1152 "../../include/stb_image/stb_image.h" 3
     ((
# 1152 "../../include/stb_image/stb_image.h"
     ri.bits_per_channel == 8
# 1152 "../../include/stb_image/stb_image.h" 3
     ) ? (void)0 : _assert(
# 1152 "../../include/stb_image/stb_image.h"
     "ri.bits_per_channel == 8"
# 1152 "../../include/stb_image/stb_image.h" 3
     , "../../include/stb_image/stb_image.h", 1152))
# 1152 "../../include/stb_image/stb_image.h"
                                          ;
      result = stbi__convert_8_to_16((stbi_uc *) result, *x, *y, req_comp == 0 ? *comp : req_comp);
      ri.bits_per_channel = 16;
   }




   if (stbi__vertically_flip_on_load) {
      int channels = req_comp ? req_comp : *comp;
      stbi__vertical_flip(result, *x, *y, channels * sizeof(stbi__uint16));
   }

   return (stbi__uint16 *) result;
}


static void stbi__float_postprocess(float *result, int *x, int *y, int *comp, int req_comp)
{
   if (stbi__vertically_flip_on_load && result != 
# 1171 "../../include/stb_image/stb_image.h" 3 4
                                                 __null
# 1171 "../../include/stb_image/stb_image.h"
                                                     ) {
      int channels = req_comp ? req_comp : *comp;
      stbi__vertical_flip(result, *x, *y, channels * sizeof(float));
   }
}
# 1192 "../../include/stb_image/stb_image.h"
static FILE *stbi__fopen(char const *filename, char const *mode)
{
   FILE *f;
# 1215 "../../include/stb_image/stb_image.h"
   f = fopen(filename, mode);

   return f;
}


extern stbi_uc *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)
{
   FILE *f = stbi__fopen(filename, "rb");
   unsigned char *result;
   if (!f) return ((unsigned char *)(size_t) (stbi__err("can't fopen")?
# 1225 "../../include/stb_image/stb_image.h" 3 4
                 __null
# 1225 "../../include/stb_image/stb_image.h"
                 :
# 1225 "../../include/stb_image/stb_image.h" 3 4
                 __null
# 1225 "../../include/stb_image/stb_image.h"
                 ));
   result = stbi_load_from_file(f,x,y,comp,req_comp);
   fclose(f);
   return result;
}

extern stbi_uc *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)
{
   unsigned char *result;
   stbi__context s;
   stbi__start_file(&s,f);
   result = stbi__load_and_postprocess_8bit(&s,x,y,comp,req_comp);
   if (result) {

      fseek(f, - (int) (s.img_buffer_end - s.img_buffer), 
# 1239 "../../include/stb_image/stb_image.h" 3
                                                         1
# 1239 "../../include/stb_image/stb_image.h"
                                                                 );
   }
   return result;
}

extern stbi__uint16 *stbi_load_from_file_16(FILE *f, int *x, int *y, int *comp, int req_comp)
{
   stbi__uint16 *result;
   stbi__context s;
   stbi__start_file(&s,f);
   result = stbi__load_and_postprocess_16bit(&s,x,y,comp,req_comp);
   if (result) {

      fseek(f, - (int) (s.img_buffer_end - s.img_buffer), 
# 1252 "../../include/stb_image/stb_image.h" 3
                                                         1
# 1252 "../../include/stb_image/stb_image.h"
                                                                 );
   }
   return result;
}

extern stbi_us *stbi_load_16(char const *filename, int *x, int *y, int *comp, int req_comp)
{
   FILE *f = stbi__fopen(filename, "rb");
   stbi__uint16 *result;
   if (!f) return (stbi_us *) ((unsigned char *)(size_t) (stbi__err("can't fopen")?
# 1261 "../../include/stb_image/stb_image.h" 3 4
                             __null
# 1261 "../../include/stb_image/stb_image.h"
                             :
# 1261 "../../include/stb_image/stb_image.h" 3 4
                             __null
# 1261 "../../include/stb_image/stb_image.h"
                             ));
   result = stbi_load_from_file_16(f,x,y,comp,req_comp);
   fclose(f);
   return result;
}




extern stbi_us *stbi_load_16_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels)
{
   stbi__context s;
   stbi__start_mem(&s,buffer,len);
   return stbi__load_and_postprocess_16bit(&s,x,y,channels_in_file,desired_channels);
}

extern stbi_us *stbi_load_16_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels)
{
   stbi__context s;
   stbi__start_callbacks(&s, (stbi_io_callbacks *)clbk, user);
   return stbi__load_and_postprocess_16bit(&s,x,y,channels_in_file,desired_channels);
}

extern stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
{
   stbi__context s;
   stbi__start_mem(&s,buffer,len);
   return stbi__load_and_postprocess_8bit(&s,x,y,comp,req_comp);
}

extern stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
{
   stbi__context s;
   stbi__start_callbacks(&s, (stbi_io_callbacks *) clbk, user);
   return stbi__load_and_postprocess_8bit(&s,x,y,comp,req_comp);
}


extern stbi_uc *stbi_load_gif_from_memory(stbi_uc const *buffer, int len, int **delays, int *x, int *y, int *z, int *comp, int req_comp)
{
   unsigned char *result;
   stbi__context s;
   stbi__start_mem(&s,buffer,len);

   result = (unsigned char*) stbi__load_gif_main(&s, delays, x, y, z, comp, req_comp);
   if (stbi__vertically_flip_on_load) {
      stbi__vertical_flip_slices( result, *x, *y, *z, *comp );
   }

   return result;
}



static float *stbi__loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)
{
   unsigned char *data;

   if (stbi__hdr_test(s)) {
      stbi__result_info ri;
      float *hdr_data = stbi__hdr_load(s,x,y,comp,req_comp, &ri);
      if (hdr_data)
         stbi__float_postprocess(hdr_data,x,y,comp,req_comp);
      return hdr_data;
   }

   data = stbi__load_and_postprocess_8bit(s, x, y, comp, req_comp);
   if (data)
      return stbi__ldr_to_hdr(data, *x, *y, req_comp ? req_comp : *comp);
   return ((float *)(size_t) (stbi__err("unknown image type")?
# 1330 "../../include/stb_image/stb_image.h" 3 4
         __null
# 1330 "../../include/stb_image/stb_image.h"
         :
# 1330 "../../include/stb_image/stb_image.h" 3 4
         __null
# 1330 "../../include/stb_image/stb_image.h"
         ));
}

extern float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
{
   stbi__context s;
   stbi__start_mem(&s,buffer,len);
   return stbi__loadf_main(&s,x,y,comp,req_comp);
}

extern float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
{
   stbi__context s;
   stbi__start_callbacks(&s, (stbi_io_callbacks *) clbk, user);
   return stbi__loadf_main(&s,x,y,comp,req_comp);
}


extern float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)
{
   float *result;
   FILE *f = stbi__fopen(filename, "rb");
   if (!f) return ((float *)(size_t) (stbi__err("can't fopen")?
# 1352 "../../include/stb_image/stb_image.h" 3 4
                 __null
# 1352 "../../include/stb_image/stb_image.h"
                 :
# 1352 "../../include/stb_image/stb_image.h" 3 4
                 __null
# 1352 "../../include/stb_image/stb_image.h"
                 ));
   result = stbi_loadf_from_file(f,x,y,comp,req_comp);
   fclose(f);
   return result;
}

extern float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)
{
   stbi__context s;
   stbi__start_file(&s,f);
   return stbi__loadf_main(&s,x,y,comp,req_comp);
}
# 1372 "../../include/stb_image/stb_image.h"
extern int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)
{

   stbi__context s;
   stbi__start_mem(&s,buffer,len);
   return stbi__hdr_test(&s);





}


extern int stbi_is_hdr (char const *filename)
{
   FILE *f = stbi__fopen(filename, "rb");
   int result=0;
   if (f) {
      result = stbi_is_hdr_from_file(f);
      fclose(f);
   }
   return result;
}

extern int stbi_is_hdr_from_file(FILE *f)
{

   long pos = ftell(f);
   int res;
   stbi__context s;
   stbi__start_file(&s,f);
   res = stbi__hdr_test(&s);
   fseek(f, pos, 
# 1405 "../../include/stb_image/stb_image.h" 3
                0
# 1405 "../../include/stb_image/stb_image.h"
                        );
   return res;




}


extern int stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)
{

   stbi__context s;
   stbi__start_callbacks(&s, (stbi_io_callbacks *) clbk, user);
   return stbi__hdr_test(&s);





}


static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;

extern void stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }
extern void stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }


static float stbi__h2l_gamma_i=1.0f/2.2f, stbi__h2l_scale_i=1.0f;

extern void stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1/gamma; }
extern void stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1/scale; }







enum
{
   STBI__SCAN_load=0,
   STBI__SCAN_type,
   STBI__SCAN_header
};

static void stbi__refill_buffer(stbi__context *s)
{
   int n = (s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen);
   if (n == 0) {


      s->read_from_callbacks = 0;
      s->img_buffer = s->buffer_start;
      s->img_buffer_end = s->buffer_start+1;
      *s->img_buffer = 0;
   } else {
      s->img_buffer = s->buffer_start;
      s->img_buffer_end = s->buffer_start + n;
   }
}

inline static stbi_uc stbi__get8(stbi__context *s)
{
   if (s->img_buffer < s->img_buffer_end)
      return *s->img_buffer++;
   if (s->read_from_callbacks) {
      stbi__refill_buffer(s);
      return *s->img_buffer++;
   }
   return 0;
}

inline static int stbi__at_eof(stbi__context *s)
{
   if (s->io.read) {
      if (!(s->io.eof)(s->io_user_data)) return 0;


      if (s->read_from_callbacks == 0) return 1;
   }

   return s->img_buffer >= s->img_buffer_end;
}

static void stbi__skip(stbi__context *s, int n)
{
   if (n < 0) {
      s->img_buffer = s->img_buffer_end;
      return;
   }
   if (s->io.read) {
      int blen = (int) (s->img_buffer_end - s->img_buffer);
      if (blen < n) {
         s->img_buffer = s->img_buffer_end;
         (s->io.skip)(s->io_user_data, n - blen);
         return;
      }
   }
   s->img_buffer += n;
}

static int stbi__getn(stbi__context *s, stbi_uc *buffer, int n)
{
   if (s->io.read) {
      int blen = (int) (s->img_buffer_end - s->img_buffer);
      if (blen < n) {
         int res, count;

         memcpy(buffer, s->img_buffer, blen);

         count = (s->io.read)(s->io_user_data, (char*) buffer + blen, n - blen);
         res = (count == (n-blen));
         s->img_buffer = s->img_buffer_end;
         return res;
      }
   }

   if (s->img_buffer+n <= s->img_buffer_end) {
      memcpy(buffer, s->img_buffer, n);
      s->img_buffer += n;
      return 1;
   } else
      return 0;
}

static int stbi__get16be(stbi__context *s)
{
   int z = stbi__get8(s);
   return (z << 8) + stbi__get8(s);
}

static stbi__uint32 stbi__get32be(stbi__context *s)
{
   stbi__uint32 z = stbi__get16be(s);
   return (z << 16) + stbi__get16be(s);
}




static int stbi__get16le(stbi__context *s)
{
   int z = stbi__get8(s);
   return z + (stbi__get8(s) << 8);
}



static stbi__uint32 stbi__get32le(stbi__context *s)
{
   stbi__uint32 z = stbi__get16le(s);
   return z + (stbi__get16le(s) << 16);
}
# 1576 "../../include/stb_image/stb_image.h"
static stbi_uc stbi__compute_y(int r, int g, int b)
{
   return (stbi_uc) (((r*77) + (g*150) + (29*b)) >> 8);
}

static unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)
{
   int i,j;
   unsigned char *good;

   if (req_comp == img_n) return data;
   
# 1587 "../../include/stb_image/stb_image.h" 3
  ((
# 1587 "../../include/stb_image/stb_image.h"
  req_comp >= 1 && req_comp <= 4
# 1587 "../../include/stb_image/stb_image.h" 3
  ) ? (void)0 : _assert(
# 1587 "../../include/stb_image/stb_image.h"
  "req_comp >= 1 && req_comp <= 4"
# 1587 "../../include/stb_image/stb_image.h" 3
  , "../../include/stb_image/stb_image.h", 1587))
# 1587 "../../include/stb_image/stb_image.h"
                                             ;

   good = (unsigned char *) stbi__malloc_mad3(req_comp, x, y, 0);
   if (good == 
# 1590 "../../include/stb_image/stb_image.h" 3 4
              __null
# 1590 "../../include/stb_image/stb_image.h"
                  ) {
      free(data);
      return ((unsigned char *)(size_t) (stbi__err("outofmem")?
# 1592 "../../include/stb_image/stb_image.h" 3 4
            __null
# 1592 "../../include/stb_image/stb_image.h"
            :
# 1592 "../../include/stb_image/stb_image.h" 3 4
            __null
# 1592 "../../include/stb_image/stb_image.h"
            ));
   }

   for (j=0; j < (int) y; ++j) {
      unsigned char *src = data + j * x * img_n ;
      unsigned char *dest = good + j * x * req_comp;





      switch (((img_n)*8+(req_comp))) {
         case ((1)*8+(2)): for(i=x-1; i >= 0; --i, src += 1, dest += 2) { dest[0]=src[0]; dest[1]=255; } break;
         case ((1)*8+(3)): for(i=x-1; i >= 0; --i, src += 1, dest += 3) { dest[0]=dest[1]=dest[2]=src[0]; } break;
         case ((1)*8+(4)): for(i=x-1; i >= 0; --i, src += 1, dest += 4) { dest[0]=dest[1]=dest[2]=src[0]; dest[3]=255; } break;
         case ((2)*8+(1)): for(i=x-1; i >= 0; --i, src += 2, dest += 1) { dest[0]=src[0]; } break;
         case ((2)*8+(3)): for(i=x-1; i >= 0; --i, src += 2, dest += 3) { dest[0]=dest[1]=dest[2]=src[0]; } break;
         case ((2)*8+(4)): for(i=x-1; i >= 0; --i, src += 2, dest += 4) { dest[0]=dest[1]=dest[2]=src[0]; dest[3]=src[1]; } break;
         case ((3)*8+(4)): for(i=x-1; i >= 0; --i, src += 3, dest += 4) { dest[0]=src[0];dest[1]=src[1];dest[2]=src[2];dest[3]=255; } break;
         case ((3)*8+(1)): for(i=x-1; i >= 0; --i, src += 3, dest += 1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); } break;
         case ((3)*8+(2)): for(i=x-1; i >= 0; --i, src += 3, dest += 2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = 255; } break;
         case ((4)*8+(1)): for(i=x-1; i >= 0; --i, src += 4, dest += 1) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); } break;
         case ((4)*8+(2)): for(i=x-1; i >= 0; --i, src += 4, dest += 2) { dest[0]=stbi__compute_y(src[0],src[1],src[2]); dest[1] = src[3]; } break;
         case ((4)*8+(3)): for(i=x-1; i >= 0; --i, src += 4, dest += 3) { dest[0]=src[0];dest[1]=src[1];dest[2]=src[2]; } break;
         default: 
# 1616 "../../include/stb_image/stb_image.h" 3
                 ((
# 1616 "../../include/stb_image/stb_image.h"
                 0
# 1616 "../../include/stb_image/stb_image.h" 3
                 ) ? (void)0 : _assert(
# 1616 "../../include/stb_image/stb_image.h"
                 "0"
# 1616 "../../include/stb_image/stb_image.h" 3
                 , "../../include/stb_image/stb_image.h", 1616))
# 1616 "../../include/stb_image/stb_image.h"
                               ;
      }

   }

   free(data);
   return good;
}

static stbi__uint16 stbi__compute_y_16(int r, int g, int b)
{
   return (stbi__uint16) (((r*77) + (g*150) + (29*b)) >> 8);
}

static stbi__uint16 *stbi__convert_format16(stbi__uint16 *data, int img_n, int req_comp, unsigned int x, unsigned int y)
{
   int i,j;
   stbi__uint16 *good;

   if (req_comp == img_n) return data;
   
# 1636 "../../include/stb_image/stb_image.h" 3
  ((
# 1636 "../../include/stb_image/stb_image.h"
  req_comp >= 1 && req_comp <= 4
# 1636 "../../include/stb_image/stb_image.h" 3
  ) ? (void)0 : _assert(
# 1636 "../../include/stb_image/stb_image.h"
  "req_comp >= 1 && req_comp <= 4"
# 1636 "../../include/stb_image/stb_image.h" 3
  , "../../include/stb_image/stb_image.h", 1636))
# 1636 "../../include/stb_image/stb_image.h"
                                             ;

   good = (stbi__uint16 *) stbi__malloc(req_comp * x * y * 2);
   if (good == 
# 1639 "../../include/stb_image/stb_image.h" 3 4
              __null
# 1639 "../../include/stb_image/stb_image.h"
                  ) {
      free(data);
      return (stbi__uint16 *) ((unsigned char *)(size_t) (stbi__err("outofmem")?
# 1641 "../../include/stb_image/stb_image.h" 3 4
                             __null
# 1641 "../../include/stb_image/stb_image.h"
                             :
# 1641 "../../include/stb_image/stb_image.h" 3 4
                             __null
# 1641 "../../include/stb_image/stb_image.h"
                             ));
   }

   for (j=0; j < (int) y; ++j) {
      stbi__uint16 *src = data + j * x * img_n ;
      stbi__uint16 *dest = good + j * x * req_comp;





      switch (((img_n)*8+(req_comp))) {
         case ((1)*8+(2)): for(i=x-1; i >= 0; --i, src += 1, dest += 2) { dest[0]=src[0]; dest[1]=0xffff; } break;
         case ((1)*8+(3)): for(i=x-1; i >= 0; --i, src += 1, dest += 3) { dest[0]=dest[1]=dest[2]=src[0]; } break;
         case ((1)*8+(4)): for(i=x-1; i >= 0; --i, src += 1, dest += 4) { dest[0]=dest[1]=dest[2]=src[0]; dest[3]=0xffff; } break;
         case ((2)*8+(1)): for(i=x-1; i >= 0; --i, src += 2, dest += 1) { dest[0]=src[0]; } break;
         case ((2)*8+(3)): for(i=x-1; i >= 0; --i, src += 2, dest += 3) { dest[0]=dest[1]=dest[2]=src[0]; } break;
         case ((2)*8+(4)): for(i=x-1; i >= 0; --i, src += 2, dest += 4) { dest[0]=dest[1]=dest[2]=src[0]; dest[3]=src[1]; } break;
         case ((3)*8+(4)): for(i=x-1; i >= 0; --i, src += 3, dest += 4) { dest[0]=src[0];dest[1]=src[1];dest[2]=src[2];dest[3]=0xffff; } break;
         case ((3)*8+(1)): for(i=x-1; i >= 0; --i, src += 3, dest += 1) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]); } break;
         case ((3)*8+(2)): for(i=x-1; i >= 0; --i, src += 3, dest += 2) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]); dest[1] = 0xffff; } break;
         case ((4)*8+(1)): for(i=x-1; i >= 0; --i, src += 4, dest += 1) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]); } break;
         case ((4)*8+(2)): for(i=x-1; i >= 0; --i, src += 4, dest += 2) { dest[0]=stbi__compute_y_16(src[0],src[1],src[2]); dest[1] = src[3]; } break;
         case ((4)*8+(3)): for(i=x-1; i >= 0; --i, src += 4, dest += 3) { dest[0]=src[0];dest[1]=src[1];dest[2]=src[2]; } break;
         default: 
# 1665 "../../include/stb_image/stb_image.h" 3
                 ((
# 1665 "../../include/stb_image/stb_image.h"
                 0
# 1665 "../../include/stb_image/stb_image.h" 3
                 ) ? (void)0 : _assert(
# 1665 "../../include/stb_image/stb_image.h"
                 "0"
# 1665 "../../include/stb_image/stb_image.h" 3
                 , "../../include/stb_image/stb_image.h", 1665))
# 1665 "../../include/stb_image/stb_image.h"
                               ;
      }

   }

   free(data);
   return good;
}


static float *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp)
{
   int i,k,n;
   float *output;
   if (!data) return 
# 1679 "../../include/stb_image/stb_image.h" 3 4
                    __null
# 1679 "../../include/stb_image/stb_image.h"
                        ;
   output = (float *) stbi__malloc_mad4(x, y, comp, sizeof(float), 0);
   if (output == 
# 1681 "../../include/stb_image/stb_image.h" 3 4
                __null
# 1681 "../../include/stb_image/stb_image.h"
                    ) { free(data); return ((float *)(size_t) (stbi__err("outofmem")?
# 1681 "../../include/stb_image/stb_image.h" 3 4
                                                __null
# 1681 "../../include/stb_image/stb_image.h"
                                                :
# 1681 "../../include/stb_image/stb_image.h" 3 4
                                                __null
# 1681 "../../include/stb_image/stb_image.h"
                                                )); }

   if (comp & 1) n = comp; else n = comp-1;
   for (i=0; i < x*y; ++i) {
      for (k=0; k < n; ++k) {
         output[i*comp + k] = (float) (pow(data[i*comp+k]/255.0f, stbi__l2h_gamma) * stbi__l2h_scale);
      }
   }
   if (n < comp) {
      for (i=0; i < x*y; ++i) {
         output[i*comp + n] = data[i*comp + n]/255.0f;
      }
   }
   free(data);
   return output;
}




static stbi_uc *stbi__hdr_to_ldr(float *data, int x, int y, int comp)
{
   int i,k,n;
   stbi_uc *output;
   if (!data) return 
# 1705 "../../include/stb_image/stb_image.h" 3 4
                    __null
# 1705 "../../include/stb_image/stb_image.h"
                        ;
   output = (stbi_uc *) stbi__malloc_mad3(x, y, comp, 0);
   if (output == 
# 1707 "../../include/stb_image/stb_image.h" 3 4
                __null
# 1707 "../../include/stb_image/stb_image.h"
                    ) { free(data); return ((unsigned char *)(size_t) (stbi__err("outofmem")?
# 1707 "../../include/stb_image/stb_image.h" 3 4
                                                __null
# 1707 "../../include/stb_image/stb_image.h"
                                                :
# 1707 "../../include/stb_image/stb_image.h" 3 4
                                                __null
# 1707 "../../include/stb_image/stb_image.h"
                                                )); }

   if (comp & 1) n = comp; else n = comp-1;
   for (i=0; i < x*y; ++i) {
      for (k=0; k < n; ++k) {
         float z = (float) pow(data[i*comp+k]*stbi__h2l_scale_i, stbi__h2l_gamma_i) * 255 + 0.5f;
         if (z < 0) z = 0;
         if (z > 255) z = 255;
         output[i*comp + k] = (stbi_uc) ((int) (z));
      }
      if (k < comp) {
         float z = data[i*comp+k] * 255 + 0.5f;
         if (z < 0) z = 0;
         if (z > 255) z = 255;
         output[i*comp + k] = (stbi_uc) ((int) (z));
      }
   }
   free(data);
   return output;
}
# 1755 "../../include/stb_image/stb_image.h"
typedef struct
{
   stbi_uc fast[1 << 9];

   stbi__uint16 code[256];
   stbi_uc values[256];
   stbi_uc size[257];
   unsigned int maxcode[18];
   int delta[17];
} stbi__huffman;

typedef struct
{
   stbi__context *s;
   stbi__huffman huff_dc[4];
   stbi__huffman huff_ac[4];
   stbi__uint16 dequant[4][64];
   stbi__int16 fast_ac[4][1 << 9];


   int img_h_max, img_v_max;
   int img_mcu_x, img_mcu_y;
   int img_mcu_w, img_mcu_h;


   struct
   {
      int id;
      int h,v;
      int tq;
      int hd,ha;
      int dc_pred;

      int x,y,w2,h2;
      stbi_uc *data;
      void *raw_data, *raw_coeff;
      stbi_uc *linebuf;
      short *coeff;
      int coeff_w, coeff_h;
   } img_comp[4];

   stbi__uint32 code_buffer;
   int code_bits;
   unsigned char marker;
   int nomore;

   int progressive;
   int spec_start;
   int spec_end;
   int succ_high;
   int succ_low;
   int eob_run;
   int jfif;
   int app14_color_transform;
   int rgb;

   int scan_n, order[4];
   int restart_interval, todo;


   void (*idct_block_kernel)(stbi_uc *out, int out_stride, short data[64]);
   void (*YCbCr_to_RGB_kernel)(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step);
   stbi_uc *(*resample_row_hv_2_kernel)(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs);
} stbi__jpeg;

static int stbi__build_huffman(stbi__huffman *h, int *count)
{
   int i,j,k=0;
   unsigned int code;

   for (i=0; i < 16; ++i)
      for (j=0; j < count[i]; ++j)
         h->size[k++] = (stbi_uc) (i+1);
   h->size[k] = 0;


   code = 0;
   k = 0;
   for(j=1; j <= 16; ++j) {

      h->delta[j] = k - code;
      if (h->size[k] == j) {
         while (h->size[k] == j)
            h->code[k++] = (stbi__uint16) (code++);
         if (code-1 >= (1u << j)) return stbi__err("bad code lengths");
      }

      h->maxcode[j] = code << (16-j);
      code <<= 1;
   }
   h->maxcode[j] = 0xffffffff;


   memset(h->fast, 255, 1 << 9);
   for (i=0; i < k; ++i) {
      int s = h->size[i];
      if (s <= 9) {
         int c = h->code[i] << (9 -s);
         int m = 1 << (9 -s);
         for (j=0; j < m; ++j) {
            h->fast[c+j] = (stbi_uc) i;
         }
      }
   }
   return 1;
}



static void stbi__build_fast_ac(stbi__int16 *fast_ac, stbi__huffman *h)
{
   int i;
   for (i=0; i < (1 << 9); ++i) {
      stbi_uc fast = h->fast[i];
      fast_ac[i] = 0;
      if (fast < 255) {
         int rs = h->values[fast];
         int run = (rs >> 4) & 15;
         int magbits = rs & 15;
         int len = h->size[fast];

         if (magbits && len + magbits <= 9) {

            int k = ((i << len) & ((1 << 9) - 1)) >> (9 - magbits);
            int m = 1 << (magbits - 1);
            if (k < m) k += (~0U << magbits) + 1;

            if (k >= -128 && k <= 127)
               fast_ac[i] = (stbi__int16) ((k * 256) + (run * 16) + (len + magbits));
         }
      }
   }
}

static void stbi__grow_buffer_unsafe(stbi__jpeg *j)
{
   do {
      unsigned int b = j->nomore ? 0 : stbi__get8(j->s);
      if (b == 0xff) {
         int c = stbi__get8(j->s);
         while (c == 0xff) c = stbi__get8(j->s);
         if (c != 0) {
            j->marker = (unsigned char) c;
            j->nomore = 1;
            return;
         }
      }
      j->code_buffer |= b << (24 - j->code_bits);
      j->code_bits += 8;
   } while (j->code_bits <= 24);
}


static const stbi__uint32 stbi__bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535};


inline static int stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h)
{
   unsigned int temp;
   int c,k;

   if (j->code_bits < 16) stbi__grow_buffer_unsafe(j);



   c = (j->code_buffer >> (32 - 9)) & ((1 << 9)-1);
   k = h->fast[c];
   if (k < 255) {
      int s = h->size[k];
      if (s > j->code_bits)
         return -1;
      j->code_buffer <<= s;
      j->code_bits -= s;
      return h->values[k];
   }







   temp = j->code_buffer >> 16;
   for (k=9 +1 ; ; ++k)
      if (temp < h->maxcode[k])
         break;
   if (k == 17) {

      j->code_bits -= 16;
      return -1;
   }

   if (k > j->code_bits)
      return -1;


   c = ((j->code_buffer >> (32 - k)) & stbi__bmask[k]) + h->delta[k];
   
# 1952 "../../include/stb_image/stb_image.h" 3
  ((
# 1952 "../../include/stb_image/stb_image.h"
  (((j->code_buffer) >> (32 - h->size[c])) & stbi__bmask[h->size[c]]) == h->code[c]
# 1952 "../../include/stb_image/stb_image.h" 3
  ) ? (void)0 : _assert(
# 1952 "../../include/stb_image/stb_image.h"
  "(((j->code_buffer) >> (32 - h->size[c])) & stbi__bmask[h->size[c]]) == h->code[c]"
# 1952 "../../include/stb_image/stb_image.h" 3
  , "../../include/stb_image/stb_image.h", 1952))
# 1952 "../../include/stb_image/stb_image.h"
                                                                                                ;


   j->code_bits -= k;
   j->code_buffer <<= k;
   return h->values[c];
}


static const int stbi__jbias[16] = {0,-1,-3,-7,-15,-31,-63,-127,-255,-511,-1023,-2047,-4095,-8191,-16383,-32767};



inline static int stbi__extend_receive(stbi__jpeg *j, int n)
{
   unsigned int k;
   int sgn;
   if (j->code_bits < n) stbi__grow_buffer_unsafe(j);

   sgn = (stbi__int32)j->code_buffer >> 31;
   k = (((j->code_buffer) << (n)) | ((j->code_buffer) >> (32 - (n))));
   
# 1973 "../../include/stb_image/stb_image.h" 3
  ((
# 1973 "../../include/stb_image/stb_image.h"
  n >= 0 && n < (int) (sizeof(stbi__bmask)/sizeof(*stbi__bmask))
# 1973 "../../include/stb_image/stb_image.h" 3
  ) ? (void)0 : _assert(
# 1973 "../../include/stb_image/stb_image.h"
  "n >= 0 && n < (int) (sizeof(stbi__bmask)/sizeof(*stbi__bmask))"
# 1973 "../../include/stb_image/stb_image.h" 3
  , "../../include/stb_image/stb_image.h", 1973))
# 1973 "../../include/stb_image/stb_image.h"
                                                                             ;
   j->code_buffer = k & ~stbi__bmask[n];
   k &= stbi__bmask[n];
   j->code_bits -= n;
   return k + (stbi__jbias[n] & ~sgn);
}


inline static int stbi__jpeg_get_bits(stbi__jpeg *j, int n)
{
   unsigned int k;
   if (j->code_bits < n) stbi__grow_buffer_unsafe(j);
   k = (((j->code_buffer) << (n)) | ((j->code_buffer) >> (32 - (n))));
   j->code_buffer = k & ~stbi__bmask[n];
   k &= stbi__bmask[n];
   j->code_bits -= n;
   return k;
}

inline static int stbi__jpeg_get_bit(stbi__jpeg *j)
{
   unsigned int k;
   if (j->code_bits < 1) stbi__grow_buffer_unsafe(j);
   k = j->code_buffer;
   j->code_buffer <<= 1;
   --j->code_bits;
   return k & 0x80000000;
}



static const stbi_uc stbi__jpeg_dezigzag[64+15] =
{
    0, 1, 8, 16, 9, 2, 3, 10,
   17, 24, 32, 25, 18, 11, 4, 5,
   12, 19, 26, 33, 40, 48, 41, 34,
   27, 20, 13, 6, 7, 14, 21, 28,
   35, 42, 49, 56, 57, 50, 43, 36,
   29, 22, 15, 23, 30, 37, 44, 51,
   58, 59, 52, 45, 38, 31, 39, 46,
   53, 60, 61, 54, 47, 55, 62, 63,

   63, 63, 63, 63, 63, 63, 63, 63,
   63, 63, 63, 63, 63, 63, 63
};


static int stbi__jpeg_decode_block(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huffman *hac, stbi__int16 *fac, int b, stbi__uint16 *dequant)
{
   int diff,dc,k;
   int t;

   if (j->code_bits < 16) stbi__grow_buffer_unsafe(j);
   t = stbi__jpeg_huff_decode(j, hdc);
   if (t < 0) return stbi__err("bad huffman code");


   memset(data,0,64*sizeof(data[0]));

   diff = t ? stbi__extend_receive(j, t) : 0;
   dc = j->img_comp[b].dc_pred + diff;
   j->img_comp[b].dc_pred = dc;
   data[0] = (short) (dc * dequant[0]);


   k = 1;
   do {
      unsigned int zig;
      int c,r,s;
      if (j->code_bits < 16) stbi__grow_buffer_unsafe(j);
      c = (j->code_buffer >> (32 - 9)) & ((1 << 9)-1);
      r = fac[c];
      if (r) {
         k += (r >> 4) & 15;
         s = r & 15;
         j->code_buffer <<= s;
         j->code_bits -= s;

         zig = stbi__jpeg_dezigzag[k++];
         data[zig] = (short) ((r >> 8) * dequant[zig]);
      } else {
         int rs = stbi__jpeg_huff_decode(j, hac);
         if (rs < 0) return stbi__err("bad huffman code");
         s = rs & 15;
         r = rs >> 4;
         if (s == 0) {
            if (rs != 0xf0) break;
            k += 16;
         } else {
            k += r;

            zig = stbi__jpeg_dezigzag[k++];
            data[zig] = (short) (stbi__extend_receive(j,s) * dequant[zig]);
         }
      }
   } while (k < 64);
   return 1;
}

static int stbi__jpeg_decode_block_prog_dc(stbi__jpeg *j, short data[64], stbi__huffman *hdc, int b)
{
   int diff,dc;
   int t;
   if (j->spec_end != 0) return stbi__err("can't merge dc and ac");

   if (j->code_bits < 16) stbi__grow_buffer_unsafe(j);

   if (j->succ_high == 0) {

      memset(data,0,64*sizeof(data[0]));
      t = stbi__jpeg_huff_decode(j, hdc);
      diff = t ? stbi__extend_receive(j, t) : 0;

      dc = j->img_comp[b].dc_pred + diff;
      j->img_comp[b].dc_pred = dc;
      data[0] = (short) (dc << j->succ_low);
   } else {

      if (stbi__jpeg_get_bit(j))
         data[0] += (short) (1 << j->succ_low);
   }
   return 1;
}



static int stbi__jpeg_decode_block_prog_ac(stbi__jpeg *j, short data[64], stbi__huffman *hac, stbi__int16 *fac)
{
   int k;
   if (j->spec_start == 0) return stbi__err("can't merge dc and ac");

   if (j->succ_high == 0) {
      int shift = j->succ_low;

      if (j->eob_run) {
         --j->eob_run;
         return 1;
      }

      k = j->spec_start;
      do {
         unsigned int zig;
         int c,r,s;
         if (j->code_bits < 16) stbi__grow_buffer_unsafe(j);
         c = (j->code_buffer >> (32 - 9)) & ((1 << 9)-1);
         r = fac[c];
         if (r) {
            k += (r >> 4) & 15;
            s = r & 15;
            j->code_buffer <<= s;
            j->code_bits -= s;
            zig = stbi__jpeg_dezigzag[k++];
            data[zig] = (short) ((r >> 8) << shift);
         } else {
            int rs = stbi__jpeg_huff_decode(j, hac);
            if (rs < 0) return stbi__err("bad huffman code");
            s = rs & 15;
            r = rs >> 4;
            if (s == 0) {
               if (r < 15) {
                  j->eob_run = (1 << r);
                  if (r)
                     j->eob_run += stbi__jpeg_get_bits(j, r);
                  --j->eob_run;
                  break;
               }
               k += 16;
            } else {
               k += r;
               zig = stbi__jpeg_dezigzag[k++];
               data[zig] = (short) (stbi__extend_receive(j,s) << shift);
            }
         }
      } while (k <= j->spec_end);
   } else {


      short bit = (short) (1 << j->succ_low);

      if (j->eob_run) {
         --j->eob_run;
         for (k = j->spec_start; k <= j->spec_end; ++k) {
            short *p = &data[stbi__jpeg_dezigzag[k]];
            if (*p != 0)
               if (stbi__jpeg_get_bit(j))
                  if ((*p & bit)==0) {
                     if (*p > 0)
                        *p += bit;
                     else
                        *p -= bit;
                  }
         }
      } else {
         k = j->spec_start;
         do {
            int r,s;
            int rs = stbi__jpeg_huff_decode(j, hac);
            if (rs < 0) return stbi__err("bad huffman code");
            s = rs & 15;
            r = rs >> 4;
            if (s == 0) {
               if (r < 15) {
                  j->eob_run = (1 << r) - 1;
                  if (r)
                     j->eob_run += stbi__jpeg_get_bits(j, r);
                  r = 64;
               } else {



               }
            } else {
               if (s != 1) return stbi__err("bad huffman code");

               if (stbi__jpeg_get_bit(j))
                  s = bit;
               else
                  s = -bit;
            }


            while (k <= j->spec_end) {
               short *p = &data[stbi__jpeg_dezigzag[k++]];
               if (*p != 0) {
                  if (stbi__jpeg_get_bit(j))
                     if ((*p & bit)==0) {
                        if (*p > 0)
                           *p += bit;
                        else
                           *p -= bit;
                     }
               } else {
                  if (r == 0) {
                     *p = (short) s;
                     break;
                  }
                  --r;
               }
            }
         } while (k <= j->spec_end);
      }
   }
   return 1;
}


inline static stbi_uc stbi__clamp(int x)
{

   if ((unsigned int) x > 255) {
      if (x < 0) return 0;
      if (x > 255) return 255;
   }
   return (stbi_uc) x;
}
# 2270 "../../include/stb_image/stb_image.h"
static void stbi__idct_block(stbi_uc *out, int out_stride, short data[64])
{
   int i,val[64],*v=val;
   stbi_uc *o;
   short *d = data;


   for (i=0; i < 8; ++i,++d, ++v) {

      if (d[ 8]==0 && d[16]==0 && d[24]==0 && d[32]==0
           && d[40]==0 && d[48]==0 && d[56]==0) {




         int dcterm = d[0]*4;
         v[0] = v[8] = v[16] = v[24] = v[32] = v[40] = v[48] = v[56] = dcterm;
      } else {
         int t0,t1,t2,t3,p1,p2,p3,p4,p5,x0,x1,x2,x3; p2 = d[16]; p3 = d[48]; p1 = (p2+p3) * ((int) (((0.5411961f) * 4096 + 0.5))); t2 = p1 + p3*((int) (((-1.847759065f) * 4096 + 0.5))); t3 = p1 + p2*((int) (((0.765366865f) * 4096 + 0.5))); p2 = d[ 0]; p3 = d[32]; t0 = ((p2+p3) * 4096); t1 = ((p2-p3) * 4096); x0 = t0+t3; x3 = t0-t3; x1 = t1+t2; x2 = t1-t2; t0 = d[56]; t1 = d[40]; t2 = d[24]; t3 = d[ 8]; p3 = t0+t2; p4 = t1+t3; p1 = t0+t3; p2 = t1+t2; p5 = (p3+p4)*((int) (((1.175875602f) * 4096 + 0.5))); t0 = t0*((int) (((0.298631336f) * 4096 + 0.5))); t1 = t1*((int) (((2.053119869f) * 4096 + 0.5))); t2 = t2*((int) (((3.072711026f) * 4096 + 0.5))); t3 = t3*((int) (((1.501321110f) * 4096 + 0.5))); p1 = p5 + p1*((int) (((-0.899976223f) * 4096 + 0.5))); p2 = p5 + p2*((int) (((-2.562915447f) * 4096 + 0.5))); p3 = p3*((int) (((-1.961570560f) * 4096 + 0.5))); p4 = p4*((int) (((-0.390180644f) * 4096 + 0.5))); t3 += p1+p4; t2 += p2+p3; t1 += p2+p4; t0 += p1+p3;


         x0 += 512; x1 += 512; x2 += 512; x3 += 512;
         v[ 0] = (x0+t3) >> 10;
         v[56] = (x0-t3) >> 10;
         v[ 8] = (x1+t2) >> 10;
         v[48] = (x1-t2) >> 10;
         v[16] = (x2+t1) >> 10;
         v[40] = (x2-t1) >> 10;
         v[24] = (x3+t0) >> 10;
         v[32] = (x3-t0) >> 10;
      }
   }

   for (i=0, v=val, o=out; i < 8; ++i,v+=8,o+=out_stride) {

      int t0,t1,t2,t3,p1,p2,p3,p4,p5,x0,x1,x2,x3; p2 = v[2]; p3 = v[6]; p1 = (p2+p3) * ((int) (((0.5411961f) * 4096 + 0.5))); t2 = p1 + p3*((int) (((-1.847759065f) * 4096 + 0.5))); t3 = p1 + p2*((int) (((0.765366865f) * 4096 + 0.5))); p2 = v[0]; p3 = v[4]; t0 = ((p2+p3) * 4096); t1 = ((p2-p3) * 4096); x0 = t0+t3; x3 = t0-t3; x1 = t1+t2; x2 = t1-t2; t0 = v[7]; t1 = v[5]; t2 = v[3]; t3 = v[1]; p3 = t0+t2; p4 = t1+t3; p1 = t0+t3; p2 = t1+t2; p5 = (p3+p4)*((int) (((1.175875602f) * 4096 + 0.5))); t0 = t0*((int) (((0.298631336f) * 4096 + 0.5))); t1 = t1*((int) (((2.053119869f) * 4096 + 0.5))); t2 = t2*((int) (((3.072711026f) * 4096 + 0.5))); t3 = t3*((int) (((1.501321110f) * 4096 + 0.5))); p1 = p5 + p1*((int) (((-0.899976223f) * 4096 + 0.5))); p2 = p5 + p2*((int) (((-2.562915447f) * 4096 + 0.5))); p3 = p3*((int) (((-1.961570560f) * 4096 + 0.5))); p4 = p4*((int) (((-0.390180644f) * 4096 + 0.5))); t3 += p1+p4; t2 += p2+p3; t1 += p2+p4; t0 += p1+p3;






      x0 += 65536 + (128<<17);
      x1 += 65536 + (128<<17);
      x2 += 65536 + (128<<17);
      x3 += 65536 + (128<<17);


      o[0] = stbi__clamp((x0+t3) >> 17);
      o[7] = stbi__clamp((x0-t3) >> 17);
      o[1] = stbi__clamp((x1+t2) >> 17);
      o[6] = stbi__clamp((x1-t2) >> 17);
      o[2] = stbi__clamp((x2+t1) >> 17);
      o[5] = stbi__clamp((x2-t1) >> 17);
      o[3] = stbi__clamp((x3+t0) >> 17);
      o[4] = stbi__clamp((x3-t0) >> 17);
   }
}
# 2722 "../../include/stb_image/stb_image.h"
static stbi_uc stbi__get_marker(stbi__jpeg *j)
{
   stbi_uc x;
   if (j->marker != 0xff) { x = j->marker; j->marker = 0xff; return x; }
   x = stbi__get8(j->s);
   if (x != 0xff) return 0xff;
   while (x == 0xff)
      x = stbi__get8(j->s);
   return x;
}







static void stbi__jpeg_reset(stbi__jpeg *j)
{
   j->code_bits = 0;
   j->code_buffer = 0;
   j->nomore = 0;
   j->img_comp[0].dc_pred = j->img_comp[1].dc_pred = j->img_comp[2].dc_pred = j->img_comp[3].dc_pred = 0;
   j->marker = 0xff;
   j->todo = j->restart_interval ? j->restart_interval : 0x7fffffff;
   j->eob_run = 0;


}

static int stbi__parse_entropy_coded_data(stbi__jpeg *z)
{
   stbi__jpeg_reset(z);
   if (!z->progressive) {
      if (z->scan_n == 1) {
         int i,j;
         short data[64];
         int n = z->order[0];




         int w = (z->img_comp[n].x+7) >> 3;
         int h = (z->img_comp[n].y+7) >> 3;
         for (j=0; j < h; ++j) {
            for (i=0; i < w; ++i) {
               int ha = z->img_comp[n].ha;
               if (!stbi__jpeg_decode_block(z, data, z->huff_dc+z->img_comp[n].hd, z->huff_ac+ha, z->fast_ac[ha], n, z->dequant[z->img_comp[n].tq])) return 0;
               z->idct_block_kernel(z->img_comp[n].data+z->img_comp[n].w2*j*8+i*8, z->img_comp[n].w2, data);

               if (--z->todo <= 0) {
                  if (z->code_bits < 24) stbi__grow_buffer_unsafe(z);


                  if (!((z->marker) >= 0xd0 && (z->marker) <= 0xd7)) return 1;
                  stbi__jpeg_reset(z);
               }
            }
         }
         return 1;
      } else {
         int i,j,k,x,y;
         short data[64];
         for (j=0; j < z->img_mcu_y; ++j) {
            for (i=0; i < z->img_mcu_x; ++i) {

               for (k=0; k < z->scan_n; ++k) {
                  int n = z->order[k];


                  for (y=0; y < z->img_comp[n].v; ++y) {
                     for (x=0; x < z->img_comp[n].h; ++x) {
                        int x2 = (i*z->img_comp[n].h + x)*8;
                        int y2 = (j*z->img_comp[n].v + y)*8;
                        int ha = z->img_comp[n].ha;
                        if (!stbi__jpeg_decode_block(z, data, z->huff_dc+z->img_comp[n].hd, z->huff_ac+ha, z->fast_ac[ha], n, z->dequant[z->img_comp[n].tq])) return 0;
                        z->idct_block_kernel(z->img_comp[n].data+z->img_comp[n].w2*y2+x2, z->img_comp[n].w2, data);
                     }
                  }
               }


               if (--z->todo <= 0) {
                  if (z->code_bits < 24) stbi__grow_buffer_unsafe(z);
                  if (!((z->marker) >= 0xd0 && (z->marker) <= 0xd7)) return 1;
                  stbi__jpeg_reset(z);
               }
            }
         }
         return 1;
      }
   } else {
      if (z->scan_n == 1) {
         int i,j;
         int n = z->order[0];




         int w = (z->img_comp[n].x+7) >> 3;
         int h = (z->img_comp[n].y+7) >> 3;
         for (j=0; j < h; ++j) {
            for (i=0; i < w; ++i) {
               short *data = z->img_comp[n].coeff + 64 * (i + j * z->img_comp[n].coeff_w);
               if (z->spec_start == 0) {
                  if (!stbi__jpeg_decode_block_prog_dc(z, data, &z->huff_dc[z->img_comp[n].hd], n))
                     return 0;
               } else {
                  int ha = z->img_comp[n].ha;
                  if (!stbi__jpeg_decode_block_prog_ac(z, data, &z->huff_ac[ha], z->fast_ac[ha]))
                     return 0;
               }

               if (--z->todo <= 0) {
                  if (z->code_bits < 24) stbi__grow_buffer_unsafe(z);
                  if (!((z->marker) >= 0xd0 && (z->marker) <= 0xd7)) return 1;
                  stbi__jpeg_reset(z);
               }
            }
         }
         return 1;
      } else {
         int i,j,k,x,y;
         for (j=0; j < z->img_mcu_y; ++j) {
            for (i=0; i < z->img_mcu_x; ++i) {

               for (k=0; k < z->scan_n; ++k) {
                  int n = z->order[k];


                  for (y=0; y < z->img_comp[n].v; ++y) {
                     for (x=0; x < z->img_comp[n].h; ++x) {
                        int x2 = (i*z->img_comp[n].h + x);
                        int y2 = (j*z->img_comp[n].v + y);
                        short *data = z->img_comp[n].coeff + 64 * (x2 + y2 * z->img_comp[n].coeff_w);
                        if (!stbi__jpeg_decode_block_prog_dc(z, data, &z->huff_dc[z->img_comp[n].hd], n))
                           return 0;
                     }
                  }
               }


               if (--z->todo <= 0) {
                  if (z->code_bits < 24) stbi__grow_buffer_unsafe(z);
                  if (!((z->marker) >= 0xd0 && (z->marker) <= 0xd7)) return 1;
                  stbi__jpeg_reset(z);
               }
            }
         }
         return 1;
      }
   }
}

static void stbi__jpeg_dequantize(short *data, stbi__uint16 *dequant)
{
   int i;
   for (i=0; i < 64; ++i)
      data[i] *= dequant[i];
}

static void stbi__jpeg_finish(stbi__jpeg *z)
{
   if (z->progressive) {

      int i,j,n;
      for (n=0; n < z->s->img_n; ++n) {
         int w = (z->img_comp[n].x+7) >> 3;
         int h = (z->img_comp[n].y+7) >> 3;
         for (j=0; j < h; ++j) {
            for (i=0; i < w; ++i) {
               short *data = z->img_comp[n].coeff + 64 * (i + j * z->img_comp[n].coeff_w);
               stbi__jpeg_dequantize(data, z->dequant[z->img_comp[n].tq]);
               z->idct_block_kernel(z->img_comp[n].data+z->img_comp[n].w2*j*8+i*8, z->img_comp[n].w2, data);
            }
         }
      }
   }
}

static int stbi__process_marker(stbi__jpeg *z, int m)
{
   int L;
   switch (m) {
      case 0xff:
         return stbi__err("expected marker");

      case 0xDD:
         if (stbi__get16be(z->s) != 4) return stbi__err("bad DRI len");
         z->restart_interval = stbi__get16be(z->s);
         return 1;

      case 0xDB:
         L = stbi__get16be(z->s)-2;
         while (L > 0) {
            int q = stbi__get8(z->s);
            int p = q >> 4, sixteen = (p != 0);
            int t = q & 15,i;
            if (p != 0 && p != 1) return stbi__err("bad DQT type");
            if (t > 3) return stbi__err("bad DQT table");

            for (i=0; i < 64; ++i)
               z->dequant[t][stbi__jpeg_dezigzag[i]] = (stbi__uint16)(sixteen ? stbi__get16be(z->s) : stbi__get8(z->s));
            L -= (sixteen ? 129 : 65);
         }
         return L==0;

      case 0xC4:
         L = stbi__get16be(z->s)-2;
         while (L > 0) {
            stbi_uc *v;
            int sizes[16],i,n=0;
            int q = stbi__get8(z->s);
            int tc = q >> 4;
            int th = q & 15;
            if (tc > 1 || th > 3) return stbi__err("bad DHT header");
            for (i=0; i < 16; ++i) {
               sizes[i] = stbi__get8(z->s);
               n += sizes[i];
            }
            L -= 17;
            if (tc == 0) {
               if (!stbi__build_huffman(z->huff_dc+th, sizes)) return 0;
               v = z->huff_dc[th].values;
            } else {
               if (!stbi__build_huffman(z->huff_ac+th, sizes)) return 0;
               v = z->huff_ac[th].values;
            }
            for (i=0; i < n; ++i)
               v[i] = stbi__get8(z->s);
            if (tc != 0)
               stbi__build_fast_ac(z->fast_ac[th], z->huff_ac + th);
            L -= n;
         }
         return L==0;
   }


   if ((m >= 0xE0 && m <= 0xEF) || m == 0xFE) {
      L = stbi__get16be(z->s);
      if (L < 2) {
         if (m == 0xFE)
            return stbi__err("bad COM len");
         else
            return stbi__err("bad APP len");
      }
      L -= 2;

      if (m == 0xE0 && L >= 5) {
         static const unsigned char tag[5] = {'J','F','I','F','\0'};
         int ok = 1;
         int i;
         for (i=0; i < 5; ++i)
            if (stbi__get8(z->s) != tag[i])
               ok = 0;
         L -= 5;
         if (ok)
            z->jfif = 1;
      } else if (m == 0xEE && L >= 12) {
         static const unsigned char tag[6] = {'A','d','o','b','e','\0'};
         int ok = 1;
         int i;
         for (i=0; i < 6; ++i)
            if (stbi__get8(z->s) != tag[i])
               ok = 0;
         L -= 6;
         if (ok) {
            stbi__get8(z->s);
            stbi__get16be(z->s);
            stbi__get16be(z->s);
            z->app14_color_transform = stbi__get8(z->s);
            L -= 6;
         }
      }

      stbi__skip(z->s, L);
      return 1;
   }

   return stbi__err("unknown marker");
}


static int stbi__process_scan_header(stbi__jpeg *z)
{
   int i;
   int Ls = stbi__get16be(z->s);
   z->scan_n = stbi__get8(z->s);
   if (z->scan_n < 1 || z->scan_n > 4 || z->scan_n > (int) z->s->img_n) return stbi__err("bad SOS component count");
   if (Ls != 6+2*z->scan_n) return stbi__err("bad SOS len");
   for (i=0; i < z->scan_n; ++i) {
      int id = stbi__get8(z->s), which;
      int q = stbi__get8(z->s);
      for (which = 0; which < z->s->img_n; ++which)
         if (z->img_comp[which].id == id)
            break;
      if (which == z->s->img_n) return 0;
      z->img_comp[which].hd = q >> 4; if (z->img_comp[which].hd > 3) return stbi__err("bad DC huff");
      z->img_comp[which].ha = q & 15; if (z->img_comp[which].ha > 3) return stbi__err("bad AC huff");
      z->order[i] = which;
   }

   {
      int aa;
      z->spec_start = stbi__get8(z->s);
      z->spec_end = stbi__get8(z->s);
      aa = stbi__get8(z->s);
      z->succ_high = (aa >> 4);
      z->succ_low = (aa & 15);
      if (z->progressive) {
         if (z->spec_start > 63 || z->spec_end > 63 || z->spec_start > z->spec_end || z->succ_high > 13 || z->succ_low > 13)
            return stbi__err("bad SOS");
      } else {
         if (z->spec_start != 0) return stbi__err("bad SOS");
         if (z->succ_high != 0 || z->succ_low != 0) return stbi__err("bad SOS");
         z->spec_end = 63;
      }
   }

   return 1;
}

static int stbi__free_jpeg_components(stbi__jpeg *z, int ncomp, int why)
{
   int i;
   for (i=0; i < ncomp; ++i) {
      if (z->img_comp[i].raw_data) {
         free(z->img_comp[i].raw_data);
         z->img_comp[i].raw_data = 
# 3050 "../../include/stb_image/stb_image.h" 3 4
                                  __null
# 3050 "../../include/stb_image/stb_image.h"
                                      ;
         z->img_comp[i].data = 
# 3051 "../../include/stb_image/stb_image.h" 3 4
                              __null
# 3051 "../../include/stb_image/stb_image.h"
                                  ;
      }
      if (z->img_comp[i].raw_coeff) {
         free(z->img_comp[i].raw_coeff);
         z->img_comp[i].raw_coeff = 0;
         z->img_comp[i].coeff = 0;
      }
      if (z->img_comp[i].linebuf) {
         free(z->img_comp[i].linebuf);
         z->img_comp[i].linebuf = 
# 3060 "../../include/stb_image/stb_image.h" 3 4
                                 __null
# 3060 "../../include/stb_image/stb_image.h"
                                     ;
      }
   }
   return why;
}

static int stbi__process_frame_header(stbi__jpeg *z, int scan)
{
   stbi__context *s = z->s;
   int Lf,p,i,q, h_max=1,v_max=1,c;
   Lf = stbi__get16be(s); if (Lf < 11) return stbi__err("bad SOF len");
   p = stbi__get8(s); if (p != 8) return stbi__err("only 8-bit");
   s->img_y = stbi__get16be(s); if (s->img_y == 0) return stbi__err("no header height");
   s->img_x = stbi__get16be(s); if (s->img_x == 0) return stbi__err("0 width");
   c = stbi__get8(s);
   if (c != 3 && c != 1 && c != 4) return stbi__err("bad component count");
   s->img_n = c;
   for (i=0; i < c; ++i) {
      z->img_comp[i].data = 
# 3078 "../../include/stb_image/stb_image.h" 3 4
                           __null
# 3078 "../../include/stb_image/stb_image.h"
                               ;
      z->img_comp[i].linebuf = 
# 3079 "../../include/stb_image/stb_image.h" 3 4
                              __null
# 3079 "../../include/stb_image/stb_image.h"
                                  ;
   }

   if (Lf != 8+3*s->img_n) return stbi__err("bad SOF len");

   z->rgb = 0;
   for (i=0; i < s->img_n; ++i) {
      static const unsigned char rgb[3] = { 'R', 'G', 'B' };
      z->img_comp[i].id = stbi__get8(s);
      if (s->img_n == 3 && z->img_comp[i].id == rgb[i])
         ++z->rgb;
      q = stbi__get8(s);
      z->img_comp[i].h = (q >> 4); if (!z->img_comp[i].h || z->img_comp[i].h > 4) return stbi__err("bad H");
      z->img_comp[i].v = q & 15; if (!z->img_comp[i].v || z->img_comp[i].v > 4) return stbi__err("bad V");
      z->img_comp[i].tq = stbi__get8(s); if (z->img_comp[i].tq > 3) return stbi__err("bad TQ");
   }

   if (scan != STBI__SCAN_load) return 1;

   if (!stbi__mad3sizes_valid(s->img_x, s->img_y, s->img_n, 0)) return stbi__err("too large");

   for (i=0; i < s->img_n; ++i) {
      if (z->img_comp[i].h > h_max) h_max = z->img_comp[i].h;
      if (z->img_comp[i].v > v_max) v_max = z->img_comp[i].v;
   }


   z->img_h_max = h_max;
   z->img_v_max = v_max;
   z->img_mcu_w = h_max * 8;
   z->img_mcu_h = v_max * 8;

   z->img_mcu_x = (s->img_x + z->img_mcu_w-1) / z->img_mcu_w;
   z->img_mcu_y = (s->img_y + z->img_mcu_h-1) / z->img_mcu_h;

   for (i=0; i < s->img_n; ++i) {

      z->img_comp[i].x = (s->img_x * z->img_comp[i].h + h_max-1) / h_max;
      z->img_comp[i].y = (s->img_y * z->img_comp[i].v + v_max-1) / v_max;







      z->img_comp[i].w2 = z->img_mcu_x * z->img_comp[i].h * 8;
      z->img_comp[i].h2 = z->img_mcu_y * z->img_comp[i].v * 8;
      z->img_comp[i].coeff = 0;
      z->img_comp[i].raw_coeff = 0;
      z->img_comp[i].linebuf = 
# 3129 "../../include/stb_image/stb_image.h" 3 4
                              __null
# 3129 "../../include/stb_image/stb_image.h"
                                  ;
      z->img_comp[i].raw_data = stbi__malloc_mad2(z->img_comp[i].w2, z->img_comp[i].h2, 15);
      if (z->img_comp[i].raw_data == 
# 3131 "../../include/stb_image/stb_image.h" 3 4
                                    __null
# 3131 "../../include/stb_image/stb_image.h"
                                        )
         return stbi__free_jpeg_components(z, i+1, stbi__err("outofmem"));

      z->img_comp[i].data = (stbi_uc*) (((size_t) z->img_comp[i].raw_data + 15) & ~15);
      if (z->progressive) {

         z->img_comp[i].coeff_w = z->img_comp[i].w2 / 8;
         z->img_comp[i].coeff_h = z->img_comp[i].h2 / 8;
         z->img_comp[i].raw_coeff = stbi__malloc_mad3(z->img_comp[i].w2, z->img_comp[i].h2, sizeof(short), 15);
         if (z->img_comp[i].raw_coeff == 
# 3140 "../../include/stb_image/stb_image.h" 3 4
                                        __null
# 3140 "../../include/stb_image/stb_image.h"
                                            )
            return stbi__free_jpeg_components(z, i+1, stbi__err("outofmem"));
         z->img_comp[i].coeff = (short*) (((size_t) z->img_comp[i].raw_coeff + 15) & ~15);
      }
   }

   return 1;
}
# 3158 "../../include/stb_image/stb_image.h"
static int stbi__decode_jpeg_header(stbi__jpeg *z, int scan)
{
   int m;
   z->jfif = 0;
   z->app14_color_transform = -1;
   z->marker = 0xff;
   m = stbi__get_marker(z);
   if (!((m) == 0xd8)) return stbi__err("no SOI");
   if (scan == STBI__SCAN_type) return 1;
   m = stbi__get_marker(z);
   while (!((m) == 0xc0 || (m) == 0xc1 || (m) == 0xc2)) {
      if (!stbi__process_marker(z,m)) return 0;
      m = stbi__get_marker(z);
      while (m == 0xff) {

         if (stbi__at_eof(z->s)) return stbi__err("no SOF");
         m = stbi__get_marker(z);
      }
   }
   z->progressive = ((m) == 0xc2);
   if (!stbi__process_frame_header(z, scan)) return 0;
   return 1;
}


static int stbi__decode_jpeg_image(stbi__jpeg *j)
{
   int m;
   for (m = 0; m < 4; m++) {
      j->img_comp[m].raw_data = 
# 3187 "../../include/stb_image/stb_image.h" 3 4
                               __null
# 3187 "../../include/stb_image/stb_image.h"
                                   ;
      j->img_comp[m].raw_coeff = 
# 3188 "../../include/stb_image/stb_image.h" 3 4
                                __null
# 3188 "../../include/stb_image/stb_image.h"
                                    ;
   }
   j->restart_interval = 0;
   if (!stbi__decode_jpeg_header(j, STBI__SCAN_load)) return 0;
   m = stbi__get_marker(j);
   while (!((m) == 0xd9)) {
      if (((m) == 0xda)) {
         if (!stbi__process_scan_header(j)) return 0;
         if (!stbi__parse_entropy_coded_data(j)) return 0;
         if (j->marker == 0xff ) {

            while (!stbi__at_eof(j->s)) {
               int x = stbi__get8(j->s);
               if (x == 255) {
                  j->marker = stbi__get8(j->s);
                  break;
               }
            }

         }
      } else if (((m) == 0xdc)) {
         int Ld = stbi__get16be(j->s);
         stbi__uint32 NL = stbi__get16be(j->s);
         if (Ld != 4) return stbi__err("bad DNL len");
         if (NL != j->s->img_y) return stbi__err("bad DNL height");
      } else {
         if (!stbi__process_marker(j, m)) return 0;
      }
      m = stbi__get_marker(j);
   }
   if (j->progressive)
      stbi__jpeg_finish(j);
   return 1;
}



typedef stbi_uc *(*resample_row_func)(stbi_uc *out, stbi_uc *in0, stbi_uc *in1,
                                    int w, int hs);



static stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
{
   (void)sizeof(out);
   (void)sizeof(in_far);
   (void)sizeof(w);
   (void)sizeof(hs);
   return in_near;
}

static stbi_uc* stbi__resample_row_v_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
{

   int i;
   (void)sizeof(hs);
   for (i=0; i < w; ++i)
      out[i] = ((stbi_uc) ((3*in_near[i] + in_far[i] + 2) >> 2));
   return out;
}

static stbi_uc* stbi__resample_row_h_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
{

   int i;
   stbi_uc *input = in_near;

   if (w == 1) {

      out[0] = out[1] = input[0];
      return out;
   }

   out[0] = input[0];
   out[1] = ((stbi_uc) ((input[0]*3 + input[1] + 2) >> 2));
   for (i=1; i < w-1; ++i) {
      int n = 3*input[i]+2;
      out[i*2+0] = ((stbi_uc) ((n+input[i-1]) >> 2));
      out[i*2+1] = ((stbi_uc) ((n+input[i+1]) >> 2));
   }
   out[i*2+0] = ((stbi_uc) ((input[w-2]*3 + input[w-1] + 2) >> 2));
   out[i*2+1] = input[w-1];

   (void)sizeof(in_far);
   (void)sizeof(hs);

   return out;
}



static stbi_uc *stbi__resample_row_hv_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
{

   int i,t0,t1;
   if (w == 1) {
      out[0] = out[1] = ((stbi_uc) ((3*in_near[0] + in_far[0] + 2) >> 2));
      return out;
   }

   t1 = 3*in_near[0] + in_far[0];
   out[0] = ((stbi_uc) ((t1+2) >> 2));
   for (i=1; i < w; ++i) {
      t0 = t1;
      t1 = 3*in_near[i]+in_far[i];
      out[i*2-1] = ((stbi_uc) ((3*t0 + t1 + 8) >> 4));
      out[i*2 ] = ((stbi_uc) ((3*t1 + t0 + 8) >> 4));
   }
   out[w*2-1] = ((stbi_uc) ((t1+2) >> 2));

   (void)sizeof(hs);

   return out;
}
# 3420 "../../include/stb_image/stb_image.h"
static stbi_uc *stbi__resample_row_generic(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)
{

   int i,j;
   (void)sizeof(in_far);
   for (i=0; i < w; ++i)
      for (j=0; j < hs; ++j)
         out[i*hs+j] = in_near[i];
   return out;
}




static void stbi__YCbCr_to_RGB_row(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step)
{
   int i;
   for (i=0; i < count; ++i) {
      int y_fixed = (y[i] << 20) + (1<<19);
      int r,g,b;
      int cr = pcr[i] - 128;
      int cb = pcb[i] - 128;
      r = y_fixed + cr* (((int) ((1.40200f) * 4096.0f + 0.5f)) << 8);
      g = y_fixed + (cr*-(((int) ((0.71414f) * 4096.0f + 0.5f)) << 8)) + ((cb*-(((int) ((0.34414f) * 4096.0f + 0.5f)) << 8)) & 0xffff0000);
      b = y_fixed + cb* (((int) ((1.77200f) * 4096.0f + 0.5f)) << 8);
      r >>= 20;
      g >>= 20;
      b >>= 20;
      if ((unsigned) r > 255) { if (r < 0) r = 0; else r = 255; }
      if ((unsigned) g > 255) { if (g < 0) g = 0; else g = 255; }
      if ((unsigned) b > 255) { if (b < 0) b = 0; else b = 255; }
      out[0] = (stbi_uc)r;
      out[1] = (stbi_uc)g;
      out[2] = (stbi_uc)b;
      out[3] = 255;
      out += step;
   }
}
# 3595 "../../include/stb_image/stb_image.h"
static void stbi__setup_jpeg(stbi__jpeg *j)
{
   j->idct_block_kernel = stbi__idct_block;
   j->YCbCr_to_RGB_kernel = stbi__YCbCr_to_RGB_row;
   j->resample_row_hv_2_kernel = stbi__resample_row_hv_2;
# 3614 "../../include/stb_image/stb_image.h"
}


static void stbi__cleanup_jpeg(stbi__jpeg *j)
{
   stbi__free_jpeg_components(j, j->s->img_n, 0);
}

typedef struct
{
   resample_row_func resample;
   stbi_uc *line0,*line1;
   int hs,vs;
   int w_lores;
   int ystep;
   int ypos;
} stbi__resample;


static stbi_uc stbi__blinn_8x8(stbi_uc x, stbi_uc y)
{
   unsigned int t = x*y + 128;
   return (stbi_uc) ((t + (t >>8)) >> 8);
}

static stbi_uc *load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)
{
   int n, decode_n, is_rgb;
   z->s->img_n = 0;


   if (req_comp < 0 || req_comp > 4) return ((unsigned char *)(size_t) (stbi__err("bad req_comp")?
# 3645 "../../include/stb_image/stb_image.h" 3 4
                                           __null
# 3645 "../../include/stb_image/stb_image.h"
                                           :
# 3645 "../../include/stb_image/stb_image.h" 3 4
                                           __null
# 3645 "../../include/stb_image/stb_image.h"
                                           ));


   if (!stbi__decode_jpeg_image(z)) { stbi__cleanup_jpeg(z); return 
# 3648 "../../include/stb_image/stb_image.h" 3 4
                                                                   __null
# 3648 "../../include/stb_image/stb_image.h"
                                                                       ; }


   n = req_comp ? req_comp : z->s->img_n >= 3 ? 3 : 1;

   is_rgb = z->s->img_n == 3 && (z->rgb == 3 || (z->app14_color_transform == 0 && !z->jfif));

   if (z->s->img_n == 3 && n < 3 && !is_rgb)
      decode_n = 1;
   else
      decode_n = z->s->img_n;


   {
      int k;
      unsigned int i,j;
      stbi_uc *output;
      stbi_uc *coutput[4] = { 
# 3665 "../../include/stb_image/stb_image.h" 3 4
                             __null
# 3665 "../../include/stb_image/stb_image.h"
                                 , 
# 3665 "../../include/stb_image/stb_image.h" 3 4
                                   __null
# 3665 "../../include/stb_image/stb_image.h"
                                       , 
# 3665 "../../include/stb_image/stb_image.h" 3 4
                                         __null
# 3665 "../../include/stb_image/stb_image.h"
                                             , 
# 3665 "../../include/stb_image/stb_image.h" 3 4
                                               __null 
# 3665 "../../include/stb_image/stb_image.h"
                                                    };

      stbi__resample res_comp[4];

      for (k=0; k < decode_n; ++k) {
         stbi__resample *r = &res_comp[k];



         z->img_comp[k].linebuf = (stbi_uc *) stbi__malloc(z->s->img_x + 3);
         if (!z->img_comp[k].linebuf) { stbi__cleanup_jpeg(z); return ((unsigned char *)(size_t) (stbi__err("outofmem")?
# 3675 "../../include/stb_image/stb_image.h" 3 4
                                                                     __null
# 3675 "../../include/stb_image/stb_image.h"
                                                                     :
# 3675 "../../include/stb_image/stb_image.h" 3 4
                                                                     __null
# 3675 "../../include/stb_image/stb_image.h"
                                                                     )); }

         r->hs = z->img_h_max / z->img_comp[k].h;
         r->vs = z->img_v_max / z->img_comp[k].v;
         r->ystep = r->vs >> 1;
         r->w_lores = (z->s->img_x + r->hs-1) / r->hs;
         r->ypos = 0;
         r->line0 = r->line1 = z->img_comp[k].data;

         if (r->hs == 1 && r->vs == 1) r->resample = resample_row_1;
         else if (r->hs == 1 && r->vs == 2) r->resample = stbi__resample_row_v_2;
         else if (r->hs == 2 && r->vs == 1) r->resample = stbi__resample_row_h_2;
         else if (r->hs == 2 && r->vs == 2) r->resample = z->resample_row_hv_2_kernel;
         else r->resample = stbi__resample_row_generic;
      }


      output = (stbi_uc *) stbi__malloc_mad3(n, z->s->img_x, z->s->img_y, 1);
      if (!output) { stbi__cleanup_jpeg(z); return ((unsigned char *)(size_t) (stbi__err("outofmem")?
# 3693 "../../include/stb_image/stb_image.h" 3 4
                                                  __null
# 3693 "../../include/stb_image/stb_image.h"
                                                  :
# 3693 "../../include/stb_image/stb_image.h" 3 4
                                                  __null
# 3693 "../../include/stb_image/stb_image.h"
                                                  )); }


      for (j=0; j < z->s->img_y; ++j) {
         stbi_uc *out = output + n * z->s->img_x * j;
         for (k=0; k < decode_n; ++k) {
            stbi__resample *r = &res_comp[k];
            int y_bot = r->ystep >= (r->vs >> 1);
            coutput[k] = r->resample(z->img_comp[k].linebuf,
                                     y_bot ? r->line1 : r->line0,
                                     y_bot ? r->line0 : r->line1,
                                     r->w_lores, r->hs);
            if (++r->ystep >= r->vs) {
               r->ystep = 0;
               r->line0 = r->line1;
               if (++r->ypos < z->img_comp[k].y)
                  r->line1 += z->img_comp[k].w2;
            }
         }
         if (n >= 3) {
            stbi_uc *y = coutput[0];
            if (z->s->img_n == 3) {
               if (is_rgb) {
                  for (i=0; i < z->s->img_x; ++i) {
                     out[0] = y[i];
                     out[1] = coutput[1][i];
                     out[2] = coutput[2][i];
                     out[3] = 255;
                     out += n;
                  }
               } else {
                  z->YCbCr_to_RGB_kernel(out, y, coutput[1], coutput[2], z->s->img_x, n);
               }
            } else if (z->s->img_n == 4) {
               if (z->app14_color_transform == 0) {
                  for (i=0; i < z->s->img_x; ++i) {
                     stbi_uc m = coutput[3][i];
                     out[0] = stbi__blinn_8x8(coutput[0][i], m);
                     out[1] = stbi__blinn_8x8(coutput[1][i], m);
                     out[2] = stbi__blinn_8x8(coutput[2][i], m);
                     out[3] = 255;
                     out += n;
                  }
               } else if (z->app14_color_transform == 2) {
                  z->YCbCr_to_RGB_kernel(out, y, coutput[1], coutput[2], z->s->img_x, n);
                  for (i=0; i < z->s->img_x; ++i) {
                     stbi_uc m = coutput[3][i];
                     out[0] = stbi__blinn_8x8(255 - out[0], m);
                     out[1] = stbi__blinn_8x8(255 - out[1], m);
                     out[2] = stbi__blinn_8x8(255 - out[2], m);
                     out += n;
                  }
               } else {
                  z->YCbCr_to_RGB_kernel(out, y, coutput[1], coutput[2], z->s->img_x, n);
               }
            } else
               for (i=0; i < z->s->img_x; ++i) {
                  out[0] = out[1] = out[2] = y[i];
                  out[3] = 255;
                  out += n;
               }
         } else {
            if (is_rgb) {
               if (n == 1)
                  for (i=0; i < z->s->img_x; ++i)
                     *out++ = stbi__compute_y(coutput[0][i], coutput[1][i], coutput[2][i]);
               else {
                  for (i=0; i < z->s->img_x; ++i, out += 2) {
                     out[0] = stbi__compute_y(coutput[0][i], coutput[1][i], coutput[2][i]);
                     out[1] = 255;
                  }
               }
            } else if (z->s->img_n == 4 && z->app14_color_transform == 0) {
               for (i=0; i < z->s->img_x; ++i) {
                  stbi_uc m = coutput[3][i];
                  stbi_uc r = stbi__blinn_8x8(coutput[0][i], m);
                  stbi_uc g = stbi__blinn_8x8(coutput[1][i], m);
                  stbi_uc b = stbi__blinn_8x8(coutput[2][i], m);
                  out[0] = stbi__compute_y(r, g, b);
                  out[1] = 255;
                  out += n;
               }
            } else if (z->s->img_n == 4 && z->app14_color_transform == 2) {
               for (i=0; i < z->s->img_x; ++i) {
                  out[0] = stbi__blinn_8x8(255 - coutput[0][i], coutput[3][i]);
                  out[1] = 255;
                  out += n;
               }
            } else {
               stbi_uc *y = coutput[0];
               if (n == 1)
                  for (i=0; i < z->s->img_x; ++i) out[i] = y[i];
               else
                  for (i=0; i < z->s->img_x; ++i) { *out++ = y[i]; *out++ = 255; }
            }
         }
      }
      stbi__cleanup_jpeg(z);
      *out_x = z->s->img_x;
      *out_y = z->s->img_y;
      if (comp) *comp = z->s->img_n >= 3 ? 3 : 1;
      return output;
   }
}

static void *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)
{
   unsigned char* result;
   stbi__jpeg* j = (stbi__jpeg*) stbi__malloc(sizeof(stbi__jpeg));
   (void)sizeof(ri);
   j->s = s;
   stbi__setup_jpeg(j);
   result = load_jpeg_image(j, x,y,comp,req_comp);
   free(j);
   return result;
}

static int stbi__jpeg_test(stbi__context *s)
{
   int r;
   stbi__jpeg* j = (stbi__jpeg*)stbi__malloc(sizeof(stbi__jpeg));
   j->s = s;
   stbi__setup_jpeg(j);
   r = stbi__decode_jpeg_header(j, STBI__SCAN_type);
   stbi__rewind(s);
   free(j);
   return r;
}

static int stbi__jpeg_info_raw(stbi__jpeg *j, int *x, int *y, int *comp)
{
   if (!stbi__decode_jpeg_header(j, STBI__SCAN_header)) {
      stbi__rewind( j->s );
      return 0;
   }
   if (x) *x = j->s->img_x;
   if (y) *y = j->s->img_y;
   if (comp) *comp = j->s->img_n >= 3 ? 3 : 1;
   return 1;
}

static int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp)
{
   int result;
   stbi__jpeg* j = (stbi__jpeg*) (stbi__malloc(sizeof(stbi__jpeg)));
   j->s = s;
   result = stbi__jpeg_info_raw(j, x, y, comp);
   free(j);
   return result;
}
# 3860 "../../include/stb_image/stb_image.h"
typedef struct
{
   stbi__uint16 fast[1 << 9];
   stbi__uint16 firstcode[16];
   int maxcode[17];
   stbi__uint16 firstsymbol[16];
   stbi_uc size[288];
   stbi__uint16 value[288];
} stbi__zhuffman;

inline static int stbi__bitreverse16(int n)
{
  n = ((n & 0xAAAA) >> 1) | ((n & 0x5555) << 1);
  n = ((n & 0xCCCC) >> 2) | ((n & 0x3333) << 2);
  n = ((n & 0xF0F0) >> 4) | ((n & 0x0F0F) << 4);
  n = ((n & 0xFF00) >> 8) | ((n & 0x00FF) << 8);
  return n;
}

inline static int stbi__bit_reverse(int v, int bits)
{
   
# 3881 "../../include/stb_image/stb_image.h" 3
  ((
# 3881 "../../include/stb_image/stb_image.h"
  bits <= 16
# 3881 "../../include/stb_image/stb_image.h" 3
  ) ? (void)0 : _assert(
# 3881 "../../include/stb_image/stb_image.h"
  "bits <= 16"
# 3881 "../../include/stb_image/stb_image.h" 3
  , "../../include/stb_image/stb_image.h", 3881))
# 3881 "../../include/stb_image/stb_image.h"
                         ;


   return stbi__bitreverse16(v) >> (16-bits);
}

static int stbi__zbuild_huffman(stbi__zhuffman *z, const stbi_uc *sizelist, int num)
{
   int i,k=0;
   int code, next_code[16], sizes[17];


   memset(sizes, 0, sizeof(sizes));
   memset(z->fast, 0, sizeof(z->fast));
   for (i=0; i < num; ++i)
      ++sizes[sizelist[i]];
   sizes[0] = 0;
   for (i=1; i < 16; ++i)
      if (sizes[i] > (1 << i))
         return stbi__err("bad sizes");
   code = 0;
   for (i=1; i < 16; ++i) {
      next_code[i] = code;
      z->firstcode[i] = (stbi__uint16) code;
      z->firstsymbol[i] = (stbi__uint16) k;
      code = (code + sizes[i]);
      if (sizes[i])
         if (code-1 >= (1 << i)) return stbi__err("bad codelengths");
      z->maxcode[i] = code << (16-i);
      code <<= 1;
      k += sizes[i];
   }
   z->maxcode[16] = 0x10000;
   for (i=0; i < num; ++i) {
      int s = sizelist[i];
      if (s) {
         int c = next_code[s] - z->firstcode[s] + z->firstsymbol[s];
         stbi__uint16 fastv = (stbi__uint16) ((s << 9) | i);
         z->size [c] = (stbi_uc ) s;
         z->value[c] = (stbi__uint16) i;
         if (s <= 9) {
            int j = stbi__bit_reverse(next_code[s],s);
            while (j < (1 << 9)) {
               z->fast[j] = fastv;
               j += (1 << s);
            }
         }
         ++next_code[s];
      }
   }
   return 1;
}







typedef struct
{
   stbi_uc *zbuffer, *zbuffer_end;
   int num_bits;
   stbi__uint32 code_buffer;

   char *zout;
   char *zout_start;
   char *zout_end;
   int z_expandable;

   stbi__zhuffman z_length, z_distance;
} stbi__zbuf;

inline static stbi_uc stbi__zget8(stbi__zbuf *z)
{
   if (z->zbuffer >= z->zbuffer_end) return 0;
   return *z->zbuffer++;
}

static void stbi__fill_bits(stbi__zbuf *z)
{
   do {
      
# 3963 "../../include/stb_image/stb_image.h" 3
     ((
# 3963 "../../include/stb_image/stb_image.h"
     z->code_buffer < (1U << z->num_bits)
# 3963 "../../include/stb_image/stb_image.h" 3
     ) ? (void)0 : _assert(
# 3963 "../../include/stb_image/stb_image.h"
     "z->code_buffer < (1U << z->num_bits)"
# 3963 "../../include/stb_image/stb_image.h" 3
     , "../../include/stb_image/stb_image.h", 3963))
# 3963 "../../include/stb_image/stb_image.h"
                                                      ;
      z->code_buffer |= (unsigned int) stbi__zget8(z) << z->num_bits;
      z->num_bits += 8;
   } while (z->num_bits <= 24);
}

inline static unsigned int stbi__zreceive(stbi__zbuf *z, int n)
{
   unsigned int k;
   if (z->num_bits < n) stbi__fill_bits(z);
   k = z->code_buffer & ((1 << n) - 1);
   z->code_buffer >>= n;
   z->num_bits -= n;
   return k;
}

static int stbi__zhuffman_decode_slowpath(stbi__zbuf *a, stbi__zhuffman *z)
{
   int b,s,k;


   k = stbi__bit_reverse(a->code_buffer, 16);
   for (s=9 +1; ; ++s)
      if (k < z->maxcode[s])
         break;
   if (s == 16) return -1;

   b = (k >> (16-s)) - z->firstcode[s] + z->firstsymbol[s];
   
# 3991 "../../include/stb_image/stb_image.h" 3
  ((
# 3991 "../../include/stb_image/stb_image.h"
  z->size[b] == s
# 3991 "../../include/stb_image/stb_image.h" 3
  ) ? (void)0 : _assert(
# 3991 "../../include/stb_image/stb_image.h"
  "z->size[b] == s"
# 3991 "../../include/stb_image/stb_image.h" 3
  , "../../include/stb_image/stb_image.h", 3991))
# 3991 "../../include/stb_image/stb_image.h"
                              ;
   a->code_buffer >>= s;
   a->num_bits -= s;
   return z->value[b];
}

inline static int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z)
{
   int b,s;
   if (a->num_bits < 16) stbi__fill_bits(a);
   b = z->fast[a->code_buffer & ((1 << 9) - 1)];
   if (b) {
      s = b >> 9;
      a->code_buffer >>= s;
      a->num_bits -= s;
      return b & 511;
   }
   return stbi__zhuffman_decode_slowpath(a, z);
}

static int stbi__zexpand(stbi__zbuf *z, char *zout, int n)
{
   char *q;
   int cur, limit, old_limit;
   z->zout = zout;
   if (!z->z_expandable) return stbi__err("output buffer limit");
   cur = (int) (z->zout - z->zout_start);
   limit = old_limit = (int) (z->zout_end - z->zout_start);
   while (cur + n > limit)
      limit *= 2;
   q = (char *) realloc(z->zout_start,limit);
   (void)sizeof(old_limit);
   if (q == 
# 4023 "../../include/stb_image/stb_image.h" 3 4
           __null
# 4023 "../../include/stb_image/stb_image.h"
               ) return stbi__err("outofmem");
   z->zout_start = q;
   z->zout = q + cur;
   z->zout_end = q + limit;
   return 1;
}

static const int stbi__zlength_base[31] = {
   3,4,5,6,7,8,9,10,11,13,
   15,17,19,23,27,31,35,43,51,59,
   67,83,99,115,131,163,195,227,258,0,0 };

static const int stbi__zlength_extra[31]=
{ 0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0 };

static const int stbi__zdist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,
257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0};

static const int stbi__zdist_extra[32] =
{ 0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13};

static int stbi__parse_huffman_block(stbi__zbuf *a)
{
   char *zout = a->zout;
   for(;;) {
      int z = stbi__zhuffman_decode(a, &a->z_length);
      if (z < 256) {
         if (z < 0) return stbi__err("bad huffman code");
         if (zout >= a->zout_end) {
            if (!stbi__zexpand(a, zout, 1)) return 0;
            zout = a->zout;
         }
         *zout++ = (char) z;
      } else {
         stbi_uc *p;
         int len,dist;
         if (z == 256) {
            a->zout = zout;
            return 1;
         }
         z -= 257;
         len = stbi__zlength_base[z];
         if (stbi__zlength_extra[z]) len += stbi__zreceive(a, stbi__zlength_extra[z]);
         z = stbi__zhuffman_decode(a, &a->z_distance);
         if (z < 0) return stbi__err("bad huffman code");
         dist = stbi__zdist_base[z];
         if (stbi__zdist_extra[z]) dist += stbi__zreceive(a, stbi__zdist_extra[z]);
         if (zout - a->zout_start < dist) return stbi__err("bad dist");
         if (zout + len > a->zout_end) {
            if (!stbi__zexpand(a, zout, len)) return 0;
            zout = a->zout;
         }
         p = (stbi_uc *) (zout - dist);
         if (dist == 1) {
            stbi_uc v = *p;
            if (len) { do *zout++ = v; while (--len); }
         } else {
            if (len) { do *zout++ = *p++; while (--len); }
         }
      }
   }
}

static int stbi__compute_huffman_codes(stbi__zbuf *a)
{
   static const stbi_uc length_dezigzag[19] = { 16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15 };
   stbi__zhuffman z_codelength;
   stbi_uc lencodes[286+32+137];
   stbi_uc codelength_sizes[19];
   int i,n;

   int hlit = stbi__zreceive(a,5) + 257;
   int hdist = stbi__zreceive(a,5) + 1;
   int hclen = stbi__zreceive(a,4) + 4;
   int ntot = hlit + hdist;

   memset(codelength_sizes, 0, sizeof(codelength_sizes));
   for (i=0; i < hclen; ++i) {
      int s = stbi__zreceive(a,3);
      codelength_sizes[length_dezigzag[i]] = (stbi_uc) s;
   }
   if (!stbi__zbuild_huffman(&z_codelength, codelength_sizes, 19)) return 0;

   n = 0;
   while (n < ntot) {
      int c = stbi__zhuffman_decode(a, &z_codelength);
      if (c < 0 || c >= 19) return stbi__err("bad codelengths");
      if (c < 16)
         lencodes[n++] = (stbi_uc) c;
      else {
         stbi_uc fill = 0;
         if (c == 16) {
            c = stbi__zreceive(a,2)+3;
            if (n == 0) return stbi__err("bad codelengths");
            fill = lencodes[n-1];
         } else if (c == 17)
            c = stbi__zreceive(a,3)+3;
         else {
            
# 4121 "../../include/stb_image/stb_image.h" 3
           ((
# 4121 "../../include/stb_image/stb_image.h"
           c == 18
# 4121 "../../include/stb_image/stb_image.h" 3
           ) ? (void)0 : _assert(
# 4121 "../../include/stb_image/stb_image.h"
           "c == 18"
# 4121 "../../include/stb_image/stb_image.h" 3
           , "../../include/stb_image/stb_image.h", 4121))
# 4121 "../../include/stb_image/stb_image.h"
                               ;
            c = stbi__zreceive(a,7)+11;
         }
         if (ntot - n < c) return stbi__err("bad codelengths");
         memset(lencodes+n, fill, c);
         n += c;
      }
   }
   if (n != ntot) return stbi__err("bad codelengths");
   if (!stbi__zbuild_huffman(&a->z_length, lencodes, hlit)) return 0;
   if (!stbi__zbuild_huffman(&a->z_distance, lencodes+hlit, hdist)) return 0;
   return 1;
}

static int stbi__parse_uncompressed_block(stbi__zbuf *a)
{
   stbi_uc header[4];
   int len,nlen,k;
   if (a->num_bits & 7)
      stbi__zreceive(a, a->num_bits & 7);

   k = 0;
   while (a->num_bits > 0) {
      header[k++] = (stbi_uc) (a->code_buffer & 255);
      a->code_buffer >>= 8;
      a->num_bits -= 8;
   }
   
# 4148 "../../include/stb_image/stb_image.h" 3
  ((
# 4148 "../../include/stb_image/stb_image.h"
  a->num_bits == 0
# 4148 "../../include/stb_image/stb_image.h" 3
  ) ? (void)0 : _assert(
# 4148 "../../include/stb_image/stb_image.h"
  "a->num_bits == 0"
# 4148 "../../include/stb_image/stb_image.h" 3
  , "../../include/stb_image/stb_image.h", 4148))
# 4148 "../../include/stb_image/stb_image.h"
                               ;

   while (k < 4)
      header[k++] = stbi__zget8(a);
   len = header[1] * 256 + header[0];
   nlen = header[3] * 256 + header[2];
   if (nlen != (len ^ 0xffff)) return stbi__err("zlib corrupt");
   if (a->zbuffer + len > a->zbuffer_end) return stbi__err("read past buffer");
   if (a->zout + len > a->zout_end)
      if (!stbi__zexpand(a, a->zout, len)) return 0;
   memcpy(a->zout, a->zbuffer, len);
   a->zbuffer += len;
   a->zout += len;
   return 1;
}

static int stbi__parse_zlib_header(stbi__zbuf *a)
{
   int cmf = stbi__zget8(a);
   int cm = cmf & 15;

   int flg = stbi__zget8(a);
   if ((cmf*256+flg) % 31 != 0) return stbi__err("bad zlib header");
   if (flg & 32) return stbi__err("no preset dict");
   if (cm != 8) return stbi__err("bad compression");

   return 1;
}

static const stbi_uc stbi__zdefault_length[288] =
{
   8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8, 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
   8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8, 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
   8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8, 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
   8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8, 8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,
   8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
   9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
   9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
   9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, 9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
   7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7, 7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8
};
static const stbi_uc stbi__zdefault_distance[32] =
{
   5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5
};
# 4206 "../../include/stb_image/stb_image.h"
static int stbi__parse_zlib(stbi__zbuf *a, int parse_header)
{
   int final, type;
   if (parse_header)
      if (!stbi__parse_zlib_header(a)) return 0;
   a->num_bits = 0;
   a->code_buffer = 0;
   do {
      final = stbi__zreceive(a,1);
      type = stbi__zreceive(a,2);
      if (type == 0) {
         if (!stbi__parse_uncompressed_block(a)) return 0;
      } else if (type == 3) {
         return 0;
      } else {
         if (type == 1) {

            if (!stbi__zbuild_huffman(&a->z_length , stbi__zdefault_length , 288)) return 0;
            if (!stbi__zbuild_huffman(&a->z_distance, stbi__zdefault_distance, 32)) return 0;
         } else {
            if (!stbi__compute_huffman_codes(a)) return 0;
         }
         if (!stbi__parse_huffman_block(a)) return 0;
      }
   } while (!final);
   return 1;
}

static int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)
{
   a->zout_start = obuf;
   a->zout = obuf;
   a->zout_end = obuf + olen;
   a->z_expandable = exp;

   return stbi__parse_zlib(a, parse_header);
}

extern char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen)
{
   stbi__zbuf a;
   char *p = (char *) stbi__malloc(initial_size);
   if (p == 
# 4248 "../../include/stb_image/stb_image.h" 3 4
           __null
# 4248 "../../include/stb_image/stb_image.h"
               ) return 
# 4248 "../../include/stb_image/stb_image.h" 3 4
                        __null
# 4248 "../../include/stb_image/stb_image.h"
                            ;
   a.zbuffer = (stbi_uc *) buffer;
   a.zbuffer_end = (stbi_uc *) buffer + len;
   if (stbi__do_zlib(&a, p, initial_size, 1, 1)) {
      if (outlen) *outlen = (int) (a.zout - a.zout_start);
      return a.zout_start;
   } else {
      free(a.zout_start);
      return 
# 4256 "../../include/stb_image/stb_image.h" 3 4
            __null
# 4256 "../../include/stb_image/stb_image.h"
                ;
   }
}

extern char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)
{
   return stbi_zlib_decode_malloc_guesssize(buffer, len, 16384, outlen);
}

extern char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header)
{
   stbi__zbuf a;
   char *p = (char *) stbi__malloc(initial_size);
   if (p == 
# 4269 "../../include/stb_image/stb_image.h" 3 4
           __null
# 4269 "../../include/stb_image/stb_image.h"
               ) return 
# 4269 "../../include/stb_image/stb_image.h" 3 4
                        __null
# 4269 "../../include/stb_image/stb_image.h"
                            ;
   a.zbuffer = (stbi_uc *) buffer;
   a.zbuffer_end = (stbi_uc *) buffer + len;
   if (stbi__do_zlib(&a, p, initial_size, 1, parse_header)) {
      if (outlen) *outlen = (int) (a.zout - a.zout_start);
      return a.zout_start;
   } else {
      free(a.zout_start);
      return 
# 4277 "../../include/stb_image/stb_image.h" 3 4
            __null
# 4277 "../../include/stb_image/stb_image.h"
                ;
   }
}

extern int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)
{
   stbi__zbuf a;
   a.zbuffer = (stbi_uc *) ibuffer;
   a.zbuffer_end = (stbi_uc *) ibuffer + ilen;
   if (stbi__do_zlib(&a, obuffer, olen, 0, 1))
      return (int) (a.zout - a.zout_start);
   else
      return -1;
}

extern char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)
{
   stbi__zbuf a;
   char *p = (char *) stbi__malloc(16384);
   if (p == 
# 4296 "../../include/stb_image/stb_image.h" 3 4
           __null
# 4296 "../../include/stb_image/stb_image.h"
               ) return 
# 4296 "../../include/stb_image/stb_image.h" 3 4
                        __null
# 4296 "../../include/stb_image/stb_image.h"
                            ;
   a.zbuffer = (stbi_uc *) buffer;
   a.zbuffer_end = (stbi_uc *) buffer+len;
   if (stbi__do_zlib(&a, p, 16384, 1, 0)) {
      if (outlen) *outlen = (int) (a.zout - a.zout_start);
      return a.zout_start;
   } else {
      free(a.zout_start);
      return 
# 4304 "../../include/stb_image/stb_image.h" 3 4
            __null
# 4304 "../../include/stb_image/stb_image.h"
                ;
   }
}

extern int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen)
{
   stbi__zbuf a;
   a.zbuffer = (stbi_uc *) ibuffer;
   a.zbuffer_end = (stbi_uc *) ibuffer + ilen;
   if (stbi__do_zlib(&a, obuffer, olen, 0, 0))
      return (int) (a.zout - a.zout_start);
   else
      return -1;
}
# 4331 "../../include/stb_image/stb_image.h"
typedef struct
{
   stbi__uint32 length;
   stbi__uint32 type;
} stbi__pngchunk;

static stbi__pngchunk stbi__get_chunk_header(stbi__context *s)
{
   stbi__pngchunk c;
   c.length = stbi__get32be(s);
   c.type = stbi__get32be(s);
   return c;
}

static int stbi__check_png_header(stbi__context *s)
{
   static const stbi_uc png_sig[8] = { 137,80,78,71,13,10,26,10 };
   int i;
   for (i=0; i < 8; ++i)
      if (stbi__get8(s) != png_sig[i]) return stbi__err("bad png sig");
   return 1;
}

typedef struct
{
   stbi__context *s;
   stbi_uc *idata, *expanded, *out;
   int depth;
} stbi__png;


enum {
   STBI__F_none=0,
   STBI__F_sub=1,
   STBI__F_up=2,
   STBI__F_avg=3,
   STBI__F_paeth=4,

   STBI__F_avg_first,
   STBI__F_paeth_first
};

static stbi_uc first_row_filter[5] =
{
   STBI__F_none,
   STBI__F_sub,
   STBI__F_none,
   STBI__F_avg_first,
   STBI__F_paeth_first
};

static int stbi__paeth(int a, int b, int c)
{
   int p = a + b - c;
   int pa = abs(p-a);
   int pb = abs(p-b);
   int pc = abs(p-c);
   if (pa <= pb && pa <= pc) return a;
   if (pb <= pc) return b;
   return c;
}

static const stbi_uc stbi__depth_scale_table[9] = { 0, 0xff, 0x55, 0, 0x11, 0,0,0, 0x01 };


static int stbi__create_png_image_raw(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y, int depth, int color)
{
   int bytes = (depth == 16? 2 : 1);
   stbi__context *s = a->s;
   stbi__uint32 i,j,stride = x*out_n*bytes;
   stbi__uint32 img_len, img_width_bytes;
   int k;
   int img_n = s->img_n;

   int output_bytes = out_n*bytes;
   int filter_bytes = img_n*bytes;
   int width = x;

   
# 4409 "../../include/stb_image/stb_image.h" 3
  ((
# 4409 "../../include/stb_image/stb_image.h"
  out_n == s->img_n || out_n == s->img_n+1
# 4409 "../../include/stb_image/stb_image.h" 3
  ) ? (void)0 : _assert(
# 4409 "../../include/stb_image/stb_image.h"
  "out_n == s->img_n || out_n == s->img_n+1"
# 4409 "../../include/stb_image/stb_image.h" 3
  , "../../include/stb_image/stb_image.h", 4409))
# 4409 "../../include/stb_image/stb_image.h"
                                                       ;
   a->out = (stbi_uc *) stbi__malloc_mad3(x, y, output_bytes, 0);
   if (!a->out) return stbi__err("outofmem");

   if (!stbi__mad3sizes_valid(img_n, x, depth, 7)) return stbi__err("too large");
   img_width_bytes = (((img_n * x * depth) + 7) >> 3);
   img_len = (img_width_bytes + 1) * y;




   if (raw_len < img_len) return stbi__err("not enough pixels");

   for (j=0; j < y; ++j) {
      stbi_uc *cur = a->out + stride*j;
      stbi_uc *prior;
      int filter = *raw++;

      if (filter > 4)
         return stbi__err("invalid filter");

      if (depth < 8) {
         
# 4431 "../../include/stb_image/stb_image.h" 3
        ((
# 4431 "../../include/stb_image/stb_image.h"
        img_width_bytes <= x
# 4431 "../../include/stb_image/stb_image.h" 3
        ) ? (void)0 : _assert(
# 4431 "../../include/stb_image/stb_image.h"
        "img_width_bytes <= x"
# 4431 "../../include/stb_image/stb_image.h" 3
        , "../../include/stb_image/stb_image.h", 4431))
# 4431 "../../include/stb_image/stb_image.h"
                                         ;
         cur += x*out_n - img_width_bytes;
         filter_bytes = 1;
         width = img_width_bytes;
      }
      prior = cur - stride;


      if (j == 0) filter = first_row_filter[filter];


      for (k=0; k < filter_bytes; ++k) {
         switch (filter) {
            case STBI__F_none : cur[k] = raw[k]; break;
            case STBI__F_sub : cur[k] = raw[k]; break;
            case STBI__F_up : cur[k] = ((stbi_uc) ((raw[k] + prior[k]) & 255)); break;
            case STBI__F_avg : cur[k] = ((stbi_uc) ((raw[k] + (prior[k]>>1)) & 255)); break;
            case STBI__F_paeth : cur[k] = ((stbi_uc) ((raw[k] + stbi__paeth(0,prior[k],0)) & 255)); break;
            case STBI__F_avg_first : cur[k] = raw[k]; break;
            case STBI__F_paeth_first: cur[k] = raw[k]; break;
         }
      }

      if (depth == 8) {
         if (img_n != out_n)
            cur[img_n] = 255;
         raw += img_n;
         cur += out_n;
         prior += out_n;
      } else if (depth == 16) {
         if (img_n != out_n) {
            cur[filter_bytes] = 255;
            cur[filter_bytes+1] = 255;
         }
         raw += filter_bytes;
         cur += output_bytes;
         prior += output_bytes;
      } else {
         raw += 1;
         cur += 1;
         prior += 1;
      }


      if (depth < 8 || img_n == out_n) {
         int nk = (width - 1)*filter_bytes;



         switch (filter) {

            case STBI__F_none: memcpy(cur, raw, nk); break;
            case STBI__F_sub: for (k=0; k < nk; ++k) { cur[k] = ((stbi_uc) ((raw[k] + cur[k-filter_bytes]) & 255)); } break;
            case STBI__F_up: for (k=0; k < nk; ++k) { cur[k] = ((stbi_uc) ((raw[k] + prior[k]) & 255)); } break;
            case STBI__F_avg: for (k=0; k < nk; ++k) { cur[k] = ((stbi_uc) ((raw[k] + ((prior[k] + cur[k-filter_bytes])>>1)) & 255)); } break;
            case STBI__F_paeth: for (k=0; k < nk; ++k) { cur[k] = ((stbi_uc) ((raw[k] + stbi__paeth(cur[k-filter_bytes],prior[k],prior[k-filter_bytes])) & 255)); } break;
            case STBI__F_avg_first: for (k=0; k < nk; ++k) { cur[k] = ((stbi_uc) ((raw[k] + (cur[k-filter_bytes] >> 1)) & 255)); } break;
            case STBI__F_paeth_first: for (k=0; k < nk; ++k) { cur[k] = ((stbi_uc) ((raw[k] + stbi__paeth(cur[k-filter_bytes],0,0)) & 255)); } break;
         }

         raw += nk;
      } else {
         
# 4493 "../../include/stb_image/stb_image.h" 3
        ((
# 4493 "../../include/stb_image/stb_image.h"
        img_n+1 == out_n
# 4493 "../../include/stb_image/stb_image.h" 3
        ) ? (void)0 : _assert(
# 4493 "../../include/stb_image/stb_image.h"
        "img_n+1 == out_n"
# 4493 "../../include/stb_image/stb_image.h" 3
        , "../../include/stb_image/stb_image.h", 4493))
# 4493 "../../include/stb_image/stb_image.h"
                                     ;




         switch (filter) {
            case STBI__F_none: for (i=x-1; i >= 1; --i, cur[filter_bytes]=255,raw+=filter_bytes,cur+=output_bytes,prior+=output_bytes) for (k=0; k < filter_bytes; ++k) { cur[k] = raw[k]; } break;
            case STBI__F_sub: for (i=x-1; i >= 1; --i, cur[filter_bytes]=255,raw+=filter_bytes,cur+=output_bytes,prior+=output_bytes) for (k=0; k < filter_bytes; ++k) { cur[k] = ((stbi_uc) ((raw[k] + cur[k- output_bytes]) & 255)); } break;
            case STBI__F_up: for (i=x-1; i >= 1; --i, cur[filter_bytes]=255,raw+=filter_bytes,cur+=output_bytes,prior+=output_bytes) for (k=0; k < filter_bytes; ++k) { cur[k] = ((stbi_uc) ((raw[k] + prior[k]) & 255)); } break;
            case STBI__F_avg: for (i=x-1; i >= 1; --i, cur[filter_bytes]=255,raw+=filter_bytes,cur+=output_bytes,prior+=output_bytes) for (k=0; k < filter_bytes; ++k) { cur[k] = ((stbi_uc) ((raw[k] + ((prior[k] + cur[k- output_bytes])>>1)) & 255)); } break;
            case STBI__F_paeth: for (i=x-1; i >= 1; --i, cur[filter_bytes]=255,raw+=filter_bytes,cur+=output_bytes,prior+=output_bytes) for (k=0; k < filter_bytes; ++k) { cur[k] = ((stbi_uc) ((raw[k] + stbi__paeth(cur[k- output_bytes],prior[k],prior[k- output_bytes])) & 255)); } break;
            case STBI__F_avg_first: for (i=x-1; i >= 1; --i, cur[filter_bytes]=255,raw+=filter_bytes,cur+=output_bytes,prior+=output_bytes) for (k=0; k < filter_bytes; ++k) { cur[k] = ((stbi_uc) ((raw[k] + (cur[k- output_bytes] >> 1)) & 255)); } break;
            case STBI__F_paeth_first: for (i=x-1; i >= 1; --i, cur[filter_bytes]=255,raw+=filter_bytes,cur+=output_bytes,prior+=output_bytes) for (k=0; k < filter_bytes; ++k) { cur[k] = ((stbi_uc) ((raw[k] + stbi__paeth(cur[k- output_bytes],0,0)) & 255)); } break;
         }




         if (depth == 16) {
            cur = a->out + stride*j;
            for (i=0; i < x; ++i,cur+=output_bytes) {
               cur[filter_bytes+1] = 255;
            }
         }
      }
   }




   if (depth < 8) {
      for (j=0; j < y; ++j) {
         stbi_uc *cur = a->out + stride*j;
         stbi_uc *in = a->out + stride*j + x*out_n - img_width_bytes;


         stbi_uc scale = (color == 0) ? stbi__depth_scale_table[depth] : 1;







         if (depth == 4) {
            for (k=x*img_n; k >= 2; k-=2, ++in) {
               *cur++ = scale * ((*in >> 4) );
               *cur++ = scale * ((*in ) & 0x0f);
            }
            if (k > 0) *cur++ = scale * ((*in >> 4) );
         } else if (depth == 2) {
            for (k=x*img_n; k >= 4; k-=4, ++in) {
               *cur++ = scale * ((*in >> 6) );
               *cur++ = scale * ((*in >> 4) & 0x03);
               *cur++ = scale * ((*in >> 2) & 0x03);
               *cur++ = scale * ((*in ) & 0x03);
            }
            if (k > 0) *cur++ = scale * ((*in >> 6) );
            if (k > 1) *cur++ = scale * ((*in >> 4) & 0x03);
            if (k > 2) *cur++ = scale * ((*in >> 2) & 0x03);
         } else if (depth == 1) {
            for (k=x*img_n; k >= 8; k-=8, ++in) {
               *cur++ = scale * ((*in >> 7) );
               *cur++ = scale * ((*in >> 6) & 0x01);
               *cur++ = scale * ((*in >> 5) & 0x01);
               *cur++ = scale * ((*in >> 4) & 0x01);
               *cur++ = scale * ((*in >> 3) & 0x01);
               *cur++ = scale * ((*in >> 2) & 0x01);
               *cur++ = scale * ((*in >> 1) & 0x01);
               *cur++ = scale * ((*in ) & 0x01);
            }
            if (k > 0) *cur++ = scale * ((*in >> 7) );
            if (k > 1) *cur++ = scale * ((*in >> 6) & 0x01);
            if (k > 2) *cur++ = scale * ((*in >> 5) & 0x01);
            if (k > 3) *cur++ = scale * ((*in >> 4) & 0x01);
            if (k > 4) *cur++ = scale * ((*in >> 3) & 0x01);
            if (k > 5) *cur++ = scale * ((*in >> 2) & 0x01);
            if (k > 6) *cur++ = scale * ((*in >> 1) & 0x01);
         }
         if (img_n != out_n) {
            int q;

            cur = a->out + stride*j;
            if (img_n == 1) {
               for (q=x-1; q >= 0; --q) {
                  cur[q*2+1] = 255;
                  cur[q*2+0] = cur[q];
               }
            } else {
               
# 4582 "../../include/stb_image/stb_image.h" 3
              ((
# 4582 "../../include/stb_image/stb_image.h"
              img_n == 3
# 4582 "../../include/stb_image/stb_image.h" 3
              ) ? (void)0 : _assert(
# 4582 "../../include/stb_image/stb_image.h"
              "img_n == 3"
# 4582 "../../include/stb_image/stb_image.h" 3
              , "../../include/stb_image/stb_image.h", 4582))
# 4582 "../../include/stb_image/stb_image.h"
                                     ;
               for (q=x-1; q >= 0; --q) {
                  cur[q*4+3] = 255;
                  cur[q*4+2] = cur[q*3+2];
                  cur[q*4+1] = cur[q*3+1];
                  cur[q*4+0] = cur[q*3+0];
               }
            }
         }
      }
   } else if (depth == 16) {




      stbi_uc *cur = a->out;
      stbi__uint16 *cur16 = (stbi__uint16*)cur;

      for(i=0; i < x*y*out_n; ++i,cur16++,cur+=2) {
         *cur16 = (cur[0] << 8) | cur[1];
      }
   }

   return 1;
}

static int stbi__create_png_image(stbi__png *a, stbi_uc *image_data, stbi__uint32 image_data_len, int out_n, int depth, int color, int interlaced)
{
   int bytes = (depth == 16 ? 2 : 1);
   int out_bytes = out_n * bytes;
   stbi_uc *final;
   int p;
   if (!interlaced)
      return stbi__create_png_image_raw(a, image_data, image_data_len, out_n, a->s->img_x, a->s->img_y, depth, color);


   final = (stbi_uc *) stbi__malloc_mad3(a->s->img_x, a->s->img_y, out_bytes, 0);
   for (p=0; p < 7; ++p) {
      int xorig[] = { 0,4,0,2,0,1,0 };
      int yorig[] = { 0,0,4,0,2,0,1 };
      int xspc[] = { 8,8,4,4,2,2,1 };
      int yspc[] = { 8,8,8,4,4,2,2 };
      int i,j,x,y;

      x = (a->s->img_x - xorig[p] + xspc[p]-1) / xspc[p];
      y = (a->s->img_y - yorig[p] + yspc[p]-1) / yspc[p];
      if (x && y) {
         stbi__uint32 img_len = ((((a->s->img_n * x * depth) + 7) >> 3) + 1) * y;
         if (!stbi__create_png_image_raw(a, image_data, image_data_len, out_n, x, y, depth, color)) {
            free(final);
            return 0;
         }
         for (j=0; j < y; ++j) {
            for (i=0; i < x; ++i) {
               int out_y = j*yspc[p]+yorig[p];
               int out_x = i*xspc[p]+xorig[p];
               memcpy(final + out_y*a->s->img_x*out_bytes + out_x*out_bytes,
                      a->out + (j*x+i)*out_bytes, out_bytes);
            }
         }
         free(a->out);
         image_data += img_len;
         image_data_len -= img_len;
      }
   }
   a->out = final;

   return 1;
}

static int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n)
{
   stbi__context *s = z->s;
   stbi__uint32 i, pixel_count = s->img_x * s->img_y;
   stbi_uc *p = z->out;



   
# 4660 "../../include/stb_image/stb_image.h" 3
  ((
# 4660 "../../include/stb_image/stb_image.h"
  out_n == 2 || out_n == 4
# 4660 "../../include/stb_image/stb_image.h" 3
  ) ? (void)0 : _assert(
# 4660 "../../include/stb_image/stb_image.h"
  "out_n == 2 || out_n == 4"
# 4660 "../../include/stb_image/stb_image.h" 3
  , "../../include/stb_image/stb_image.h", 4660))
# 4660 "../../include/stb_image/stb_image.h"
                                       ;

   if (out_n == 2) {
      for (i=0; i < pixel_count; ++i) {
         p[1] = (p[0] == tc[0] ? 0 : 255);
         p += 2;
      }
   } else {
      for (i=0; i < pixel_count; ++i) {
         if (p[0] == tc[0] && p[1] == tc[1] && p[2] == tc[2])
            p[3] = 0;
         p += 4;
      }
   }
   return 1;
}

static int stbi__compute_transparency16(stbi__png *z, stbi__uint16 tc[3], int out_n)
{
   stbi__context *s = z->s;
   stbi__uint32 i, pixel_count = s->img_x * s->img_y;
   stbi__uint16 *p = (stbi__uint16*) z->out;



   
# 4685 "../../include/stb_image/stb_image.h" 3
  ((
# 4685 "../../include/stb_image/stb_image.h"
  out_n == 2 || out_n == 4
# 4685 "../../include/stb_image/stb_image.h" 3
  ) ? (void)0 : _assert(
# 4685 "../../include/stb_image/stb_image.h"
  "out_n == 2 || out_n == 4"
# 4685 "../../include/stb_image/stb_image.h" 3
  , "../../include/stb_image/stb_image.h", 4685))
# 4685 "../../include/stb_image/stb_image.h"
                                       ;

   if (out_n == 2) {
      for (i = 0; i < pixel_count; ++i) {
         p[1] = (p[0] == tc[0] ? 0 : 65535);
         p += 2;
      }
   } else {
      for (i = 0; i < pixel_count; ++i) {
         if (p[0] == tc[0] && p[1] == tc[1] && p[2] == tc[2])
            p[3] = 0;
         p += 4;
      }
   }
   return 1;
}

static int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)
{
   stbi__uint32 i, pixel_count = a->s->img_x * a->s->img_y;
   stbi_uc *p, *temp_out, *orig = a->out;

   p = (stbi_uc *) stbi__malloc_mad2(pixel_count, pal_img_n, 0);
   if (p == 
# 4708 "../../include/stb_image/stb_image.h" 3 4
           __null
# 4708 "../../include/stb_image/stb_image.h"
               ) return stbi__err("outofmem");


   temp_out = p;

   if (pal_img_n == 3) {
      for (i=0; i < pixel_count; ++i) {
         int n = orig[i]*4;
         p[0] = palette[n ];
         p[1] = palette[n+1];
         p[2] = palette[n+2];
         p += 3;
      }
   } else {
      for (i=0; i < pixel_count; ++i) {
         int n = orig[i]*4;
         p[0] = palette[n ];
         p[1] = palette[n+1];
         p[2] = palette[n+2];
         p[3] = palette[n+3];
         p += 4;
      }
   }
   free(a->out);
   a->out = temp_out;

   (void)sizeof(len);

   return 1;
}

static int stbi__unpremultiply_on_load = 0;
static int stbi__de_iphone_flag = 0;

extern void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)
{
   stbi__unpremultiply_on_load = flag_true_if_should_unpremultiply;
}

extern void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)
{
   stbi__de_iphone_flag = flag_true_if_should_convert;
}

static void stbi__de_iphone(stbi__png *z)
{
   stbi__context *s = z->s;
   stbi__uint32 i, pixel_count = s->img_x * s->img_y;
   stbi_uc *p = z->out;

   if (s->img_out_n == 3) {
      for (i=0; i < pixel_count; ++i) {
         stbi_uc t = p[0];
         p[0] = p[2];
         p[2] = t;
         p += 3;
      }
   } else {
      
# 4766 "../../include/stb_image/stb_image.h" 3
     ((
# 4766 "../../include/stb_image/stb_image.h"
     s->img_out_n == 4
# 4766 "../../include/stb_image/stb_image.h" 3
     ) ? (void)0 : _assert(
# 4766 "../../include/stb_image/stb_image.h"
     "s->img_out_n == 4"
# 4766 "../../include/stb_image/stb_image.h" 3
     , "../../include/stb_image/stb_image.h", 4766))
# 4766 "../../include/stb_image/stb_image.h"
                                   ;
      if (stbi__unpremultiply_on_load) {

         for (i=0; i < pixel_count; ++i) {
            stbi_uc a = p[3];
            stbi_uc t = p[0];
            if (a) {
               stbi_uc half = a / 2;
               p[0] = (p[2] * 255 + half) / a;
               p[1] = (p[1] * 255 + half) / a;
               p[2] = ( t * 255 + half) / a;
            } else {
               p[0] = p[2];
               p[2] = t;
            }
            p += 4;
         }
      } else {

         for (i=0; i < pixel_count; ++i) {
            stbi_uc t = p[0];
            p[0] = p[2];
            p[2] = t;
            p += 4;
         }
      }
   }
}



static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)
{
   stbi_uc palette[1024], pal_img_n=0;
   stbi_uc has_trans=0, tc[3]={0};
   stbi__uint16 tc16[3];
   stbi__uint32 ioff=0, idata_limit=0, i, pal_len=0;
   int first=1,k,interlace=0, color=0, is_iphone=0;
   stbi__context *s = z->s;

   z->expanded = 
# 4806 "../../include/stb_image/stb_image.h" 3 4
                __null
# 4806 "../../include/stb_image/stb_image.h"
                    ;
   z->idata = 
# 4807 "../../include/stb_image/stb_image.h" 3 4
             __null
# 4807 "../../include/stb_image/stb_image.h"
                 ;
   z->out = 
# 4808 "../../include/stb_image/stb_image.h" 3 4
           __null
# 4808 "../../include/stb_image/stb_image.h"
               ;

   if (!stbi__check_png_header(s)) return 0;

   if (scan == STBI__SCAN_type) return 1;

   for (;;) {
      stbi__pngchunk c = stbi__get_chunk_header(s);
      switch (c.type) {
         case (((unsigned) ('C') << 24) + ((unsigned) ('g') << 16) + ((unsigned) ('B') << 8) + (unsigned) ('I')):
            is_iphone = 1;
            stbi__skip(s, c.length);
            break;
         case (((unsigned) ('I') << 24) + ((unsigned) ('H') << 16) + ((unsigned) ('D') << 8) + (unsigned) ('R')): {
            int comp,filter;
            if (!first) return stbi__err("multiple IHDR");
            first = 0;
            if (c.length != 13) return stbi__err("bad IHDR len");
            s->img_x = stbi__get32be(s); if (s->img_x > (1 << 24)) return stbi__err("too large");
            s->img_y = stbi__get32be(s); if (s->img_y > (1 << 24)) return stbi__err("too large");
            z->depth = stbi__get8(s); if (z->depth != 1 && z->depth != 2 && z->depth != 4 && z->depth != 8 && z->depth != 16) return stbi__err("1/2/4/8/16-bit only");
            color = stbi__get8(s); if (color > 6) return stbi__err("bad ctype");
            if (color == 3 && z->depth == 16) return stbi__err("bad ctype");
            if (color == 3) pal_img_n = 3; else if (color & 1) return stbi__err("bad ctype");
            comp = stbi__get8(s); if (comp) return stbi__err("bad comp method");
            filter= stbi__get8(s); if (filter) return stbi__err("bad filter method");
            interlace = stbi__get8(s); if (interlace>1) return stbi__err("bad interlace method");
            if (!s->img_x || !s->img_y) return stbi__err("0-pixel image");
            if (!pal_img_n) {
               s->img_n = (color & 2 ? 3 : 1) + (color & 4 ? 1 : 0);
               if ((1 << 30) / s->img_x / s->img_n < s->img_y) return stbi__err("too large");
               if (scan == STBI__SCAN_header) return 1;
            } else {


               s->img_n = 1;
               if ((1 << 30) / s->img_x / 4 < s->img_y) return stbi__err("too large");

            }
            break;
         }

         case (((unsigned) ('P') << 24) + ((unsigned) ('L') << 16) + ((unsigned) ('T') << 8) + (unsigned) ('E')): {
            if (first) return stbi__err("first not IHDR");
            if (c.length > 256*3) return stbi__err("invalid PLTE");
            pal_len = c.length / 3;
            if (pal_len * 3 != c.length) return stbi__err("invalid PLTE");
            for (i=0; i < pal_len; ++i) {
               palette[i*4+0] = stbi__get8(s);
               palette[i*4+1] = stbi__get8(s);
               palette[i*4+2] = stbi__get8(s);
               palette[i*4+3] = 255;
            }
            break;
         }

         case (((unsigned) ('t') << 24) + ((unsigned) ('R') << 16) + ((unsigned) ('N') << 8) + (unsigned) ('S')): {
            if (first) return stbi__err("first not IHDR");
            if (z->idata) return stbi__err("tRNS after IDAT");
            if (pal_img_n) {
               if (scan == STBI__SCAN_header) { s->img_n = 4; return 1; }
               if (pal_len == 0) return stbi__err("tRNS before PLTE");
               if (c.length > pal_len) return stbi__err("bad tRNS len");
               pal_img_n = 4;
               for (i=0; i < c.length; ++i)
                  palette[i*4+3] = stbi__get8(s);
            } else {
               if (!(s->img_n & 1)) return stbi__err("tRNS with alpha");
               if (c.length != (stbi__uint32) s->img_n*2) return stbi__err("bad tRNS len");
               has_trans = 1;
               if (z->depth == 16) {
                  for (k = 0; k < s->img_n; ++k) tc16[k] = (stbi__uint16)stbi__get16be(s);
               } else {
                  for (k = 0; k < s->img_n; ++k) tc[k] = (stbi_uc)(stbi__get16be(s) & 255) * stbi__depth_scale_table[z->depth];
               }
            }
            break;
         }

         case (((unsigned) ('I') << 24) + ((unsigned) ('D') << 16) + ((unsigned) ('A') << 8) + (unsigned) ('T')): {
            if (first) return stbi__err("first not IHDR");
            if (pal_img_n && !pal_len) return stbi__err("no PLTE");
            if (scan == STBI__SCAN_header) { s->img_n = pal_img_n; return 1; }
            if ((int)(ioff + c.length) < (int)ioff) return 0;
            if (ioff + c.length > idata_limit) {
               stbi__uint32 idata_limit_old = idata_limit;
               stbi_uc *p;
               if (idata_limit == 0) idata_limit = c.length > 4096 ? c.length : 4096;
               while (ioff + c.length > idata_limit)
                  idata_limit *= 2;
               (void)sizeof(idata_limit_old);
               p = (stbi_uc *) realloc(z->idata,idata_limit); if (p == 
# 4899 "../../include/stb_image/stb_image.h" 3 4
                                                                                                   __null
# 4899 "../../include/stb_image/stb_image.h"
                                                                                                       ) return stbi__err("outofmem");
               z->idata = p;
            }
            if (!stbi__getn(s, z->idata+ioff,c.length)) return stbi__err("outofdata");
            ioff += c.length;
            break;
         }

         case (((unsigned) ('I') << 24) + ((unsigned) ('E') << 16) + ((unsigned) ('N') << 8) + (unsigned) ('D')): {
            stbi__uint32 raw_len, bpl;
            if (first) return stbi__err("first not IHDR");
            if (scan != STBI__SCAN_load) return 1;
            if (z->idata == 
# 4911 "../../include/stb_image/stb_image.h" 3 4
                           __null
# 4911 "../../include/stb_image/stb_image.h"
                               ) return stbi__err("no IDAT");

            bpl = (s->img_x * z->depth + 7) / 8;
            raw_len = bpl * s->img_y * s->img_n + s->img_y ;
            z->expanded = (stbi_uc *) stbi_zlib_decode_malloc_guesssize_headerflag((char *) z->idata, ioff, raw_len, (int *) &raw_len, !is_iphone);
            if (z->expanded == 
# 4916 "../../include/stb_image/stb_image.h" 3 4
                              __null
# 4916 "../../include/stb_image/stb_image.h"
                                  ) return 0;
            free(z->idata); z->idata = 
# 4917 "../../include/stb_image/stb_image.h" 3 4
                                           __null
# 4917 "../../include/stb_image/stb_image.h"
                                               ;
            if ((req_comp == s->img_n+1 && req_comp != 3 && !pal_img_n) || has_trans)
               s->img_out_n = s->img_n+1;
            else
               s->img_out_n = s->img_n;
            if (!stbi__create_png_image(z, z->expanded, raw_len, s->img_out_n, z->depth, color, interlace)) return 0;
            if (has_trans) {
               if (z->depth == 16) {
                  if (!stbi__compute_transparency16(z, tc16, s->img_out_n)) return 0;
               } else {
                  if (!stbi__compute_transparency(z, tc, s->img_out_n)) return 0;
               }
            }
            if (is_iphone && stbi__de_iphone_flag && s->img_out_n > 2)
               stbi__de_iphone(z);
            if (pal_img_n) {

               s->img_n = pal_img_n;
               s->img_out_n = pal_img_n;
               if (req_comp >= 3) s->img_out_n = req_comp;
               if (!stbi__expand_png_palette(z, palette, pal_len, s->img_out_n))
                  return 0;
            } else if (has_trans) {

               ++s->img_n;
            }
            free(z->expanded); z->expanded = 
# 4943 "../../include/stb_image/stb_image.h" 3 4
                                                 __null
# 4943 "../../include/stb_image/stb_image.h"
                                                     ;
            return 1;
         }

         default:

            if (first) return stbi__err("first not IHDR");
            if ((c.type & (1 << 29)) == 0) {


               static char invalid_chunk[] = "XXXX PNG chunk not known";
               invalid_chunk[0] = ((stbi_uc) ((c.type >> 24) & 255));
               invalid_chunk[1] = ((stbi_uc) ((c.type >> 16) & 255));
               invalid_chunk[2] = ((stbi_uc) ((c.type >> 8) & 255));
               invalid_chunk[3] = ((stbi_uc) ((c.type >> 0) & 255));

               return stbi__err(invalid_chunk);
            }
            stbi__skip(s, c.length);
            break;
      }

      stbi__get32be(s);
   }
}

static void *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp, stbi__result_info *ri)
{
   void *result=
# 4971 "../../include/stb_image/stb_image.h" 3 4
               __null
# 4971 "../../include/stb_image/stb_image.h"
                   ;
   if (req_comp < 0 || req_comp > 4) return ((unsigned char *)(size_t) (stbi__err("bad req_comp")?
# 4972 "../../include/stb_image/stb_image.h" 3 4
                                           __null
# 4972 "../../include/stb_image/stb_image.h"
                                           :
# 4972 "../../include/stb_image/stb_image.h" 3 4
                                           __null
# 4972 "../../include/stb_image/stb_image.h"
                                           ));
   if (stbi__parse_png_file(p, STBI__SCAN_load, req_comp)) {
      if (p->depth < 8)
         ri->bits_per_channel = 8;
      else
         ri->bits_per_channel = p->depth;
      result = p->out;
      p->out = 
# 4979 "../../include/stb_image/stb_image.h" 3 4
              __null
# 4979 "../../include/stb_image/stb_image.h"
                  ;
      if (req_comp && req_comp != p->s->img_out_n) {
         if (ri->bits_per_channel == 8)
            result = stbi__convert_format((unsigned char *) result, p->s->img_out_n, req_comp, p->s->img_x, p->s->img_y);
         else
            result = stbi__convert_format16((stbi__uint16 *) result, p->s->img_out_n, req_comp, p->s->img_x, p->s->img_y);
         p->s->img_out_n = req_comp;
         if (result == 
# 4986 "../../include/stb_image/stb_image.h" 3 4
                      __null
# 4986 "../../include/stb_image/stb_image.h"
                          ) return result;
      }
      *x = p->s->img_x;
      *y = p->s->img_y;
      if (n) *n = p->s->img_n;
   }
   free(p->out); p->out = 
# 4992 "../../include/stb_image/stb_image.h" 3 4
                                        __null
# 4992 "../../include/stb_image/stb_image.h"
                                            ;
   free(p->expanded); p->expanded = 
# 4993 "../../include/stb_image/stb_image.h" 3 4
                                        __null
# 4993 "../../include/stb_image/stb_image.h"
                                            ;
   free(p->idata); p->idata = 
# 4994 "../../include/stb_image/stb_image.h" 3 4
                                        __null
# 4994 "../../include/stb_image/stb_image.h"
                                            ;

   return result;
}

static void *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)
{
   stbi__png p;
   p.s = s;
   return stbi__do_png(&p, x,y,comp,req_comp, ri);
}

static int stbi__png_test(stbi__context *s)
{
   int r;
   r = stbi__check_png_header(s);
   stbi__rewind(s);
   return r;
}

static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp)
{
   if (!stbi__parse_png_file(p, STBI__SCAN_header, 0)) {
      stbi__rewind( p->s );
      return 0;
   }
   if (x) *x = p->s->img_x;
   if (y) *y = p->s->img_y;
   if (comp) *comp = p->s->img_n;
   return 1;
}

static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp)
{
   stbi__png p;
   p.s = s;
   return stbi__png_info_raw(&p, x, y, comp);
}

static int stbi__png_is16(stbi__context *s)
{
   stbi__png p;
   p.s = s;
   if (!stbi__png_info_raw(&p, 
# 5037 "../../include/stb_image/stb_image.h" 3 4
                              __null
# 5037 "../../include/stb_image/stb_image.h"
                                  , 
# 5037 "../../include/stb_image/stb_image.h" 3 4
                                    __null
# 5037 "../../include/stb_image/stb_image.h"
                                        , 
# 5037 "../../include/stb_image/stb_image.h" 3 4
                                          __null
# 5037 "../../include/stb_image/stb_image.h"
                                              ))
    return 0;
   if (p.depth != 16) {
      stbi__rewind(p.s);
      return 0;
   }
   return 1;
}





static int stbi__bmp_test_raw(stbi__context *s)
{
   int r;
   int sz;
   if (stbi__get8(s) != 'B') return 0;
   if (stbi__get8(s) != 'M') return 0;
   stbi__get32le(s);
   stbi__get16le(s);
   stbi__get16le(s);
   stbi__get32le(s);
   sz = stbi__get32le(s);
   r = (sz == 12 || sz == 40 || sz == 56 || sz == 108 || sz == 124);
   return r;
}

static int stbi__bmp_test(stbi__context *s)
{
   int r = stbi__bmp_test_raw(s);
   stbi__rewind(s);
   return r;
}



static int stbi__high_bit(unsigned int z)
{
   int n=0;
   if (z == 0) return -1;
   if (z >= 0x10000) { n += 16; z >>= 16; }
   if (z >= 0x00100) { n += 8; z >>= 8; }
   if (z >= 0x00010) { n += 4; z >>= 4; }
   if (z >= 0x00004) { n += 2; z >>= 2; }
   if (z >= 0x00002) { n += 1; z >>= 1; }
   return n;
}

static int stbi__bitcount(unsigned int a)
{
   a = (a & 0x55555555) + ((a >> 1) & 0x55555555);
   a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
   a = (a + (a >> 4)) & 0x0f0f0f0f;
   a = (a + (a >> 8));
   a = (a + (a >> 16));
   return a & 0xff;
}




static int stbi__shiftsigned(unsigned int v, int shift, int bits)
{
   static unsigned int mul_table[9] = {
      0,
      0xff , 0x55 , 0x49 , 0x11 ,
      0x21 , 0x41 , 0x81 , 0x01 ,
   };
   static unsigned int shift_table[9] = {
      0, 0,0,1,0,2,4,6,0,
   };
   if (shift < 0)
      v <<= -shift;
   else
      v >>= shift;
   
# 5113 "../../include/stb_image/stb_image.h" 3
  ((
# 5113 "../../include/stb_image/stb_image.h"
  v >= 0 && v < 256
# 5113 "../../include/stb_image/stb_image.h" 3
  ) ? (void)0 : _assert(
# 5113 "../../include/stb_image/stb_image.h"
  "v >= 0 && v < 256"
# 5113 "../../include/stb_image/stb_image.h" 3
  , "../../include/stb_image/stb_image.h", 5113))
# 5113 "../../include/stb_image/stb_image.h"
                                ;
   v >>= (8-bits);
   
# 5115 "../../include/stb_image/stb_image.h" 3
  ((
# 5115 "../../include/stb_image/stb_image.h"
  bits >= 0 && bits <= 8
# 5115 "../../include/stb_image/stb_image.h" 3
  ) ? (void)0 : _assert(
# 5115 "../../include/stb_image/stb_image.h"
  "bits >= 0 && bits <= 8"
# 5115 "../../include/stb_image/stb_image.h" 3
  , "../../include/stb_image/stb_image.h", 5115))
# 5115 "../../include/stb_image/stb_image.h"
                                     ;
   return (int) ((unsigned) v * mul_table[bits]) >> shift_table[bits];
}

typedef struct
{
   int bpp, offset, hsz;
   unsigned int mr,mg,mb,ma, all_a;
} stbi__bmp_data;

static void *stbi__bmp_parse_header(stbi__context *s, stbi__bmp_data *info)
{
   int hsz;
   if (stbi__get8(s) != 'B' || stbi__get8(s) != 'M') return ((unsigned char *)(size_t) (stbi__err("not BMP")?
# 5128 "../../include/stb_image/stb_image.h" 3 4
                                                           __null
# 5128 "../../include/stb_image/stb_image.h"
                                                           :
# 5128 "../../include/stb_image/stb_image.h" 3 4
                                                           __null
# 5128 "../../include/stb_image/stb_image.h"
                                                           ));
   stbi__get32le(s);
   stbi__get16le(s);
   stbi__get16le(s);
   info->offset = stbi__get32le(s);
   info->hsz = hsz = stbi__get32le(s);
   info->mr = info->mg = info->mb = info->ma = 0;

   if (hsz != 12 && hsz != 40 && hsz != 56 && hsz != 108 && hsz != 124) return ((unsigned char *)(size_t) (stbi__err("unknown BMP")?
# 5136 "../../include/stb_image/stb_image.h" 3 4
                                                                              __null
# 5136 "../../include/stb_image/stb_image.h"
                                                                              :
# 5136 "../../include/stb_image/stb_image.h" 3 4
                                                                              __null
# 5136 "../../include/stb_image/stb_image.h"
                                                                              ));
   if (hsz == 12) {
      s->img_x = stbi__get16le(s);
      s->img_y = stbi__get16le(s);
   } else {
      s->img_x = stbi__get32le(s);
      s->img_y = stbi__get32le(s);
   }
   if (stbi__get16le(s) != 1) return ((unsigned char *)(size_t) (stbi__err("bad BMP")?
# 5144 "../../include/stb_image/stb_image.h" 3 4
                                    __null
# 5144 "../../include/stb_image/stb_image.h"
                                    :
# 5144 "../../include/stb_image/stb_image.h" 3 4
                                    __null
# 5144 "../../include/stb_image/stb_image.h"
                                    ));
   info->bpp = stbi__get16le(s);
   if (hsz != 12) {
      int compress = stbi__get32le(s);
      if (compress == 1 || compress == 2) return ((unsigned char *)(size_t) (stbi__err("BMP RLE")?
# 5148 "../../include/stb_image/stb_image.h" 3 4
                                                __null
# 5148 "../../include/stb_image/stb_image.h"
                                                :
# 5148 "../../include/stb_image/stb_image.h" 3 4
                                                __null
# 5148 "../../include/stb_image/stb_image.h"
                                                ));
      stbi__get32le(s);
      stbi__get32le(s);
      stbi__get32le(s);
      stbi__get32le(s);
      stbi__get32le(s);
      if (hsz == 40 || hsz == 56) {
         if (hsz == 56) {
            stbi__get32le(s);
            stbi__get32le(s);
            stbi__get32le(s);
            stbi__get32le(s);
         }
         if (info->bpp == 16 || info->bpp == 32) {
            if (compress == 0) {
               if (info->bpp == 32) {
                  info->mr = 0xffu << 16;
                  info->mg = 0xffu << 8;
                  info->mb = 0xffu << 0;
                  info->ma = 0xffu << 24;
                  info->all_a = 0;
               } else {
                  info->mr = 31u << 10;
                  info->mg = 31u << 5;
                  info->mb = 31u << 0;
               }
            } else if (compress == 3) {
               info->mr = stbi__get32le(s);
               info->mg = stbi__get32le(s);
               info->mb = stbi__get32le(s);

               if (info->mr == info->mg && info->mg == info->mb) {

                  return ((unsigned char *)(size_t) (stbi__err("bad BMP")?
# 5181 "../../include/stb_image/stb_image.h" 3 4
                        __null
# 5181 "../../include/stb_image/stb_image.h"
                        :
# 5181 "../../include/stb_image/stb_image.h" 3 4
                        __null
# 5181 "../../include/stb_image/stb_image.h"
                        ));
               }
            } else
               return ((unsigned char *)(size_t) (stbi__err("bad BMP")?
# 5184 "../../include/stb_image/stb_image.h" 3 4
                     __null
# 5184 "../../include/stb_image/stb_image.h"
                     :
# 5184 "../../include/stb_image/stb_image.h" 3 4
                     __null
# 5184 "../../include/stb_image/stb_image.h"
                     ));
         }
      } else {
         int i;
         if (hsz != 108 && hsz != 124)
            return ((unsigned char *)(size_t) (stbi__err("bad BMP")?
# 5189 "../../include/stb_image/stb_image.h" 3 4
                  __null
# 5189 "../../include/stb_image/stb_image.h"
                  :
# 5189 "../../include/stb_image/stb_image.h" 3 4
                  __null
# 5189 "../../include/stb_image/stb_image.h"
                  ));
         info->mr = stbi__get32le(s);
         info->mg = stbi__get32le(s);
         info->mb = stbi__get32le(s);
         info->ma = stbi__get32le(s);
         stbi__get32le(s);
         for (i=0; i < 12; ++i)
            stbi__get32le(s);
         if (hsz == 124) {
            stbi__get32le(s);
            stbi__get32le(s);
            stbi__get32le(s);
            stbi__get32le(s);
         }
      }
   }
   return (void *) 1;
}


static void *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)
{
   stbi_uc *out;
   unsigned int mr=0,mg=0,mb=0,ma=0, all_a;
   stbi_uc pal[256][4];
   int psize=0,i,j,width;
   int flip_vertically, pad, target;
   stbi__bmp_data info;
   (void)sizeof(ri);

   info.all_a = 255;
   if (stbi__bmp_parse_header(s, &info) == 
# 5220 "../../include/stb_image/stb_image.h" 3 4
                                          __null
# 5220 "../../include/stb_image/stb_image.h"
                                              )
      return 
# 5221 "../../include/stb_image/stb_image.h" 3 4
            __null
# 5221 "../../include/stb_image/stb_image.h"
                ;

   flip_vertically = ((int) s->img_y) > 0;
   s->img_y = abs((int) s->img_y);

   mr = info.mr;
   mg = info.mg;
   mb = info.mb;
   ma = info.ma;
   all_a = info.all_a;

   if (info.hsz == 12) {
      if (info.bpp < 24)
         psize = (info.offset - 14 - 24) / 3;
   } else {
      if (info.bpp < 16)
         psize = (info.offset - 14 - info.hsz) >> 2;
   }

   s->img_n = ma ? 4 : 3;
   if (req_comp && req_comp >= 3)
      target = req_comp;
   else
      target = s->img_n;


   if (!stbi__mad3sizes_valid(target, s->img_x, s->img_y, 0))
      return ((unsigned char *)(size_t) (stbi__err("too large")?
# 5248 "../../include/stb_image/stb_image.h" 3 4
            __null
# 5248 "../../include/stb_image/stb_image.h"
            :
# 5248 "../../include/stb_image/stb_image.h" 3 4
            __null
# 5248 "../../include/stb_image/stb_image.h"
            ));

   out = (stbi_uc *) stbi__malloc_mad3(target, s->img_x, s->img_y, 0);
   if (!out) return ((unsigned char *)(size_t) (stbi__err("outofmem")?
# 5251 "../../include/stb_image/stb_image.h" 3 4
                   __null
# 5251 "../../include/stb_image/stb_image.h"
                   :
# 5251 "../../include/stb_image/stb_image.h" 3 4
                   __null
# 5251 "../../include/stb_image/stb_image.h"
                   ));
   if (info.bpp < 16) {
      int z=0;
      if (psize == 0 || psize > 256) { free(out); return ((unsigned char *)(size_t) (stbi__err("invalid")?
# 5254 "../../include/stb_image/stb_image.h" 3 4
                                                             __null
# 5254 "../../include/stb_image/stb_image.h"
                                                             :
# 5254 "../../include/stb_image/stb_image.h" 3 4
                                                             __null
# 5254 "../../include/stb_image/stb_image.h"
                                                             )); }
      for (i=0; i < psize; ++i) {
         pal[i][2] = stbi__get8(s);
         pal[i][1] = stbi__get8(s);
         pal[i][0] = stbi__get8(s);
         if (info.hsz != 12) stbi__get8(s);
         pal[i][3] = 255;
      }
      stbi__skip(s, info.offset - 14 - info.hsz - psize * (info.hsz == 12 ? 3 : 4));
      if (info.bpp == 1) width = (s->img_x + 7) >> 3;
      else if (info.bpp == 4) width = (s->img_x + 1) >> 1;
      else if (info.bpp == 8) width = s->img_x;
      else { free(out); return ((unsigned char *)(size_t) (stbi__err("bad bpp")?
# 5266 "../../include/stb_image/stb_image.h" 3 4
                                   __null
# 5266 "../../include/stb_image/stb_image.h"
                                   :
# 5266 "../../include/stb_image/stb_image.h" 3 4
                                   __null
# 5266 "../../include/stb_image/stb_image.h"
                                   )); }
      pad = (-width)&3;
      if (info.bpp == 1) {
         for (j=0; j < (int) s->img_y; ++j) {
            int bit_offset = 7, v = stbi__get8(s);
            for (i=0; i < (int) s->img_x; ++i) {
               int color = (v>>bit_offset)&0x1;
               out[z++] = pal[color][0];
               out[z++] = pal[color][1];
               out[z++] = pal[color][2];
               if (target == 4) out[z++] = 255;
               if (i+1 == (int) s->img_x) break;
               if((--bit_offset) < 0) {
                  bit_offset = 7;
                  v = stbi__get8(s);
               }
            }
            stbi__skip(s, pad);
         }
      } else {
         for (j=0; j < (int) s->img_y; ++j) {
            for (i=0; i < (int) s->img_x; i += 2) {
               int v=stbi__get8(s),v2=0;
               if (info.bpp == 4) {
                  v2 = v & 15;
                  v >>= 4;
               }
               out[z++] = pal[v][0];
               out[z++] = pal[v][1];
               out[z++] = pal[v][2];
               if (target == 4) out[z++] = 255;
               if (i+1 == (int) s->img_x) break;
               v = (info.bpp == 8) ? stbi__get8(s) : v2;
               out[z++] = pal[v][0];
               out[z++] = pal[v][1];
               out[z++] = pal[v][2];
               if (target == 4) out[z++] = 255;
            }
            stbi__skip(s, pad);
         }
      }
   } else {
      int rshift=0,gshift=0,bshift=0,ashift=0,rcount=0,gcount=0,bcount=0,acount=0;
      int z = 0;
      int easy=0;
      stbi__skip(s, info.offset - 14 - info.hsz);
      if (info.bpp == 24) width = 3 * s->img_x;
      else if (info.bpp == 16) width = 2*s->img_x;
      else width=0;
      pad = (-width) & 3;
      if (info.bpp == 24) {
         easy = 1;
      } else if (info.bpp == 32) {
         if (mb == 0xff && mg == 0xff00 && mr == 0x00ff0000 && ma == 0xff000000)
            easy = 2;
      }
      if (!easy) {
         if (!mr || !mg || !mb) { free(out); return ((unsigned char *)(size_t) (stbi__err("bad masks")?
# 5323 "../../include/stb_image/stb_image.h" 3 4
                                                        __null
# 5323 "../../include/stb_image/stb_image.h"
                                                        :
# 5323 "../../include/stb_image/stb_image.h" 3 4
                                                        __null
# 5323 "../../include/stb_image/stb_image.h"
                                                        )); }

         rshift = stbi__high_bit(mr)-7; rcount = stbi__bitcount(mr);
         gshift = stbi__high_bit(mg)-7; gcount = stbi__bitcount(mg);
         bshift = stbi__high_bit(mb)-7; bcount = stbi__bitcount(mb);
         ashift = stbi__high_bit(ma)-7; acount = stbi__bitcount(ma);
      }
      for (j=0; j < (int) s->img_y; ++j) {
         if (easy) {
            for (i=0; i < (int) s->img_x; ++i) {
               unsigned char a;
               out[z+2] = stbi__get8(s);
               out[z+1] = stbi__get8(s);
               out[z+0] = stbi__get8(s);
               z += 3;
               a = (easy == 2 ? stbi__get8(s) : 255);
               all_a |= a;
               if (target == 4) out[z++] = a;
            }
         } else {
            int bpp = info.bpp;
            for (i=0; i < (int) s->img_x; ++i) {
               stbi__uint32 v = (bpp == 16 ? (stbi__uint32) stbi__get16le(s) : stbi__get32le(s));
               unsigned int a;
               out[z++] = ((stbi_uc) ((stbi__shiftsigned(v & mr, rshift, rcount)) & 255));
               out[z++] = ((stbi_uc) ((stbi__shiftsigned(v & mg, gshift, gcount)) & 255));
               out[z++] = ((stbi_uc) ((stbi__shiftsigned(v & mb, bshift, bcount)) & 255));
               a = (ma ? stbi__shiftsigned(v & ma, ashift, acount) : 255);
               all_a |= a;
               if (target == 4) out[z++] = ((stbi_uc) ((a) & 255));
            }
         }
         stbi__skip(s, pad);
      }
   }


   if (target == 4 && all_a == 0)
      for (i=4*s->img_x*s->img_y-1; i >= 0; i -= 4)
         out[i] = 255;

   if (flip_vertically) {
      stbi_uc t;
      for (j=0; j < (int) s->img_y>>1; ++j) {
         stbi_uc *p1 = out + j *s->img_x*target;
         stbi_uc *p2 = out + (s->img_y-1-j)*s->img_x*target;
         for (i=0; i < (int) s->img_x*target; ++i) {
            t = p1[i]; p1[i] = p2[i]; p2[i] = t;
         }
      }
   }

   if (req_comp && req_comp != target) {
      out = stbi__convert_format(out, target, req_comp, s->img_x, s->img_y);
      if (out == 
# 5377 "../../include/stb_image/stb_image.h" 3 4
                __null
# 5377 "../../include/stb_image/stb_image.h"
                    ) return out;
   }

   *x = s->img_x;
   *y = s->img_y;
   if (comp) *comp = s->img_n;
   return out;
}






static int stbi__tga_get_comp(int bits_per_pixel, int is_grey, int* is_rgb16)
{

   if (is_rgb16) *is_rgb16 = 0;
   switch(bits_per_pixel) {
      case 8: return STBI_grey;
      case 16: if(is_grey) return STBI_grey_alpha;

      case 15: if(is_rgb16) *is_rgb16 = 1;
               return STBI_rgb;
      case 24:
      case 32: return bits_per_pixel/8;
      default: return 0;
   }
}

static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp)
{
    int tga_w, tga_h, tga_comp, tga_image_type, tga_bits_per_pixel, tga_colormap_bpp;
    int sz, tga_colormap_type;
    stbi__get8(s);
    tga_colormap_type = stbi__get8(s);
    if( tga_colormap_type > 1 ) {
        stbi__rewind(s);
        return 0;
    }
    tga_image_type = stbi__get8(s);
    if ( tga_colormap_type == 1 ) {
        if (tga_image_type != 1 && tga_image_type != 9) {
            stbi__rewind(s);
            return 0;
        }
        stbi__skip(s,4);
        sz = stbi__get8(s);
        if ( (sz != 8) && (sz != 15) && (sz != 16) && (sz != 24) && (sz != 32) ) {
            stbi__rewind(s);
            return 0;
        }
        stbi__skip(s,4);
        tga_colormap_bpp = sz;
    } else {
        if ( (tga_image_type != 2) && (tga_image_type != 3) && (tga_image_type != 10) && (tga_image_type != 11) ) {
            stbi__rewind(s);
            return 0;
        }
        stbi__skip(s,9);
        tga_colormap_bpp = 0;
    }
    tga_w = stbi__get16le(s);
    if( tga_w < 1 ) {
        stbi__rewind(s);
        return 0;
    }
    tga_h = stbi__get16le(s);
    if( tga_h < 1 ) {
        stbi__rewind(s);
        return 0;
    }
    tga_bits_per_pixel = stbi__get8(s);
    stbi__get8(s);
    if (tga_colormap_bpp != 0) {
        if((tga_bits_per_pixel != 8) && (tga_bits_per_pixel != 16)) {


            stbi__rewind(s);
            return 0;
        }
        tga_comp = stbi__tga_get_comp(tga_colormap_bpp, 0, 
# 5458 "../../include/stb_image/stb_image.h" 3 4
                                                          __null
# 5458 "../../include/stb_image/stb_image.h"
                                                              );
    } else {
        tga_comp = stbi__tga_get_comp(tga_bits_per_pixel, (tga_image_type == 3) || (tga_image_type == 11), 
# 5460 "../../include/stb_image/stb_image.h" 3 4
                                                                                                          __null
# 5460 "../../include/stb_image/stb_image.h"
                                                                                                              );
    }
    if(!tga_comp) {
      stbi__rewind(s);
      return 0;
    }
    if (x) *x = tga_w;
    if (y) *y = tga_h;
    if (comp) *comp = tga_comp;
    return 1;
}

static int stbi__tga_test(stbi__context *s)
{
   int res = 0;
   int sz, tga_color_type;
   stbi__get8(s);
   tga_color_type = stbi__get8(s);
   if ( tga_color_type > 1 ) goto errorEnd;
   sz = stbi__get8(s);
   if ( tga_color_type == 1 ) {
      if (sz != 1 && sz != 9) goto errorEnd;
      stbi__skip(s,4);
      sz = stbi__get8(s);
      if ( (sz != 8) && (sz != 15) && (sz != 16) && (sz != 24) && (sz != 32) ) goto errorEnd;
      stbi__skip(s,4);
   } else {
      if ( (sz != 2) && (sz != 3) && (sz != 10) && (sz != 11) ) goto errorEnd;
      stbi__skip(s,9);
   }
   if ( stbi__get16le(s) < 1 ) goto errorEnd;
   if ( stbi__get16le(s) < 1 ) goto errorEnd;
   sz = stbi__get8(s);
   if ( (tga_color_type == 1) && (sz != 8) && (sz != 16) ) goto errorEnd;
   if ( (sz != 8) && (sz != 15) && (sz != 16) && (sz != 24) && (sz != 32) ) goto errorEnd;

   res = 1;

errorEnd:
   stbi__rewind(s);
   return res;
}


static void stbi__tga_read_rgb16(stbi__context *s, stbi_uc* out)
{
   stbi__uint16 px = (stbi__uint16)stbi__get16le(s);
   stbi__uint16 fiveBitMask = 31;

   int r = (px >> 10) & fiveBitMask;
   int g = (px >> 5) & fiveBitMask;
   int b = px & fiveBitMask;

   out[0] = (stbi_uc)((r * 255)/31);
   out[1] = (stbi_uc)((g * 255)/31);
   out[2] = (stbi_uc)((b * 255)/31);





}

static void *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)
{

   int tga_offset = stbi__get8(s);
   int tga_indexed = stbi__get8(s);
   int tga_image_type = stbi__get8(s);
   int tga_is_RLE = 0;
   int tga_palette_start = stbi__get16le(s);
   int tga_palette_len = stbi__get16le(s);
   int tga_palette_bits = stbi__get8(s);
   int tga_x_origin = stbi__get16le(s);
   int tga_y_origin = stbi__get16le(s);
   int tga_width = stbi__get16le(s);
   int tga_height = stbi__get16le(s);
   int tga_bits_per_pixel = stbi__get8(s);
   int tga_comp, tga_rgb16=0;
   int tga_inverted = stbi__get8(s);


   unsigned char *tga_data;
   unsigned char *tga_palette = 
# 5543 "../../include/stb_image/stb_image.h" 3 4
                               __null
# 5543 "../../include/stb_image/stb_image.h"
                                   ;
   int i, j;
   unsigned char raw_data[4] = {0};
   int RLE_count = 0;
   int RLE_repeating = 0;
   int read_next_pixel = 1;
   (void)sizeof(ri);


   if ( tga_image_type >= 8 )
   {
      tga_image_type -= 8;
      tga_is_RLE = 1;
   }
   tga_inverted = 1 - ((tga_inverted >> 5) & 1);


   if ( tga_indexed ) tga_comp = stbi__tga_get_comp(tga_palette_bits, 0, &tga_rgb16);
   else tga_comp = stbi__tga_get_comp(tga_bits_per_pixel, (tga_image_type == 3), &tga_rgb16);

   if(!tga_comp)
      return ((unsigned char *)(size_t) (stbi__err("bad format")?
# 5564 "../../include/stb_image/stb_image.h" 3 4
            __null
# 5564 "../../include/stb_image/stb_image.h"
            :
# 5564 "../../include/stb_image/stb_image.h" 3 4
            __null
# 5564 "../../include/stb_image/stb_image.h"
            ));


   *x = tga_width;
   *y = tga_height;
   if (comp) *comp = tga_comp;

   if (!stbi__mad3sizes_valid(tga_width, tga_height, tga_comp, 0))
      return ((unsigned char *)(size_t) (stbi__err("too large")?
# 5572 "../../include/stb_image/stb_image.h" 3 4
            __null
# 5572 "../../include/stb_image/stb_image.h"
            :
# 5572 "../../include/stb_image/stb_image.h" 3 4
            __null
# 5572 "../../include/stb_image/stb_image.h"
            ));

   tga_data = (unsigned char*)stbi__malloc_mad3(tga_width, tga_height, tga_comp, 0);
   if (!tga_data) return ((unsigned char *)(size_t) (stbi__err("outofmem")?
# 5575 "../../include/stb_image/stb_image.h" 3 4
                        __null
# 5575 "../../include/stb_image/stb_image.h"
                        :
# 5575 "../../include/stb_image/stb_image.h" 3 4
                        __null
# 5575 "../../include/stb_image/stb_image.h"
                        ));


   stbi__skip(s, tga_offset );

   if ( !tga_indexed && !tga_is_RLE && !tga_rgb16 ) {
      for (i=0; i < tga_height; ++i) {
         int row = tga_inverted ? tga_height -i - 1 : i;
         stbi_uc *tga_row = tga_data + row*tga_width*tga_comp;
         stbi__getn(s, tga_row, tga_width * tga_comp);
      }
   } else {

      if ( tga_indexed)
      {

         stbi__skip(s, tga_palette_start );

         tga_palette = (unsigned char*)stbi__malloc_mad2(tga_palette_len, tga_comp, 0);
         if (!tga_palette) {
            free(tga_data);
            return ((unsigned char *)(size_t) (stbi__err("outofmem")?
# 5596 "../../include/stb_image/stb_image.h" 3 4
                  __null
# 5596 "../../include/stb_image/stb_image.h"
                  :
# 5596 "../../include/stb_image/stb_image.h" 3 4
                  __null
# 5596 "../../include/stb_image/stb_image.h"
                  ));
         }
         if (tga_rgb16) {
            stbi_uc *pal_entry = tga_palette;
            
# 5600 "../../include/stb_image/stb_image.h" 3
           ((
# 5600 "../../include/stb_image/stb_image.h"
           tga_comp == STBI_rgb
# 5600 "../../include/stb_image/stb_image.h" 3
           ) ? (void)0 : _assert(
# 5600 "../../include/stb_image/stb_image.h"
           "tga_comp == STBI_rgb"
# 5600 "../../include/stb_image/stb_image.h" 3
           , "../../include/stb_image/stb_image.h", 5600))
# 5600 "../../include/stb_image/stb_image.h"
                                            ;
            for (i=0; i < tga_palette_len; ++i) {
               stbi__tga_read_rgb16(s, pal_entry);
               pal_entry += tga_comp;
            }
         } else if (!stbi__getn(s, tga_palette, tga_palette_len * tga_comp)) {
               free(tga_data);
               free(tga_palette);
               return ((unsigned char *)(size_t) (stbi__err("bad palette")?
# 5608 "../../include/stb_image/stb_image.h" 3 4
                     __null
# 5608 "../../include/stb_image/stb_image.h"
                     :
# 5608 "../../include/stb_image/stb_image.h" 3 4
                     __null
# 5608 "../../include/stb_image/stb_image.h"
                     ));
         }
      }

      for (i=0; i < tga_width * tga_height; ++i)
      {

         if ( tga_is_RLE )
         {
            if ( RLE_count == 0 )
            {

               int RLE_cmd = stbi__get8(s);
               RLE_count = 1 + (RLE_cmd & 127);
               RLE_repeating = RLE_cmd >> 7;
               read_next_pixel = 1;
            } else if ( !RLE_repeating )
            {
               read_next_pixel = 1;
            }
         } else
         {
            read_next_pixel = 1;
         }

         if ( read_next_pixel )
         {

            if ( tga_indexed )
            {

               int pal_idx = (tga_bits_per_pixel == 8) ? stbi__get8(s) : stbi__get16le(s);
               if ( pal_idx >= tga_palette_len ) {

                  pal_idx = 0;
               }
               pal_idx *= tga_comp;
               for (j = 0; j < tga_comp; ++j) {
                  raw_data[j] = tga_palette[pal_idx+j];
               }
            } else if(tga_rgb16) {
               
# 5649 "../../include/stb_image/stb_image.h" 3
              ((
# 5649 "../../include/stb_image/stb_image.h"
              tga_comp == STBI_rgb
# 5649 "../../include/stb_image/stb_image.h" 3
              ) ? (void)0 : _assert(
# 5649 "../../include/stb_image/stb_image.h"
              "tga_comp == STBI_rgb"
# 5649 "../../include/stb_image/stb_image.h" 3
              , "../../include/stb_image/stb_image.h", 5649))
# 5649 "../../include/stb_image/stb_image.h"
                                               ;
               stbi__tga_read_rgb16(s, raw_data);
            } else {

               for (j = 0; j < tga_comp; ++j) {
                  raw_data[j] = stbi__get8(s);
               }
            }

            read_next_pixel = 0;
         }


         for (j = 0; j < tga_comp; ++j)
           tga_data[i*tga_comp+j] = raw_data[j];


         --RLE_count;
      }

      if ( tga_inverted )
      {
         for (j = 0; j*2 < tga_height; ++j)
         {
            int index1 = j * tga_width * tga_comp;
            int index2 = (tga_height - 1 - j) * tga_width * tga_comp;
            for (i = tga_width * tga_comp; i > 0; --i)
            {
               unsigned char temp = tga_data[index1];
               tga_data[index1] = tga_data[index2];
               tga_data[index2] = temp;
               ++index1;
               ++index2;
            }
         }
      }

      if ( tga_palette != 
# 5686 "../../include/stb_image/stb_image.h" 3 4
                         __null 
# 5686 "../../include/stb_image/stb_image.h"
                              )
      {
         free(tga_palette);
      }
   }


   if (tga_comp >= 3 && !tga_rgb16)
   {
      unsigned char* tga_pixel = tga_data;
      for (i=0; i < tga_width * tga_height; ++i)
      {
         unsigned char temp = tga_pixel[0];
         tga_pixel[0] = tga_pixel[2];
         tga_pixel[2] = temp;
         tga_pixel += tga_comp;
      }
   }


   if (req_comp && req_comp != tga_comp)
      tga_data = stbi__convert_format(tga_data, tga_comp, req_comp, tga_width, tga_height);



   tga_palette_start = tga_palette_len = tga_palette_bits =
         tga_x_origin = tga_y_origin = 0;

   return tga_data;
}






static int stbi__psd_test(stbi__context *s)
{
   int r = (stbi__get32be(s) == 0x38425053);
   stbi__rewind(s);
   return r;
}

static int stbi__psd_decode_rle(stbi__context *s, stbi_uc *p, int pixelCount)
{
   int count, nleft, len;

   count = 0;
   while ((nleft = pixelCount - count) > 0) {
      len = stbi__get8(s);
      if (len == 128) {

      } else if (len < 128) {

         len++;
         if (len > nleft) return 0;
         count += len;
         while (len) {
            *p = stbi__get8(s);
            p += 4;
            len--;
         }
      } else if (len > 128) {
         stbi_uc val;


         len = 257 - len;
         if (len > nleft) return 0;
         val = stbi__get8(s);
         count += len;
         while (len) {
            *p = val;
            p += 4;
            len--;
         }
      }
   }

   return 1;
}

static void *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri, int bpc)
{
   int pixelCount;
   int channelCount, compression;
   int channel, i;
   int bitdepth;
   int w,h;
   stbi_uc *out;
   (void)sizeof(ri);


   if (stbi__get32be(s) != 0x38425053)
      return ((unsigned char *)(size_t) (stbi__err("not PSD")?
# 5779 "../../include/stb_image/stb_image.h" 3 4
            __null
# 5779 "../../include/stb_image/stb_image.h"
            :
# 5779 "../../include/stb_image/stb_image.h" 3 4
            __null
# 5779 "../../include/stb_image/stb_image.h"
            ));


   if (stbi__get16be(s) != 1)
      return ((unsigned char *)(size_t) (stbi__err("wrong version")?
# 5783 "../../include/stb_image/stb_image.h" 3 4
            __null
# 5783 "../../include/stb_image/stb_image.h"
            :
# 5783 "../../include/stb_image/stb_image.h" 3 4
            __null
# 5783 "../../include/stb_image/stb_image.h"
            ));


   stbi__skip(s, 6 );


   channelCount = stbi__get16be(s);
   if (channelCount < 0 || channelCount > 16)
      return ((unsigned char *)(size_t) (stbi__err("wrong channel count")?
# 5791 "../../include/stb_image/stb_image.h" 3 4
            __null
# 5791 "../../include/stb_image/stb_image.h"
            :
# 5791 "../../include/stb_image/stb_image.h" 3 4
            __null
# 5791 "../../include/stb_image/stb_image.h"
            ));


   h = stbi__get32be(s);
   w = stbi__get32be(s);


   bitdepth = stbi__get16be(s);
   if (bitdepth != 8 && bitdepth != 16)
      return ((unsigned char *)(size_t) (stbi__err("unsupported bit depth")?
# 5800 "../../include/stb_image/stb_image.h" 3 4
            __null
# 5800 "../../include/stb_image/stb_image.h"
            :
# 5800 "../../include/stb_image/stb_image.h" 3 4
            __null
# 5800 "../../include/stb_image/stb_image.h"
            ));
# 5812 "../../include/stb_image/stb_image.h"
   if (stbi__get16be(s) != 3)
      return ((unsigned char *)(size_t) (stbi__err("wrong color format")?
# 5813 "../../include/stb_image/stb_image.h" 3 4
            __null
# 5813 "../../include/stb_image/stb_image.h"
            :
# 5813 "../../include/stb_image/stb_image.h" 3 4
            __null
# 5813 "../../include/stb_image/stb_image.h"
            ));


   stbi__skip(s,stbi__get32be(s) );


   stbi__skip(s, stbi__get32be(s) );


   stbi__skip(s, stbi__get32be(s) );





   compression = stbi__get16be(s);
   if (compression > 1)
      return ((unsigned char *)(size_t) (stbi__err("bad compression")?
# 5830 "../../include/stb_image/stb_image.h" 3 4
            __null
# 5830 "../../include/stb_image/stb_image.h"
            :
# 5830 "../../include/stb_image/stb_image.h" 3 4
            __null
# 5830 "../../include/stb_image/stb_image.h"
            ));


   if (!stbi__mad3sizes_valid(4, w, h, 0))
      return ((unsigned char *)(size_t) (stbi__err("too large")?
# 5834 "../../include/stb_image/stb_image.h" 3 4
            __null
# 5834 "../../include/stb_image/stb_image.h"
            :
# 5834 "../../include/stb_image/stb_image.h" 3 4
            __null
# 5834 "../../include/stb_image/stb_image.h"
            ));



   if (!compression && bitdepth == 16 && bpc == 16) {
      out = (stbi_uc *) stbi__malloc_mad3(8, w, h, 0);
      ri->bits_per_channel = 16;
   } else
      out = (stbi_uc *) stbi__malloc(4 * w*h);

   if (!out) return ((unsigned char *)(size_t) (stbi__err("outofmem")?
# 5844 "../../include/stb_image/stb_image.h" 3 4
                   __null
# 5844 "../../include/stb_image/stb_image.h"
                   :
# 5844 "../../include/stb_image/stb_image.h" 3 4
                   __null
# 5844 "../../include/stb_image/stb_image.h"
                   ));
   pixelCount = w*h;





   if (compression) {
# 5862 "../../include/stb_image/stb_image.h"
      stbi__skip(s, h * channelCount * 2 );


      for (channel = 0; channel < 4; channel++) {
         stbi_uc *p;

         p = out+channel;
         if (channel >= channelCount) {

            for (i = 0; i < pixelCount; i++, p += 4)
               *p = (channel == 3 ? 255 : 0);
         } else {

            if (!stbi__psd_decode_rle(s, p, pixelCount)) {
               free(out);
               return ((unsigned char *)(size_t) (stbi__err("corrupt")?
# 5877 "../../include/stb_image/stb_image.h" 3 4
                     __null
# 5877 "../../include/stb_image/stb_image.h"
                     :
# 5877 "../../include/stb_image/stb_image.h" 3 4
                     __null
# 5877 "../../include/stb_image/stb_image.h"
                     ));
            }
         }
      }

   } else {




      for (channel = 0; channel < 4; channel++) {
         if (channel >= channelCount) {

            if (bitdepth == 16 && bpc == 16) {
               stbi__uint16 *q = ((stbi__uint16 *) out) + channel;
               stbi__uint16 val = channel == 3 ? 65535 : 0;
               for (i = 0; i < pixelCount; i++, q += 4)
                  *q = val;
            } else {
               stbi_uc *p = out+channel;
               stbi_uc val = channel == 3 ? 255 : 0;
               for (i = 0; i < pixelCount; i++, p += 4)
                  *p = val;
            }
         } else {
            if (ri->bits_per_channel == 16) {
               stbi__uint16 *q = ((stbi__uint16 *) out) + channel;
               for (i = 0; i < pixelCount; i++, q += 4)
                  *q = (stbi__uint16) stbi__get16be(s);
            } else {
               stbi_uc *p = out+channel;
               if (bitdepth == 16) {
                  for (i = 0; i < pixelCount; i++, p += 4)
                     *p = (stbi_uc) (stbi__get16be(s) >> 8);
               } else {
                  for (i = 0; i < pixelCount; i++, p += 4)
                     *p = stbi__get8(s);
               }
            }
         }
      }
   }


   if (channelCount >= 4) {
      if (ri->bits_per_channel == 16) {
         for (i=0; i < w*h; ++i) {
            stbi__uint16 *pixel = (stbi__uint16 *) out + 4*i;
            if (pixel[3] != 0 && pixel[3] != 65535) {
               float a = pixel[3] / 65535.0f;
               float ra = 1.0f / a;
               float inv_a = 65535.0f * (1 - ra);
               pixel[0] = (stbi__uint16) (pixel[0]*ra + inv_a);
               pixel[1] = (stbi__uint16) (pixel[1]*ra + inv_a);
               pixel[2] = (stbi__uint16) (pixel[2]*ra + inv_a);
            }
         }
      } else {
         for (i=0; i < w*h; ++i) {
            unsigned char *pixel = out + 4*i;
            if (pixel[3] != 0 && pixel[3] != 255) {
               float a = pixel[3] / 255.0f;
               float ra = 1.0f / a;
               float inv_a = 255.0f * (1 - ra);
               pixel[0] = (unsigned char) (pixel[0]*ra + inv_a);
               pixel[1] = (unsigned char) (pixel[1]*ra + inv_a);
               pixel[2] = (unsigned char) (pixel[2]*ra + inv_a);
            }
         }
      }
   }


   if (req_comp && req_comp != 4) {
      if (ri->bits_per_channel == 16)
         out = (stbi_uc *) stbi__convert_format16((stbi__uint16 *) out, 4, req_comp, w, h);
      else
         out = stbi__convert_format(out, 4, req_comp, w, h);
      if (out == 
# 5955 "../../include/stb_image/stb_image.h" 3 4
                __null
# 5955 "../../include/stb_image/stb_image.h"
                    ) return out;
   }

   if (comp) *comp = 4;
   *y = h;
   *x = w;

   return out;
}
# 5974 "../../include/stb_image/stb_image.h"
static int stbi__pic_is4(stbi__context *s,const char *str)
{
   int i;
   for (i=0; i<4; ++i)
      if (stbi__get8(s) != (stbi_uc)str[i])
         return 0;

   return 1;
}

static int stbi__pic_test_core(stbi__context *s)
{
   int i;

   if (!stbi__pic_is4(s,"\x53\x80\xF6\x34"))
      return 0;

   for(i=0;i<84;++i)
      stbi__get8(s);

   if (!stbi__pic_is4(s,"PICT"))
      return 0;

   return 1;
}

typedef struct
{
   stbi_uc size,type,channel;
} stbi__pic_packet;

static stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest)
{
   int mask=0x80, i;

   for (i=0; i<4; ++i, mask>>=1) {
      if (channel & mask) {
         if (stbi__at_eof(s)) return ((unsigned char *)(size_t) (stbi__err("bad file")?
# 6011 "../../include/stb_image/stb_image.h" 3 4
                                    __null
# 6011 "../../include/stb_image/stb_image.h"
                                    :
# 6011 "../../include/stb_image/stb_image.h" 3 4
                                    __null
# 6011 "../../include/stb_image/stb_image.h"
                                    ));
         dest[i]=stbi__get8(s);
      }
   }

   return dest;
}

static void stbi__copyval(int channel,stbi_uc *dest,const stbi_uc *src)
{
   int mask=0x80,i;

   for (i=0;i<4; ++i, mask>>=1)
      if (channel&mask)
         dest[i]=src[i];
}

static stbi_uc *stbi__pic_load_core(stbi__context *s,int width,int height,int *comp, stbi_uc *result)
{
   int act_comp=0,num_packets=0,y,chained;
   stbi__pic_packet packets[10];



   do {
      stbi__pic_packet *packet;

      if (num_packets==sizeof(packets)/sizeof(packets[0]))
         return ((unsigned char *)(size_t) (stbi__err("bad format")?
# 6039 "../../include/stb_image/stb_image.h" 3 4
               __null
# 6039 "../../include/stb_image/stb_image.h"
               :
# 6039 "../../include/stb_image/stb_image.h" 3 4
               __null
# 6039 "../../include/stb_image/stb_image.h"
               ));

      packet = &packets[num_packets++];

      chained = stbi__get8(s);
      packet->size = stbi__get8(s);
      packet->type = stbi__get8(s);
      packet->channel = stbi__get8(s);

      act_comp |= packet->channel;

      if (stbi__at_eof(s)) return ((unsigned char *)(size_t) (stbi__err("bad file")?
# 6050 "../../include/stb_image/stb_image.h" 3 4
                                          __null
# 6050 "../../include/stb_image/stb_image.h"
                                          :
# 6050 "../../include/stb_image/stb_image.h" 3 4
                                          __null
# 6050 "../../include/stb_image/stb_image.h"
                                          ));
      if (packet->size != 8) return ((unsigned char *)(size_t) (stbi__err("bad format")?
# 6051 "../../include/stb_image/stb_image.h" 3 4
                                    __null
# 6051 "../../include/stb_image/stb_image.h"
                                    :
# 6051 "../../include/stb_image/stb_image.h" 3 4
                                    __null
# 6051 "../../include/stb_image/stb_image.h"
                                    ));
   } while (chained);

   *comp = (act_comp & 0x10 ? 4 : 3);

   for(y=0; y<height; ++y) {
      int packet_idx;

      for(packet_idx=0; packet_idx < num_packets; ++packet_idx) {
         stbi__pic_packet *packet = &packets[packet_idx];
         stbi_uc *dest = result+y*width*4;

         switch (packet->type) {
            default:
               return ((unsigned char *)(size_t) (stbi__err("bad format")?
# 6065 "../../include/stb_image/stb_image.h" 3 4
                     __null
# 6065 "../../include/stb_image/stb_image.h"
                     :
# 6065 "../../include/stb_image/stb_image.h" 3 4
                     __null
# 6065 "../../include/stb_image/stb_image.h"
                     ));

            case 0: {
               int x;

               for(x=0;x<width;++x, dest+=4)
                  if (!stbi__readval(s,packet->channel,dest))
                     return 0;
               break;
            }

            case 1:
               {
                  int left=width, i;

                  while (left>0) {
                     stbi_uc count,value[4];

                     count=stbi__get8(s);
                     if (stbi__at_eof(s)) return ((unsigned char *)(size_t) (stbi__err("bad file")?
# 6084 "../../include/stb_image/stb_image.h" 3 4
                                                  __null
# 6084 "../../include/stb_image/stb_image.h"
                                                  :
# 6084 "../../include/stb_image/stb_image.h" 3 4
                                                  __null
# 6084 "../../include/stb_image/stb_image.h"
                                                  ));

                     if (count > left)
                        count = (stbi_uc) left;

                     if (!stbi__readval(s,packet->channel,value)) return 0;

                     for(i=0; i<count; ++i,dest+=4)
                        stbi__copyval(packet->channel,dest,value);
                     left -= count;
                  }
               }
               break;

            case 2: {
               int left=width;
               while (left>0) {
                  int count = stbi__get8(s), i;
                  if (stbi__at_eof(s)) return ((unsigned char *)(size_t) (stbi__err("bad file")?
# 6102 "../../include/stb_image/stb_image.h" 3 4
                                              __null
# 6102 "../../include/stb_image/stb_image.h"
                                              :
# 6102 "../../include/stb_image/stb_image.h" 3 4
                                              __null
# 6102 "../../include/stb_image/stb_image.h"
                                              ));

                  if (count >= 128) {
                     stbi_uc value[4];

                     if (count==128)
                        count = stbi__get16be(s);
                     else
                        count -= 127;
                     if (count > left)
                        return ((unsigned char *)(size_t) (stbi__err("bad file")?
# 6112 "../../include/stb_image/stb_image.h" 3 4
                              __null
# 6112 "../../include/stb_image/stb_image.h"
                              :
# 6112 "../../include/stb_image/stb_image.h" 3 4
                              __null
# 6112 "../../include/stb_image/stb_image.h"
                              ));

                     if (!stbi__readval(s,packet->channel,value))
                        return 0;

                     for(i=0;i<count;++i, dest += 4)
                        stbi__copyval(packet->channel,dest,value);
                  } else {
                     ++count;
                     if (count>left) return ((unsigned char *)(size_t) (stbi__err("bad file")?
# 6121 "../../include/stb_image/stb_image.h" 3 4
                                           __null
# 6121 "../../include/stb_image/stb_image.h"
                                           :
# 6121 "../../include/stb_image/stb_image.h" 3 4
                                           __null
# 6121 "../../include/stb_image/stb_image.h"
                                           ));

                     for(i=0;i<count;++i, dest+=4)
                        if (!stbi__readval(s,packet->channel,dest))
                           return 0;
                  }
                  left-=count;
               }
               break;
            }
         }
      }
   }

   return result;
}

static void *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp, stbi__result_info *ri)
{
   stbi_uc *result;
   int i, x,y, internal_comp;
   (void)sizeof(ri);

   if (!comp) comp = &internal_comp;

   for (i=0; i<92; ++i)
      stbi__get8(s);

   x = stbi__get16be(s);
   y = stbi__get16be(s);
   if (stbi__at_eof(s)) return ((unsigned char *)(size_t) (stbi__err("bad file")?
# 6151 "../../include/stb_image/stb_image.h" 3 4
                               __null
# 6151 "../../include/stb_image/stb_image.h"
                               :
# 6151 "../../include/stb_image/stb_image.h" 3 4
                               __null
# 6151 "../../include/stb_image/stb_image.h"
                               ));
   if (!stbi__mad3sizes_valid(x, y, 4, 0)) return ((unsigned char *)(size_t) (stbi__err("too large")?
# 6152 "../../include/stb_image/stb_image.h" 3 4
                                                 __null
# 6152 "../../include/stb_image/stb_image.h"
                                                 :
# 6152 "../../include/stb_image/stb_image.h" 3 4
                                                 __null
# 6152 "../../include/stb_image/stb_image.h"
                                                 ));

   stbi__get32be(s);
   stbi__get16be(s);
   stbi__get16be(s);


   result = (stbi_uc *) stbi__malloc_mad3(x, y, 4, 0);
   memset(result, 0xff, x*y*4);

   if (!stbi__pic_load_core(s,x,y,comp, result)) {
      free(result);
      result=0;
   }
   *px = x;
   *py = y;
   if (req_comp == 0) req_comp = *comp;
   result=stbi__convert_format(result,4,req_comp,x,y);

   return result;
}

static int stbi__pic_test(stbi__context *s)
{
   int r = stbi__pic_test_core(s);
   stbi__rewind(s);
   return r;
}






typedef struct
{
   stbi__int16 prefix;
   stbi_uc first;
   stbi_uc suffix;
} stbi__gif_lzw;

typedef struct
{
   int w,h;
   stbi_uc *out;
   stbi_uc *background;
   stbi_uc *history;
   int flags, bgindex, ratio, transparent, eflags;
   stbi_uc pal[256][4];
   stbi_uc lpal[256][4];
   stbi__gif_lzw codes[8192];
   stbi_uc *color_table;
   int parse, step;
   int lflags;
   int start_x, start_y;
   int max_x, max_y;
   int cur_x, cur_y;
   int line_size;
   int delay;
} stbi__gif;

static int stbi__gif_test_raw(stbi__context *s)
{
   int sz;
   if (stbi__get8(s) != 'G' || stbi__get8(s) != 'I' || stbi__get8(s) != 'F' || stbi__get8(s) != '8') return 0;
   sz = stbi__get8(s);
   if (sz != '9' && sz != '7') return 0;
   if (stbi__get8(s) != 'a') return 0;
   return 1;
}

static int stbi__gif_test(stbi__context *s)
{
   int r = stbi__gif_test_raw(s);
   stbi__rewind(s);
   return r;
}

static void stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp)
{
   int i;
   for (i=0; i < num_entries; ++i) {
      pal[i][2] = stbi__get8(s);
      pal[i][1] = stbi__get8(s);
      pal[i][0] = stbi__get8(s);
      pal[i][3] = transp == i ? 0 : 255;
   }
}

static int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info)
{
   stbi_uc version;
   if (stbi__get8(s) != 'G' || stbi__get8(s) != 'I' || stbi__get8(s) != 'F' || stbi__get8(s) != '8')
      return stbi__err("not GIF");

   version = stbi__get8(s);
   if (version != '7' && version != '9') return stbi__err("not GIF");
   if (stbi__get8(s) != 'a') return stbi__err("not GIF");

   stbi__g_failure_reason = "";
   g->w = stbi__get16le(s);
   g->h = stbi__get16le(s);
   g->flags = stbi__get8(s);
   g->bgindex = stbi__get8(s);
   g->ratio = stbi__get8(s);
   g->transparent = -1;

   if (comp != 0) *comp = 4;

   if (is_info) return 1;

   if (g->flags & 0x80)
      stbi__gif_parse_colortable(s,g->pal, 2 << (g->flags & 7), -1);

   return 1;
}

static int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp)
{
   stbi__gif* g = (stbi__gif*) stbi__malloc(sizeof(stbi__gif));
   if (!stbi__gif_header(s, g, comp, 1)) {
      free(g);
      stbi__rewind( s );
      return 0;
   }
   if (x) *x = g->w;
   if (y) *y = g->h;
   free(g);
   return 1;
}

static void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code)
{
   stbi_uc *p, *c;
   int idx;



   if (g->codes[code].prefix >= 0)
      stbi__out_gif_code(g, g->codes[code].prefix);

   if (g->cur_y >= g->max_y) return;

   idx = g->cur_x + g->cur_y;
   p = &g->out[idx];
   g->history[idx / 4] = 1;

   c = &g->color_table[g->codes[code].suffix * 4];
   if (c[3] > 128) {
      p[0] = c[2];
      p[1] = c[1];
      p[2] = c[0];
      p[3] = c[3];
   }
   g->cur_x += 4;

   if (g->cur_x >= g->max_x) {
      g->cur_x = g->start_x;
      g->cur_y += g->step;

      while (g->cur_y >= g->max_y && g->parse > 0) {
         g->step = (1 << g->parse) * g->line_size;
         g->cur_y = g->start_y + (g->step >> 1);
         --g->parse;
      }
   }
}

static stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g)
{
   stbi_uc lzw_cs;
   stbi__int32 len, init_code;
   stbi__uint32 first;
   stbi__int32 codesize, codemask, avail, oldcode, bits, valid_bits, clear;
   stbi__gif_lzw *p;

   lzw_cs = stbi__get8(s);
   if (lzw_cs > 12) return 
# 6329 "../../include/stb_image/stb_image.h" 3 4
                          __null
# 6329 "../../include/stb_image/stb_image.h"
                              ;
   clear = 1 << lzw_cs;
   first = 1;
   codesize = lzw_cs + 1;
   codemask = (1 << codesize) - 1;
   bits = 0;
   valid_bits = 0;
   for (init_code = 0; init_code < clear; init_code++) {
      g->codes[init_code].prefix = -1;
      g->codes[init_code].first = (stbi_uc) init_code;
      g->codes[init_code].suffix = (stbi_uc) init_code;
   }


   avail = clear+2;
   oldcode = -1;

   len = 0;
   for(;;) {
      if (valid_bits < codesize) {
         if (len == 0) {
            len = stbi__get8(s);
            if (len == 0)
               return g->out;
         }
         --len;
         bits |= (stbi__int32) stbi__get8(s) << valid_bits;
         valid_bits += 8;
      } else {
         stbi__int32 code = bits & codemask;
         bits >>= codesize;
         valid_bits -= codesize;

         if (code == clear) {
            codesize = lzw_cs + 1;
            codemask = (1 << codesize) - 1;
            avail = clear + 2;
            oldcode = -1;
            first = 0;
         } else if (code == clear + 1) {
            stbi__skip(s, len);
            while ((len = stbi__get8(s)) > 0)
               stbi__skip(s,len);
            return g->out;
         } else if (code <= avail) {
            if (first) {
               return ((unsigned char *)(size_t) (stbi__err("no clear code")?
# 6375 "../../include/stb_image/stb_image.h" 3 4
                     __null
# 6375 "../../include/stb_image/stb_image.h"
                     :
# 6375 "../../include/stb_image/stb_image.h" 3 4
                     __null
# 6375 "../../include/stb_image/stb_image.h"
                     ));
            }

            if (oldcode >= 0) {
               p = &g->codes[avail++];
               if (avail > 8192) {
                  return ((unsigned char *)(size_t) (stbi__err("too many codes")?
# 6381 "../../include/stb_image/stb_image.h" 3 4
                        __null
# 6381 "../../include/stb_image/stb_image.h"
                        :
# 6381 "../../include/stb_image/stb_image.h" 3 4
                        __null
# 6381 "../../include/stb_image/stb_image.h"
                        ));
               }

               p->prefix = (stbi__int16) oldcode;
               p->first = g->codes[oldcode].first;
               p->suffix = (code == avail) ? p->first : g->codes[code].first;
            } else if (code == avail)
               return ((unsigned char *)(size_t) (stbi__err("illegal code in raster")?
# 6388 "../../include/stb_image/stb_image.h" 3 4
                     __null
# 6388 "../../include/stb_image/stb_image.h"
                     :
# 6388 "../../include/stb_image/stb_image.h" 3 4
                     __null
# 6388 "../../include/stb_image/stb_image.h"
                     ));

            stbi__out_gif_code(g, (stbi__uint16) code);

            if ((avail & codemask) == 0 && avail <= 0x0FFF) {
               codesize++;
               codemask = (1 << codesize) - 1;
            }

            oldcode = code;
         } else {
            return ((unsigned char *)(size_t) (stbi__err("illegal code in raster")?
# 6399 "../../include/stb_image/stb_image.h" 3 4
                  __null
# 6399 "../../include/stb_image/stb_image.h"
                  :
# 6399 "../../include/stb_image/stb_image.h" 3 4
                  __null
# 6399 "../../include/stb_image/stb_image.h"
                  ));
         }
      }
   }
}



static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp, stbi_uc *two_back)
{
   int dispose;
   int first_frame;
   int pi;
   int pcount;
   (void)sizeof(req_comp);


   first_frame = 0;
   if (g->out == 0) {
      if (!stbi__gif_header(s, g, comp,0)) return 0;
      if (!stbi__mad3sizes_valid(4, g->w, g->h, 0))
         return ((unsigned char *)(size_t) (stbi__err("too large")?
# 6420 "../../include/stb_image/stb_image.h" 3 4
               __null
# 6420 "../../include/stb_image/stb_image.h"
               :
# 6420 "../../include/stb_image/stb_image.h" 3 4
               __null
# 6420 "../../include/stb_image/stb_image.h"
               ));
      pcount = g->w * g->h;
      g->out = (stbi_uc *) stbi__malloc(4 * pcount);
      g->background = (stbi_uc *) stbi__malloc(4 * pcount);
      g->history = (stbi_uc *) stbi__malloc(pcount);
      if (!g->out || !g->background || !g->history)
         return ((unsigned char *)(size_t) (stbi__err("outofmem")?
# 6426 "../../include/stb_image/stb_image.h" 3 4
               __null
# 6426 "../../include/stb_image/stb_image.h"
               :
# 6426 "../../include/stb_image/stb_image.h" 3 4
               __null
# 6426 "../../include/stb_image/stb_image.h"
               ));




      memset(g->out, 0x00, 4 * pcount);
      memset(g->background, 0x00, 4 * pcount);
      memset(g->history, 0x00, pcount);
      first_frame = 1;
   } else {

      dispose = (g->eflags & 0x1C) >> 2;
      pcount = g->w * g->h;

      if ((dispose == 3) && (two_back == 0)) {
         dispose = 2;
      }

      if (dispose == 3) {
         for (pi = 0; pi < pcount; ++pi) {
            if (g->history[pi]) {
               memcpy( &g->out[pi * 4], &two_back[pi * 4], 4 );
            }
         }
      } else if (dispose == 2) {

         for (pi = 0; pi < pcount; ++pi) {
            if (g->history[pi]) {
               memcpy( &g->out[pi * 4], &g->background[pi * 4], 4 );
            }
         }
      } else {




      }


      memcpy( g->background, g->out, 4 * g->w * g->h );
   }


   memset( g->history, 0x00, g->w * g->h );

   for (;;) {
      int tag = stbi__get8(s);
      switch (tag) {
         case 0x2C:
         {
            stbi__int32 x, y, w, h;
            stbi_uc *o;

            x = stbi__get16le(s);
            y = stbi__get16le(s);
            w = stbi__get16le(s);
            h = stbi__get16le(s);
            if (((x + w) > (g->w)) || ((y + h) > (g->h)))
               return ((unsigned char *)(size_t) (stbi__err("bad Image Descriptor")?
# 6484 "../../include/stb_image/stb_image.h" 3 4
                     __null
# 6484 "../../include/stb_image/stb_image.h"
                     :
# 6484 "../../include/stb_image/stb_image.h" 3 4
                     __null
# 6484 "../../include/stb_image/stb_image.h"
                     ));

            g->line_size = g->w * 4;
            g->start_x = x * 4;
            g->start_y = y * g->line_size;
            g->max_x = g->start_x + w * 4;
            g->max_y = g->start_y + h * g->line_size;
            g->cur_x = g->start_x;
            g->cur_y = g->start_y;





            if (w == 0)
               g->cur_y = g->max_y;

            g->lflags = stbi__get8(s);

            if (g->lflags & 0x40) {
               g->step = 8 * g->line_size;
               g->parse = 3;
            } else {
               g->step = g->line_size;
               g->parse = 0;
            }

            if (g->lflags & 0x80) {
               stbi__gif_parse_colortable(s,g->lpal, 2 << (g->lflags & 7), g->eflags & 0x01 ? g->transparent : -1);
               g->color_table = (stbi_uc *) g->lpal;
            } else if (g->flags & 0x80) {
               g->color_table = (stbi_uc *) g->pal;
            } else
               return ((unsigned char *)(size_t) (stbi__err("missing color table")?
# 6517 "../../include/stb_image/stb_image.h" 3 4
                     __null
# 6517 "../../include/stb_image/stb_image.h"
                     :
# 6517 "../../include/stb_image/stb_image.h" 3 4
                     __null
# 6517 "../../include/stb_image/stb_image.h"
                     ));

            o = stbi__process_gif_raster(s, g);
            if (!o) return 
# 6520 "../../include/stb_image/stb_image.h" 3 4
                          __null
# 6520 "../../include/stb_image/stb_image.h"
                              ;


            pcount = g->w * g->h;
            if (first_frame && (g->bgindex > 0)) {

               for (pi = 0; pi < pcount; ++pi) {
                  if (g->history[pi] == 0) {
                     g->pal[g->bgindex][3] = 255;
                     memcpy( &g->out[pi * 4], &g->pal[g->bgindex], 4 );
                  }
               }
            }

            return o;
         }

         case 0x21:
         {
            int len;
            int ext = stbi__get8(s);
            if (ext == 0xF9) {
               len = stbi__get8(s);
               if (len == 4) {
                  g->eflags = stbi__get8(s);
                  g->delay = 10 * stbi__get16le(s);


                  if (g->transparent >= 0) {
                     g->pal[g->transparent][3] = 255;
                  }
                  if (g->eflags & 0x01) {
                     g->transparent = stbi__get8(s);
                     if (g->transparent >= 0) {
                        g->pal[g->transparent][3] = 0;
                     }
                  } else {

                     stbi__skip(s, 1);
                     g->transparent = -1;
                  }
               } else {
                  stbi__skip(s, len);
                  break;
               }
            }
            while ((len = stbi__get8(s)) != 0) {
               stbi__skip(s, len);
            }
            break;
         }

         case 0x3B:
            return (stbi_uc *) s;

         default:
            return ((unsigned char *)(size_t) (stbi__err("unknown code")?
# 6576 "../../include/stb_image/stb_image.h" 3 4
                  __null
# 6576 "../../include/stb_image/stb_image.h"
                  :
# 6576 "../../include/stb_image/stb_image.h" 3 4
                  __null
# 6576 "../../include/stb_image/stb_image.h"
                  ));
      }
   }
}

static void *stbi__load_gif_main(stbi__context *s, int **delays, int *x, int *y, int *z, int *comp, int req_comp)
{
   if (stbi__gif_test(s)) {
      int layers = 0;
      stbi_uc *u = 0;
      stbi_uc *out = 0;
      stbi_uc *two_back = 0;
      stbi__gif g;
      int stride;
      memset(&g, 0, sizeof(g));
      if (delays) {
         *delays = 0;
      }

      do {
         u = stbi__gif_load_next(s, &g, comp, req_comp, two_back);
         if (u == (stbi_uc *) s) u = 0;

         if (u) {
            *x = g.w;
            *y = g.h;
            ++layers;
            stride = g.w * g.h * 4;

            if (out) {
               out = (stbi_uc*) realloc(out,layers * stride);
               if (delays) {
                  *delays = (int*) realloc(*delays,sizeof(int) * layers);
               }
            } else {
               out = (stbi_uc*)stbi__malloc( layers * stride );
               if (delays) {
                  *delays = (int*) stbi__malloc( layers * sizeof(int) );
               }
            }
            memcpy( out + ((layers - 1) * stride), u, stride );
            if (layers >= 2) {
               two_back = out - 2 * stride;
            }

            if (delays) {
               (*delays)[layers - 1U] = g.delay;
            }
         }
      } while (u != 0);


      free(g.out);
      free(g.history);
      free(g.background);


      if (req_comp && req_comp != 4)
         out = stbi__convert_format(out, 4, req_comp, layers * g.w, g.h);

      *z = layers;
      return out;
   } else {
      return ((unsigned char *)(size_t) (stbi__err("not GIF")?
# 6639 "../../include/stb_image/stb_image.h" 3 4
            __null
# 6639 "../../include/stb_image/stb_image.h"
            :
# 6639 "../../include/stb_image/stb_image.h" 3 4
            __null
# 6639 "../../include/stb_image/stb_image.h"
            ));
   }
}

static void *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)
{
   stbi_uc *u = 0;
   stbi__gif g;
   memset(&g, 0, sizeof(g));
   (void)sizeof(ri);

   u = stbi__gif_load_next(s, &g, comp, req_comp, 0);
   if (u == (stbi_uc *) s) u = 0;
   if (u) {
      *x = g.w;
      *y = g.h;



      if (req_comp && req_comp != 4)
         u = stbi__convert_format(u, 4, req_comp, g.w, g.h);
   } else if (g.out) {

      free(g.out);
   }


   free(g.history);
   free(g.background);

   return u;
}

static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp)
{
   return stbi__gif_info_raw(s,x,y,comp);
}






static int stbi__hdr_test_core(stbi__context *s, const char *signature)
{
   int i;
   for (i=0; signature[i]; ++i)
      if (stbi__get8(s) != signature[i])
          return 0;
   stbi__rewind(s);
   return 1;
}

static int stbi__hdr_test(stbi__context* s)
{
   int r = stbi__hdr_test_core(s, "#?RADIANCE\n");
   stbi__rewind(s);
   if(!r) {
       r = stbi__hdr_test_core(s, "#?RGBE\n");
       stbi__rewind(s);
   }
   return r;
}


static char *stbi__hdr_gettoken(stbi__context *z, char *buffer)
{
   int len=0;
   char c = '\0';

   c = (char) stbi__get8(z);

   while (!stbi__at_eof(z) && c != '\n') {
      buffer[len++] = c;
      if (len == 1024 -1) {

         while (!stbi__at_eof(z) && stbi__get8(z) != '\n')
            ;
         break;
      }
      c = (char) stbi__get8(z);
   }

   buffer[len] = 0;
   return buffer;
}

static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)
{
   if ( input[3] != 0 ) {
      float f1;

      f1 = (float) ldexp(1.0f, input[3] - (int)(128 + 8));
      if (req_comp <= 2)
         output[0] = (input[0] + input[1] + input[2]) * f1 / 3;
      else {
         output[0] = input[0] * f1;
         output[1] = input[1] * f1;
         output[2] = input[2] * f1;
      }
      if (req_comp == 2) output[1] = 1;
      if (req_comp == 4) output[3] = 1;
   } else {
      switch (req_comp) {
         case 4: output[3] = 1;
         case 3: output[0] = output[1] = output[2] = 0;
                 break;
         case 2: output[1] = 1;
         case 1: output[0] = 0;
                 break;
      }
   }
}

static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)
{
   char buffer[1024];
   char *token;
   int valid = 0;
   int width, height;
   stbi_uc *scanline;
   float *hdr_data;
   int len;
   unsigned char count, value;
   int i, j, k, c1,c2, z;
   const char *headerToken;
   (void)sizeof(ri);


   headerToken = stbi__hdr_gettoken(s,buffer);
   if (strcmp(headerToken, "#?RADIANCE") != 0 && strcmp(headerToken, "#?RGBE") != 0)
      return ((float *)(size_t) (stbi__err("not HDR")?
# 6770 "../../include/stb_image/stb_image.h" 3 4
            __null
# 6770 "../../include/stb_image/stb_image.h"
            :
# 6770 "../../include/stb_image/stb_image.h" 3 4
            __null
# 6770 "../../include/stb_image/stb_image.h"
            ));


   for(;;) {
      token = stbi__hdr_gettoken(s,buffer);
      if (token[0] == 0) break;
      if (strcmp(token, "FORMAT=32-bit_rle_rgbe") == 0) valid = 1;
   }

   if (!valid) return ((float *)(size_t) (stbi__err("unsupported format")?
# 6779 "../../include/stb_image/stb_image.h" 3 4
                        __null
# 6779 "../../include/stb_image/stb_image.h"
                        :
# 6779 "../../include/stb_image/stb_image.h" 3 4
                        __null
# 6779 "../../include/stb_image/stb_image.h"
                        ));



   token = stbi__hdr_gettoken(s,buffer);
   if (strncmp(token, "-Y ", 3)) return ((float *)(size_t) (stbi__err("unsupported data layout")?
# 6784 "../../include/stb_image/stb_image.h" 3 4
                                        __null
# 6784 "../../include/stb_image/stb_image.h"
                                        :
# 6784 "../../include/stb_image/stb_image.h" 3 4
                                        __null
# 6784 "../../include/stb_image/stb_image.h"
                                        ));
   token += 3;
   height = (int) strtol(token, &token, 10);
   while (*token == ' ') ++token;
   if (strncmp(token, "+X ", 3)) return ((float *)(size_t) (stbi__err("unsupported data layout")?
# 6788 "../../include/stb_image/stb_image.h" 3 4
                                        __null
# 6788 "../../include/stb_image/stb_image.h"
                                        :
# 6788 "../../include/stb_image/stb_image.h" 3 4
                                        __null
# 6788 "../../include/stb_image/stb_image.h"
                                        ));
   token += 3;
   width = (int) strtol(token, 
# 6790 "../../include/stb_image/stb_image.h" 3 4
                              __null
# 6790 "../../include/stb_image/stb_image.h"
                                  , 10);

   *x = width;
   *y = height;

   if (comp) *comp = 3;
   if (req_comp == 0) req_comp = 3;

   if (!stbi__mad4sizes_valid(width, height, req_comp, sizeof(float), 0))
      return ((float *)(size_t) (stbi__err("too large")?
# 6799 "../../include/stb_image/stb_image.h" 3 4
            __null
# 6799 "../../include/stb_image/stb_image.h"
            :
# 6799 "../../include/stb_image/stb_image.h" 3 4
            __null
# 6799 "../../include/stb_image/stb_image.h"
            ));


   hdr_data = (float *) stbi__malloc_mad4(width, height, req_comp, sizeof(float), 0);
   if (!hdr_data)
      return ((float *)(size_t) (stbi__err("outofmem")?
# 6804 "../../include/stb_image/stb_image.h" 3 4
            __null
# 6804 "../../include/stb_image/stb_image.h"
            :
# 6804 "../../include/stb_image/stb_image.h" 3 4
            __null
# 6804 "../../include/stb_image/stb_image.h"
            ));



   if ( width < 8 || width >= 32768) {

      for (j=0; j < height; ++j) {
         for (i=0; i < width; ++i) {
            stbi_uc rgbe[4];
           main_decode_loop:
            stbi__getn(s, rgbe, 4);
            stbi__hdr_convert(hdr_data + j * width * req_comp + i * req_comp, rgbe, req_comp);
         }
      }
   } else {

      scanline = 
# 6820 "../../include/stb_image/stb_image.h" 3 4
                __null
# 6820 "../../include/stb_image/stb_image.h"
                    ;

      for (j = 0; j < height; ++j) {
         c1 = stbi__get8(s);
         c2 = stbi__get8(s);
         len = stbi__get8(s);
         if (c1 != 2 || c2 != 2 || (len & 0x80)) {


            stbi_uc rgbe[4];
            rgbe[0] = (stbi_uc) c1;
            rgbe[1] = (stbi_uc) c2;
            rgbe[2] = (stbi_uc) len;
            rgbe[3] = (stbi_uc) stbi__get8(s);
            stbi__hdr_convert(hdr_data, rgbe, req_comp);
            i = 1;
            j = 0;
            free(scanline);
            goto main_decode_loop;
         }
         len <<= 8;
         len |= stbi__get8(s);
         if (len != width) { free(hdr_data); free(scanline); return ((float *)(size_t) (stbi__err("invalid decoded scanline length")?
# 6842 "../../include/stb_image/stb_image.h" 3 4
                                                                             __null
# 6842 "../../include/stb_image/stb_image.h"
                                                                             :
# 6842 "../../include/stb_image/stb_image.h" 3 4
                                                                             __null
# 6842 "../../include/stb_image/stb_image.h"
                                                                             )); }
         if (scanline == 
# 6843 "../../include/stb_image/stb_image.h" 3 4
                        __null
# 6843 "../../include/stb_image/stb_image.h"
                            ) {
            scanline = (stbi_uc *) stbi__malloc_mad2(width, 4, 0);
            if (!scanline) {
               free(hdr_data);
               return ((float *)(size_t) (stbi__err("outofmem")?
# 6847 "../../include/stb_image/stb_image.h" 3 4
                     __null
# 6847 "../../include/stb_image/stb_image.h"
                     :
# 6847 "../../include/stb_image/stb_image.h" 3 4
                     __null
# 6847 "../../include/stb_image/stb_image.h"
                     ));
            }
         }

         for (k = 0; k < 4; ++k) {
            int nleft;
            i = 0;
            while ((nleft = width - i) > 0) {
               count = stbi__get8(s);
               if (count > 128) {

                  value = stbi__get8(s);
                  count -= 128;
                  if (count > nleft) { free(hdr_data); free(scanline); return ((float *)(size_t) (stbi__err("corrupt")?
# 6860 "../../include/stb_image/stb_image.h" 3 4
                                                                                       __null
# 6860 "../../include/stb_image/stb_image.h"
                                                                                       :
# 6860 "../../include/stb_image/stb_image.h" 3 4
                                                                                       __null
# 6860 "../../include/stb_image/stb_image.h"
                                                                                       )); }
                  for (z = 0; z < count; ++z)
                     scanline[i++ * 4 + k] = value;
               } else {

                  if (count > nleft) { free(hdr_data); free(scanline); return ((float *)(size_t) (stbi__err("corrupt")?
# 6865 "../../include/stb_image/stb_image.h" 3 4
                                                                                       __null
# 6865 "../../include/stb_image/stb_image.h"
                                                                                       :
# 6865 "../../include/stb_image/stb_image.h" 3 4
                                                                                       __null
# 6865 "../../include/stb_image/stb_image.h"
                                                                                       )); }
                  for (z = 0; z < count; ++z)
                     scanline[i++ * 4 + k] = stbi__get8(s);
               }
            }
         }
         for (i=0; i < width; ++i)
            stbi__hdr_convert(hdr_data+(j*width + i)*req_comp, scanline + i*4, req_comp);
      }
      if (scanline)
         free(scanline);
   }

   return hdr_data;
}

static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp)
{
   char buffer[1024];
   char *token;
   int valid = 0;
   int dummy;

   if (!x) x = &dummy;
   if (!y) y = &dummy;
   if (!comp) comp = &dummy;

   if (stbi__hdr_test(s) == 0) {
       stbi__rewind( s );
       return 0;
   }

   for(;;) {
      token = stbi__hdr_gettoken(s,buffer);
      if (token[0] == 0) break;
      if (strcmp(token, "FORMAT=32-bit_rle_rgbe") == 0) valid = 1;
   }

   if (!valid) {
       stbi__rewind( s );
       return 0;
   }
   token = stbi__hdr_gettoken(s,buffer);
   if (strncmp(token, "-Y ", 3)) {
       stbi__rewind( s );
       return 0;
   }
   token += 3;
   *y = (int) strtol(token, &token, 10);
   while (*token == ' ') ++token;
   if (strncmp(token, "+X ", 3)) {
       stbi__rewind( s );
       return 0;
   }
   token += 3;
   *x = (int) strtol(token, 
# 6920 "../../include/stb_image/stb_image.h" 3 4
                           __null
# 6920 "../../include/stb_image/stb_image.h"
                               , 10);
   *comp = 3;
   return 1;
}



static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp)
{
   void *p;
   stbi__bmp_data info;

   info.all_a = 255;
   p = stbi__bmp_parse_header(s, &info);
   stbi__rewind( s );
   if (p == 
# 6935 "../../include/stb_image/stb_image.h" 3 4
           __null
# 6935 "../../include/stb_image/stb_image.h"
               )
      return 0;
   if (x) *x = s->img_x;
   if (y) *y = s->img_y;
   if (comp) *comp = info.ma ? 4 : 3;
   return 1;
}



static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp)
{
   int channelCount, dummy, depth;
   if (!x) x = &dummy;
   if (!y) y = &dummy;
   if (!comp) comp = &dummy;
   if (stbi__get32be(s) != 0x38425053) {
       stbi__rewind( s );
       return 0;
   }
   if (stbi__get16be(s) != 1) {
       stbi__rewind( s );
       return 0;
   }
   stbi__skip(s, 6);
   channelCount = stbi__get16be(s);
   if (channelCount < 0 || channelCount > 16) {
       stbi__rewind( s );
       return 0;
   }
   *y = stbi__get32be(s);
   *x = stbi__get32be(s);
   depth = stbi__get16be(s);
   if (depth != 8 && depth != 16) {
       stbi__rewind( s );
       return 0;
   }
   if (stbi__get16be(s) != 3) {
       stbi__rewind( s );
       return 0;
   }
   *comp = 4;
   return 1;
}

static int stbi__psd_is16(stbi__context *s)
{
   int channelCount, depth;
   if (stbi__get32be(s) != 0x38425053) {
       stbi__rewind( s );
       return 0;
   }
   if (stbi__get16be(s) != 1) {
       stbi__rewind( s );
       return 0;
   }
   stbi__skip(s, 6);
   channelCount = stbi__get16be(s);
   if (channelCount < 0 || channelCount > 16) {
       stbi__rewind( s );
       return 0;
   }
   (void) stbi__get32be(s);
   (void) stbi__get32be(s);
   depth = stbi__get16be(s);
   if (depth != 16) {
       stbi__rewind( s );
       return 0;
   }
   return 1;
}



static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp)
{
   int act_comp=0,num_packets=0,chained,dummy;
   stbi__pic_packet packets[10];

   if (!x) x = &dummy;
   if (!y) y = &dummy;
   if (!comp) comp = &dummy;

   if (!stbi__pic_is4(s,"\x53\x80\xF6\x34")) {
      stbi__rewind(s);
      return 0;
   }

   stbi__skip(s, 88);

   *x = stbi__get16be(s);
   *y = stbi__get16be(s);
   if (stbi__at_eof(s)) {
      stbi__rewind( s);
      return 0;
   }
   if ( (*x) != 0 && (1 << 28) / (*x) < (*y)) {
      stbi__rewind( s );
      return 0;
   }

   stbi__skip(s, 8);

   do {
      stbi__pic_packet *packet;

      if (num_packets==sizeof(packets)/sizeof(packets[0]))
         return 0;

      packet = &packets[num_packets++];
      chained = stbi__get8(s);
      packet->size = stbi__get8(s);
      packet->type = stbi__get8(s);
      packet->channel = stbi__get8(s);
      act_comp |= packet->channel;

      if (stbi__at_eof(s)) {
          stbi__rewind( s );
          return 0;
      }
      if (packet->size != 8) {
          stbi__rewind( s );
          return 0;
      }
   } while (chained);

   *comp = (act_comp & 0x10 ? 4 : 3);

   return 1;
}
# 7081 "../../include/stb_image/stb_image.h"
static int stbi__pnm_test(stbi__context *s)
{
   char p, t;
   p = (char) stbi__get8(s);
   t = (char) stbi__get8(s);
   if (p != 'P' || (t != '5' && t != '6')) {
       stbi__rewind( s );
       return 0;
   }
   return 1;
}

static void *stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)
{
   stbi_uc *out;
   (void)sizeof(ri);

   if (!stbi__pnm_info(s, (int *)&s->img_x, (int *)&s->img_y, (int *)&s->img_n))
      return 0;

   *x = s->img_x;
   *y = s->img_y;
   if (comp) *comp = s->img_n;

   if (!stbi__mad3sizes_valid(s->img_n, s->img_x, s->img_y, 0))
      return ((unsigned char *)(size_t) (stbi__err("too large")?
# 7106 "../../include/stb_image/stb_image.h" 3 4
            __null
# 7106 "../../include/stb_image/stb_image.h"
            :
# 7106 "../../include/stb_image/stb_image.h" 3 4
            __null
# 7106 "../../include/stb_image/stb_image.h"
            ));

   out = (stbi_uc *) stbi__malloc_mad3(s->img_n, s->img_x, s->img_y, 0);
   if (!out) return ((unsigned char *)(size_t) (stbi__err("outofmem")?
# 7109 "../../include/stb_image/stb_image.h" 3 4
                   __null
# 7109 "../../include/stb_image/stb_image.h"
                   :
# 7109 "../../include/stb_image/stb_image.h" 3 4
                   __null
# 7109 "../../include/stb_image/stb_image.h"
                   ));
   stbi__getn(s, out, s->img_n * s->img_x * s->img_y);

   if (req_comp && req_comp != s->img_n) {
      out = stbi__convert_format(out, s->img_n, req_comp, s->img_x, s->img_y);
      if (out == 
# 7114 "../../include/stb_image/stb_image.h" 3 4
                __null
# 7114 "../../include/stb_image/stb_image.h"
                    ) return out;
   }
   return out;
}

static int stbi__pnm_isspace(char c)
{
   return c == ' ' || c == '\t' || c == '\n' || c == '\v' || c == '\f' || c == '\r';
}

static void stbi__pnm_skip_whitespace(stbi__context *s, char *c)
{
   for (;;) {
      while (!stbi__at_eof(s) && stbi__pnm_isspace(*c))
         *c = (char) stbi__get8(s);

      if (stbi__at_eof(s) || *c != '#')
         break;

      while (!stbi__at_eof(s) && *c != '\n' && *c != '\r' )
         *c = (char) stbi__get8(s);
   }
}

static int stbi__pnm_isdigit(char c)
{
   return c >= '0' && c <= '9';
}

static int stbi__pnm_getinteger(stbi__context *s, char *c)
{
   int value = 0;

   while (!stbi__at_eof(s) && stbi__pnm_isdigit(*c)) {
      value = value*10 + (*c - '0');
      *c = (char) stbi__get8(s);
   }

   return value;
}

static int stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp)
{
   int maxv, dummy;
   char c, p, t;

   if (!x) x = &dummy;
   if (!y) y = &dummy;
   if (!comp) comp = &dummy;

   stbi__rewind(s);


   p = (char) stbi__get8(s);
   t = (char) stbi__get8(s);
   if (p != 'P' || (t != '5' && t != '6')) {
       stbi__rewind(s);
       return 0;
   }

   *comp = (t == '6') ? 3 : 1;

   c = (char) stbi__get8(s);
   stbi__pnm_skip_whitespace(s, &c);

   *x = stbi__pnm_getinteger(s, &c);
   stbi__pnm_skip_whitespace(s, &c);

   *y = stbi__pnm_getinteger(s, &c);
   stbi__pnm_skip_whitespace(s, &c);

   maxv = stbi__pnm_getinteger(s, &c);

   if (maxv > 255)
      return stbi__err("max value > 255");
   else
      return 1;
}


static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp)
{

   if (stbi__jpeg_info(s, x, y, comp)) return 1;



   if (stbi__png_info(s, x, y, comp)) return 1;



   if (stbi__gif_info(s, x, y, comp)) return 1;



   if (stbi__bmp_info(s, x, y, comp)) return 1;



   if (stbi__psd_info(s, x, y, comp)) return 1;



   if (stbi__pic_info(s, x, y, comp)) return 1;



   if (stbi__pnm_info(s, x, y, comp)) return 1;



   if (stbi__hdr_info(s, x, y, comp)) return 1;




   if (stbi__tga_info(s, x, y, comp))
       return 1;

   return stbi__err("unknown image type");
}

static int stbi__is_16_main(stbi__context *s)
{

   if (stbi__png_is16(s)) return 1;



   if (stbi__psd_is16(s)) return 1;


   return 0;
}


extern int stbi_info(char const *filename, int *x, int *y, int *comp)
{
    FILE *f = stbi__fopen(filename, "rb");
    int result;
    if (!f) return stbi__err("can't fopen");
    result = stbi_info_from_file(f, x, y, comp);
    fclose(f);
    return result;
}

extern int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)
{
   int r;
   stbi__context s;
   long pos = ftell(f);
   stbi__start_file(&s, f);
   r = stbi__info_main(&s,x,y,comp);
   fseek(f,pos,
# 7267 "../../include/stb_image/stb_image.h" 3
              0
# 7267 "../../include/stb_image/stb_image.h"
                      );
   return r;
}

extern int stbi_is_16_bit(char const *filename)
{
    FILE *f = stbi__fopen(filename, "rb");
    int result;
    if (!f) return stbi__err("can't fopen");
    result = stbi_is_16_bit_from_file(f);
    fclose(f);
    return result;
}

extern int stbi_is_16_bit_from_file(FILE *f)
{
   int r;
   stbi__context s;
   long pos = ftell(f);
   stbi__start_file(&s, f);
   r = stbi__is_16_main(&s);
   fseek(f,pos,
# 7288 "../../include/stb_image/stb_image.h" 3
              0
# 7288 "../../include/stb_image/stb_image.h"
                      );
   return r;
}


extern int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)
{
   stbi__context s;
   stbi__start_mem(&s,buffer,len);
   return stbi__info_main(&s,x,y,comp);
}

extern int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)
{
   stbi__context s;
   stbi__start_callbacks(&s, (stbi_io_callbacks *) c, user);
   return stbi__info_main(&s,x,y,comp);
}

extern int stbi_is_16_bit_from_memory(stbi_uc const *buffer, int len)
{
   stbi__context s;
   stbi__start_mem(&s,buffer,len);
   return stbi__is_16_main(&s);
}

extern int stbi_is_16_bit_from_callbacks(stbi_io_callbacks const *c, void *user)
{
   stbi__context s;
   stbi__start_callbacks(&s, (stbi_io_callbacks *) c, user);
   return stbi__is_16_main(&s);
}
# 16 "main.cpp" 2


void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void processInput(GLFWwindow *window);
void mouse_callback(GLFWwindow* window, double xpos, double ypos);
void scroll_callback(GLFWwindow* window, double xoffset, double yoffset);


unsigned int SCR_WIDTH;
unsigned int SCR_HEIGHT;


Camera camera(glm::vec3(0.0f, 0.0f, 4.0f));


float lastX, lastY;
bool firstMouse = true;


float deltaTime = 0.0f;
float lastFrame = 0.0f;

float vertices[] = {
    -0.55f, 0.95f, 0.0f,
    -0.55f, 0.55f, 0.0f,
    -0.95f, 0.55f, 0.0f,
    -0.95f, 0.95f, 0.0f
};
unsigned int indices[] = {
    0, 1, 3,
    1, 2, 3
};

float thirdTriangle[] = {
    0.6f, 0.6f, 0.0f,
    0.9f, 0.6f, 0.0f,
    0.75f, 0.9f, 0.0f
};

float fourthTriangle[] = {

    -0.9f, 0.2f, 0.0f, 1.0f, 0.0f, 0.0f,
    -0.6f, 0.9f, 0.0f, 0.0f, 1.0f, 0.0f,
    -0.3f, 0.2f, 0.0f, 0.0f, 0.0f, 1.0f
};

float rect[] = {

     0.5f, 0.1f, 0.0f, 1.0f, 0.0f, 0.0f, 1.0f, 1.0f,
     0.5f, -0.9f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f,
    -0.5f, -0.9f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f, 0.0f,
    -0.5f, 0.1f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f
};

float cube[] = {
    -0.5f, -0.5f, -0.5f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f,
     0.5f, -0.5f, -0.5f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f,
     0.5f, 0.5f, -0.5f, 0.0f, 0.0f, 1.0f, 1.0f, 1.0f,
     0.5f, 0.5f, -0.5f, 1.0f, 1.0f, 0.0f, 1.0f, 1.0f,
    -0.5f, 0.5f, -0.5f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f,
    -0.5f, -0.5f, -0.5f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f,

    -0.5f, -0.5f, 0.5f, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f,
     0.5f, -0.5f, 0.5f, 0.0f, 1.0f, 0.0f, 1.0f, 0.0f,
     0.5f, 0.5f, 0.5f, 0.0f, 0.0f, 1.0f, 1.0f, 1.0f,
     0.5f, 0.5f, 0.5f, 1.0f, 1.0f, 0.0f, 1.0f, 1.0f,
    -0.5f, 0.5f, 0.5f, 0.0f, 1.0f, 1.0f, 0.0f, 1.0f,
    -0.5f, -0.5f, 0.5f, 1.0f, 0.0f, 1.0f, 0.0f, 0.0f,

    -0.5f, 0.5f, 0.5f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f,
    -0.5f, 0.5f, -0.5f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f,
    -0.5f, -0.5f, -0.5f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f,
    -0.5f, -0.5f, -0.5f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
    -0.5f, -0.5f, 0.5f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f,
    -0.5f, 0.5f, 0.5f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f,

     0.5f, 0.5f, 0.5f, 1.0f, 0.0f, 0.0f, 1.0f, 0.0f,
     0.5f, 0.5f, -0.5f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f,
     0.5f, -0.5f, -0.5f, 0.0f, 0.0f, 1.0f, 0.0f, 1.0f,
     0.5f, -0.5f, -0.5f, 1.0f, 1.0f, 0.0f, 0.0f, 1.0f,
     0.5f, -0.5f, 0.5f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f,
     0.5f, 0.5f, 0.5f, 1.0f, 0.0f, 1.0f, 1.0f, 0.0f,

    -0.5f, -0.5f, -0.5f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f,
     0.5f, -0.5f, -0.5f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f,
     0.5f, -0.5f, 0.5f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f,
     0.5f, -0.5f, 0.5f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f,
    -0.5f, -0.5f, 0.5f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f,
    -0.5f, -0.5f, -0.5f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f,

    -0.5f, 0.5f, -0.5f, 1.0f, 0.0f, 0.0f, 0.0f, 1.0f,
     0.5f, 0.5f, -0.5f, 0.0f, 1.0f, 0.0f, 1.0f, 1.0f,
     0.5f, 0.5f, 0.5f, 0.0f, 0.0f, 1.0f, 1.0f, 0.0f,
     0.5f, 0.5f, 0.5f, 1.0f, 1.0f, 0.0f, 1.0f, 0.0f,
    -0.5f, 0.5f, 0.5f, 0.0f, 1.0f, 1.0f, 0.0f, 0.0f,
    -0.5f, 0.5f, -0.5f, 1.0f, 0.0f, 1.0f, 0.0f, 1.0f
};

glm::vec3 cubePositions[] = {
  glm::vec3( 0.0f, -0.5f, 0.0f),
  glm::vec3( 2.0f, 5.0f, -15.0f),
  glm::vec3(-1.5f, -2.2f, -2.5f),
  glm::vec3(-3.8f, -2.0f, -12.3f),
  glm::vec3( 2.4f, -0.4f, -3.5f),
  glm::vec3(-1.7f, 3.0f, -7.5f),
  glm::vec3( 1.3f, -2.0f, -2.5f),
  glm::vec3( 1.5f, 2.0f, -2.5f),
  glm::vec3( 1.5f, 0.2f, -1.5f),
  glm::vec3(-1.3f, 1.0f, -1.5f)
};

unsigned int containerTex;
unsigned int faceTex;

unsigned int VBOs[5];

unsigned int VAOs[5];

unsigned int EBOs[2];

unsigned int vertexShader;
unsigned int vertexShaderMixed;

unsigned int fragmentShaderOrange;
unsigned int fragmentShaderYellow;
unsigned int fragmentShaderMixed;

unsigned int shaderProgramOrange;
unsigned int shaderProgramYellow;
unsigned int shaderProgramMixed;

bool wireframe;
int cooldown;

const char *vertexShaderSource = "#version 330 core\n"
"layout (location = 0) in vec3 aPos; // the position variable has attribute position 0\n"
"out vec4 vertexColor; // specify a color output to the fragment shader\n"
"void main()\n"
"{\n"
    "gl_Position = vec4(aPos, 1.0); // see how we directly give a vec3 to vec4's constructor\n"
    "vertexColor = vec4(0.5, 0.0, 0.0, 1.0); // set the output variable to a dark-red color\n"
"}\n\0";

const char *vertexShaderSourceMixed = "#version 330 core\n"
"layout (location = 0) in vec3 aPos;\n"
"layout (location = 1) in vec3 aColor;\n"
"out vec3 ourColor;\n"
"void main()\n"
"{\n"
"   gl_Position = vec4(aPos, 1.0);\n"
"   ourColor = aColor;\n"
"}\0";

const char *fragmentShaderSource = "#version 330 core\n"
"out vec4 FragColor;\n"
"uniform vec4 ourColor; // we set this variable in the OpenGL code.\n"
"void main()\n"
"{\n"
    "FragColor = ourColor;\n"
"}\n\0";

const char *fragmentShaderSourceMixed = "#version 330 core\n"
"out vec4 FragColor;\n"
"in vec3 ourColor;\n"
"void main()\n"
"{\n"
"   FragColor = vec4(ourColor, 1.0f);\n"
"}\n\0";

int main()
{
    wireframe = false;
    cooldown = 0;


    glfwInit();
    glfwWindowHint(0x00022002, 3);
    glfwWindowHint(0x00022003, 3);
    glfwWindowHint(0x00022008, 0x00032001);
# 206 "main.cpp"
    GLFWmonitor* monitor = glfwGetPrimaryMonitor();
    const GLFWvidmode* mode = glfwGetVideoMode(monitor);

    SCR_WIDTH = mode->width;
    SCR_HEIGHT = mode->height;

    glfwWindowHint(0x00021001, mode->redBits);
    glfwWindowHint(0x00021002, mode->greenBits);
    glfwWindowHint(0x00021003, mode->blueBits);
    glfwWindowHint(0x0002100F, mode->refreshRate);

    GLFWwindow* window = glfwCreateWindow(mode->width, mode->height, "LearnOpenGL", monitor, 
# 217 "main.cpp" 3 4
                                                                                            __null
# 217 "main.cpp"
                                                                                                );

    lastX = mode->width/2;
    lastY = mode->height/2;

    if (window == 
# 222 "main.cpp" 3 4
                 __null
# 222 "main.cpp"
                     )
    {
        std::cout << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);


    glfwSetInputMode(window, 0x00033001, 0x00034003);


    glfwSetCursorPosCallback(window, mouse_callback);


    glfwSetScrollCallback(window, scroll_callback);



    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
    {
        std::cout << "Failed to initialize GLAD" << std::endl;
        return -1;
    }



    glad_glGenVertexArrays(5, VAOs);


    glad_glGenBuffers(5, VBOs);


    glad_glGenBuffers(2, EBOs);



    glad_glBindVertexArray(VAOs[0]);


    glad_glBindBuffer(0x8892, VBOs[0]);


    glad_glBufferData(0x8892, sizeof(vertices), vertices, 0x88E4);


    glad_glBindBuffer(0x8893, EBOs[0]);


    glad_glBufferData(0x8893, sizeof(indices), indices, 0x88E4);
# 281 "main.cpp"
    glad_glVertexAttribPointer(0, 3, 0x1406, 0, 3 * sizeof(float), (void*)0);


    glad_glEnableVertexAttribArray(0);



    glad_glBindVertexArray(VAOs[1]);
    glad_glBindBuffer(0x8892, VBOs[1]);
    glad_glBufferData(0x8892, sizeof(thirdTriangle), thirdTriangle, 0x88E4);
    glad_glVertexAttribPointer(0, 3, 0x1406, 0, 3 * sizeof(float), (void*)0);
    glad_glEnableVertexAttribArray(0);



    glad_glBindVertexArray(VAOs[2]);
    glad_glBindBuffer(0x8892, VBOs[2]);
    glad_glBufferData(0x8892, sizeof(fourthTriangle), fourthTriangle, 0x88E4);

    glad_glVertexAttribPointer(0, 3, 0x1406, 0, 6 * sizeof(float), (void*)0);
    glad_glEnableVertexAttribArray(0);

    glad_glVertexAttribPointer(1, 3, 0x1406, 0, 6 * sizeof(float), (void*)(3* sizeof(float)));
    glad_glEnableVertexAttribArray(1);


    glad_glBindVertexArray(VAOs[3]);
    glad_glBindBuffer(0x8892, VBOs[3]);
    glad_glBufferData(0x8892, sizeof(rect), rect, 0x88E4);


    glad_glBindBuffer(0x8893, EBOs[1]);


    glad_glBufferData(0x8893, sizeof(indices), indices, 0x88E4);


    glad_glVertexAttribPointer(0, 3, 0x1406, 0, 8 * sizeof(float), (void*)0);
    glad_glEnableVertexAttribArray(0);

    glad_glVertexAttribPointer(1, 3, 0x1406, 0, 8 * sizeof(float), (void*)(3 * sizeof(float)));
    glad_glEnableVertexAttribArray(1);

    glad_glVertexAttribPointer(2, 2, 0x1406, 0, 8 * sizeof(float), (void*)(6 * sizeof(float)));
    glad_glEnableVertexAttribArray(2);



    glad_glBindVertexArray(VAOs[4]);
    glad_glBindBuffer(0x8892, VBOs[4]);
    glad_glBufferData(0x8892, sizeof(cube), cube, 0x88E4);


    glad_glVertexAttribPointer(0, 3, 0x1406, 0, 8 * sizeof(float), (void*)0);
    glad_glEnableVertexAttribArray(0);

    glad_glVertexAttribPointer(1, 3, 0x1406, 0, 8 * sizeof(float), (void*)(3 * sizeof(float)));
    glad_glEnableVertexAttribArray(1);

    glad_glVertexAttribPointer(2, 2, 0x1406, 0, 8 * sizeof(float), (void*)(6 * sizeof(float)));
    glad_glEnableVertexAttribArray(2);




    glad_glBindBuffer(0x8892, 0);



    glad_glBindVertexArray(0);






    Shader firstShader("vertShaderSrc.VERT", "fragShaderSrc.FRAG");
    Shader mixedShader("vertShaderSrcMixed.VERT", "fragShaderSrcMixed.FRAG");
    Shader texShader("vertShaderSrcTex.VERT", "fragShaderSrcTex.FRAG");


    glad_glGenTextures(1, &containerTex);


    glad_glBindTexture(0x0DE1, containerTex);


    glad_glTexParameteri(0x0DE1, 0x2802, 0x2901);
    glad_glTexParameteri(0x0DE1, 0x2803, 0x2901);
    glad_glTexParameteri(0x0DE1, 0x2801, 0x2601);
    glad_glTexParameteri(0x0DE1, 0x2800, 0x2601);


    int width, height, nrChannels;
    unsigned char *data = stbi_load("C:\\Users\\Alessio\\Documents\\GitHub\\Progetto_RTGP\\work\\test\\resources\\textures\\container.jpg",
                                        &width, &height, &nrChannels, 0);

    if (data)
    {
# 390 "main.cpp"
        glad_glTexImage2D(0x0DE1, 0, 0x1907, width, height, 0, 0x1907, 0x1401, data);
        glad_glGenerateMipmap(0x0DE1);
    }
    else
    {
        std::cout << "Failed to load texture" << std::endl;
    }


    stbi_image_free(data);


    glad_glGenTextures(1, &faceTex);


    glad_glBindTexture(0x0DE1, faceTex);


    glad_glTexParameteri(0x0DE1, 0x2802, 0x2901);
    glad_glTexParameteri(0x0DE1, 0x2803, 0x2901);
    glad_glTexParameteri(0x0DE1, 0x2801, 0x2601);
    glad_glTexParameteri(0x0DE1, 0x2800, 0x2601);

    stbi_set_flip_vertically_on_load(true);
    data = stbi_load("C:\\Users\\Alessio\\Documents\\GitHub\\Progetto_RTGP\\work\\test\\resources\\textures\\awesomeface.png",
                        &width, &height, &nrChannels, 0);
    if (data)
    {
        glad_glTexImage2D(0x0DE1, 0, 0x1907, width, height, 0, 0x1908, 0x1401, data);
        glad_glGenerateMipmap(0x0DE1);
    }
# 429 "main.cpp"
    glm::mat4 model = glm::mat4(1.0f);
    model = glm::rotate(model, glm::radians(-55.0f), glm::vec3(1.0f, 0.0f, 0.0f));


    glm::mat4 view = glm::mat4(1.0f);

    view = glm::translate(view, glm::vec3(0.0f, 0.0f, -5.0f));


    glm::mat4 projection;

    float ratio = mode->width / mode->height;
    projection = glm::perspective(glm::radians(45.0f), ratio, 0.1f, 100.0f);

    glad_glEnable(0x0B71);

    float variableScaleCube = 0.8;
    bool variableScaleIncreasing = false;



    while (!glfwWindowShouldClose(window))
    {
        float currentFrame = glfwGetTime();
        deltaTime = currentFrame - lastFrame;
        lastFrame = currentFrame;


        view = glm::lookAt(camera.Position, camera.Position + camera.Front, camera.Up);

        ratio = mode->width / mode->height;


        projection = glm::perspective(glm::radians(camera.Zoom), ratio, 0.1f, 100.0f);

        if (cooldown > 0)
            cooldown--;


        processInput(window);

        float timeValue = glfwGetTime();



        glad_glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
        glad_glClear(0x00004000 | 0x00000100);

        float variableOffset = tan(timeValue)/2 + 0.5f;




        firstShader.use();
        firstShader.setFloat("yOffset", variableOffset);
        int modelLoc = glad_glGetUniformLocation(firstShader.ID, "model");
        glad_glUniformMatrix4fv(modelLoc, 1, 0, glm::value_ptr(model));
        int viewLoc = glad_glGetUniformLocation(firstShader.ID, "view");
        glad_glUniformMatrix4fv(viewLoc, 1, 0, glm::value_ptr(view));
        int projectionLoc = glad_glGetUniformLocation(firstShader.ID, "projection");
        glad_glUniformMatrix4fv(projectionLoc, 1, 0, glm::value_ptr(projection));


        float variableColor = (sin(timeValue) * 2) + 0.5f;

        firstShader.setUniform4f("ourColor", variableColor, 0.0f, 0.0f, 1.0f);

        glad_glBindVertexArray(VAOs[0]);

        glad_glDrawElements(0x0004, 6, 0x1405, 0);



        firstShader.setUniform4f("ourColor", variableColor, variableColor, 0.0f, 1.0f);
        glad_glBindVertexArray(VAOs[1]);
        glad_glDrawArrays(0x0004, 0, 3);


        rect[3] = variableColor;
        rect[13] = variableColor;
        rect[21] = variableColor;
        rect[27] = variableColor;
        rect[28] = variableColor;
        glad_glBindVertexArray(VAOs[3]);
        glad_glBindBuffer(0x8892, VBOs[3]);
        glad_glBufferData(0x8892, sizeof(rect), rect, 0x88E4);


        glad_glBindBuffer(0x8893, EBOs[1]);


        glad_glBufferData(0x8893, sizeof(indices), indices, 0x88E4);


        glad_glVertexAttribPointer(0, 3, 0x1406, 0, 8 * sizeof(float), (void*)0);
        glad_glEnableVertexAttribArray(0);

        glad_glVertexAttribPointer(1, 3, 0x1406, 0, 8 * sizeof(float), (void*)(3 * sizeof(float)));
        glad_glEnableVertexAttribArray(1);

        glad_glVertexAttribPointer(2, 2, 0x1406, 0, 8 * sizeof(float), (void*)(6 * sizeof(float)));
        glad_glEnableVertexAttribArray(2);


        texShader.use();
        texShader.setMat4("model", model);
        texShader.setMat4("view", view);
        texShader.setMat4("projection", projection);

        glad_glActiveTexture(0x84C0);
        glad_glBindTexture(0x0DE1, containerTex);
        glad_glActiveTexture(0x84C1);
        glad_glBindTexture(0x0DE1, faceTex);
        glad_glUniform1i(glad_glGetUniformLocation(texShader.ID, "texture1"), 0);
        texShader.setInt("texture2", 1);

        float variableScale = (sin(timeValue) / 2) + 0.5f;

        glm::mat4 trans = glm::mat4(1.0f);
        trans = glm::translate(trans, glm::vec3(0.0f, 2.0f, 0.0f));
        trans = glm::rotate(trans, (float)glfwGetTime(), glm::vec3(0.0f, 0.0f, 1.0f));
        trans = glm::scale(trans, glm::vec3(variableScale, variableScale, variableScale));

        texShader.setMat4("transform", trans);

        glad_glBindVertexArray(VAOs[3]);
        glad_glDrawElements(0x0004, 6, 0x1405, 0);


        fourthTriangle[4] = variableColor;
        fourthTriangle[11] = variableColor;
        fourthTriangle[18] = variableColor;


        glad_glBindVertexArray(VAOs[2]);
        glad_glBindBuffer(0x8892, VBOs[2]);
        glad_glBufferData(0x8892, sizeof(fourthTriangle), fourthTriangle, 0x88E4);

        glad_glVertexAttribPointer(0, 3, 0x1406, 0, 6 * sizeof(float), (void*)0);
        glad_glEnableVertexAttribArray(0);

        glad_glVertexAttribPointer(1, 3, 0x1406, 0, 6 * sizeof(float), (void*)(3* sizeof(float)));
        glad_glEnableVertexAttribArray(1);

        variableOffset = tan(timeValue)/5 + 0.5f;


        mixedShader.use();
        mixedShader.setFloat("xOffset", variableOffset);
        mixedShader.setMat4("model", model);
        mixedShader.setMat4("view", view);
        mixedShader.setMat4("projection", projection);
        glad_glBindVertexArray(VAOs[2]);
        glad_glDrawArrays(0x0004, 0, 3);


        texShader.use();
# 602 "main.cpp"
        cube[3] = variableColor;
        cube[13] = variableColor;
        cube[21] = variableColor;
        cube[27] = variableColor;
        cube[28] = variableColor;
        cube[36] = variableColor;
        cube[37] = variableColor;
        cube[43] = variableColor;
        cube[45] = variableColor;

        glad_glBindVertexArray(VAOs[4]);
        glad_glBindBuffer(0x8892, VBOs[4]);
        glad_glBufferData(0x8892, sizeof(cube), cube, 0x88E4);

        if (variableScaleCube >= 0.8)
            variableScaleIncreasing = false;
        if (variableScaleCube <= 0.2)
            variableScaleIncreasing = true;

        if (variableScaleIncreasing)
            variableScaleCube+=0.001;
        else
            variableScaleCube-=0.001;

        trans = glm::mat4(1.0f);
        trans = glm::translate(trans, glm::vec3(0.0f, 0.0f, 0.0f));
        trans = glm::rotate(trans, (float)glfwGetTime(), glm::vec3(0.0f, 0.0f, 1.0f));
        trans = glm::scale(trans, glm::vec3(variableScaleCube, variableScaleCube, variableScaleCube));

        texShader.setMat4("transform", trans);

        glad_glBindVertexArray(VAOs[4]);

        for(unsigned int i = 0; i < 10; i++)
        {
          glm::mat4 model1 = glm::mat4(1.0f);
          model1 = glm::translate(model1, cubePositions[i]);
          float angle = 20.0f * i;
          if (angle == 0) angle = 90.0f;
          model1 = glm::rotate(model1, glm::radians(angle), glm::vec3(1.0f, 0.3f, 0.5f));
          texShader.setMat4("model", model1);

          glad_glDrawArrays(0x0004, 0, 36);
        }



        glfwSwapBuffers(window);
        glfwPollEvents();
    }



    glfwTerminate();
    return 0;
}



void processInput(GLFWwindow *window)
{

    if(glfwGetKey(window, 256) == 1)
        glfwSetWindowShouldClose(window, true);


    if(glfwGetKey(window, 88) == 1 && cooldown == 0)
    {
        if (wireframe)
        {
            wireframe = false;
            glad_glPolygonMode(0x0408, 0x1B02);
            cooldown = 400;
        }
        else
        {
            wireframe = true;
            glad_glPolygonMode(0x0408, 0x1B01);
            cooldown = 400;
        }
    }


    if (glfwGetKey(window, 87) == 1)
        camera.ProcessKeyboard(FORWARD, deltaTime);


    if (glfwGetKey(window, 83) == 1)
        camera.ProcessKeyboard(BACKWARD, deltaTime);


    if (glfwGetKey(window, 65) == 1)
        camera.ProcessKeyboard(LEFT, deltaTime);


    if (glfwGetKey(window, 68) == 1)
        camera.ProcessKeyboard(RIGHT, deltaTime);
}



void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{


    glad_glViewport(0, 0, width, height);
}



void mouse_callback(GLFWwindow* window, double xpos, double ypos)
{
    if (firstMouse)
    {
        lastX = xpos;
        lastY = ypos;
        firstMouse = false;
    }

    float xoffset = xpos - lastX;
    float yoffset = lastY - ypos;

    lastX = xpos;
    lastY = ypos;

    camera.ProcessMouseMovement(xoffset, yoffset);
}



void scroll_callback(GLFWwindow* window, double xoffset, double yoffset)
{
    camera.ProcessMouseScroll(yoffset);
}
